// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5469830797608863844L;
    public static volatile int iFld=12;
    public static float fFld=-105.496F;
    public static byte byFld=88;
    public short sFld=12206;
    public volatile boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d2, int i6, double d3) {


        Test.iFld = -20317;
        long meth_res = Double.doubleToLongBits(d2) + i6 + Double.doubleToLongBits(d3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i2, int i3, float f1) {

        int i4=7, i5=8, i7=-37646, i8=-85, i9=48289, i10=64491, i11=-13;
        double d4=-60.57394;
        boolean b=true;
        short s=-14672;

        for (i4 = 5; i4 < 185; i4 += 3) {
            i3 -= (((--Test.iArrFld[i4 + 1][i4 + 1]) * iMeth1(d4, i3, -73.27140)) << i2);
            if (Test.iFld != 0) {
            }
        }
        i7 = 1;
        do {
            for (i8 = i7; i8 < 5; ++i8) {
                for (i10 = 1; i10 < 1; i10++) {
                    switch (((i10 % 5) * 5) + 88) {
                    case 107:
                        i3 = (int)d4;
                        f1 += (50L + (i10 * i10));
                        break;
                    case 110:
                        Test.iFld = (int)Test.instanceCount;
                        i3 += (-6 + (i10 * i10));
                        if (b) break;
                        break;
                    case 89:
                        i5 -= i9;
                        f1 *= Test.instanceCount;
                        i5 = i2;
                    case 106:
                        i5 *= (int)Test.instanceCount;
                        break;
                    case 97:
                        i3 -= s;
                        break;
                    }
                }
            }
        } while (++i7 < 328);
        long meth_res = i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + Double.doubleToLongBits(d4) + i7 + i8 + i9 + i10
            + i11 + (b ? 1 : 0) + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, int i1) {

        double d1=0.34947;
        int i12=-200, i13=14, i14=6, i15=232, i16=61838, i17=-12;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(sArr, (short)11683);

        switch ((((((int)(d1 - Test.iFld)) >>> 1) % 9) * 5) + 11) {
        case 27:
            i = 3073;
            d1 = lArr[(i >>> 1) % N];
            Test.instanceCount >>>= iMeth(i1, Test.iFld, Test.fFld);
            break;
        case 49:
            i1 = (int)l;
            for (i12 = 7; i12 < 316; i12++) {
                i1 -= i;
            }
            i1 *= i;
            break;
        case 56:
            for (i14 = 7; i14 < 138; ++i14) {
                Test.iArrFld[i14] = Test.iArrFld[i14];
                for (i16 = i14; i16 < 12; ++i16) {
                    Test.iArrFld[i16][i14] = Test.byFld;
                    lArr[i16] += i14;
                }
                Test.fFld += (((i14 * Test.instanceCount) + i16) - Test.byFld);
                d1 -= -13;
            }
            break;
        case 35:
        case 17:
            i13 ^= i17;
            break;
        case 23:
            Test.iFld = (int)Test.instanceCount;
            break;
        case 51:
            lArr[(-140 >>> 1) % N] = (long)Test.fFld;
            break;
        case 41:
            sArr[(24035 >>> 1) % N] = (short)i1;
        case 25:
            Test.iArrFld[(i1 >>> 1) % N][(i13 >>> 1) % N] -= (int)l;
            break;
        default:
            i13 -= i1;
        }
        vMeth_check_sum += l + i + i1 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        float f=71.336F, fArr[]=new float[N];
        double d=-2.115301;
        int i18=9, i19=104, i20=6660, i21=0, i22=13, i23=24068, i24=33882, i25=179;
        long l1=-4166098614L;

        FuzzerUtils.init(fArr, 2.27F);

        Test.iArrFld[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (Math.min(Test.iFld, -Math.min(Test.iFld,
            Test.iFld)) - (Test.iFld--));
        Test.iFld = (int)(((++f) + (d * 53210)) + (fArr[(Test.iFld >>> 1) % N]--));
        Test.iFld = Test.iFld;
        vMeth(Test.instanceCount, 13, Test.iFld);
        for (i18 = 10; i18 < 227; ++i18) {
            i19 = i19;
            for (l1 = 116; l1 > 3; l1 -= 2) {
                f = i19;
            }
            i20 &= i18;
            for (i21 = 116; i21 > 4; i21--) {
                i19 += (i21 * i21);
                Test.instanceCount -= (long)76.201F;
                i19 = -26307;
                for (i23 = 1; i23 < 2; ++i23) {
                    switch ((i21 % 4) + 101) {
                    case 101:
                        Test.fFld -= i22;
                        Test.instanceCount = i20;
                        i19 += (((i23 * sFld) + Test.byFld) - i18);
                        break;
                    case 102:
                        if (bFld) {
                            Test.iArrFld[i18][i23] >>= i18;
                        }
                    case 103:
                        i22 += (int)(-12L + (i23 * i23));
                        try {
                            i19 = (-14154 / i22);
                            i20 = (i23 % -58736);
                            i20 = (i24 % Test.iArrFld[i18 - 1][i18 - 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 104:
                        bFld = true;
                    default:
                        Test.iFld = i23;
                        Test.instanceCount *= (long)Test.fFld;
                    }
                    bFld = true;
                    i19 += (((i23 * Test.instanceCount) + i22) - i25);
                    i19 += i23;
                    i20 = (int)8L;
                    Test.iFld += 28481;
                }
            }
        }

        FuzzerUtils.out.println("f d i18 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + i18);
        FuzzerUtils.out.println("i19 l1 i20 = " + i19 + "," + l1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 fArr = " + i24 + "," + i25 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld sFld bFld = " + Test.byFld + "," + sFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
