// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public volatile float fFld=2.1014F;
    public static boolean bFld=false;
    public boolean bFld1=true;
    public static short sFld=14862;
    public double dFld=87.50138;
    public static byte byFld=52;
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -14);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, float f1, int i5) {


        i4 -= i4;
        vMeth1_check_sum += i4 + Float.floatToIntBits(f1) + i5;
    }

    public static void vMeth(double d1, long l) {

        double d2=0.108072;
        int i3=2, i6=50554, i7=-203, i8=-5, i9=20687, i10=-25833;
        float f2=39.580F;
        short s=15602;
        boolean b1=false;
        long l1=-4L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8186356218257048131L);

        for (d2 = 7; d2 < 245; ++d2) {
            switch ((int)(((d2 % 2) * 5) + 112)) {
            case 117:
                try {
                    i3 = (i3 % -29);
                    i3 = (i3 / -15);
                    Test.iArrFld[(int)(d2)] = (i3 % -569335928);
                } catch (ArithmeticException a_e) {}
                try {
                    i3 = (i3 / 10612);
                    i3 = (i3 / i3);
                    i3 = (69 / i3);
                } catch (ArithmeticException a_e) {}
                vMeth1(i3, f2, i3);
                break;
            case 116:
                for (i6 = (int)(d2); i6 < 7; ++i6) {
                    f2 -= i6;
                    for (i8 = 1; i8 < 1; ++i8) {
                        i7 += s;
                    }
                    if (b1) break;
                    lArr[i6] -= i8;
                }
                switch ((int)(((d2 % 6) * 5) + 37)) {
                case 59:
                    for (l1 = 1; l1 < 7; ++l1) {
                        Test.iArrFld[(int)(l1 - 1)] <<= i8;
                        Test.instanceCount |= l;
                    }
                    break;
                case 58:
                    lArr[(int)(d2 - 1)] -= (long)d2;
                    break;
                case 56:
                    Test.instanceCount >>= i8;
                    break;
                case 51:
                    i9 += i7;
                    break;
                case 43:
                    i9 = (int)l1;
                case 44:
                default:
                    i10 -= (int)d1;
                }
                break;
            default:
                if (false) break;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + l + Double.doubleToLongBits(d2) + i3 +
            Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + s + (b1 ? 1 : 0) + l1 + i10 + FuzzerUtils.checkSum(lArr);
    }

    public static boolean bMeth(int i2) {

        double d=-73.126990;
        int i11=51603, i12=-4, i13=59201, i14=46428, i15=-245, i16=-56460, i17=53036;

        d *= (Test.iArrFld[(-6404 >>> 1) % N]++);
        vMeth(0.23613, Test.instanceCount);
        for (i11 = 21; i11 < 365; ++i11) {
            i2 -= (int)Test.instanceCount;
            Test.bArrFld[i11 + 1] = Test.bFld;
            i13 = 5;
            while ((i13 -= 3) > 0) {
                try {
                    i12 = (-1789359656 % i12);
                    Test.iArrFld[i11] = (i13 / i11);
                    i12 = (i13 / 113);
                } catch (ArithmeticException a_e) {}
                Test.iArrFld[i11] = i12;
            }
            i12 += (247 + (i11 * i11));
            for (i14 = 1; 5 > i14; ++i14) {
                i15 = i14;
            }
            try {
                i12 = (i12 % Test.iArrFld[i11]);
                Test.iArrFld[i11 + 1] = (-59897 % i14);
                i15 = (Test.iArrFld[i11 + 1] % -815568760);
            } catch (ArithmeticException a_e) {}
        }
        for (i16 = 15; 279 > i16; ++i16) {
            i2 ^= i15;
            Test.instanceCount += i16;
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + i16 + i17;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-49743, i1=179, i18=-7, i19=-44765, i20=-149, i21=184, i22=-13, i23=57748;
        float f=0.158F;
        boolean b=false;

        for (i = 2; i < 122; ++i) {
            Test.iArrFld[i + 1] -= (int)(((Test.instanceCount - 80.52564) - (fFld + i1)) * (i1 + (i +
                Test.instanceCount)));
            if ((!((~(i1--)) != f)) != (b | bMeth(i))) break;
            Test.bFld = true;
            if (b) {
                i1 *= (int)Test.instanceCount;
                if (bFld1) {
                    Test.iArrFld[i - 1] -= (int)Test.instanceCount;
                    i1 += (i * i);
                }
                Test.iArrFld[i] += Test.sFld;
            }
        }
        i1 *= (int)Test.instanceCount;
        i1 >>>= i;
        for (i18 = 3; i18 < 213; ++i18) {
            Test.instanceCount <<= i1;
            for (i20 = 7; i20 < 120; i20++) {
                Test.iArrFld[i20 - 1] ^= i;
                switch ((i20 % 10) + 40) {
                case 40:
                    Test.instanceCount >>= i1;
                    dFld += Test.instanceCount;
                    Test.byFld <<= (byte)i20;
                    break;
                case 41:
                    i1 += i20;
                    break;
                case 42:
                    i1 *= i19;
                    dFld = i20;
                    Test.iArrFld[i20 + 1] = Test.sFld;
                    break;
                case 43:
                    i1 <<= i;
                    for (i22 = 1; i22 < 2; ++i22) {
                        fFld *= i20;
                        if (true) break;
                        dFld += i22;
                        i21 += (i22 | i23);
                    }
                    break;
                case 44:
                    i21 *= i21;
                case 45:
                    i1 += (i20 + fFld);
                    break;
                case 46:
                    f %= ((long)(f) | 1);
                    break;
                case 47:
                    Test.bArrFld[i18] = bFld1;
                    break;
                case 48:
                    i1 += (int)Test.instanceCount;
                    break;
                case 49:
                    Test.bFld = false;
                    break;
                default:
                    Test.instanceCount += (i20 | Test.instanceCount);
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("b i18 i19 = " + (b ? 1 : 0) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 = " + i23);

        FuzzerUtils.out.println("Test.instanceCount fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("bFld1 Test.sFld dFld = " + (bFld1 ? 1 : 0) + "," + Test.sFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.byFld Test.iArrFld Test.bArrFld = " + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
