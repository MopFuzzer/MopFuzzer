// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1254768830L;
    public static float fFld=95.703F;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 50765);
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.dArrFld, 83.129948);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1, long l2, int i9) {

        int i10=11, i11=59, i12=-49, i13=-119, i14=-6, i15=-6;
        boolean b=true;
        short s=21105;
        float fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(fArr, 76.199F);
        FuzzerUtils.init(lArr, 3411885861L);

        for (i10 = 5; i10 < 124; ++i10) {
            fArr[i10 - 1] *= i9;
            for (i12 = i10; i12 < 13; i12++) {
                Test.fFld = i13;
                for (i14 = 1; 1 > i14; ++i14) {
                    i13 = -59397;
                    switch (((i14 % 4) * 5) + 59) {
                    case 73:
                        b = b;
                        Test.instanceCount = -34373L;
                        lArr = FuzzerUtils.long2array(N, (long)0L);
                        break;
                    case 75:
                        i9 <<= i15;
                        s -= (short)i9;
                        i11 -= i9;
                        Test.iArrFld[i10][i14] = (int)Test.fFld;
                        break;
                    case 61:
                        fArr[i12 - 1] = i13;
                        break;
                    case 60:
                        Test.bArrFld[i14 + 1][i14] = b;
                        break;
                    default:
                        Test.iArrFld[i14][i14 + 1] >>= i14;
                    }
                }
            }
        }
        long meth_res = l1 + l2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1(int i8) {

        double d1=-2.2171;
        int i16=-11, i17=-13, i18=-13, i19=6, i20=-208;
        byte by=-118;

        d1 = 376;
        do {
            Test.instanceCount = (long)(fMeth(Test.instanceCount, Test.instanceCount, 40581) - i8);
            if (Test.bFld) {
                i16 = 1;
                while (++i16 < 4) {
                    if (Test.bFld) break;
                    Test.instanceCount -= i16;
                    i8 += (-132 + (i16 * i16));
                    for (i17 = 1; i17 < 1; ++i17) {
                        Test.dArrFld[i16 - 1] -= i18;
                        i18 = (int)154L;
                        i18 += i17;
                    }
                    for (i19 = 1; 1 < i19; --i19) {
                        double d2=-1.12282;
                        if (Test.bFld) continue;
                        Test.instanceCount = -3291004646L;
                        d2 = i18;
                    }
                }
            } else if (Test.bFld) {
                i20 = by;
            } else {
                if (Test.bFld) break;
            }
        } while (--d1 > 0);
        long meth_res = i8 + Double.doubleToLongBits(d1) + i16 + i17 + i18 + i19 + i20 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i1, double d) {

        int i2=58228, i3=12, i4=-29289, i5=0, i6=-78, i7=-11734, iArr[]=new int[N];
        float f=2.277F, f1=-18.412F;
        short s1=-11804;

        FuzzerUtils.init(iArr, -30578);

        for (i2 = 24; 395 > i2; i2++) {
            for (i4 = 5; i4 > 1; i4 -= 3) {
                for (f = 5; f > 1; f--) {
                    i3 -= (int)(--Test.instanceCount);
                    l %= ((++Test.iArrFld[(int)(f)][i2]) | 1);
                    l = (i5++);
                    i7 >>= i3;
                    f1 += ((++i7) - (iMeth1(i3) * 10L));
                    i5 += i5;
                    s1 = (short)i4;
                }
            }
            i6 = -99;
            Test.dArrFld[i2] *= Test.instanceCount;
            i3 -= i5;
            i5 += i5;
            i5 = (int)f;
        }
        long meth_res = l + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 +
            Float.floatToIntBits(f1) + s1 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-22, i22=51633, i23=-35409, i24=52, i25=4785, i26=-9, i27=-2, i28=-28689, i29=41876, i30=183, i31=13,
            i32=113, i33=-55, i34=-6, i35=-5;
        double d3=110.3494;
        short s2=-5629;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 7589450934594906492L);

        Test.iArrFld[(i >>> 1) % N][(i >>> 1) % N] %= (int)(((iMeth(11L, i, d3) >>> Test.instanceCount) - i) | 1);
        Test.instanceCount -= (long)d3;
        d3 += 100.411F;
        Test.iArrFld[(5 >>> 1) % N] = Test.iArrFld[(i >>> 1) % N];
        for (i22 = 156; i22 > 3; i22 -= 2) {
            for (i24 = 7; 329 > i24; ++i24) {
                Test.instanceCount >>= 218;
            }
            Test.instanceCount |= -52763;
            i -= (int)Test.fFld;
            i <<= i;
            i25 %= (int)(i23 | 1);
            for (i26 = 5; i26 < 329; i26++) {
                i28 = 1;
                while (++i28 < 2) {
                    Test.iArrFld[i28][i22] += i;
                    d3 += i23;
                    i27 |= i28;
                }
                s2 += (short)-79;
                i29 = 2;
                while (--i29 > 0) {
                    Test.fFld -= Test.instanceCount;
                    Test.fFld += 60275L;
                    Test.fFld += i29;
                }
                Test.iArrFld[i26 - 1][i26] >>>= 60;
            }
        }
        for (i30 = 15; i30 < 395; i30++) {
            lArr1[i30] = i31;
            for (i32 = 4; i32 < 66; i32++) {
                Test.instanceCount >>= i31;
                for (i34 = 1; i34 < 2; i34++) {
                    i31 += i29;
                    i23 += (int)Test.instanceCount;
                    lArr1 = lArr1;
                }
            }
        }

        FuzzerUtils.out.println("i d3 i22 = " + i + "," + Double.doubleToLongBits(d3) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("s2 i29 i30 = " + s2 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 lArr1 = " + i34 + "," + i35 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.bArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
