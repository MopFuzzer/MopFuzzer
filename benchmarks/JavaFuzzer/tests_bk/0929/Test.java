// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5121L;
    public float fFld=-1.856F;
    public int iFld=22735;
    public byte byFld=-19;
    public static double dArrFld[][]=new double[N][N];
    public long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 43.72570);
        FuzzerUtils.init(Test.iArrFld, 137);
        FuzzerUtils.init(Test.byArrFld, (byte)-107);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i3=115;

        Test.dArrFld[(i3 >>> 1) % N][(115 >>> 1) % N] = i3;
        vMeth2_check_sum += i3;
    }

    public static void vMeth1() {

        int i1=53, i2=39791, i4=-8896, i5=248, i6=-9172, i7=-75;
        long l=-8L;
        byte by=-121;
        double d=71.87602;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, 0.881F);

        for (i1 = 218; i1 > 2; i1 -= 2) {
            float f=-2.76F;
            vMeth2();
            Test.instanceCount *= i2;
            i2 -= i2;
            l = Test.instanceCount;
            f = i2;
            for (i4 = 1; i4 < 14; i4++) {
                for (i6 = 1; i6 < 2; i6++) {
                    fArr[i1][i6] = i4;
                    i2 >>= by;
                    i7 = i2;
                    i7 *= (int)Test.instanceCount;
                    d = i5;
                }
                i5 += i1;
            }
            if (i6 != 0) {
                vMeth1_check_sum += i1 + i2 + l + i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        }
        vMeth1_check_sum += i1 + i2 + l + i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i, boolean b) {

        int i8=36, i9=-55, i10=-30, i11=23483, i12=-5, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 122);

        vMeth1();
        for (i8 = 8; i8 < 132; i8++) {
            i <<= i8;
            Test.dArrFld[i8 + 1][i8] *= Test.instanceCount;
            for (i10 = 1; i10 < 13; i10++) {
                if (b) break;
                if (b) {
                    i12 = 2;
                    while (--i12 > 0) {
                        byte by1=101;
                        if (i11 != 0) {
                            vMeth_check_sum += i + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        i += 24138;
                        if (b) break;
                        switch ((i10 % 4) + 78) {
                        case 78:
                            lArrFld[i12] = Test.instanceCount;
                            i9 += (i12 - i11);
                            break;
                        case 79:
                            try {
                                i = (i10 % i9);
                                i9 = (i8 / -16866);
                                iArr[i12][i12] = (i12 % 2864);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 80:
                            i += i12;
                            break;
                        case 81:
                            fFld += (((i12 * i) + by1) - fFld);
                            break;
                        default:
                            Test.instanceCount += (i12 * i12);
                        }
                    }
                } else {
                    try {
                        iArr[i8][i8 - 1] = (i9 % i8);
                        i9 = (iArr[i10 + 1][i10 - 1] / -159);
                        i11 = (-2103725422 / i10);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b1=false;
        int i13=61032, i14=13, i15=-13, i16=25643, i17=5, i18=-112, i19=-1;
        double d1=2.93978;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -109.924F);

        vMeth(-45501, b1);
        iFld *= iFld;
        for (i13 = 2; i13 < 210; ++i13) {
            switch (((36081 >>> 1) % 10) + 124) {
            case 124:
                Test.instanceCount += (i13 - i13);
                i14 = i13;
                break;
            case 125:
                Test.iArrFld[i13 + 1][i13 - 1] += i13;
                byFld += (byte)-2;
                fFld = (float)-2.57281;
            case 126:
                iFld >>= i14;
                i14 <<= iFld;
                if (false) {
                    i15 = 1;
                    do {
                        iFld = (int)d1;
                        for (i16 = 1; i16 > 1; i16 -= 2) {
                            d1 -= -29838L;
                            iFld -= (int)fFld;
                        }
                        i17 += i17;
                        iFld += (((i15 * i13) + i15) - i15);
                        d1 -= i17;
                        Test.instanceCount += i16;
                        Test.iArrFld[i15] = Test.iArrFld[i15];
                        for (i18 = 1; 1 > i18; ++i18) {
                            fFld = 30718;
                            Test.iArrFld[i15 + 1][i13 - 1] = (int)Test.instanceCount;
                            if (b1) {
                                fArr1[i13] += i18;
                                i19 -= (int)fFld;
                            } else {
                                Test.instanceCount += (((i18 * byFld) + i16) - i13);
                                Test.instanceCount += (i18 * i18);
                            }
                        }
                    } while (++i15 < 121);
                } else if (true) {
                    iFld += (int)fFld;
                } else {
                    iFld |= i14;
                }
                break;
            case 127:
                i19 += (((i13 * i18) + iFld) - Test.instanceCount);
            case 128:
                i19 /= (int)(i14 | 1);
                break;
            case 129:
                Test.byArrFld[i13] = (byte)Test.instanceCount;
                break;
            case 130:
                i19 <<= (int)Test.instanceCount;
                break;
            case 131:
                Test.iArrFld[i13][i13 + 1] = (int)-423887330L;
            case 132:
                i19 = i18;
                break;
            case 133:
                i19 += (int)d1;
                break;
            }
        }

        FuzzerUtils.out.println("b1 i13 i14 = " + (b1 ? 1 : 0) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 d1 i16 = " + i15 + "," + Double.doubleToLongBits(d1) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount fFld iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + iFld);
        FuzzerUtils.out.println("byFld Test.dArrFld lArrFld = " + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
