// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-915094571L;
    public static byte byFld=87;
    public static double dFld=1.393;
    public static int iFld=-31;
    public static float fFld=64.621F;
    public static boolean bFld=false;
    public static volatile byte byArrFld[][]=new byte[N][N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-97);
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.lArrFld, -6L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i7) {

        float f2=89.449F, fArr[]=new float[N];
        int i9=-34141, i10=2;
        long l1=-10L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.67168);
        FuzzerUtils.init(fArr, -2.223F);

        for (int i8 : Test.iArrFld) {
            for (f2 = 1; f2 < 4; ++f2) {
                f1 += i9;
            }
            Test.iArrFld[(i7 >>> 1) % N] -= (int)-5287483009182948707L;
            i9 -= (int)Test.dFld;
            Test.iArrFld[(i7 >>> 1) % N] = i7;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)0);
            f1 += i9;
            for (l1 = 1; l1 < 4; ++l1) {
                i7 = (int)23013L;
                dArr = dArr;
                Test.iFld >>= 11;
                fArr[(int)(l1)] += i8;
                i7 -= Test.iFld;
                i8 = i10;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i7 + Float.floatToIntBits(f2) + i9 + l1 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(boolean b) {

        int i5=-150, i6=-120, i11=244, i12=-27698, i13=9;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)14527);

        for (i5 = 258; i5 > 10; i5 -= 3) {
            vMeth1(Test.fFld, -184);
            sArr[i5] = (short)i6;
            Test.fFld = i5;
            Test.instanceCount += (((i5 * Test.instanceCount) + i5) - i5);
        }
        for (i11 = 2; i11 < 388; ++i11) {
            i12 += (i11 * i11);
            Test.instanceCount = i5;
            Test.instanceCount &= i11;
            i6 = (int)Test.dFld;
            i13 = 4;
            do {
                Test.iFld >>= 16;
                if (false) {
                    Test.fFld += (i13 * i13);
                    b = false;
                } else if (b) {
                    i12 = (int)Test.instanceCount;
                } else if (true) {
                    Test.instanceCount += (((i13 * Test.instanceCount) + Test.instanceCount) - i13);
                } else {
                    Test.instanceCount += (i13 + i6);
                }
            } while (--i13 > 0);
        }
        long meth_res = (b ? 1 : 0) + i5 + i6 + i11 + i12 + i13 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i1=3, i2=1, i3=11, i4=-3, i14=-97, i15=-10;

        i1 += Test.byArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N];
        i2 = 1;
        while (++i2 < 282) {
            for (i3 = 6; 1 < i3; i3--) {
                i4 *= (int)((Test.byFld *= (byte)(4 * (-6518 - (Test.dFld + i3)))) - i2);
            }
            iMeth(Test.bFld);
            Test.fFld *= i3;
            try {
                Test.iArrFld[i2 + 1] = (i1 / Test.iArrFld[i2]);
                Test.iArrFld[i2 + 1] = (114 / i2);
                i4 = (Test.iArrFld[(i2 >>> 1) % N] / Test.iArrFld[i2]);
            } catch (ArithmeticException a_e) {}
            i1 *= -54282;
            Test.iFld = i1;
            Test.byFld += (byte)-29;
        }
        i14 = 1;
        do {
            Test.dFld *= -6;
        } while (++i14 < 280);
        i15 = 1;
        do {
            Test.iArrFld[i15 - 1] -= 28329;
            Test.instanceCount = i2;
        } while (++i15 < 342);
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + i14 + i15;
    }

    public void mainTest(String[] strArr1) {

        float f=-1.122F, f3=-1.424F;
        int i16=-170, i17=-52547, i18=-6, i19=-250, i20=4, i21=9, i22=-5, iArr[]=new int[N];
        short s=10374;
        double dArr1[]=new double[N];

        FuzzerUtils.init(iArr, -51213);
        FuzzerUtils.init(dArr1, 71.79212);

        for (int i : iArr) {
            iArr[(i >>> 1) % N] -= (int)(((i += (int)11830L) + Math.max(Test.instanceCount, Test.instanceCount)) - (f -
                (i * 2L)));
            vMeth(-3L);
            i16 = 1;
            do {
                iArr[i16 - 1] = 7;
                for (i17 = 1; i17 < 1; ++i17) {
                    i += (((i17 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    i -= s;
                }
                i18 *= Test.iFld;
                for (f3 = 1; f3 > 1; f3 -= 2) {
                    i19 *= i;
                    fArrFld[i16 - 1] += 29035;
                    Test.instanceCount += Test.iFld;
                    Test.lArrFld[i16] += i16;
                    Test.instanceCount >>= i;
                    iArr[i16 - 1] += i17;
                    i = (int)Test.instanceCount;
                }
                i20 = 1;
                do {
                    Test.dFld += i16;
                    Test.lArrFld[i16 + 1] <<= Test.instanceCount;
                    i18 >>= i19;
                    i18 <<= i16;
                    i19 += i20;
                    i18 += -3538;
                    i = s;
                    Test.instanceCount = i17;
                    Test.instanceCount = i16;
                } while (++i20 < 1);
                for (i21 = i16; i21 < 1; i21++) {
                    dArr1[i16] = Test.instanceCount;
                    Test.instanceCount = i22;
                }
            } while (++i16 < 63);
        }

        FuzzerUtils.out.println("f i16 i17 = " + Float.floatToIntBits(f) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 s f3 = " + i18 + "," + s + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 iArr dArr1 = " + i22 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.fFld Test.bFld = " + Test.iFld + "," + Float.floatToIntBits(Test.fFld)
            + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byArrFld Test.iArrFld fArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
