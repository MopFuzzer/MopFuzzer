// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3118154505679283707L;
    public static double dFld=64.79304;
    public static byte byFld=79;
    public short sFld=-6769;
    public static long lFld=9L;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 33);
        FuzzerUtils.init(Test.fArrFld, 0.715F);
    }

    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, int i5) {

        int i6=61827, i7=29616;

        for (i6 = 10; i6 < 205; i6++) {
            Test.instanceCount += i6;
            i5 = (int)Test.instanceCount;
        }
        long meth_res = i4 + i5 + i6 + i7;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f, int i3, double d) {

        int i8=10, i9=-172, i10=-16283, i11=44831, i12=-52806, i13=228, i14=-250;
        long l=63938L, l1=176L;
        boolean b=true;

        i3 |= (iMeth1(i3, i3) | 98);
        for (i8 = 6; i8 < 216; i8 += 2) {
            i9 -= i3;
        }
        for (i10 = 11; i10 < 215; ++i10) {
            i9 *= 36951;
            d += f;
            i9 %= (int)(i8 | 1);
            Test.instanceCount += (i10 | l);
            for (i12 = 1; i12 < 8; i12++) {
                try {
                    Test.iArrFld[i10 - 1] = (-172076531 % i8);
                    Test.iArrFld[i10 + 1] = (-597926485 % i9);
                    i9 = (48530 % i8);
                } catch (ArithmeticException a_e) {}
            }
            b = b;
            if (i11 != 0) {
            }
            for (l1 = 8; 1 < l1; l1--) {
                i3 -= (int)-23014L;
                Test.instanceCount = l1;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + l + i12 + i13
            + (b ? 1 : 0) + l1 + i14;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i1=-9, i2=29462, i15=45036, i16=167, i17=-171;
        float f1=60.669F;
        double d1=2.125949;

        i1 = 1;
        do {
            i2 *= (int)4L;
            iMeth(f1, i1, Test.dFld);
            i15 = 5;
            do {
                boolean b1=false;
                f1 += (98 + (i15 * i15));
                i2 = i2;
                i2 <<= i15;
                if (b1) continue;
                i2 >>>= -2;
                Test.dFld -= 1;
            } while (--i15 > 0);
            f1 += (float)d1;
        } while (++i1 < 329);
        Test.iArrFld[(i15 >>> 1) % N] <<= i2;
        for (i16 = 14; i16 < 297; i16 += 3) {
            i17 %= (int)(Test.instanceCount | 1);
            Test.instanceCount >>= i17;
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f1) + i15 + Double.doubleToLongBits(d1) + i16 + i17;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=97;
        int i=8, i18=186, i19=-92, i20=116, i21=-52413, i22=109, i23=-3277, iArr[]=new int[N];
        boolean b2=true;
        double dArr[][]=new double[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(dArr, 1.44293);
        FuzzerUtils.init(sArr, (short)-12291);
        FuzzerUtils.init(iArr, 187);

        by = (byte)((i - (Test.instanceCount--)) - (i + i));
        Test.instanceCount -= (long)(-(fMeth() - Test.instanceCount));
        dArr[(i >>> 1) % N][(i >>> 1) % N] += Test.instanceCount;
        Test.fArrFld[(i >>> 1) % N] += Test.instanceCount;
        i <<= i;
        Test.instanceCount >>= i;
        sArr[(i >>> 1) % N] = (short)i;
        for (i18 = 12; i18 < 353; i18++) {
            Test.instanceCount >>= i18;
            for (i20 = 3; i20 < 74; ++i20) {
                for (i22 = 1; i22 < 2; i22++) {
                    Test.instanceCount *= Test.byFld;
                    sFld += (short)(52885 + (i22 * i22));
                    i19 >>>= (int)Test.instanceCount;
                    by <<= (byte)Test.instanceCount;
                    Test.fArrFld[i18] = Test.lFld;
                    i23 = i20;
                    try {
                        i19 = (i23 / i19);
                        i = (-39574 % i20);
                        i19 = (i20 % 43349);
                    } catch (ArithmeticException a_e) {}
                    if (b2) {
                        i23 += (int)-2712274999860380955L;
                        Test.iArrFld[i18 + 1] = i20;
                        i19 += (int)(-169L + (i22 * i22));
                    } else {
                        if (b2) {
                            i23 = i;
                        } else {
                            Test.iArrFld[i22] -= (int)Test.instanceCount;
                        }
                        Test.lFld = -4;
                        i >>= i19;
                    }
                    i23 += (((i22 * i23) + i) - i21);
                }
                iArr[i18] = (int)Test.lFld;
                iArr[i18 - 1] = i19;
            }
        }

        FuzzerUtils.out.println("by i i18 = " + by + "," + i + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 b2 = " + i22 + "," + i23 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("dArr sArr iArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("sFld Test.lFld Test.iArrFld = " + sFld + "," + Test.lFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
