// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63569L;
    public static volatile float fFld=1.254F;
    public static short sFld=-12023;
    public static boolean bFld=false;
    public static volatile long lFld=9L;
    public static byte byFld=-124;
    public static long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 13L);
        FuzzerUtils.init(Test.sArrFld, (short)-11821);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, int i10, int i11) {

        double d1=51.83399;
        int i12=4, i13=67, iArr2[]=new int[N];
        float f1=1.162F;
        boolean b=true;
        byte by1=79;

        FuzzerUtils.init(iArr2, 210);

        for (d1 = 134; d1 > 8; d1 -= 2) {
            i11 = 100;
            for (f1 = 1; f1 < 24; ++f1) {
                i12 = (int)Test.instanceCount;
                b = b;
                try {
                    i10 = (i11 / i13);
                    i9 = (iArr2[(int)(f1 - 1)] / i9);
                    i13 = (22875 / i13);
                } catch (ArithmeticException a_e) {}
                i10 ^= i11;
                i11 = i9;
                i10 += (int)d1;
                i9 *= 0;
                i12 *= i10;
                Test.sFld += (short)i13;
                iArr2[(int)(f1 - 1)] = i11;
            }
            i10 *= i11;
            iArr2[(int)(d1 + 1)] = by1;
        }
        long meth_res = i9 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + Float.floatToIntBits(f1) + i13 + (b ? 1 :
            0) + by1 + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4, int i5) {

        int i6=-78, i7=-3, i8=-32391, iArr1[]=new int[N];
        double d=-1.111304, dArr[]=new double[N];
        float f=28.933F;

        FuzzerUtils.init(dArr, -63.107699);
        FuzzerUtils.init(iArr1, -40038);

        for (i6 = 342; i6 > 1; --i6) {
            byte by2=72;
            switch (((i6 % 1) * 5) + 60) {
            case 62:
                d = 1;
                do {
                    dArr[i6 - 1] += (iArr1[i6 - 1]--);
                    for (f = 1; f < 1; ++f) {
                        iArr1[i6 + 1] %= (int)(((long)(f + ((-(i3 + Test.fFld)) * iMeth1(i5, i6, -79)))) | 1);
                        iArr1[(int)(d)] = i3;
                        Test.fFld = Test.instanceCount;
                        Test.instanceCount -= Test.instanceCount;
                        i3 = 111;
                        i4 |= i4;
                    }
                    Test.fFld += (float)(d * Test.instanceCount);
                    Test.bFld = false;
                    Test.instanceCount *= Test.lFld;
                    Test.fFld = i7;
                } while (++d < 5);
                break;
            default:
                by2 >>>= (byte)i8;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2) {

        int i14=-28365, i15=-14531, i16=-24153, i17=-40441, i18=6;
        double d2=-56.98546;

        vMeth(i2, i2, i2);
        for (i14 = 5; i14 < 281; ++i14) {
            Test.lFld = i15;
            i16 = 1;
            do {
                if (Test.bFld) continue;
                i2 <<= Test.byFld;
                for (i17 = 1; i17 > 1; i17 -= 2) {
                    d2 -= i2;
                    Test.lArrFld[i14 - 1] *= Test.lFld;
                    Test.instanceCount = -1;
                    i15 = i14;
                    Test.sArrFld[i14 + 1] = (short)Test.lFld;
                    i18 <<= i16;
                    Test.sFld -= (short)-36181L;
                }
            } while (++i16 < 6);
            Test.instanceCount += i14;
        }
        long meth_res = i2 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=147, i1=-185, i19=8, i20=37, i21=95, i22=67, iArr[][]=new int[N][N];
        byte by=70;
        double d3=-68.10516, d4=-112.28885, dArr1[]=new double[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 64869);
        FuzzerUtils.init(sArr, (short)-10834);
        FuzzerUtils.init(dArr1, 99.122341);

        Test.instanceCount = i;
        iArr[(i >>> 1) % N] = (iArr[(-35157 >>> 1) % N] = iArr[(i >>> 1) % N]);
        switch ((((iArr[(i >>> 1) % N][(i >>> 1) % N] >>> 1) % 6) * 5) + 48) {
        case 64:
            i = -2;
            i = i;
            break;
        case 71:
            i1 = 1;
            do {
                Test.fFld += (((i -= -47098) * (i1 - -87)) >>> (Test.instanceCount++));
                sArr[i1 + 1] = (short)(i--);
                by = (byte)(Test.fFld += i);
                iArr[i1 - 1][i1 + 1] = i1;
                Test.instanceCount -= iMeth(i1);
                i += (i1 * i1);
                iArrFld[i1] >>= (int)Test.lFld;
                for (i19 = 6; i19 < 111; ++i19) {
                    for (d3 = 1; 2 > d3; ++d3) {
                        i += i19;
                        d4 -= i;
                        Test.fFld *= i19;
                        Test.fFld %= (i21 | 1);
                        Test.bFld = Test.bFld;
                        i20 += 1;
                    }
                    i20 += i;
                    iArrFld[(i22 >>> 1) % N] = (int)Test.lFld;
                    if (Test.bFld) break;
                    i = (int)d4;
                    i22 += i20;
                    dArr1 = FuzzerUtils.double1array(N, (double)1.113564);
                    i += (((i19 * Test.fFld) + Test.lFld) - Test.lFld);
                }
            } while (++i1 < 227);
            fArrFld[(i1 >>> 1) % N] = -3;
            i <<= (int)Test.instanceCount;
        case 72:
            i <<= Test.byFld;
        case 62:
        case 59:
            Test.instanceCount >>= i21;
            break;
        case 49:
            i20 = (int)Test.instanceCount;
            break;
        default:
            Test.instanceCount <<= i21;
        }

        FuzzerUtils.out.println("i i1 by = " + i + "," + i1 + "," + by);
        FuzzerUtils.out.println("i19 i20 d3 = " + i19 + "," + i20 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i21 d4 i22 = " + i21 + "," + Double.doubleToLongBits(d4) + "," + i22);
        FuzzerUtils.out.println("iArr sArr dArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(sArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.lFld Test.byFld = " + (Test.bFld ? 1 : 0) + "," + Test.lFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
