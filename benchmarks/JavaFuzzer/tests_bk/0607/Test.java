// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9103938341512996810L;
    public static short sFld=6648;
    public static int iFld=48601;
    public static double dFld=48.81428;
    public static boolean bFld=true;
    public byte byFld=-55;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -238);
        FuzzerUtils.init(Test.fArrFld, -58.185F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(int i10, int i11, float f1) {

        int i12=-39555;

        Test.iFld = (int)(i11 + (Test.instanceCount / ((Test.iFld + i12) | 1)));
        long meth_res = i10 + i11 + Float.floatToIntBits(f1) + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i2, int i3) {

        float f=1.639F;
        int i4=-3, i5=-48282, i6=-6, i7=207, i8=-7, i9=-150;
        byte by=-66, byArr[]=new byte[N];
        double d=-2.38591;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 28034L);
        FuzzerUtils.init(byArr, (byte)61);

        Test.instanceCount -= (long)((f - (--l)) * ((--Test.instanceCount) << (++i3)));
        i3 = (int)f;
        for (i4 = 7; i4 < 226; ++i4) {
            by = (byte)(i4 - Test.iArrFld[i4 + 1]);
            switch ((((i3 - i5) >>> 1) % 1) + 42) {
            case 42:
                for (i6 = 1; i6 < 7; i6 += 3) {
                    for (i8 = 1; i8 < 4; i8++) {
                        Test.sFld = (short)(-(Math.sqrt(-36.50231) * (Test.iArrFld[i4]++)));
                        Test.instanceCount += (Test.instanceCount ^= (Test.instanceCount++));
                        i2 = (i8 + (--i2));
                        i9 = (++Test.iArrFld[i6]);
                        f += (-(-Math.min(l, Test.instanceCount)));
                        i2 += i5;
                        f -= (lArr[i6 + 1] - (Test.fArrFld[i8] + Test.iFld));
                    }
                    Test.iArrFld[i4] *= (--i9);
                }
                break;
            default:
                by >>>= (byte)(byArr[i4 + 1] * ((d - 24038) + iMeth(i2, i5, f)));
            }
        }
        vMeth_check_sum += l + i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + by + i6 + i7 + i8 + i9 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth2(int i15, long l1) {

        int i16=-6, i17=-7, i18=-2509, i19=235, i20=-128;
        float f4=65.723F;
        long l2=-2384935814L;

        i16 = 1;
        while (++i16 < 214) {
            f4 -= Test.sFld;
        }
        Test.iFld = i16;
        i15 -= i15;
        for (i17 = 2; i17 < 170; i17++) {
            for (l2 = i17; 9 > l2; ++l2) {
                Test.iArrFld[i17 - 1] >>= i16;
                Test.dFld *= f4;
                Test.dFld += Test.instanceCount;
                Test.iFld <<= 5;
                i15 = i15;
                i20 = 1;
                while ((i20 -= 2) > 0) {
                    Test.iFld *= i16;
                    Test.iArrFld[i17] -= 7;
                    i15 += (21452 + (i20 * i20));
                }
            }
        }
        vMeth2_check_sum += i15 + l1 + i16 + Float.floatToIntBits(f4) + i17 + i18 + l2 + i19 + i20;
    }

    public static void vMeth1(int i14) {

        long l3=6L, l4=-63L;
        int i21=7, i22=-5336;
        float f5=26.49F;

        Test.iArrFld[(i14 >>> 1) % N] -= (int)((-(Test.iFld *= i14)) + (Test.instanceCount++));
        vMeth2(i14, Test.instanceCount);
        Test.iArrFld = FuzzerUtils.int1array(N, (int)3514);
        for (l3 = 130; l3 > 7; --l3) {
            i21 >>= Test.iFld;
            i22 = 1;
            while (++i22 < 13) {
                i21 = i21;
                Test.iFld /= (int)(Test.instanceCount | 1);
                f5 = Test.iFld;
                if (Test.bFld) break;
                Test.iFld -= Test.iFld;
                Test.instanceCount = (long)Test.dFld;
                i21 += (i22 | i14);
                l4 += (i22 | Test.iFld);
                if (Test.bFld) break;
            }
        }
        vMeth1_check_sum += i14 + l3 + i21 + i22 + Float.floatToIntBits(f5) + l4;
    }

    public static int iMeth1() {

        float f3=0.366F;
        int i13=137, i23=2, i24=-27602;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -7814782072329699086L);

        for (f3 = 19; f3 < 390; f3++) {
            Test.instanceCount /= (i13 | 1);
            vMeth1(i13);
            Test.iArrFld[(int)(f3 + 1)] &= Test.iFld;
            i13 += (int)Test.dFld;
            if (true) continue;
            Test.instanceCount += (long)(f3 - Test.instanceCount);
            lArr1[(int)(f3)] = -35;
        }
        Test.instanceCount -= i13;
        Test.dFld = Test.iFld;
        for (i23 = 1; i23 < 164; ++i23) {
            Test.instanceCount *= Test.instanceCount;
            Test.iFld *= (int)Test.instanceCount;
            Test.iFld = i13;
            if (Test.bFld) break;
        }
        long meth_res = Float.floatToIntBits(f3) + i13 + i23 + i24 + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-45823, i1=-14774, i25=-33537, i26=7, i27=-3, i28=14, i29=-77, i30=-186, i31=20, i32=-106, i33=239;
        double d1=25.8386;
        float f6=40.898F;

        for (i = 5; i < 361; ++i) {
            float f2=0.953F;
            vMeth(Test.instanceCount, iMeth((int)(Test.iFld >> (long)(d1 / (i1 | 1))), i1--, f2 - (f2 + Test.iFld)),
                -Short.reverseBytes((short)(-219 >>> iMeth1())));
            Test.instanceCount <<= Test.instanceCount;
            Test.instanceCount -= Test.iFld;
        }
        for (i25 = 12; 317 > i25; i25++) {
            Test.iArrFld[i25] >>= Test.iFld;
            f6 -= i;
            Test.iArrFld = Test.iArrFld;
            for (i27 = 2; i27 < 82; ++i27) {
                for (i29 = 1; 2 > i29; i29++) {
                    i1 *= -44518;
                    Test.iFld += i29;
                    Test.instanceCount += (long)d1;
                    Test.bFld = false;
                    Test.bFld = Test.bFld;
                }
                i1 = i29;
                Test.iArrFld[i27] <<= Test.iFld;
                i28 += (int)-1.235F;
                f6 = -20131;
                for (i31 = i27; 2 > i31; ++i31) {
                    i32 += (i31 + Test.instanceCount);
                    if (Test.bFld) {
                        i32 -= i30;
                        f6 = -27.574F;
                        i30 += i31;
                        byFld -= (byte)i29;
                    } else {
                        i32 -= i1;
                        Test.instanceCount = i33;
                        i28 += (((i31 * i25) + i31) - f6);
                    }
                    try {
                        i28 = (i28 / -455405981);
                        i26 = (Test.iFld % i28);
                        Test.iArrFld[i31 + 1] = (i31 % 222);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("i i1 d1 = " + i + "," + i1 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i25 i26 f6 = " + i25 + "," + i26 + "," + Float.floatToIntBits(f6));
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 = " + i33);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld byFld = " + Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld
            ? 1 : 0) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
