// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-416704748L;
    public boolean bFld=false;
    public static double dFld=-65.118372;
    public static short sFld=-21233;
    public byte byFld=83;
    public float fArrFld[]=new float[N];
    public static volatile int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -186);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1) {

        double d1=0.35230;
        int i2=182, i3=59582, i4=-4, i5=-7, i6=-232, i7=-63492;
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -110.720F);
        FuzzerUtils.init(lArr, -2365801268L);

        for (d1 = 1; d1 < 147; ++d1) {
            if (false) continue;
            i3 = 1;
            do {
                l1 -= i2;
                l1 = Test.instanceCount;
                l1 = 0;
            } while (++i3 < 11);
        }
        for (i4 = 2; 288 > i4; ++i4) {
            Test.instanceCount *= i3;
            i2 += (((i4 * Test.instanceCount) + i4) - Test.instanceCount);
        }
        i5 = i3;
        for (i6 = 4; i6 < 283; ++i6) {
            try {
                i5 = (i5 % -8191);
                i5 = (-575670298 / i7);
                i5 = (i2 / i3);
            } catch (ArithmeticException a_e) {}
            fArr[i6 - 1] += i6;
            l1 = i2;
        }
        lArr = lArr;
        vMeth2_check_sum += l1 + Double.doubleToLongBits(d1) + i2 + i3 + i4 + i5 + i6 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(float f1) {

        int i9=-42774, i10=-48377, i11=53436, i12=-5, i13=4;
        byte by=-74;
        short s=-23001;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -4732362501942921212L);

        for (int i1 : Test.iArrFld) {
            Test.instanceCount -= (i1 + (i1 * (i1 = (int)Test.instanceCount)));
        }
        vMeth2(Test.instanceCount);
        i9 = 1;
        while (++i9 < 149) {
            i10 = 1;
            while (++i10 < 11) {
                i11 = (int)124L;
                f1 += (i10 * i10);
                switch (((i10 % 10) * 5) + 118) {
                case 141:
                    for (i12 = 1; i12 < 1; i12 += 2) {
                        double d2=-38.15328;
                        int i14=-206;
                        switch ((i9 % 7) + 5) {
                        case 5:
                            switch ((i9 % 5) + 7) {
                            case 7:
                                i13 += (i12 * i12);
                                d2 += i9;
                            case 8:
                                if (i10 != 0) {
                                    vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + by + s
                                        + FuzzerUtils.checkSum(lArr1);
                                    return;
                                }
                                i13 += (i12 * i12);
                                break;
                            case 9:
                                i13 = 11;
                                break;
                            case 10:
                            case 11:
                                i13 *= i9;
                                break;
                            default:
                                i13 = i9;
                            }
                        case 6:
                            i13 += (i12 * i12);
                        case 7:
                            i11 <<= i9;
                            break;
                        case 8:
                            i11 += (i12 + by);
                        case 9:
                            i13 = i12;
                            break;
                        case 10:
                            i11 = s;
                            break;
                        case 11:
                            i13 = i12;
                            break;
                        default:
                            i14 -= i9;
                        }
                    }
                    break;
                case 145:
                case 125:
                    Test.iArrFld[i10 + 1] += (int)Test.instanceCount;
                    break;
                case 131:
                    Test.instanceCount = -132L;
                    break;
                case 134:
                case 159:
                    if (false) continue;
                    break;
                case 130:
                    i13 >>= -47668;
                    break;
                case 150:
                    i13 -= 3;
                    break;
                case 164:
                    lArr1[i9] = lArr1[i9 + 1];
                    break;
                case 121:
                    i13 += (i10 - f1);
                    break;
                default:
                    Test.dFld = i13;
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + by + s +
            FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth() {

        float f2=0.264F;
        int i15=65464, i16=-44227, i17=46182, i18=56888;
        short s1=4112;

        Test.instanceCount -= (long)fArrFld[(-32837 >>> 1) % N];
        vMeth1(f2);
        for (i15 = 13; i15 < 345; i15++) {
            i17 = 1;
            while (++i17 < 5) {
                s1 *= (short)f2;
                dArrFld[i17 + 1] -= i16;
                Test.instanceCount *= i17;
                Test.instanceCount |= i16;
                i16 *= (int)Test.instanceCount;
                i16 = i15;
                i18 = 1;
                while (++i18 < 1) {
                    i16 = (int)Test.instanceCount;
                    Test.instanceCount -= s1;
                    Test.sFld *= (short)-12;
                    i16 = 6;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i15 + i16 + i17 + s1 + i18;
    }

    public void mainTest(String[] strArr1) {

        long l=-4L;
        int i=62140, i19=14667, i20=-213, i21=8, i22=111, i23=-12, i24=51715, i25=29, i26=-68, i27=192, iArr[]=new
            int[N];
        float f=1.370F;
        double d=-2.5291;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, -5004);

        if (bFld) {
            for (l = 256; 7 < l; l--) {
                bArr[(int)(l - 1)] = (((++iArr[(int)(l + 1)]) * (Test.instanceCount - i)) > ((l - i) *
                    (Test.instanceCount++)));
            }
        } else if (i > i) {
            f *= (i + ((--i) - (Test.instanceCount + i)));
            i = (int)(i = (int)(i += (int)(-(i + d))));
        } else {
            vMeth();
            for (i19 = 4; i19 < 127; ++i19) {
                for (i21 = 2; i21 < 204; i21++) {
                    i20 -= (int)Test.instanceCount;
                    if (true) break;
                    for (i23 = 1; i23 < 2; ++i23) {
                        i20 -= (int)l;
                        if (false) break;
                        i24 += (((i23 * f) + i24) - i);
                        Test.sFld >>>= (short)-9;
                        bFld = false;
                        Test.sFld *= (short)i19;
                        i22 = (int)Test.instanceCount;
                        i -= 86;
                        i = i24;
                    }
                }
                for (i25 = 6; i25 < 204; i25++) {
                    try {
                        iArr[i25] = (i19 / i26);
                        i22 = (i20 / i24);
                        i22 = (iArr[i25 - 1] % -57722);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i25;
                    Test.instanceCount -= l;
                    i27 = 1;
                    do {
                        f += i24;
                        i22 = byFld;
                        i22 += i27;
                        i += i19;
                        i24 += i20;
                    } while (++i27 < 2);
                }
            }
        }

        FuzzerUtils.out.println("l i f = " + l + "," + i + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d i19 i20 = " + Double.doubleToLongBits(d) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 bArr iArr = " + i27 + "," + FuzzerUtils.checkSum(bArr) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.dFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld byFld fArrFld = " + Test.sFld + "," + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
