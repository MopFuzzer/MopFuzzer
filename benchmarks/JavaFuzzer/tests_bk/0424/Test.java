// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1708060561122402505L;
    public static short sFld=7241;
    public static byte byArrFld[][]=new byte[N][N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)7);
        FuzzerUtils.init(Test.iArrFld, 248);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth() {

        int i8=-3024;
        short s=-29777;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 104342931L);

        lArr[(23985 >>> 1) % N] += (i8 - Short.reverseBytes((short)(++s)));
        long meth_res = i8 + s + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        int i10=144, i11=29504, i12=-124, i13=0, i14=32880;
        float f=0.450F;
        boolean b1=true;
        byte by=105;
        long l=-1444942779L;
        double d=0.129802;

        i10 = 1;
        while ((i10 += 3) < 283) {
            Test.instanceCount = (long)f;
            Test.instanceCount += i10;
            i11 += (45 + (i10 * i10));
            if (b1) continue;
            i11 = i10;
            i11 += (int)(6829740836099887951L + (i10 * i10));
            for (i12 = 16; i12 > 1; i12--) {
                i14 = 1;
                do {
                    i11 = i14;
                    switch ((i14 % 10) + 7) {
                    case 7:
                        i11 = (int)f;
                        break;
                    case 8:
                        by >>= (byte)9051786187008245960L;
                        break;
                    case 9:
                        i11 = i13;
                    case 10:
                        Test.instanceCount += i14;
                        break;
                    case 11:
                        Test.instanceCount += (i14 * i14);
                        break;
                    case 12:
                    case 13:
                        i11 = i14;
                    case 14:
                        i11 = (int)l;
                        break;
                    case 15:
                        i11 = 4;
                        break;
                    case 16:
                        i13 -= (int)d;
                    }
                } while (++i14 < 2);
            }
        }
        vMeth2_check_sum += i10 + Float.floatToIntBits(f) + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + by + l +
            Double.doubleToLongBits(d);
    }

    public static void vMeth1(int i9) {

        int i15=-37580, i16=-7, i17=-47691, iArr1[]=new int[N];
        short s1=-184;
        boolean b2=false;
        double d1=39.16799;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 5558866197688844076L);
        FuzzerUtils.init(iArr1, 75);

        vMeth2();
        i9 ^= -52;
        i9 = i9;
        i9 -= (int)Test.instanceCount;
        i15 = 1;
        while (++i15 < 314) {
            i9 += i15;
        }
        for (i16 = 22; i16 < 358; i16++) {
            lArr1[i16] = i9;
            iArr1[i16] = i9;
            s1 = (short)i16;
            i9 = 24896;
            if (b2) continue;
        }
        d1 += Test.instanceCount;
        i17 = i9;
        b2 = b2;
        vMeth1_check_sum += i9 + i15 + i16 + i17 + s1 + (b2 ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=58441, i6=42, i7=-98, i18=8948, i19=-54599, iArr[]=new int[N];
        boolean b=false;
        float f1=-1.233F;
        double d2=114.45383, dArr[]=new double[N];

        FuzzerUtils.init(iArr, 19487);
        FuzzerUtils.init(dArr, 20.34214);

        Test.instanceCount = (i3++);
        iArr[(i2 >>> 1) % N] = (Test.byArrFld[(i4 >>> 1) % N][(-48 >>> 1) % N] - (i3--));
        i5 = 1;
        while ((i5 += 3) < 159) {
            for (i6 = 29; i6 > 1; i6 -= 2) {
                b = (b && (iMeth() != (i5 + Test.instanceCount)));
                vMeth1(i2);
                f1 = i4;
                i3 += (int)Test.instanceCount;
            }
            if (b) {
                for (i18 = 1; i18 < 29; ++i18) {
                    i2 = i4;
                    Test.sFld = (short)1.62922;
                    d2 = -82016060L;
                }
                b = b;
            } else {
                dArr = dArr;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i18 + i19 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=136, i1=8, i20=-1, i21=-6, i22=-167, i23=-4, i24=-5, i25=-6;
        boolean b3=true;
        double dArr1[][]=new double[N][N];
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr1, 1.27285);
        FuzzerUtils.init(sArr, (short)-26421);
        FuzzerUtils.init(lArr2, -51069L);

        for (i = 7; i < 191; i++) {
            vMeth(i, i, i1);
            Test.instanceCount -= i1;
            i1 = i1;
            Test.iArrFld[i + 1] *= i;
            i1 >>= i;
            for (i20 = 5; 136 > i20; i20++) {
                switch ((((i >>> 1) % 3) * 5) + 6) {
                case 7:
                    Test.iArrFld[i20] = i20;
                    dArr1 = dArr1;
                    i1 -= (int)Test.instanceCount;
                    break;
                case 8:
                    i1 = i;
                    i1 = i21;
                    i1 -= (int)Test.instanceCount;
                    for (i22 = 1; i22 < 2; ++i22) {
                        double d3=-2.88331;
                        sArr = sArr;
                        i21 *= i21;
                        if (b3) break;
                        i21 += i21;
                        i21 += i22;
                        i23 *= (int)d3;
                        i1 += (i22 ^ i1);
                        lArr2[i] >>= -61867L;
                    }
                case 15:
                }
                Test.instanceCount ^= i22;
                for (i24 = 2; i24 > 1; i24--) {
                    i25 = 50901;
                    i23 = i;
                    Test.instanceCount += i24;
                    Test.instanceCount += (4 + (i24 * i24));
                    i23 = (int)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("b3 i24 i25 = " + (b3 ? 1 : 0) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("dArr1 sArr lArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.byArrFld = " + Test.instanceCount + "," + Test.sFld
            + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
