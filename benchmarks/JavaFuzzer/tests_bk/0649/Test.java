// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public float fFld=0.811F;
    public static short sFld=26111;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -627147924389260844L);
        FuzzerUtils.init(Test.iArrFld, -29722);
        FuzzerUtils.init(Test.dArrFld, 8.17240);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l2, int i7, int i8) {

        int i9=56928, i10=137, i11=108, i12=105;
        double d1=1.76646, d2=-46.112995;
        float f2=2.503F;
        boolean b=true;

        for (i9 = 7; i9 < 201; i9++) {
            i8 = i10;
            i7 <<= (int)Test.instanceCount;
            d1 = 1;
            do {
                Test.iArrFld[(int)(d1)] = (int)d1;
                d2 = f2;
                i11 = 1;
                do {
                    f2 *= 3089;
                    i10 = (int)Test.instanceCount;
                    if (b) {
                        l2 >>= i7;
                    } else {
                        d2 *= i10;
                        b = b;
                        i8 = i10;
                    }
                    i12 = i11;
                } while (++i11 < 1);
            } while (++d1 < 8);
        }
        long meth_res = l2 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f2) + i11 + (b ? 1 : 0) + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(float f1, int i1, int i2) {

        int i3=-236, i4=6, i5=-32, i6=-165, i13=-2, i14=22126, i15=11, i16=178;
        long l1=12L;
        short s=9412;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -45.944F);

        for (i3 = 11; i3 < 284; ++i3) {
            double d=2.14786;
            Test.instanceCount = (long)(((Test.lArrFld[i3 + 1]--) + (--fArr[i3 - 1])) - ((i4 + -2531) >>
                (-2651243578011756329L | (Test.instanceCount = i1))));
            i4 = i3;
            f1 = (float)(d + Test.iArrFld[i3]);
            i1 -= (int)(Math.max(6L, l1 <<= Test.instanceCount) * (-f1));
            for (i5 = i3; 6 > i5; i5 += 2) {
                i1 *= (Test.iArrFld[i3] -= (i2 <<= 9));
            }
            i4 = (iMeth(Test.instanceCount, i4, i3) + i3);
        }
        for (i13 = 3; i13 < 360; i13++) {
            i1 += i13;
        }
        for (i15 = 14; 302 > i15; i15++) {
            i4 += i14;
        }
        s += (short)-10;
        long meth_res = Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + l1 + i5 + i6 + i13 + i14 + i15 + i16 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, float f, int i) {


        lMeth(f, i, i);
        vMeth_check_sum += l + Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        int i17=3, i18=-231, i19=21419, i20=7, i21=11, i22=-1, i23=12, i24=64499, i25=-1, i26=-2;
        byte by=-110, by1=15;
        boolean b1=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 2.627F);

        vMeth(Test.instanceCount, fFld, i17);
        i17 -= (int)fFld;
        for (i18 = 5; i18 < 223; ++i18) {
            i20 = i18;
        }
        Test.sFld &= (short)i19;
        by = (byte)Test.instanceCount;
        i19 = (int)-103.65495;
        i20 += (int)Test.instanceCount;
        i17 *= i18;
        for (i21 = 3; i21 < 169; i21 += 3) {
            i19 = i20;
            for (i23 = 1; i23 < i21; ++i23) {
                for (i25 = 1; i25 < 2; i25++) {
                    switch (((i21 % 2) * 5) + 118) {
                    case 121:
                        Test.iArrFld[i21 + 1] -= (int)Test.instanceCount;
                        i24 += (((i25 * i23) + by1) - Test.instanceCount);
                        i24 -= i23;
                        break;
                    case 125:
                        fArr1[i25 - 1] = 110L;
                        Test.instanceCount <<= by;
                        Test.dArrFld[i25] -= -8654618949808991105L;
                        break;
                    default:
                        i20 += (int)Test.instanceCount;
                        switch ((((i17 >>> 1) % 5) * 5) + 30) {
                        case 39:
                        case 34:
                            switch ((i23 % 3) + 1) {
                            case 1:
                                i17 += i19;
                                Test.instanceCount |= Test.instanceCount;
                                break;
                            case 2:
                                i17 = i23;
                                Test.iArrFld[i25 + 1] = i24;
                            case 3:
                                Test.instanceCount /= ((long)(fFld) | 1);
                                b1 = b1;
                                break;
                            default:
                                i20 -= i20;
                            }
                        case 51:
                            i17 = i21;
                            break;
                        case 47:
                            i24 += i23;
                        case 46:
                            fFld -= Test.sFld;
                            break;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 by i21 = " + i20 + "," + by + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 by1 = " + i25 + "," + i26 + "," + by1);
        FuzzerUtils.out.println("b1 fArr1 = " + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
