// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=50884L;
    public static double dFld=1.90717;
    public static boolean bFld=true;
    public static int iFld=178;
    public float fFld=0.97F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 26036L);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long byMeth1_check_sum = 0;

    public static byte byMeth1() {

        int i4=-4;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 98.130042);

        dArr[(i4 >>> 1) % N] -= i4;
        Test.dFld -= i4;
        long meth_res = i4 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        byMeth1_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static byte byMeth(int i3) {

        float f=-121.454F;
        int i5=-188, i6=12030, i7=-12859, i8=-15, i9=10, i10=-160, i11=142, i12=-39525, i13=7, i14=9850, i15=10;
        byte by=-15;

        f = (++Test.lArrFld[(i3 >>> 1) % N]);
        byMeth1();
        for (i5 = 8; i5 < 252; i5++) {
            i7 = 1;
            while (++i7 < 7) {
                i6 = i5;
            }
        }
        for (i8 = 11; 320 > i8; ++i8) {
            for (i10 = 1; i10 < 5; i10++) {
                i11 = i12;
                i6 = i13;
                i9 = i5;
                if (Test.bFld) {
                    for (i14 = 1; 2 > i14; i14++) {
                        if (i9 != 0) {
                        }
                        i13 += (((i14 * Test.instanceCount) + by) - i5);
                        Test.dFld -= Test.instanceCount;
                    }
                } else if (false) {
                    if (Test.bFld) continue;
                } else if (Test.bFld) {
                    f += (13L + (i10 * i10));
                }
            }
        }
        long meth_res = i3 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + by;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(double d, double d1, int i) {

        int i1=-35226, i2=77, iArr[]=new int[N];
        short s=11922;

        FuzzerUtils.init(iArr, 237);

        for (i1 = 3; 287 > i1; ++i1) {
            Test.instanceCount -= byMeth(i);
            Test.bFld = Test.bFld;
            s -= (short)i1;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i + i1 + i2 + s +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.dFld, 14.30513, 0);
        Test.iFld *= (int)fFld;
        Test.dFld *= -56340L;


        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld fFld Test.lArrFld = " + Test.iFld + "," + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("byMeth1_check_sum: " + byMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  byMeth1 ->  byMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
