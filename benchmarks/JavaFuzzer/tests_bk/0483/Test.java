// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public float fFld=0.982F;
    public short sFld=7059;
    public static boolean bFld=false;
    public static float fFld1=5.614F;
    public static float fFld2=97.304F;
    public byte byFld=36;
    public static int iArrFld[][]=new int[N][N];
    public boolean bArrFld[]=new boolean[N];
    public volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i11=-30826, i12=201, i13=242, i14=26703, i15=-1, i16=-94, i17=7133, iArr1[]=new int[N];
        float f=-2.961F;

        FuzzerUtils.init(iArr1, -51882);

        for (i11 = 15; i11 < 283; i11++) {
            f -= i12;
            if (Test.bFld) {
                iArr1 = iArr1;
            } else if (Test.bFld) {
                for (i13 = 1; 6 > i13; ++i13) {
                    i12 = i11;
                    Test.instanceCount |= i12;
                    Test.instanceCount >>= i14;
                }
                for (i15 = 1; i15 < 6; i15++) {
                    i14 *= (int)Test.instanceCount;
                    f *= Test.instanceCount;
                }
                if (Test.bFld) {
                    iArr1[i11 + 1] *= (int)Test.instanceCount;
                    i16 -= -180;
                } else {
                    Test.instanceCount = i15;
                }
            } else if (Test.bFld) {
                iArr1[i11 - 1] ^= i17;
            }
        }
        long meth_res = i11 + i12 + Float.floatToIntBits(f) + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5=-60832, i6=-197, i7=28779, i8=-18589, i9=132, i10=-114, i18=-8, i19=11, i20=-59478, i21=36112;
        byte by=-87;
        double d=-2.41027;

        for (i5 = 14; i5 < 236; ++i5) {
            for (i7 = 1; i7 < 7; i7++) {
                for (i9 = 1; i9 < 2; i9++) {
                    i2 = Math.abs((--i10) + (i6 + by));
                    i3 += (((i9 * i6) + Test.instanceCount) - i6);
                    i3 += iMeth1();
                    i4 -= i18;
                }
                i18 *= i18;
                for (i19 = i5; 2 > i19; ++i19) {
                    i21 += (int)Test.fFld1;
                    d = i3;
                    i2 = -42117;
                    Test.fFld1 = Test.instanceCount;
                    i21 += (66 + (i19 * i19));
                    i8 = -30;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + by + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(d);
    }

    public int iMeth(int i1) {

        int i22=189, i23=5, iArr[]=new int[N];
        byte by1=-73;
        double d1=-2.105261;

        FuzzerUtils.init(iArr, -41295);

        i1 -= Math.max((int)((i1 * fFld) * (Test.instanceCount + sFld)), (-(iArr[(i1 >>> 1) % N] += i1)) - i1);
        vMeth(i1, i1, i1);
        i22 = 384;
        while ((i22 -= 3) > 0) {
            by1 -= (byte)Test.instanceCount;
            Test.instanceCount *= Test.instanceCount;
            i23 = 1;
            do {
                d1 += i22;
                Test.fFld2 *= 241L;
                if (i22 != 0) {
                }
                d1 = -11;
                switch (((i22 >>> 1) % 2) + 80) {
                case 80:
                    i1 *= i1;
                    iArr[i22] *= 3;
                    i1 %= (int)(Test.instanceCount | 1);
                    break;
                case 81:
                    i1 *= i23;
                    break;
                }
            } while ((i23 += 3) < 12);
        }
        long meth_res = i1 + i22 + by1 + i23 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=653, i24=-31014, i25=2, i26=-11, i27=-5, i28=10, i29=28282, i30=-55513, i31=226, i32=5, i33=-8,
            iArr2[]=new int[N];
        long l=6L, l1=2341441730344838607L;
        float f1=1.972F;
        double d2=2.67630;

        FuzzerUtils.init(iArr2, -27518);

        i = (int)((i ^= (--i)) + ((fFld + -235) - (0 * (i + i))));
        i >>= iMeth(i);
        for (l = 5; 328 > l; ++l) {
            for (i25 = 2; 78 > i25; ++i25) {
                f1 = 1;
                do {
                    byFld += (byte)(((f1 * f1) + i24) - Test.instanceCount);
                    d2 += i25;
                    i = (int)l;
                    Test.instanceCount += (long)(f1 * f1);
                    iArr2[(int)(f1 - 1)] <<= i25;
                } while (++f1 < 2);
                i -= i;
            }
            i24 *= i;
            Test.instanceCount -= i25;
            i26 = (int)d2;
            i26 *= (int)l1;
        }
        for (i27 = 4; 321 > i27; i27++) {
            switch ((i27 % 9) + 21) {
            case 21:
                i29 = 1;
                while (++i29 < 79) {
                    i28 = i27;
                    for (i30 = i29; i30 < 1; ++i30) {
                        Test.bFld = false;
                    }
                    for (i32 = i29; i32 < 1; ++i32) {
                        i28 = (int)Test.fFld1;
                        iArr2[i27 + 1] += (int)l1;
                        i33 -= (int)-8716308946542700246L;
                        i33 >>>= i28;
                        i24 = i25;
                        Test.fFld1 -= (float)d2;
                        Test.iArrFld = FuzzerUtils.int2array(N, (int)6170);
                    }
                    i31 = (int)Test.instanceCount;
                }
                break;
            case 22:
                i31 *= sFld;
                break;
            case 23:
                i += i27;
                break;
            case 24:
                bArrFld[i27 + 1] = Test.bFld;
                break;
            case 25:
                Test.instanceCount += i27;
                break;
            case 26:
                i28 += -42375;
                break;
            case 27:
                dArrFld[i27] = sFld;
                break;
            case 28:
                iArr2[i27 - 1] >>= i33;
                break;
            case 29:
                i31 += i27;
                break;
            default:
                i31 += (i27 | Test.instanceCount);
            }
        }

        FuzzerUtils.out.println("i l i24 = " + i + "," + l + "," + i24);
        FuzzerUtils.out.println("i25 i26 f1 = " + i25 + "," + i26 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("d2 l1 i27 = " + Double.doubleToLongBits(d2) + "," + l1 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount fFld sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld1 Test.fFld2 = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld1) + "," + Float.floatToIntBits(Test.fFld2));
        FuzzerUtils.out.println("byFld Test.iArrFld bArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.iArrFld) +
            "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
