// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3072224376L;
    public static float fFld=-45.357F;
    public static short sFld=-14416;
    public static boolean bFld=true;
    public static byte byFld=47;
    public volatile int iFld=4;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3135978633L);
        FuzzerUtils.init(Test.iArrFld, -47302);
        FuzzerUtils.init(Test.fArrFld, -2.862F);
        FuzzerUtils.init(Test.byArrFld, (byte)4);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5, long l) {

        int i6=-49, i7=-4, i8=-14, i9=-26, i10=13, i11=13, iArr[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 78.94986);
        FuzzerUtils.init(iArr, -214);

        for (i6 = 3; 326 > i6; i6++) {
            for (i8 = 5; i8 > 1; i8 -= 3) {
                Test.sFld += (short)i8;
                i4 += (i8 * i7);
                Test.bFld = false;
                if (Test.bFld) break;
                Test.lArrFld[i6] = -9;
                for (i10 = 1; i10 < 5; i10++) {
                    long l1=55361L;
                    i4 += (int)756508049L;
                    dArr[i6] = Test.instanceCount;
                    i11 = (int)l1;
                    if (false) {
                        Test.instanceCount *= i7;
                        i4 += 230;
                    } else if (Test.bFld) {
                        iArr = FuzzerUtils.int1array(N, (int)10);
                    } else {
                        i4 = (int)-3L;
                    }
                }
            }
        }
        vMeth_check_sum += i4 + i5 + l + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(float f) {

        int i3=8, i12=-77, i13=-13, i14=-33773, i15=0, i16=19367, i17=-15861, i18=14;

        i3 -= ((--i3) % (((i3 + i3) * Math.max(i3, i3)) | 1));
        vMeth(i3, i3, Test.instanceCount);
        for (i12 = 11; 382 > i12; ++i12) {
            switch ((i12 % 9) + 40) {
            case 40:
                Test.instanceCount += (-242 + (i12 * i12));
                break;
            case 41:
                for (i14 = i12; i14 < 5; ++i14) {
                    i15 = i14;
                    i13 += i14;
                    Test.sFld += (short)i14;
                    for (i16 = 1; i16 < 1; i16++) {
                        if (i14 != 0) {
                        }
                        i17 |= i15;
                        i3 >>>= (int)246L;
                        i17 ^= i12;
                        i17 = i3;
                    }
                }
                break;
            case 42:
                i13 += (((i12 * i3) + Test.sFld) - Test.sFld);
                break;
            case 43:
                Test.instanceCount -= i16;
                break;
            case 44:
                i18 -= -76;
                break;
            case 45:
                Test.instanceCount = i16;
                break;
            case 46:
                i15 -= -10;
                break;
            case 47:
                i3 = (int)9L;
                break;
            case 48:
                i18 += (((i12 * i12) + i15) - i16);
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + i12 + i13 + i14 + i15 + i16 + i17 + i18;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i=43894, i1=38183, i2=54038, i19=-8796, i20=79, i21=-6, i22=0, i23=-13, iArr1[]=new int[N];
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -100L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -234);

        lArr[(i >>> 1) % N] = Math.min((int)((Test.sFld * Test.instanceCount) + (Test.sFld - i)),
            Math.max(Integer.reverseBytes(i), (int)(i - Test.instanceCount)));
        for (i1 = 3; i1 < 203; ++i1) {
            Test.instanceCount = i2;
            if (bArr[i1] = (iMeth1(1.72F) <= Test.instanceCount)) continue;
            i -= i2;
            i = (int)3835183187L;
        }
        for (i19 = 13; i19 < 273; i19++) {
            i20 -= Test.byFld;
            i21 = 1;
            do {
                iArr1 = FuzzerUtils.int1array(N, (int)-14);
                i20 += i21;
                iArr1 = iArr1;
            } while (++i21 < 6);
        }
        for (i22 = 18; i22 < 365; i22++) {
            Test.instanceCount *= i2;
            Test.instanceCount += (long)Test.fFld;
        }
        long meth_res = i + i1 + i2 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i24=121, i25=125, i26=-27175, i27=-24516, i28=31, i29=-7;
        float f1=-109.285F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)22439);

        Test.fFld += (iMeth() - 115.756F);
        iFld = iFld;
        iFld <<= (int)Test.instanceCount;
        i24 = 1;
        do {
            iFld >>= i24;
            Test.iArrFld[i24 - 1] -= i24;
            sArr = sArr;
            iFld = i24;
            for (f1 = 7; f1 < 113; f1++) {
                Test.instanceCount -= i25;
                Test.instanceCount = iFld;
                Test.iArrFld[i24 + 1] *= (int)62.47335;
                Test.instanceCount -= -36840;
                iFld = iFld;
                i25 += (int)(f1 - Test.fFld);
                Test.byFld *= (byte)-125;
            }
            iFld *= i25;
        } while (++i24 < 223);
        Test.fArrFld[(i24 >>> 1) % N][(i24 >>> 1) % N] -= 4;
        for (i26 = 8; i26 < 133; i26++) {
            Test.fArrFld[i26 + 1][i26 - 1] *= i25;
            i27 += (((i26 * i27) + i24) - iFld);
            Test.iArrFld[i26] = (int)-4712824529287230669L;
            for (i28 = 3; i28 < 201; i28++) {
                i29 -= (int)Test.fFld;
            }
            Test.byArrFld[i26] -= (byte)i27;
            i27 |= (int)Test.instanceCount;
            i25 += (int)(-3L + (i26 * i26));
            iFld = Test.byFld;
            i25 += (((i26 * iFld) + i24) - i26);
            Test.lArrFld[i26] *= (long)Test.fFld;
        }

        FuzzerUtils.out.println("i24 f1 i25 = " + i24 + "," + Float.floatToIntBits(f1) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 sArr = " + i29 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.byFld iFld = " + (Test.bFld ? 1 : 0) + "," + Test.byFld + "," + iFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
