// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-175L;
    public float fFld=-122.969F;
    public static byte byFld=-117;
    public static short sFld=29374;
    public static int iFld=2;
    public static double dFld=34.109821;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -64687);
        FuzzerUtils.init(Test.lArrFld, -85L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(long l2, int i12, float f) {

        int i13=-74, i14=-9100, i15=-147, i16=-71;
        double d1=-1.69522, dArr[]=new double[N];
        long l3=-7L;

        FuzzerUtils.init(dArr, -75.37090);

        for (i13 = 1; i13 < 250; ++i13) {
            for (d1 = i13; 7 > d1; ++d1) {
                Test.iArrFld[i13 - 1] -= i13;
                l3 = i15;
                i12 /= (int)(i15 | 1);
                f *= i14;
                i16 = 1;
                do {
                    dArr[i13 - 1] = i12;
                    Test.iArrFld[i13] = i13;
                    i14 += (i16 ^ (long)f);
                    switch ((i13 % 8) + 17) {
                    case 17:
                        i12 = i14;
                        l3 += i16;
                        l3 = i16;
                        Test.lArrFld[i16] -= i16;
                        break;
                    case 18:
                        i15 -= (int)1239637033260937028L;
                        break;
                    case 19:
                        Test.sFld -= (short)i14;
                        break;
                    case 20:
                        i15 = (int)203L;
                    case 21:
                        i14 *= (int)l2;
                        break;
                    case 22:
                        Test.byFld -= (byte)i13;
                        break;
                    case 23:
                        i15 += (int)(1151413827L + (i16 * i16));
                        break;
                    case 24:
                        i14 = i12;
                    }
                } while (++i16 < 1);
            }
        }
        long meth_res = l2 + i12 + Float.floatToIntBits(f) + i13 + i14 + Double.doubleToLongBits(d1) + i15 + l3 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i10, int i11, long l1) {

        float f1=-2.885F;
        long l4=-26735L;
        int i17=27214;
        boolean b=true;

        if (true) {
            i10 = sMeth(l1, i11, f1);
            f1 *= i11;
            i10 |= -129;
        }
        Test.iFld ^= -94;
        Test.dFld += i10;
        for (l4 = 6; l4 < 241; ++l4) {
            i10 = i17;
            if (b) {
                i10 = i17;
            } else {
                Test.iFld += 230;
                i11 = i11;
            }
            Test.byFld -= (byte)i10;
            i10 *= i11;
            f1 = -40385L;
        }
        long meth_res = i10 + i11 + l1 + Float.floatToIntBits(f1) + l4 + i17 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i6, int i7, long l) {

        double d=-126.78749, dArr1[]=new double[N];
        int i8=-9, i9=203, i18=3, i19=-14;
        float f2=0.932F;

        FuzzerUtils.init(dArr1, 0.827);

        i7 -= Test.byFld;
        for (d = 154; d > 4; --d) {
            i6 += (int)d;
            i9 = 1;
            do {
                i7 = iMeth1(i9, 38466, Test.instanceCount);
                i7 += (((i9 * i8) + l) - i8);
                Test.iFld += (i9 ^ l);
                l += (((i9 * Test.instanceCount) + i6) - i9);
                i8 = -45;
                Test.instanceCount += (long)f2;
                dArr1[(int)(d + 1)] -= Test.instanceCount;
                for (i18 = 1; i18 < 1; i18++) {
                    i19 = i8;
                    Test.instanceCount %= (l | 1);
                    i8 += (i18 * Test.iFld);
                }
            } while (++i9 < 11);
        }
        long meth_res = i6 + i7 + l + Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f2) + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-204, i1=-48202, i2=1, i3=48335, i4=-23379, i5=195, i20=-139, i21=-254, i22=161, i23=29, iArr[]=new
            int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 50L);
        FuzzerUtils.init(iArr, -17564);

        for (i = 3; i < 224; ++i) {
            for (i2 = 114; i2 > 7; i2 -= 2) {
                fFld *= (float)-70.25006;
                fFld = (lArr[i2 + 1]++);
                i1 += (((i2 * i) + i1) - fFld);
                for (i4 = i; 3 > i4; i4++) {
                    iArr[i2 - 1] -= (int)((--fFld) - Test.instanceCount);
                }
                iArr[i2] += (i1 - (iMeth(i, 92, -11L) - i3));
                for (i20 = 1; i20 < 3; ++i20) {
                    Test.byFld >>= (byte)i1;
                    if (false) break;
                }
                switch ((i % 4) + 111) {
                case 111:
                    i3 += (((i2 * i) + Test.sFld) - i5);
                    Test.instanceCount += (((i2 * i1) + i5) - i1);
                    Test.sFld -= (short)i4;
                    break;
                case 112:
                    i3 += i5;
                    Test.instanceCount = i5;
                    break;
                case 113:
                    if (bFld) break;
                    lArr = Test.lArrFld;
                    i5 += (((i2 * Test.instanceCount) + Test.iFld) - Test.instanceCount);
                    break;
                case 114:
                    i21 <<= i20;
                    bFld = bFld;
                    iArr[i2] = i21;
                    if (bFld) continue;
                default:
                    Test.instanceCount = Test.instanceCount;
                }
                for (i22 = 1; 3 > i22; ++i22) {
                    fFld = 177;
                    i23 -= (int)Test.instanceCount;
                    i21 += (i22 * i22);
                    i3 = i;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 lArr iArr = " + i23 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.iFld Test.dFld = " + Test.sFld + "," + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("bFld Test.iArrFld Test.lArrFld = " + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
