// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-135L;
    public static volatile int iFld=-44777;
    public double dFld=2.97095;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public long lArrFld1[]=new long[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, 2L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i7=64, i8=10, i9=-20702, i10=-36815, i11=-135;
        long l=-4956584332373418988L;
        float f3=-81.309F;
        double d2=50.59571;

        i7 = 1;
        do {
            for (l = 1; l < 6; ++l) {
                Test.iArrFld[(int)(l)] -= (int)f3;
                Test.iFld += (-5 + (l * l));
                Test.iFld += (int)(((l * i8) + i8) - Test.iFld);
                for (i9 = i7; 2 > i9; ++i9) {
                    if (i8 != 0) {
                        vMeth_check_sum += i7 + l + i8 + Float.floatToIntBits(f3) + i9 + i10 +
                            Double.doubleToLongBits(d2) + i11;
                        return;
                    }
                    if (i7 != 0) {
                        vMeth_check_sum += i7 + l + i8 + Float.floatToIntBits(f3) + i9 + i10 +
                            Double.doubleToLongBits(d2) + i11;
                        return;
                    }
                    d2 = i8;
                    i8 += (((i9 * i9) + i10) - i8);
                }
                switch ((i7 % 8) + 42) {
                case 42:
                    f3 += (-169 + (l * l));
                    break;
                case 43:
                    Test.iFld += Test.iFld;
                    i11 -= (int)d2;
                case 44:
                    f3 = Test.instanceCount;
                    break;
                case 45:
                    i8 = (int)l;
                case 46:
                    Test.iFld += (int)Test.instanceCount;
                case 47:
                    try {
                        Test.iArrFld[i7 + 1] = (Test.iFld % i8);
                        Test.iArrFld[i7 + 1] = (1508110535 / i9);
                        i10 = (Test.iFld / -6063);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 48:
                    i10 <<= 6747;
                    break;
                case 49:
                    i11 *= (int)d2;
                    break;
                default:
                    i10 += (231 + (l * l));
                }
            }
        } while (++i7 < 290);
        vMeth_check_sum += i7 + l + i8 + Float.floatToIntBits(f3) + i9 + i10 + Double.doubleToLongBits(d2) + i11;
    }

    public static int iMeth1() {

        int i5=10, i6=57, i12=34038, i13=-4759;
        short s1=-26825;
        double d1=1.31874, d3=0.120081;
        float f2=-113.34F;

        i5 = 1;
        while (++i5 < 255) {
            Test.iFld += (int)(((Test.instanceCount - i5) - (Test.instanceCount - -30166)) - ((i5 + i5) + (i5 - s1)));
            for (d1 = 6; 1 < d1; d1 -= 2) {
                Test.iFld += (int)(((Test.iArrFld[(int)(d1 - 1)]--) - (f2 - i5)) + (--Test.instanceCount));
                vMeth();
                i6 *= (int)Test.instanceCount;
                Test.iFld -= (int)f2;
                Test.instanceCount >>>= Test.iFld;
                Test.instanceCount += (long)(((d1 * Test.instanceCount) + i6) - Test.instanceCount);
                switch ((int)(((d1 % 2) * 5) + 105)) {
                case 109:
                    i6 *= -238;
                    i6 = (int)-110.253F;
                    for (i12 = 1; i12 < 3; i12 += 2) {
                        Test.instanceCount *= i13;
                        d3 *= Test.iFld;
                    }
                    break;
                case 115:
                    Test.lArrFld[(int)(d1)][i5 - 1] -= Test.instanceCount;
                default:
                    Test.iArrFld[(int)(d1)] <<= Test.iFld;
                }
            }
        }
        long meth_res = i5 + s1 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f2) + i12 + i13 +
            Double.doubleToLongBits(d3);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(float f1, int i2) {

        int i3=-12217, i4=-55, i14=-13, i15=21655;
        double d=101.24026, dArr[][]=new double[N][N];
        boolean b=true;
        byte by=-13;

        FuzzerUtils.init(dArr, 2.103994);

        for (i3 = 19; i3 < 354; i3++) {
            i4 += (((i3 * i2) + Test.instanceCount) - Test.instanceCount);
            i2 -= (int)((long)((-(d++)) + -1760) >> -201);
            i2 += Integer.reverseBytes(Test.iArrFld[i3]++);
            switch (((i3 % 2) * 5) + 92) {
            case 99:
                switch ((i3 % 2) + 55) {
                case 55:
                    d = iMeth1();
                    Test.iArrFld[i3 - 1] >>= 61;
                    i14 = 1;
                    do {
                        i15 = 1;
                        while (++i15 < 1) {
                            Test.iArrFld[i3 - 1] += i15;
                            f1 = i3;
                            d -= Test.iFld;
                            i4 -= -18047;
                            b = b;
                        }
                    } while (++i14 < 5);
                    break;
                case 56:
                    Test.iArrFld = Test.iArrFld;
                    break;
                default:
                    by = (byte)f1;
                }
                break;
            case 98:
                dArr[i3][i3 - 1] = 30;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + i4 + Double.doubleToLongBits(d) + i14 + i15 + (b ? 1 : 0)
            + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-1114, i1=-63972, i17=116, i18=-5, i19=-118, i20=-2;
        float f=-2.251F;
        long l2=-1804431959947407573L;
        byte by1=-108;
        short s3=-3272;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i = 2; i < 205; i++) {
            short s=12879;
            s = (short)(2 * ((Test.instanceCount - i) + (i + f)));
            switch ((((iMeth(-1.213F, Test.iFld) >>> 1) % 10) * 5) + 63) {
            case 101:
                i1 = i1;
                break;
            case 96:
                Test.lArrFld[i][i - 1] <<= l2;
                for (i17 = i; i17 < 124; i17++) {
                    i18 += (i17 * i17);
                    i19 = 1;
                    do {
                        i1 <<= (int)l2;
                        l2 -= i18;
                        by1 >>= (byte)s;
                        l2 += i19;
                    } while (++i19 < 1);
                    Test.iArrFld[i + 1] |= i18;
                    l2 &= l2;
                    by1 += (byte)(((i17 * i18) + i17) - l2);
                    i20 = 1;
                    do {
                        dFld += dFld;
                        i18 -= (int)Test.instanceCount;
                        i18 = i18;
                        Test.iArrFld[i + 1] += i;
                        i18 -= i20;
                        Test.iArrFld[i17 - 1] -= 98;
                        s3 += (short)(((i20 * i18) + Test.instanceCount) - i20);
                        i18 += i20;
                        Test.instanceCount <<= i1;
                        bArr[i] = b1;
                    } while (++i20 < 1);
                    i18 = i20;
                    i18 += (i17 * i19);
                }
            case 112:
                Test.iFld += (int)Test.instanceCount;
                Test.iArrFld[i - 1] *= (int)44L;
                break;
            case 73:
                s3 = (short)l2;
                break;
            case 81:
                Test.iArrFld[i] = (int)l2;
            case 83:
                i1 = i20;
                break;
            case 97:
            case 66:
                l2 += i;
                break;
            case 79:
                b1 = b1;
            case 84:
                by1 = (byte)i;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("l2 i17 i18 = " + l2 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 by1 i20 = " + i19 + "," + by1 + "," + i20);
        FuzzerUtils.out.println("s3 b1 bArr = " + s3 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld lArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(lArrFld1));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
