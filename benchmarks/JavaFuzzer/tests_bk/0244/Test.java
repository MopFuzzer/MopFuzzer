// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1955310444968714474L;
    public static float fFld=66.735F;
    public static int iFld=3;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i, int i1, int i2) {

        int i3=-14, i4=-12, i5=56230, i6=-224, i7=57937, i8=-8, i9=-12637, i10=245, i11=-6455;
        boolean b=true, b1=true;
        long lArr[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr, 23574L);
        FuzzerUtils.init(dArr, 57.11290);

        Test.instanceCount -= Test.instanceCount;
        for (i3 = 2; i3 < 171; ++i3) {
            for (i5 = 1; i5 < 9; ++i5) {
                i1 -= i5;
                i4 >>= i2;
                for (i7 = i5; i7 < 2; ++i7) {
                    i1 += (i7 ^ (long)Test.fFld);
                    i8 <<= (int)Test.instanceCount;
                    b = b;
                    Test.instanceCount *= Test.instanceCount;
                }
            }
            switch (((i3 % 7) * 5) + 65) {
            case 89:
                for (i9 = 9; i9 > 1; i9--) {
                    i4 -= i9;
                    i11 <<= 578;
                    Test.instanceCount -= Test.instanceCount;
                }
            case 96:
                i10 += i3;
                break;
            case 87:
                Test.fFld *= i11;
                break;
            case 80:
                dArr[i3] = i8;
                break;
            case 90:
                if (i1 != 0) {
                    vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + (b1 ?
                        1 : 0) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                break;
            case 67:
                i1 &= (int)Test.instanceCount;
            case 83:
                if (b1) break;
            default:
                if (b) continue;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(float f, long l) {


        vMeth(Test.iFld, Test.iFld, Test.iFld);
        long meth_res = Float.floatToIntBits(f) + l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {


        Test.fFld += (iMeth(Test.fFld, Test.instanceCount) - Test.iFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i12=65, i13=73, i14=-245, i15=-39, i16=-252, i17=-4, i18=-20, i19=0, i20=27089;
        byte by=-79;
        boolean b2=true;
        double d=-85.68719;
        short s=-6288;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 58L);

        for (int smallinvoc=0; smallinvoc<443; smallinvoc++) vSmallMeth();
        Test.fFld += Test.fFld;
        for (i12 = 240; i12 > 8; i12 -= 3) {
            Test.instanceCount += (long)Test.fFld;
            for (i14 = 15; 325 > i14; i14++) {
                for (i16 = 1; i16 < 2; i16++) {
                    by -= (byte)-6284;
                    lArr1[i16 + 1] = Test.iFld;
                    i17 = i15;
                    bFld = bFld;
                }
                b2 = b2;
                if (b2) {
                    i17 >>= i16;
                } else {
                    i15 -= (int)d;
                    for (i18 = 1; i18 < 2; i18++) {
                        Test.instanceCount %= (Test.instanceCount | 1);
                        i17 >>>= (int)Test.instanceCount;
                    }
                }
                i13 += i14;
            }
            i13 += (((i12 * Test.instanceCount) + Test.fFld) - i18);
            Test.instanceCount <<= i12;
            Test.instanceCount -= Test.iFld;
            i17 -= (int)-36.199F;
            lArr1[i12 + 1] += i17;
            s = (short)Test.fFld;
            try {
                i15 = (i14 % i20);
                i17 = (Test.iFld % Test.iArrFld[i12]);
                Test.iFld = (Test.iArrFld[i12 + 1] % 37569);
            } catch (ArithmeticException a_e) {}
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("by b2 d = " + by + "," + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i18 i19 s = " + i18 + "," + i19 + "," + s);
        FuzzerUtils.out.println("i20 lArr1 = " + i20 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("bFld Test.iArrFld = " + (bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
