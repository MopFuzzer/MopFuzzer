// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3154519625L;
    public static float fFld=86.535F;
    public boolean bArrFld[]=new boolean[N];
    public float fArrFld[][]=new float[N][N];

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=8, i8=-9, i9=7, i10=246, i11=9, i12=1;
        double d2=-69.58451;
        boolean b=true;
        byte by1=-27;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 379418525L);

        for (i7 = 7; i7 < 391; i7++) {
            i8 += i8;
            i8 = (int)Test.instanceCount;
            for (i9 = 1; i9 < 4; i9++) {
                if (b) {
                    d2 = 75.75960;
                    lArr[i7 + 1] += (long)Test.fFld;
                    i10 += i9;
                } else {
                    i8 >>= 122;
                    i10 += i9;
                    lArr[i9] = Test.instanceCount;
                    by1 -= (byte)i10;
                }
                for (i11 = 2; i11 > 1; --i11) {
                    i10 -= i7;
                    i10 >>= i9;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + (b ? 1 : 0) + by1 + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i6, long l) {

        double d1=-1.106550;

        d1 *= iMeth();
        long meth_res = i6 + l + Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i1=-162, i2=0, i3=-23626, i4=-57807, i5=57;
        float f=0.498F;
        double d=0.56885;
        short sArr[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(sArr, (short)-24445);
        FuzzerUtils.init(lArr1, -36L);

        for (i1 = 124; i1 > 7; i1--) {
            for (i3 = 1; i3 < 13; ++i3) {
                i5 = 1;
                while (++i5 < 2) {
                    i2 = (i2--);
                    i2 += (i5 * i5);
                    i2 += (i5 | i4);
                    f *= (Test.instanceCount--);
                    Test.fFld += (float)(Test.instanceCount - (i5 - (d - i4)));
                    i4 -= (int)(lMeth(i4, -166L) + i4);
                    if (i2 != 0) {
                        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) +
                            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    sArr[i3 - 1] -= (short)i2;
                    i4 = (int)Test.instanceCount;
                }
            }
        }
        i2 &= i1;
        i2 >>= i4;
        lArr1[(i1 >>> 1) % N] = 8666430418469193133L;
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i13=10, i14=95, i15=-48245, i16=24908, iArr[]=new int[N];
        boolean b1=false;
        byte byArr[]=new byte[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(byArr, (byte)57);
        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr2, -223L);

        for (byte by : byArr) {
            int i=6;
            by >>= (byte)i;
            vMeth();
            iArr = iArr;
            for (i13 = 3; i13 < 63; i13++) {
                for (i15 = 2; i15 > 1; i15--) {
                    i += i16;
                    switch ((i13 % 8) + 86) {
                    case 86:
                        i16 |= i16;
                        iArr[i13] -= i16;
                        i16 = (int)Test.instanceCount;
                        break;
                    case 87:
                        lArr2[i13 - 1] += i15;
                        Test.instanceCount -= Test.instanceCount;
                        i16 = 188;
                        break;
                    case 88:
                        i14 = i14;
                        lArr2[i13 - 1] = -35438;
                    case 89:
                        lArr2[i13] = -4;
                        Test.instanceCount = i13;
                        i16 <<= i15;
                    case 90:
                        i14 += i15;
                        i16 += i15;
                        iArr[i15 - 1] <<= (int)Test.instanceCount;
                        break;
                    case 91:
                        i14 = (int)Test.instanceCount;
                        bArrFld[i15 + 1] = b1;
                    case 92:
                        i <<= 246;
                        Test.fFld += i15;
                        i14 = i16;
                        fArrFld[i15][i13] = 40;
                        break;
                    case 93:
                        i16 = i;
                        break;
                    default:
                        i14 += i15;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 b1 byArr = " + i16 + "," + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("iArr lArr2 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld bArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(bArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
