// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-61017L;
    public static volatile short sFld=10792;
    public boolean bFld=true;
    public static float fFld=2.966F;
    public static byte byFld=-93;
    public static short sArrFld[]=new short[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-18590);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1(int i12, int i13, int i14) {

        float f1=-61.236F;
        int i15=21615, i16=-17742, i17=5, i18=-50647, i19=61;

        iArrFld[(i12 >>> 1) % N] += i13;
        Test.instanceCount *= (long)f1;
        for (i15 = 323; i15 > 12; --i15) {
            i12 += (i15 | Test.instanceCount);
            i14 = i15;
            for (i17 = i15; i17 < 5; i17++) {
                if (bFld) {
                    if (bFld) continue;
                } else {
                    i19 = 1;
                    do {
                        i16 += i17;
                        i12 = (int)Test.instanceCount;
                        i16 = (int)f1;
                        i18 >>>= i15;
                        i14 >>= i19;
                        i14 = i18;
                    } while (++i19 < 1);
                }
            }
        }
        vMeth1_check_sum += i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + i19;
    }

    public long lMeth(int i6, int i7) {

        int i8=-7, i9=-158, i10=-61505, i11=-174, i20=35605, i21=-13630;
        byte by=-25;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.948F);

        for (i8 = 15; 362 > i8; ++i8) {
            for (i10 = 1; i10 < 5; ++i10) {
                i11 >>= (-Short.reverseBytes((short)(42 + (i10 + Test.instanceCount))));
                vMeth1(62111, 10, -110);
            }
            Test.instanceCount += (-10L + (i8 * i8));
            for (i20 = 1; i20 < 5; ++i20) {
                iArrFld = iArrFld;
                i9 >>>= Test.sFld;
                fArr[i20 - 1] = 3L;
                iArrFld[i20] -= i20;
            }
            by = (byte)i6;
            i9 *= (int)Test.fFld;
            Test.instanceCount *= i10;
        }
        i21 = (int)Test.fFld;
        i7 >>= i11;
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i20 + i21 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i5, long l1, long l2) {

        float f=-63.544F;
        int i22=52067, i23=199, i24=-14, i25=-10909, i26=88;

        f = 143;
        do {
            i5 >>>= (i5--);
            l2 <<= ((lMeth(i5, 138) - -156) + i5);
            for (i22 = 2; i22 < 32; i22++) {
                i23 += (i22 ^ (long)Test.fFld);
                i5 -= i22;
                i23 = i23;
                i5 -= Test.byFld;
                Test.fFld += i5;
                i23 += i22;
                l2 -= i22;
            }
            i5 += (int)(((f * i22) + i5) - i22);
            for (i24 = 2; 32 > i24; ++i24) {
                i23 -= i26;
                i5 += (-65519 + (i24 * i24));
            }
        } while ((f -= 3) > 0);
        vMeth_check_sum += i5 + l1 + l2 + Float.floatToIntBits(f) + i22 + i23 + i24 + i25 + i26;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-98, i2=39124, i3=0, i4=-7586, i27=-174, i28=56903, i29=-52041, i30=-4, i31=-6, i32=1, i33=-6,
            i34=12, iArr[]=new int[N];
        boolean b=true;
        long l=52260L, lArr[]=new long[N];
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr, -7951017431441531763L);
        FuzzerUtils.init(fArr1, 0.520F);

        for (i = 4; i < 164; ++i) {
            Test.sArrFld[i] = Test.sFld;
            for (i2 = 9; i2 < 157; ++i2) {
                b = ((-(i3 * i2)) != (iArr[i2 + 1] += iArr[i2]));
                for (l = 2; l > 1; l -= 3) {
                    iArr = (iArr = (iArr = iArr));
                    i3 *= (int)(lArr[i - 1]--);
                }
                lArr[i2 + 1] = (i3--);
                vMeth(i1, l, -10L);
                iArrFld[i] += i4;
                iArr[i2] = (int)3L;
                i1 = (int)2.984F;
                i3 += i2;
                fArr1[i2 + 1][i2] -= Test.sFld;
            }
            i4 *= i;
            try {
                iArr[i] = (16954 / iArrFld[i]);
                i1 = (48 / i4);
                i1 = (i2 / i);
            } catch (ArithmeticException a_e) {}
        }
        for (i27 = 190; i27 > 5; i27 -= 3) {
            for (i29 = 3; i29 < 266; i29++) {
                for (i31 = 1; i31 < 2; ++i31) {
                    i1 = (int)Test.instanceCount;
                    Test.instanceCount &= -5;
                }
                fArr1[i29 - 1] = fArr1[i29 - 1];
                Test.instanceCount += (i29 | Test.instanceCount);
            }
        }
        for (i33 = 7; i33 < 195; i33 += 2) {
            long l3=-2582547418L;
            i28 = (int)l3;
            i32 += (((i33 * Test.sFld) + i28) - l);
            i28 = -98;
            Test.instanceCount -= i27;
            if (b) break;
            i32 = (int)l;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 b l = " + i3 + "," + (b ? 1 : 0) + "," + l);
        FuzzerUtils.out.println("i4 i27 i28 = " + i4 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("iArr lArr fArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld bFld = " + Test.instanceCount + "," + Test.sFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.sArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
