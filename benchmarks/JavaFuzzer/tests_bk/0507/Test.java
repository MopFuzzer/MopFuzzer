// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1554150514748774293L;
    public static int iFld=-123;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i8, long l2) {

        int i9=-7, i10=-38758, i11=0, i12=-51729, i13=8, i14=-6, i15=-32040;
        long lArr[]=new long[N];
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 2573192985L);
        FuzzerUtils.init(dArr, 0.127123);
        FuzzerUtils.init(fArr, 2.924F);

        lArr[(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i9 = 6; 175 > i9; ++i9) {
            double d1=1.69661;
            lArr[i9] -= Test.iFld;
            i10 >>= (int)Test.instanceCount;
            Test.iFld = Test.iFld;
            l2 -= (long)d1;
        }
        for (i11 = 6; i11 < 367; i11 += 2) {
            for (i13 = 9; i13 > 1; i13 -= 3) {
                i12 += i15;
            }
            Test.instanceCount -= (long)-91.7216;
            Test.iArrFld[i11] = -4673;
            dArr[i11] -= i9;
            fArr[i11] = l2;
            Test.instanceCount -= i11;
            i12 -= i10;
        }
        long meth_res = i8 + l2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, int i2, long l) {

        long l1=8973125404063539642L, lArr1[][]=new long[N][N];
        int i3=-61, i4=153, i5=172, i6=3, i7=2, i16=-184, iArr[][]=new int[N][N];
        byte by=122;
        float f=1.610F;
        boolean b=true;

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr1, 2L);

        for (l1 = 2; l1 < 352; l1++) {
            for (i4 = 1; i4 < 5; i4++) {
                i1 += i4;
                for (i6 = 1; i6 < 2; ++i6) {
                    l += i6;
                    iArr[i6 + 1][i4] = (int)((lMeth(i5, l) - i6) - 9087L);
                    i16 -= by;
                    switch (((i4 >>> 1) % 3) + 77) {
                    case 77:
                        lArr1 = FuzzerUtils.long2array(N, (long)-3235762656L);
                        i1 >>= Test.iFld;
                    case 78:
                    case 79:
                        Test.instanceCount /= -11;
                        Test.iFld += (int)1.321F;
                        i1 = i2;
                        f += (((i6 * l1) + f) - i2);
                        break;
                    }
                    if (b) continue;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + l + l1 + i3 + i4 + i5 + i6 + i7 + i16 + by + Float.floatToIntBits(f) + (b ? 1 : 0)
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public int iMeth(int i) {

        int i17=-101, i18=2, i19=-194, i20=-115, i21=7;
        float f1=1.640F;
        short sArr[]=new short[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(sArr, (short)11845);
        FuzzerUtils.init(lArr2, 1088738661679156513L);

        vMeth(Test.iFld, -43463, 3118225921801735722L);
        try {
            Test.iFld *= -22855;
            i17 = 1;
            while (++i17 < 207) {
                i += Test.iFld;
                sArr[i17 + 1] = (short)Test.iFld;
                lArr2[i17] += Test.iFld;
                Test.iArrFld[i17 - 1] += 12;
                for (i18 = i17; i18 < 8; i18++) {
                    Test.instanceCount >>= i;
                    try {
                        Test.iArrFld[i17 - 1] = (Test.iFld % Test.iFld);
                        Test.iArrFld[i17 + 1] = (-29285 / i18);
                        Test.iFld = (Test.iFld % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    for (i20 = 1; i20 < 1; ++i20) {
                        try {
                            i19 = (Test.iArrFld[i17 + 1] / Test.iFld);
                            i21 = (i / 216);
                            i21 = (Test.iArrFld[i20 + 1] / 83);
                        } catch (ArithmeticException a_e) {}
                        i19 <<= Test.iFld;
                        i21 += (int)(10L + (i20 * i20));
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            i19 = (int)f1;
        }
        long meth_res = i + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=1.71151;
        int i22=43047, i23=69, i24=10, i25=-7, i26=117, i28=129, i29=-56966;
        boolean b1=false;
        float f2=2.799F;

        d += Math.abs((Test.iFld >>> Test.iFld) - iMeth(Test.iFld));
        for (i22 = 14; 354 > i22; ++i22) {
            i24 = 1;
            do {
                i25 = 1;
                while (--i25 > 0) {
                    Test.iFld = Test.iFld;
                    Test.instanceCount %= (i25 | 1);
                    Test.instanceCount = (long)1.104934;
                }
            } while (++i24 < 74);
            i23 = i23;
            Test.instanceCount |= Test.iFld;
        }
        i23 = 22771;
        i26 = 1;
        while (++i26 < 355) {
            b1 = b1;
            Test.iFld = -2;
            i23 += (((i26 * f2) + f2) - Test.instanceCount);
        }
        f2 -= i22;
        bArrFld[(-22812 >>> 1) % N] = b1;
        Test.iArrFld[(i26 >>> 1) % N] += Test.iFld;
        switch ((((-5 >>> 1) % 2) * 5) + 84) {
        case 86:
            if (b1) {
                i23 -= (int)Test.instanceCount;
            } else if (b1) {
                Test.instanceCount = -35078;
                for (int i27 : Test.iArrFld) {
                    Test.instanceCount = Test.iFld;
                    i27 += (int)f2;
                    if (b1) continue;
                    if (b1) break;
                    Test.iFld <<= i26;
                    for (i28 = 1; 63 > i28; ++i28) {
                        i27 = i22;
                        Test.iArrFld[i28 + 1] *= i29;
                    }
                }
            } else {
                i29 = (int)Test.instanceCount;
            }
            break;
        case 85:
            Test.instanceCount = Test.iFld;
        }

        FuzzerUtils.out.println("d i22 i23 = " + Double.doubleToLongBits(d) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("b1 f2 i28 = " + (b1 ? 1 : 0) + "," + Float.floatToIntBits(f2) + "," + i28);
        FuzzerUtils.out.println("i29 = " + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iArrFld = " + Test.instanceCount + "," + Test.iFld +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("bArrFld = " + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
