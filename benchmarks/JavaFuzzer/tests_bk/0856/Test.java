// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3313296454L;
    public static volatile double dFld=6.77302;
    public static short sFld=29689;
    public static volatile byte byFld=-35;
    public static volatile float fFld=-7.368F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 123);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, int i6) {

        long l3=-7388489857236425407L, l4=37295L;
        int i7=8, i8=-14, i9=54001;
        boolean b=false;
        double d1=-79.111540;
        float f2=0.559F;

        Test.instanceCount = 86;
        for (l3 = 3; 148 > l3; l3++) {
            Test.iArrFld[(int)(l3 + 1)] -= i5;
            if (b) break;
            for (i8 = 11; i8 > 1; i8 -= 2) {
                d1 = i7;
                i9 += (i8 - i5);
                i6 += (int)Test.instanceCount;
                i7 = i6;
                switch ((i8 % 8) + 48) {
                case 48:
                    d1 = i7;
                    l4 = 1;
                    do {
                        i5 = (int)f2;
                        Test.instanceCount >>= i5;
                        i5 <<= -161;
                    } while (++l4 < 3);
                    break;
                case 49:
                    if (i8 != 0) {
                        vMeth_check_sum += i5 + i6 + l3 + i7 + (b ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d1) + l4
                            + Float.floatToIntBits(f2);
                        return;
                    }
                    break;
                case 50:
                    f2 *= i8;
                    break;
                case 51:
                    i7 += i5;
                case 52:
                    i9 >>>= i9;
                case 53:
                    f2 = (float)d1;
                    break;
                case 54:
                    f2 = i8;
                case 55:
                    d1 = Test.dFld;
                    break;
                }
            }
        }
        vMeth_check_sum += i5 + i6 + l3 + i7 + (b ? 1 : 0) + i8 + i9 + Double.doubleToLongBits(d1) + l4 +
            Float.floatToIntBits(f2);
    }

    public static long lMeth(int i3) {

        byte by=63;
        double d=11.6950;
        int i4=146, i10=23324, i11=-32939, i12=-8;
        float f1=-1.838F;
        boolean b1=true;
        long l5=-3576864348L;

        by += (byte)(Test.instanceCount--);
        for (d = 10; d < 290; d++) {
            f1 += (-2.162F + (d * d));
            i4 >>= (int)Test.instanceCount;
            vMeth(i4, i3);
            for (i10 = 1; i10 < 6; ++i10) {
                Test.dFld += f1;
                Test.instanceCount += i10;
                i3 = i11;
                if (b1) continue;
                Test.instanceCount += (((i10 * i11) + Test.instanceCount) - i3);
            }
            for (l5 = 1; l5 < 6; ++l5) {
                i3 = (int)5579782203103528099L;
            }
            b1 = b1;
            if (i4 != 0) {
            }
        }
        long meth_res = i3 + by + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i10 + i11 + (b1 ? 1 : 0)
            + l5 + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, long l1, long l2) {

        float f=1.636F;
        int i2=-231;

        f += Math.min((long)((i2 - f) % (lMeth(i2) | 1)), l);
        long meth_res = l + l1 + l2 + Float.floatToIntBits(f) + i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=203, i1=-102, i13=44830, i14=29586, i15=-10, i16=2;
        float f3=0.541F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6L);

        for (i = 9; i < 158; ++i) {
            Test.iArrFld = (Test.iArrFld = Test.iArrFld);
            Test.instanceCount += (long)((iMeth(Test.instanceCount, -47109L, Test.instanceCount) * Test.dFld) - i1);
            i1 = i;
            Test.instanceCount = Test.sFld;
            if (b2) {
                i1 *= i1;
                lArr = lArr;
                for (i13 = 9; 168 > i13; i13++) {
                    i15 = 1;
                    while (++i15 < 2) {
                        f3 = 32400;
                        i14 = Test.byFld;
                        i14 += (i15 | Test.byFld);
                        Test.sFld >>= (short)Test.instanceCount;
                    }
                    i1 = Test.sFld;
                    Test.sFld += (short)(((i13 * i14) + i1) - i1);
                    Test.byFld = (byte)i14;
                    Test.instanceCount *= -7527;
                    i1 -= 11509;
                }
            } else if (true) {
                i1 += (((i * Test.instanceCount) + f3) - i15);
                i14 >>= (int)Test.instanceCount;
                if (b2) {
                    i14 *= i13;
                    Test.byFld >>= (byte)i;
                    i16 = 1;
                    while (++i16 < 168) {
                        i14 = i1;
                        Test.instanceCount -= (long)f3;
                        Test.iArrFld[i16] += i1;
                        i14 = (int)Test.instanceCount;
                    }
                    f3 -= -53362;
                } else {
                    Test.fFld = Test.fFld;
                }
            } else {
                i1 = i14;
            }
        }

        FuzzerUtils.out.println("i i1 i13 = " + i + "," + i1 + "," + i13);
        FuzzerUtils.out.println("i14 i15 f3 = " + i14 + "," + i15 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i16 b2 lArr = " + i16 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld Test.iArrFld = " + Test.byFld + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
