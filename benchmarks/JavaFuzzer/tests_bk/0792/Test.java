// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-5L;
    public float fFld=12.533F;
    public static short sFld=-17594;
    public static volatile int iFld=-59;
    public int iFld1=45711;
    public static double dFld=2.125200;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, -8);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=110, i4=-115, i5=-12, i6=5;
        boolean b=true;
        float f=0.146F;
        double d=30.9602;

        i3 = 1;
        do {
            if (b) continue;
            Test.instanceCount += (((i3 * f) + Test.instanceCount) - i2);
            i2 = i3;
            i2 += (i3 ^ Test.instanceCount);
            Test.instanceCount >>= i2;
            for (i4 = 1; 10 > i4; ++i4) {
                switch ((i4 % 7) + 73) {
                case 73:
                    i2 *= (int)Test.instanceCount;
                    i5 += i4;
                    i5 += i3;
                case 74:
                    i6 = 2;
                    do {
                        Test.instanceCount = 147;
                        i2 += (i6 * i6);
                        d += 2.475F;
                    } while (--i6 > 0);
                    break;
                case 75:
                    b = false;
                    break;
                case 76:
                    try {
                        i5 = (-212 % i6);
                        i5 = (i5 / i5);
                        i5 = (Test.iArrFld1[i4] % 1643588011);
                    } catch (ArithmeticException a_e) {}
                case 77:
                    Test.iArrFld1[i4] = i3;
                    break;
                case 78:
                    Test.instanceCount += (i4 ^ i3);
                    break;
                case 79:
                    i2 = (int)Test.instanceCount;
                default:
                    i5 >>>= (int)Test.instanceCount;
                }
            }
        } while (++i3 < 154);
        vMeth1_check_sum += i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f) + i4 + i5 + i6 + Double.doubleToLongBits(d);
    }

    public static void vMeth() {

        int i7=0, i8=63102, i9=177, i10=51813, i11=27301, i12=-15;
        long l=-4760299497843741573L;
        float f1=-1.888F;
        byte by=118;

        vMeth1(i7);
        Test.instanceCount -= i7;
        for (i8 = 11; i8 < 193; i8++) {
            for (l = i8; l < 9; ++l) {
                for (i11 = 1; i11 > l; i11--) {
                    Test.instanceCount = (long)f1;
                    i10 = Test.sFld;
                    i7 = i7;
                }
                by -= (byte)20057;
                i10 = i8;
                i12 = Test.sFld;
                Test.iArrFld1 = Test.iArrFld1;
                i9 = (int)1.913F;
                f1 *= -48850;
                Test.sFld += (short)l;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + l + i10 + i11 + i12 + Float.floatToIntBits(f1) + by;
    }

    public double dMeth() {

        boolean b1=false;
        byte by1=-69;
        int i13=-8, i14=-14;
        long l1=-2L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 64.110935);

        for (int i1 : iArrFld) {
            vMeth();
            if (b1) continue;
            Test.instanceCount += (long)fFld;
        }
        iArrFld[(233 >>> 1) % N] = Test.iFld;
        dArr[(-15961 >>> 1) % N] -= 141;
        Test.iArrFld1[(Test.iFld >>> 1) % N] = Test.iFld;
        fFld *= Test.iFld;
        switch (((167 >>> 1) % 9) + 30) {
        case 30:
            Test.iFld *= Test.iFld;
            by1 = (byte)Test.instanceCount;
            fFld *= Test.iFld;
            for (i13 = 1; i13 < 149; i13++) {
                i14 += i13;
                Test.instanceCount *= by1;
            }
            break;
        case 31:
            Test.iArrFld1[(-64063 >>> 1) % N] = (int)fFld;
            break;
        case 32:
            i14 -= (int)-97.109720;
        case 33:
            iArrFld[(Test.iFld >>> 1) % N] -= i14;
            break;
        case 34:
            Test.iFld -= i14;
        case 35:
            fFld += l1;
        case 36:
            Test.iFld >>>= (int)l1;
        case 37:
            Test.iFld -= i13;
            break;
        case 38:
            Test.instanceCount *= 14;
            break;
        default:
            i14 -= i14;
        }
        long meth_res = (b1 ? 1 : 0) + by1 + i13 + i14 + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=7737, i15=-229, i16=-1, i17=-59469, i18=-60327, i19=242, i20=14, i21=-131, i22=-1, i23=-1;
        long l2=-36392L, lArr[]=new long[N];
        boolean b2=false;
        float f2=-121.815F;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, -1.65817);
        FuzzerUtils.init(lArr, -8903052589438987731L);

        i = (int)(Test.instanceCount--);
        i = (int)(((fFld + 9) - (-45122 + dMeth())) * Test.sFld);
        for (l2 = 7; l2 < 321; ++l2) {
            for (i16 = 3; i16 < 80; ++i16) {
                b2 = b2;
                i18 = 1;
                while ((i18 += 2) < 2) {
                    fFld += i18;
                }
            }
            iFld1 += i15;
            Test.iFld += i15;
            i >>= 40;
        }
        i19 = 1;
        do {
            for (i20 = 2; i20 < 74; i20++) {
                for (f2 = i20; 2 > f2; ++f2) {
                    iFld1 += (int)(f2 - i20);
                    lArr[(int)(f2)] -= (long)Test.dFld;
                    Test.instanceCount *= iFld1;
                    i15 &= -46755;
                    lArr[i20] -= i15;
                }
                iFld1 += (14 + (i20 * i20));
                iArrFld[i19 + 1] += (int)Test.instanceCount;
                Test.dFld *= i;
                iArrFld = Test.iArrFld1;
                i17 = i21;
                i23 = 1;
                do {
                    iFld1 = 16735;
                    Test.instanceCount -= i;
                    Test.iFld += (i23 + l2);
                    Test.instanceCount += (i23 | Test.sFld);
                    Test.iArrFld1[i23] = i18;
                    i22 = Test.iFld;
                } while (++i23 < 2);
            }
        } while (++i19 < 339);

        FuzzerUtils.out.println("i l2 i15 = " + i + "," + l2 + "," + i15);
        FuzzerUtils.out.println("i16 i17 b2 = " + i16 + "," + i17 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 f2 i22 = " + i21 + "," + Float.floatToIntBits(f2) + "," + i22);
        FuzzerUtils.out.println("i23 dArr1 lArr = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))
            + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld iFld1 Test.dFld = " + Test.iFld + "," + iFld1 + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
