// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=80L;
    public static volatile int iFld=159;
    public static volatile short sFld=8923;
    public static int iFld1=-175;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 7);
        FuzzerUtils.init(Test.dArrFld, 0.109095);
        FuzzerUtils.init(Test.lArrFld, -5L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(float f) {

        int i3=-6, i4=-189, i5=3, i6=-187, i7=-125;
        double d=-1.11348;
        byte by=-8;

        Test.iFld = Test.iFld;
        Test.iFld -= (int)Test.instanceCount;
        Test.iFld <<= Test.iFld;
        Test.iFld = Test.iFld;
        Test.iFld <<= Test.iFld;
        Test.iFld -= -30251;
        i3 = 218;
        while ((i3 -= 2) > 0) {
            d *= Test.iFld;
            f += i3;
            for (i4 = i3; 14 > i4; i4++) {
                i5 *= (int)Test.instanceCount;
                Test.iFld += Test.iFld;
                for (i6 = i4; 1 > i6; i6++) {
                    i5 *= (int)23.127645;
                    Test.iArrFld[i3] -= by;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + by;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i) {

        int i1=-98, i2=211, i8=-5, i9=35, i10=-4, i11=-2;
        float f1=-112.261F, fArr[]=new float[N];
        byte by1=-64, by2=117;
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -221L);
        FuzzerUtils.init(fArr, 0.762F);

        for (i1 = 2; i1 < 239; i1++) {
            Test.iFld = ((byMeth(f1) * i2) + i);
            i8 = 1;
            do {
                for (i9 = 1; i9 < 1; ++i9) {
                    i10 -= Test.sFld;
                    lArr[i8 - 1][i9] >>= i1;
                    Test.dArrFld[i9] -= by1;
                    fArr[i8 - 1] = i2;
                    Test.instanceCount <<= i10;
                    i2 -= (int)Test.instanceCount;
                }
                i += i10;
                switch ((i1 % 8) + 111) {
                case 111:
                    if (true) {
                        Test.instanceCount += i8;
                        Test.iFld += (i8 + f1);
                    } else if (b) {
                        Test.iArrFld[i8] = i10;
                    } else if (b) {
                        by2 ^= (byte)i11;
                    }
                    break;
                case 112:
                    i += (((i8 * i11) + i2) - Test.iFld);
                case 113:
                    Test.iArrFld[i1 + 1] >>= (int)Test.instanceCount;
                case 114:
                    f1 += i;
                    break;
                case 115:
                    i2 += (i8 | Test.instanceCount);
                    break;
                case 116:
                    f1 -= -10;
                    break;
                case 117:
                    Test.sFld += (short)(48919 + (i8 * i8));
                case 118:
                    Test.instanceCount <<= 5L;
                    break;
                }
            } while (++i8 < 7);
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f1) + i8 + i9 + i10 + by1 + by2 + i11 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i12=141, i13=-1, i14=52660, i15=-128;
        double d1=1.66700;
        boolean b1=false;
        long l=7018081062004108230L;
        float f2=-106.751F;

        Test.iFld >>= (int)(iMeth(Test.iFld) * Test.instanceCount);
        if (b1) {
            for (i12 = 12; 249 > i12; i12++) {
                Test.iFld <<= Test.iFld;
                d1 = 31299;
            }
        } else {
            Test.lArrFld = Test.lArrFld;
            for (l = 9; l < 199; l++) {
                Test.iFld = (int)Test.instanceCount;
                if (b1) continue;
                i15 = 1;
                do {
                    f2 *= Test.iFld;
                    Test.iFld |= i12;
                } while (++i15 < 8);
                Test.iArrFld = Test.iArrFld;
                Test.instanceCount = -142L;
                i13 = Test.iFld;
            }
        }
        vMeth_check_sum += i12 + i13 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + l + i14 + i15 +
            Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i16=17764, i17=-43843, i18=-7, i19=14, i20=-1, i21=52, i22=-201, i23=3, i24=-5;
        boolean b2=false;
        float f3=-16.404F;
        byte by3=-36, byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)35);

        vMeth();
        Test.iFld <<= Test.iFld;
        Test.iFld += Test.iFld;
        Test.iArrFld[(126 >>> 1) % N] = Test.iFld;
        Test.iFld = 64813;
        byArr[(2423 >>> 1) % N][(0 >>> 1) % N] += (byte)Test.instanceCount;
        Test.iFld1 *= (int)Test.instanceCount;
        Test.iFld1 -= Test.iFld1;
        Test.instanceCount <<= Test.instanceCount;
        Test.dArrFld = Test.dArrFld;
        for (i16 = 22; i16 < 372; ++i16) {
            for (i18 = 1; i18 < 72; ++i18) {
                if (b2) continue;
                for (i20 = 2; i20 > 1; i20 -= 3) {
                    Test.instanceCount -= Test.instanceCount;
                    i17 -= (int)10L;
                    Test.sFld -= (short)-2;
                    f3 = i16;
                    i17 += (-33127 + (i20 * i20));
                    Test.iArrFld[(11 >>> 1) % N] = i18;
                    Test.instanceCount <<= Test.instanceCount;
                }
                i22 = 1;
                while (++i22 < 2) {
                    Test.instanceCount += i22;
                    i17 = -226;
                    i19 += i16;
                    Test.iFld += Test.iFld;
                }
                for (i23 = 1; i23 < 2; ++i23) {
                    by3 *= (byte)76.16773;
                    i21 += i23;
                    Test.iFld1 += (i23 + Test.instanceCount);
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 b2 i20 = " + i19 + "," + (b2 ? 1 : 0) + "," + i20);
        FuzzerUtils.out.println("i21 f3 i22 = " + i21 + "," + Float.floatToIntBits(f3) + "," + i22);
        FuzzerUtils.out.println("i23 i24 by3 = " + i23 + "," + i24 + "," + by3);
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld Test.dArrFld = " + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
