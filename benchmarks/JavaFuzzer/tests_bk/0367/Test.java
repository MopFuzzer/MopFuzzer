// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2198975379L;
    public boolean bFld=false;
    public static float fFld=-4.454F;
    public static double dFld=-1.123792;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.265F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i10=5159, i11=40528, i12=163, i13=33594, i14=-10, i15=30860, iArr1[]=new int[N];
        float f1=-8.458F, fArr[]=new float[N];
        byte by1=83;

        FuzzerUtils.init(fArr, 0.826F);
        FuzzerUtils.init(iArr1, 10);

        Test.fFld += Test.instanceCount;
        i10 += i10;
        for (i11 = 23; i11 < 395; ++i11) {
            Test.fFld = i10;
            i12 += i12;
            Test.instanceCount += -5;
            i12 <<= i10;
            for (i13 = 5; i13 > 1; --i13) {
                byte by=5;
                i12 += by;
                i10 = i10;
            }
            switch ((i11 % 9) + 110) {
            case 110:
                for (f1 = 1; f1 < 5; f1++) {
                    i12 >>= i14;
                }
                Test.instanceCount = i12;
                Test.fFld = Test.instanceCount;
                break;
            case 111:
                Test.instanceCount += (((i11 * i10) + i12) - i13);
                break;
            case 112:
                i14 += i12;
                break;
            case 113:
                fArr[i11 + 1] += i15;
            case 114:
                if (true) break;
                break;
            case 115:
                i12 += (i11 * i11);
                break;
            case 116:
                iArr1[i11 - 1] &= i15;
                break;
            case 117:
                i10 += i14;
            case 118:
                i10 *= by1;
                break;
            default:
                i15 = i13;
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        boolean b=true;
        int i16=-5, i17=-31584, i18=-49733, i19=-221, i20=46331, i21=163, iArr2[]=new int[N];
        short s1=-19793;
        byte byArr[]=new byte[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(byArr, (byte)98);
        FuzzerUtils.init(iArr2, -12);
        FuzzerUtils.init(lArr, -43246L);

        b = (iMeth1() >= i16);
        byArr[(-13766 >>> 1) % N] >>= (byte)i16;
        iArr2[(-53 >>> 1) % N] = i16;
        for (float f2 : Test.fArrFld) {
            i16 -= i16;
            for (i17 = 1; i17 < 4; i17++) {
                lArr[i17 + 1][i17] = i18;
                if (i17 != 0) {
                    vMeth_check_sum += (b ? 1 : 0) + i16 + i17 + i18 + s1 + i19 + i20 + i21 +
                        FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
                    return;
                }
                s1 <<= (short)i18;
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 += (i19 - f2);
                    switch ((((i19 >>> 1) % 8) * 5) + 92) {
                    case 113:
                        if (b) {
                            Test.fFld += i19;
                        } else {
                            f2 = i16;
                        }
                    case 93:
                        i20 /= (int)(s1 | 1);
                        break;
                    case 127:
                        lArr[i19 - 1][i19 - 1] >>= i20;
                        break;
                    case 115:
                        if (b) break;
                    case 123:
                        i18 += i19;
                        break;
                    case 102:
                    case 117:
                        s1 = (short)i19;
                    case 96:
                        i20 += i21;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i16 + i17 + i18 + s1 + i19 + i20 + i21 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(long l, int i9) {

        short s=-5841;
        double d1=-2.130585;

        i9 >>>= (i9--);
        Test.instanceCount = (++l);
        i9 = (int)((i9 -= s) + ((i9 + i9) % (((long)(Test.fFld + Test.fFld)) | 1)));
        vMeth();
        iArrFld = iArrFld;
        l >>= i9;
        d1 = i9;
        long meth_res = l + i9 + s + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=222, i1=242, i2=2, i3=-14, i4=12588, i5=-4697, i6=43379, i7=13, i8=-42660, i22=57909, iArr[][]=new
            int[N][N];
        float f=-114.269F;
        short s2=9214;
        double d2=-126.17757;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 23051);
        FuzzerUtils.init(lArr1, 2723270363L);

        i -= (int)((--Test.instanceCount) - (Test.instanceCount + (i * Test.instanceCount)));
        for (i1 = 166; i1 > 9; i1--) {
            for (i3 = 3; 160 > i3; i3++) {
                double d=0.83492;
                i += (int)Test.instanceCount;
                for (i5 = 1; i5 < 2; i5++) {
                    Test.instanceCount -= i1;
                }
                i2 = i3;
                i += (i3 | Test.instanceCount);
                d *= (iArr[(i1 >>> 1) % N][i1 - 1] = i6);
                Test.instanceCount += (((i3 * i2) + i5) - f);
                i = (--i);
                if (bFld) break;
            }
            for (i7 = 9; i7 < 160; i7++) {
                i2 += i7;
                i2 += iMeth(-3276404861L, i4);
                if (bFld) break;
                lArr1[i1] *= -209;
                Test.fFld += (8 + (i7 * i7));
                i4 += (((i7 * i2) + i5) - i4);
            }
            iArr[i1] = iArrFld;
            Test.instanceCount >>>= s2;
            if (bFld) {
                i *= (int)Test.fFld;
            } else {
                iArr[i1][i1] *= (int)-16.935F;
                Test.instanceCount = s2;
                i8 -= (int)Test.dFld;
            }
            for (d2 = 5; d2 < 160; ++d2) {
                iArrFld[i1 + 1] <<= s2;
                Test.fFld -= i4;
                try {
                    i6 = (i22 / i22);
                    i = (73 / iArr[i1][(int)(d2 + 1)]);
                    iArrFld[(int)(d2)] = (i8 % iArrFld[i1 - 1]);
                } catch (ArithmeticException a_e) {}
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 f i7 = " + i6 + "," + Float.floatToIntBits(f) + "," + i7);
        FuzzerUtils.out.println("i8 s2 d2 = " + i8 + "," + s2 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i22 iArr lArr1 = " + i22 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.fFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.fArrFld iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
