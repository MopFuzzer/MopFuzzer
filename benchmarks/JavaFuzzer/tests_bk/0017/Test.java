// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-30149L;
    public static float fFld=-89.763F;
    public static int iFld=-58871;
    public static short sFld=-4076;
    public static byte byFld=-51;
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.109291);
        FuzzerUtils.init(Test.fArrFld, -20.122F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i14, float f, int i15) {

        int i17=-3, i18=-76, iArr2[]=new int[N];
        double d1=1.128203;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -21654);
        FuzzerUtils.init(lArr, 1358652830L);

        i15 *= Test.sFld;
        for (int i16 : iArr2) {
            i15 = (int)f;
            i17 = 1;
            do {
                Test.dArrFld[i17 + 1] += i14;
                i18 = 1;
                do {
                    i16 -= (int)Test.instanceCount;
                    d1 -= -63996;
                    i16 = (int)d1;
                    lArr[i17] -= Test.iFld;
                    lArr = lArr;
                    Test.byFld -= (byte)13L;
                    f *= -14;
                } while (++i18 < 1);
                f += (i17 * i17);
                i14 = i16;
            } while (++i17 < 4);
        }
        long meth_res = i14 + Float.floatToIntBits(f) + i15 + i17 + i18 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=7627, i6=-11, i7=-59562, i8=-40059, i9=149, i10=13, i11=-126, i12=5, i13=2, iArr1[]=new int[N];
        long l=-195L;
        byte by=-93;
        short s=7893;

        FuzzerUtils.init(iArr1, -34204);

        for (i5 = 12; i5 < 222; i5 += 3) {
            for (i7 = 1; i7 < 22; i7++) {
                i9 += (((i7 * i6) + i4) - Test.fFld);
            }
            if (i4 != 0) {
                vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + l + by + s +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (i10 = 1; i10 < 22; ++i10) {
                for (i12 = 1; i12 < 2; i12++) {
                    switch ((i12 % 1) + 80) {
                    case 80:
                    default:
                        l += (-32 + (i12 * i12));
                        by = (byte)((i4++) - (++i11));
                        i8 = (int)(Integer.reverseBytes((int)(-(Test.fFld++))) / (((long)((s - 41.471F) * (by -=
                            (byte)Test.instanceCount))) | 1));
                    }
                    i11 <<= (int)(((++i11) + (Test.iFld--)) - (Test.instanceCount--));
                    l = Test.iFld;
                    i4 -= iArr1[i12 + 1];
                    i13 = (int)(iMeth(0, Test.fFld, i6) + -65.323F);
                }
            }
        }
        i8 >>= (int)-4398L;
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + l + by + s +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i, int i1, int i2) {

        double d=-1.117968;
        int i19=6, i20=-148, i21=14, i22=-14, i23=-94, iArr[]=new int[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr1, -3L);

        iArr[(i2 >>> 1) % N] *= (int)d;
        vMeth1(Test.iFld, i2);
        Test.iFld = i;
        lArr1[(-5 >>> 1) % N] = Test.byFld;
        Test.iFld += Test.sFld;
        for (i19 = 13; 331 > i19; ++i19) {
            i21 = 1;
            while (++i21 < 5) {
                for (i22 = 1; i22 < 1; ++i22) {
                    i = i1;
                    i1 = Test.sFld;
                    iArr[i21] = (int)d;
                    iArr[i21] <<= i22;
                    i20 >>>= i20;
                    d = Test.instanceCount;
                    Test.iFld += i20;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + Double.doubleToLongBits(d) + i19 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f1=120.625F;
        int i24=12, i25=-3, i26=248, i27=10, iArr3[]=new int[N];
        boolean b=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 7645655261216570372L);
        FuzzerUtils.init(iArr3, -176);

        vMeth(Test.iFld, -196, Test.iFld);
        lArr2[(Test.iFld >>> 1) % N] = Test.iFld;
        for (f1 = 7; f1 < 124; ++f1) {
            lArr2[(int)(f1 + 1)] += Test.iFld;
            for (i25 = 214; i25 > 10; i25--) {
                i24 += (((i25 * i24) + Test.instanceCount) - Test.instanceCount);
                lArr2[i25 - 1] += Test.instanceCount;
                b = true;
                i26 -= (int)Test.instanceCount;
                Test.iFld -= i26;
                i27 = 1;
                while (++i27 < 2) {
                    double d2=1.6743;
                    i26 *= (int)d2;
                    i26 = i27;
                    Test.iFld += i25;
                    Test.sFld *= (short)d2;
                    Test.instanceCount = i24;
                    i26 -= (int)d2;
                    i24 += (int)Test.instanceCount;
                }
                i24 *= (int)f1;
            }
            Test.instanceCount *= i27;
            Test.iFld >>= Test.iFld;
            i24 += (int)(49L + (f1 * f1));
            iArr3[(int)(f1)] = (int)Test.instanceCount;
            iArr3[(int)(f1 - 1)] -= i24;
        }
        Test.instanceCount <<= Test.byFld;
        lArr2[(Test.iFld >>> 1) % N] = i27;
        i24 ^= i26;
        i26 = (int)Test.fFld;
        b = b;
        Test.fArrFld[(-147 >>> 1) % N] = -21466;

        FuzzerUtils.out.println("f1 i24 i25 = " + Float.floatToIntBits(f1) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 b i27 = " + i26 + "," + (b ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("lArr2 iArr3 = " + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.dArrFld = " + Test.sFld + "," + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
