// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=14L;
    public static byte byFld=20;
    public int iFld=-250;
    public static double dFld=1.17571;
    public int iFld1=-686;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[][]=new int[N][N];
    public static volatile int iArrFld2[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 0);
        FuzzerUtils.init(Test.iArrFld2, 16826);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i5, int i6, double d) {

        int i7=-9, i8=-42, i9=10, i10=-12, i11=162, i12=-52855, i13=51;
        float f=-73.287F, fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 67.127916);
        FuzzerUtils.init(fArr, 22.485F);

        dArr[(-11 >>> 1) % N] *= Test.instanceCount;
        i7 += (int)-3204385968590637497L;
        i5 = (int)Test.instanceCount;
        for (i8 = 318; 1 < i8; i8--) {
            i6 += (i8 + i9);
            for (i10 = 1; i10 < 5; i10++) {
                Test.instanceCount = 233;
            }
            Test.instanceCount /= (i5 | 1);
            i9 -= (int)f;
            i12 = 1;
            do {
                i13 = 1;
                while (++i13 < 1) {
                    boolean b=true;
                    Test.iArrFld1[i13][i12 - 1] = i6;
                    i9 += (i13 * i13);
                    if (b) break;
                    fArr[i12 + 1] -= i5;
                }
            } while (++i12 < 5);
        }
        vMeth1_check_sum += i5 + i6 + Double.doubleToLongBits(d) + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) +
            i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i4=1, i15=-2, i16=-7, i17=107, i18=-4;
        double d1=-119.39595, dArr1[]=new double[N];
        boolean b1=false;
        float f1=-30.867F, fArr1[]=new float[N];
        short s=5953;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 11773L);
        FuzzerUtils.init(dArr1, 2.97799);
        FuzzerUtils.init(fArr1, 41.312F);

        if (b1) {
            lArr[(i4 >>> 1) % N][(i4 >>> 1) % N] *= (i4--);
            vMeth1(i4, i4, d1);
            i4 = i4;
            Test.iArrFld1[(i4 >>> 1) % N][(i4 >>> 1) % N] >>= i4;
        } else if (b1) {
            try {
                for (int i14 : Test.iArrFld2) {
                    d1 += i4;
                    if (b1) break;
                    switch (((i4 >>> 1) % 5) + 13) {
                    case 13:
                        i15 = 1;
                        while (++i15 < 4) {
                            dArr1 = dArr1;
                            for (i16 = 1; i16 < 1; ++i16) {
                                i17 = (int)f1;
                                i14 -= s;
                            }
                        }
                        break;
                    case 14:
                        Test.instanceCount += Test.instanceCount;
                        break;
                    case 15:
                        fArr1[(i4 >>> 1) % N] = -31494;
                        break;
                    case 16:
                    case 17:
                        Test.instanceCount <<= Test.instanceCount;
                        break;
                    default:
                        lArr[(i18 >>> 1) % N] = lArr[(-37 >>> 1) % N];
                    }
                }
            }
            catch (UserDefinedExceptionTest exc2) {
                Test.instanceCount -= (long)f1;
            }
            finally {
                i18 += -175;
            }
        } else if (b1) {
            Test.iArrFld1[(i17 >>> 1) % N][(-3 >>> 1) % N] = (int)Test.instanceCount;
        } else {
            Test.instanceCount += Test.instanceCount;
        }
        vMeth_check_sum += i4 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + i15 + i16 + i17 + Float.floatToIntBits(f1)
            + s + i18 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static long lMeth(byte by, int i1, long l) {

        int i2=-8, i3=11248, i20=8, i21=24714, i22=2354, i23=62105;
        float f2=2.547F;

        for (i2 = 19; i2 < 331; ++i2) {
            vMeth();
            f2 += ((long)i2 ^ (long)i3);
            Test.instanceCount *= (long)f2;
            for (i20 = 1; i20 < 5; ++i20) {
                i21 = i1;
                Test.instanceCount -= (long)f2;
                for (i22 = 1; i22 < 2; ++i22) {
                    Test.iArrFld2[i20 + 1] -= i2;
                    i21 -= 146;
                    i1 <<= 27725;
                    i1 += (int)l;
                    i21 -= i20;
                    i23 += (i22 | i1);
                    Test.iArrFld1[i20 - 1][i2 + 1] = i22;
                }
            }
        }
        long meth_res = by + i1 + l + i2 + i3 + Float.floatToIntBits(f2) + i20 + i21 + i22 + i23;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i24=-25, i25=-2801, i26=92, i27=11359, i28=-251, i29=3845, i30=-64662, i32=-242, i33=3170, i34=25813,
            i35=12;
        boolean b2=true;
        float f3=2.907F;
        byte byArr[]=new byte[N], byArr1[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-122);
        FuzzerUtils.init(byArr1, (byte)85);

        i = 1;
        do {
            byArr[i - 1] |= (byte)((iArrFld[i]--) - lMeth(Test.byFld, i, 11L));
            for (i24 = 3; i24 < 63; i24++) {
                for (i26 = 1; 2 > i26; i26++) {
                    i27 = (int)Test.instanceCount;
                    dArrFld[i24] *= Test.instanceCount;
                    byArr1[i24 - 1] ^= (byte)i24;
                    Test.instanceCount *= i26;
                    i25 += (((i26 * Test.instanceCount) + i27) - Test.instanceCount);
                    Test.instanceCount += (((i26 * i26) + i24) - Test.instanceCount);
                    i27 = i24;
                }
                try {
                    i28 = (-57 % i28);
                    i28 = (i % 66);
                    iFld = (iFld % -189);
                } catch (ArithmeticException a_e) {}
                Test.dFld *= Test.dFld;
                i28 += i24;
            }
            i25 += i;
            for (i29 = i; i29 < 63; ++i29) {
                int i31=125;
                i30 |= 251;
                iFld1 += i28;
                Test.instanceCount += i31;
                Test.byFld = (byte)30244;
                i30 = i30;
            }
            if (b2) continue;
            i28 += (((i * i27) + iFld) - i30);
        } while (++i < 397);
        iArrFld[(i24 >>> 1) % N] *= (int)Test.instanceCount;
        Test.instanceCount += (long)f3;
        byArr1[(i28 >>> 1) % N] ^= (byte)i;
        for (i32 = 1; i32 < 308; i32++) {
            for (i34 = 4; i34 < 82; i34++) {
                i27 = -4215;
                Test.dFld = f3;
            }
        }

        FuzzerUtils.out.println("i i24 i25 = " + i + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 b2 = " + i29 + "," + i30 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("f3 i32 i33 = " + Float.floatToIntBits(f3) + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 byArr = " + i34 + "," + i35 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("byArr1 = " + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld iFld = " + Test.instanceCount + "," + Test.byFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.dFld iFld1 iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld1 + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 Test.iArrFld2 dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld1) + "," +
            FuzzerUtils.checkSum(Test.iArrFld2) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
