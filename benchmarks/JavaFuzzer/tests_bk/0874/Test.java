// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-40L;
    public static volatile boolean bFld=true;
    public static float fFld=126.853F;
    public static byte byFld=107;
    public double dFld=119.81850;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1493943769L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8) {

        int i9=13, i10=9, i11=3, i12=4, iArr2[]=new int[N];
        double d=-65.123091;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -13L);
        FuzzerUtils.init(iArr2, 38);

        Test.byFld *= (byte)i8;
        Test.bFld = true;
        lArr[(i8 >>> 1) % N] >>= i8;
        for (i9 = 11; i9 < 187; i9++) {
            switch (((i9 % 1) * 5) + 42) {
            case 46:
                Test.fFld = i8;
            }
            i11 = 1;
            while (++i11 < 9) {
                Test.instanceCount *= Test.instanceCount;
            }
            for (d = 1; 9 > d; d++) {
                Test.instanceCount += (long)d;
                iArr2[i9 + 1] -= (int)Test.instanceCount;
                i7 = i8;
                i12 >>= i12;
                Test.fFld = i7;
                iArr2[i9 - 1] += (int)Test.instanceCount;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l, int i3, int i4) {

        int i5=2, i6=8, i13=-3, i14=-4, i15=20388, i16=11846, i17=-6, i18=-3, iArr1[]=new int[N];
        short s=21693;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -15);
        FuzzerUtils.init(fArr, 111.262F);

        Test.instanceCount >>= iArr1[(i4 >>> 1) % N];
        for (i5 = 4; i5 < 375; i5++) {
            Test.fFld = fArr[i5];
            Test.fFld = (++l);
            i3 = (iMeth(i4, -96) + -8);
            for (i13 = 1; i13 < 5; i13++) {
                Test.fFld += i4;
                for (i15 = 1; i15 < 2; i15++) {
                    Test.lArrFld[i13 - 1] += i3;
                }
                for (i17 = 1; i17 < 2; i17++) {
                    try {
                        i4 = (i15 % 849092795);
                        i18 = (i15 / i14);
                        iArr1[i17] = (i14 % 197);
                    } catch (ArithmeticException a_e) {}
                    i6 += (((i17 * i18) + l) - i4);
                    i14 += i17;
                    s += (short)(i17 * i17);
                }
                Test.instanceCount -= -238;
            }
        }
        vMeth1_check_sum += l + i3 + i4 + i5 + i6 + i13 + i14 + i15 + i16 + i17 + i18 + s + FuzzerUtils.checkSum(iArr1)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i, int i1, int i2) {

        int i19=8648, i20=1, i21=57, i22=8, iArr[]=new int[N];
        short s1=-31689;

        FuzzerUtils.init(iArr, 8711);

        iArr[(-32016 >>> 1) % N] *= (int)(((i2 = -210) - (--Test.instanceCount)) % (i1 | 1));
        Test.bFld = Test.bFld;
        vMeth1(14351L, i2, i);
        for (i19 = 5; 159 > i19; i19++) {
            for (i21 = 1; i21 < 10; ++i21) {
                i2 += (i21 * i21);
                Test.instanceCount = Test.byFld;
                dFld = dFld;
                i1 -= (int)Test.instanceCount;
                i2 -= (int)-33811L;
                dFld = i19;
                Test.byFld += (byte)(i21 ^ i22);
                Test.instanceCount += (i21 ^ i2);
                s1 = (short)dFld;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i19 + i20 + i21 + i22 + s1 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=160, i24=-211, i25=33098, i26=19411, i27=-4, i28=-132, iArr3[]=new int[N];
        double d1=-122.72278;
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, 27574);
        FuzzerUtils.init(fArr1, 36.995F);

        vMeth(i23, i23, i23);
        for (d1 = 5; d1 < 390; d1++) {
            for (i25 = 3; i25 < 65; ++i25) {
                i27 = 1;
                do {
                    i26 = (int)Test.fFld;
                    i24 = (int)2327948445280735130L;
                    Test.lArrFld[i25] = i24;
                    if (Test.bFld) {
                        i24 = i24;
                        i24 += i25;
                        switch ((int)((d1 % 6) + 127)) {
                        case 127:
                            switch (((i26 >>> 1) % 1) + 109) {
                            case 109:
                                i23 *= i27;
                                break;
                            }
                            switch ((int)((d1 % 1) + 5)) {
                            case 5:
                                i23 -= i27;
                                Test.instanceCount -= i24;
                                Test.instanceCount -= (long)dFld;
                                Test.instanceCount -= i23;
                            default:
                                i28 = (int)Test.instanceCount;
                                iArr3[i25] >>>= (int)Test.instanceCount;
                                Test.bFld = Test.bFld;
                                fArr1[(int)(d1 - 1)] += i24;
                            }
                            Test.bFld = Test.bFld;
                            try {
                                i24 = (-206259968 / iArr3[(int)(d1 + 1)]);
                                i28 = (i26 % 20);
                                i24 = (iArr3[i27 - 1] % i26);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 128:
                            i23 += (int)Test.fFld;
                            switch (((i25 % 2) * 5) + 49) {
                            case 52:
                                Test.instanceCount -= Test.instanceCount;
                                break;
                            case 55:
                                i24 += (int)-1151804637L;
                                break;
                            }
                            break;
                        case 129:
                            Test.instanceCount += i26;
                            try {
                                i26 = (15 / i25);
                                iArr3[i27 + 1] = (i24 % 15586);
                                i23 = (i27 % -216);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 130:
                            Test.instanceCount -= i23;
                        case 131:
                            i28 <<= i24;
                            break;
                        case 132:
                        }
                    }
                } while (++i27 < 2);
            }
        }

        FuzzerUtils.out.println("i23 d1 i24 = " + i23 + "," + Double.doubleToLongBits(d1) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 iArr3 fArr1 = " + i28 + "," + FuzzerUtils.checkSum(iArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld dFld Test.lArrFld = " + Test.byFld + "," + Double.doubleToLongBits(dFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
