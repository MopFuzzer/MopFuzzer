// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2574568226953954522L;
    public static byte byFld=127;
    public static int iFld=-5434;
    public static double dFld=0.127066;
    public static float fFld=75.26F;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[][]=new float[N][N];
    public volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)28080);
        FuzzerUtils.init(Test.lArrFld, 30L);
        FuzzerUtils.init(Test.dArrFld, 0.13351);
        FuzzerUtils.init(Test.fArrFld, 102.435F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        float f1=0.885F;
        int i8=-19098, i9=19737, i10=5, i11=0, i12=-12, i13=4, iArr1[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -143);
        FuzzerUtils.init(bArr, false);

        f1 -= Test.instanceCount;
        f1 = Test.iFld;
        for (i8 = 4; i8 < 175; ++i8) {
            for (i10 = 1; i10 < 9; i10++) {
                Test.instanceCount = Test.iFld;
                i11 += i10;
                Test.instanceCount += i9;
                iArr1[i8] >>= i10;
            }
            bArr[i8 - 1] = b1;
            i9 += i10;
            i11 >>= i8;
            Test.lArrFld[i8] *= Test.instanceCount;
            for (i12 = i8; i12 < 9; ++i12) {
                i9 += (int)(-15737L + (i12 * i12));
                Test.lArrFld[i8] -= i11;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i7) {

        int i14=-4, i15=-17519, i16=-65448, i17=-9, i18=11, i19=20492, i20=9, iArr2[]=new int[N];
        float f2=0.501F;
        boolean b2=false;

        FuzzerUtils.init(iArr2, 9);

        i7 = (Test.sArrFld[(i7 >>> 1) % N]++);
        vMeth1();
        for (i14 = 18; 364 > i14; i14++) {
            for (i16 = 1; 5 > i16; i16 += 2) {
                if (b2) {
                    i17 = i16;
                    for (i18 = 3; 1 < i18; i18 -= 3) {
                        iArr2 = iArr2;
                        i7 += (i18 + i16);
                        Test.dFld -= f2;
                        i17 = Test.iFld;
                        Test.instanceCount ^= Test.iFld;
                        Test.instanceCount <<= Test.instanceCount;
                        Test.dArrFld[i14 + 1] -= f2;
                        i15 -= i20;
                    }
                }
            }
        }
        long meth_res = i7 + i14 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f2) + i20 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, int i) {

        int i1=-6417, i2=-12, i3=-75, i4=-67, i5=-151, i6=17611, iArr[]=new int[N];
        boolean b=false;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 7);
        FuzzerUtils.init(lArr, 7L);
        FuzzerUtils.init(fArr, 2.705F);

        iArr[(-26227 >>> 1) % N] -= (int)(f + (-(i % (i | 1))));
        iArr[(-34659 >>> 1) % N] = (int)(Test.byFld + (Test.instanceCount * i));
        for (i1 = 17; i1 < 310; i1++) {
            for (i3 = i1; i3 < 6; ++i3) {
                i4 |= (int)Test.instanceCount;
                i &= Integer.reverseBytes((int)((f + Test.instanceCount) * (i3 + i3)));
            }
            for (i5 = 1; i5 < 6; i5++) {
                Test.instanceCount *= (long)(((i2 * i4) - (Test.instanceCount - 97)) * ((--i2) - f));
                if (b) {
                    Test.iFld = (--i);
                } else {
                    lArr[i5 + 1] *= ((++iArr[i1]) + (i2 - (Test.instanceCount - i1)));
                    i2 += (i5 * i5);
                }
                Test.iFld += iMeth(Test.iFld);
                fArr[i1 + 1] -= i6;
                Test.instanceCount += i3;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i21=-5, i22=229, i23=-121, i24=0, i25=12, i26=211, i27=-14, iArr3[]=new int[N];
        long l=-5194387335694772182L;
        boolean b3=false;

        FuzzerUtils.init(iArr3, -52416);

        vMeth(Test.fFld, -52436);
        for (i21 = 10; i21 < 248; ++i21) {
            Test.instanceCount += (long)Test.fFld;
            for (i23 = 106; i23 > i21; i23--) {
                Test.fArrFld[i23 + 1][i23] = 1;
                Test.fFld = i21;
                Test.fFld -= -46929;
                for (l = 1; l > 1; --l) {
                    switch ((int)((l % 6) + 6)) {
                    case 6:
                        i24 -= 9311;
                        i24 >>>= i25;
                        Test.instanceCount = Test.iFld;
                        i26 -= 39704;
                    case 7:
                        iArr3[i23 - 1] *= (int)Test.fFld;
                        i24 -= Test.iFld;
                        Test.instanceCount <<= 5;
                        switch (((i21 % 1) * 5) + 32) {
                        case 35:
                            Test.fFld += (((l * l) + i24) - Test.instanceCount);
                            if (true) break;
                            i24 += (int)l;
                            if (b3) {
                                Test.sArrFld[i23] += (short)Test.instanceCount;
                                if (b3) {
                                    i25 *= i26;
                                    Test.iFld -= i22;
                                } else {
                                    if (false) {
                                        i27 = i21;
                                        i25 <<= i27;
                                    } else {
                                        Test.dFld += i26;
                                        b3 = b3;
                                    }
                                }
                            } else if (b3) {
                                i26 = i22;
                            } else if (true) {
                                Test.lArrFld[i23 - 1] -= (long)-2.22688;
                            } else {
                                Test.dFld *= 5737;
                            }
                            break;
                        }
                        break;
                    case 8:
                        byArrFld[i21 + 1] -= (byte)1135943649L;
                        break;
                    case 9:
                        Test.fFld += ((long)l | (long)Test.fFld);
                    case 10:
                        Test.fArrFld[i21 + 1][i23 + 1] -= 7;
                        break;
                    case 11:
                    default:
                        i25 = i24;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 l i25 = " + i24 + "," + l + "," + i25);
        FuzzerUtils.out.println("i26 b3 i27 = " + i26 + "," + (b3 ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.fFld Test.sArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
