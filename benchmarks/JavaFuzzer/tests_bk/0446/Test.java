// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public volatile double dFld=67.32897;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 2.111F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, 188);

        l <<= (++iArr[(-1 >>> 1) % N]);
        vSmallMeth_check_sum += l + i + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(short s1, double d, int i8) {

        int i9=10, i10=57269, i11=-1114, i12=-147, i13=35763, i14=47849, i15=-34190, i16=-68, iArr2[]=new int[N];
        boolean b1=true, bArr[]=new boolean[N];
        long l1=-36876L;
        byte by=-87;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, 3);

        for (i9 = 4; i9 < 382; ++i9) {
            vSmallMeth(Test.instanceCount, i9);
            bArr[i9 + 1] = b1;
            for (i11 = 1; i11 < 4; ++i11) {
                Test.fArrFld[i9] -= (float)d;
                iArr2[i11] <<= s1;
                for (i13 = 1; i13 < 2; i13++) {
                    i10 >>= (int)l1;
                }
                i14 = (int)Test.instanceCount;
                for (i15 = 1; i15 < 2; i15++) {
                    if (i10 != 0) {
                        vMeth_check_sum += s1 + Double.doubleToLongBits(d) + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 +
                            i13 + i14 + l1 + i15 + i16 + by + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
                i12 += (((i11 * i8) + i12) - by);
                if (b1) {
                    s1 -= (short)-165;
                    iArr2[i11 + 1] -= i11;
                } else if (b1) {
                    iArr2[i9 + 1] += i8;
                } else if (b1) {
                    i8 = (int)l1;
                }
            }
        }
        vMeth_check_sum += s1 + Double.doubleToLongBits(d) + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 + l1
            + i15 + i16 + by + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth() {

        int i1=157, i2=-75, i3=-179, i4=45027, i5=16182, i6=-49444, i7=-53519, i17=-12152, i18=49421, iArr1[]=new
            int[N];
        boolean b=false;
        short s=-29829;
        float f=-1.23F;

        FuzzerUtils.init(iArr1, -189);

        i1 >>>= (i1--);
        for (i2 = 15; i2 < 301; i2++) {
            i3 += i3;
            Test.instanceCount |= (i3--);
            i3 += i2;
            if (b = (((i2 + Test.instanceCount) * Test.instanceCount) != (s + (i1 = (int)Test.instanceCount))))
                continue;
        }
        iArr1[(i2 >>> 1) % N] += (int)(f - (-i3));
        for (i4 = 12; 259 > i4; ++i4) {
            for (i6 = 1; i6 < 7; i6++) {
                vMeth(s, 1.56259, i5);
                f -= f;
                for (i17 = 1; i17 < 2; i17++) {
                    i1 *= (int)-42194L;
                    i7 = 12536;
                    Test.instanceCount >>= i18;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + (b ? 1 : 0) + s + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i17 + i18 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i19=15, i20=35927, i21=-13, i22=43897, i23=-108, i24=-6, i25=28544, i26=31893, iArr3[][]=new int[N][N];
        boolean b2=false;
        short s2=-23009, sArr[]=new short[N];
        float f1=41.349F;
        long l2=16805L;

        FuzzerUtils.init(sArr, (short)-23036);
        FuzzerUtils.init(iArr3, -45106);

        for (int smallinvoc=0; smallinvoc<827; smallinvoc++) vSmallMeth(iMeth() - Test.instanceCount, i19);
        i20 = 1;
        while (++i20 < 213) {
            switch (((i20 % 7) * 5) + 116) {
            case 125:
                if (b2) break;
                i19 = i20;
                Test.instanceCount <<= Test.instanceCount;
                i19 += (-17 + (i20 * i20));
                break;
            case 147:
                for (i21 = 4; 118 > i21; i21++) {
                    i19 = i20;
                    for (i23 = 1; i23 < 2; ++i23) {
                        if (b2) {
                            if (false) continue;
                            s2 = (short)i20;
                            Test.instanceCount -= Test.instanceCount;
                            i19 -= i19;
                        }
                        Test.instanceCount = -14;
                        i22 ^= (int)Test.instanceCount;
                        sArr[i23 + 1] &= (short)i23;
                    }
                    Test.instanceCount += (long)f1;
                    i25 = 1;
                    do {
                        i22 &= (int)Test.instanceCount;
                        i22 &= (int)Test.instanceCount;
                        iArr3 = iArr3;
                        Test.instanceCount += (i25 * Test.instanceCount);
                    } while (++i25 < 2);
                    i26 = 1;
                    do {
                        i22 = (int)-9L;
                        i19 += (((i26 * i19) + Test.instanceCount) - f1);
                        f1 += (((i26 * Test.instanceCount) + l2) - s2);
                        l2 >>>= i21;
                    } while (++i26 < 2);
                }
                i19 = i23;
                break;
            case 130:
                i22 = i20;
                break;
            case 122:
                i24 += (i20 ^ l2);
                break;
            case 131:
                dFld = i24;
                break;
            case 144:
                i22 += (5 + (i20 * i20));
                break;
            case 121:
                iArr3 = iArr3;
                break;
            }
        }

        FuzzerUtils.out.println("i19 i20 b2 = " + i19 + "," + i20 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 s2 f1 = " + i24 + "," + s2 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i25 i26 l2 = " + i25 + "," + i26 + "," + l2);
        FuzzerUtils.out.println("sArr iArr3 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.fArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
