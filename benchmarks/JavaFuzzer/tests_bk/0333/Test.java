// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8319622922667092091L;
    public static int iFld=0;
    public static double dFld=0.14716;
    public static float fFld=2.409F;
    public volatile int iFld1=2;
    public static long lArrFld[][]=new long[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3658238961L);
        FuzzerUtils.init(Test.iArrFld, -27947);
    }

    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i12) {


        Test.iArrFld[(Test.iFld >>> 1) % N] = (int)-1077633024596232897L;
        long meth_res = i12;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(float f1, int i6) {

        int i7=31153, i8=41606, i9=49019, i10=27236, i11=41187;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.36701);

        for (double d : dArr) {
            Test.iFld = (int)((Test.instanceCount - (i6 >>>= Test.iFld)) * ((Test.iFld + i6) - (--Test.iFld)));
        }
        Test.iFld -= (int)(((++Test.instanceCount) * (Test.dFld -= Test.iFld)) + i6);
        for (i7 = 22; i7 < 385; i7++) {
            i9 = 1;
            do {
                Test.iFld *= (int)(++dArr[i9 + 1]);
                Test.iArrFld[(i7 >>> 1) % N] -= (int)(Test.instanceCount = Test.lArrFld[i7 + 1][i7]);
                for (i10 = 1; i10 < 1; ++i10) {
                    Test.iFld -= (-(iMeth1(4023) / 56));
                    f1 *= f1;
                }
                Test.dFld = 58;
                Test.iArrFld = Test.iArrFld;
                f1 += (i9 * i9);
                Test.iArrFld[i9] -= (int)Test.instanceCount;
                Test.instanceCount ^= i6;
            } while (++i9 < 5);
        }
        long meth_res = Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i1) {

        int i2=-39254, i3=20125, i4=-132, i5=-4;
        float f=-70.458F;
        boolean b=true;
        byte by=-63;

        i2 = 1;
        while (++i2 < 225) {
            for (i3 = 7; i3 > 1; --i3) {
                Test.instanceCount = (i3 * -88);
                if (b) {
                    Test.instanceCount += Test.iArrFld[i2 + 1];
                    for (f = i3; 2 > f; f++) {
                        dMeth(f, Test.iFld);
                        Test.iFld = Test.iFld;
                        Test.iFld = (int)-58601L;
                        try {
                            i1 = (-96 % i1);
                            i5 = (i3 % 57080);
                            i1 = (49445 % i1);
                        } catch (ArithmeticException a_e) {}
                        i5 -= (int)f;
                    }
                }
                i4 = (int)f;
                i4 -= 51;
                by = (byte)29147L;
            }
            i1 *= i4;
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + (b ? 1 : 0) + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=42268, i13=-30687, i14=-5;
        boolean b1=true, bArr[]=new boolean[N];
        short s=-21428;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.91F);
        FuzzerUtils.init(bArr, false);

        Test.iFld &= Integer.reverseBytes((int)(-fArr[(Test.iFld >>> 1) % N]));
        Test.lArrFld[(Test.iFld >>> 1) % N] = (Test.lArrFld[(Test.iFld >>> 1) % N] = (Test.lArrFld[(Test.iFld >>> 1) %
            N] = (Test.lArrFld[(Test.iFld >>> 1) % N] = Test.lArrFld[(Test.iFld >>> 1) % N])));
        i = 1;
        do {
            Test.iFld = ((iMeth(Test.iFld) + -105) + -9);
            Test.iArrFld = Test.iArrFld;
            Test.iFld >>= i;
            Test.lArrFld[i + 1][i - 1] -= (long)Test.fFld;
            b1 = b1;
            Test.iFld <<= (int)Test.instanceCount;
            Test.fFld += (((i * Test.instanceCount) + i) - Test.iFld);
            i13 = 1;
            while (++i13 < 90) {
                i14 = 1;
                do {
                    Test.iFld += (23514 + (i14 * i14));
                    Test.instanceCount += i13;
                    Test.iFld = Test.iFld;
                    Test.iArrFld[i13] = (int)Test.instanceCount;
                    Test.iFld -= (int)Test.dFld;
                } while (++i14 < 1);
                Test.dFld -= Test.dFld;
                Test.iArrFld[i + 1] = s;
                Test.iFld >>>= i13;
                Test.iArrFld[(i >>> 1) % N] = i13;
                switch (((i13 % 3) * 5) + 83) {
                case 85:
                    Test.iFld = i;
                    Test.iFld += (((i13 * s) + iFld1) - Test.iFld);
                    Test.iFld >>= i14;
                case 95:
                    iFld1 = -177;
                    fArr[i] = 126;
                    s = (short)Test.instanceCount;
                    break;
                case 97:
                    iFld1 = (int)-1998616326L;
                    Test.lArrFld[i] = Test.lArrFld[i13];
                    break;
                default:
                    bArr[i13] = b1;
                }
            }
        } while (++i < 279);

        FuzzerUtils.out.println("i b1 i13 = " + i + "," + (b1 ? 1 : 0) + "," + i13);
        FuzzerUtils.out.println("i14 s fArr = " + i14 + "," + s + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld iFld1 Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + iFld1 + ","
            + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
