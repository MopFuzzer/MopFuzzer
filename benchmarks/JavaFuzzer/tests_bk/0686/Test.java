// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8248133281068398576L;
    public static short sFld=-18131;
    public static int iFld=2;
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -9L);
        FuzzerUtils.init(Test.fArrFld, -42.631F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, byte by1) {

        float f1=-125.119F;
        double d1=-110.12503;
        int i1=159, i2=5171, i3=4, i4=42942, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6404974344604589959L);
        FuzzerUtils.init(iArr1, 57942);
        FuzzerUtils.init(iArr2, 25);

        f1 += (float)d1;
        i1 = 1;
        do {
            i2 = 1;
            do {
                switch ((i2 % 2) + 26) {
                case 26:
                    for (i3 = 1; 1 < i3; i3--) {
                        i4 += i3;
                        Test.instanceCount = (long)f1;
                        i4 += i3;
                        lArr[i1] += i4;
                        i4 <<= (int)Test.instanceCount;
                        iArr1[i1 + 1] *= i4;
                        iArr1[i3 - 1] |= (int)-54209L;
                        iArr2 = iArr2;
                    }
                    i4 -= 55;
                    Test.instanceCount *= (long)f1;
                case 27:
                    i4 += 10;
                }
            } while (++i2 < 6);
        } while (++i1 < 272);
        vMeth2_check_sum += Double.doubleToLongBits(d) + by1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1() {

        byte by2=112, byArr[][]=new byte[N][N];
        int i5=-62977, i6=-252, i7=65330, i8=-38285, i9=-205, i10=57406, i11=157, i12=18921, iArr3[]=new int[N];
        double d2=30.3369;
        boolean b=true;
        float f2=-2.681F;

        FuzzerUtils.init(iArr3, 3);
        FuzzerUtils.init(byArr, (byte)96);

        vMeth2(-1.41867, by2);
        i5 = i5;
        d2 += i5;
        Test.lArrFld[(i5 >>> 1) % N] |= i6;
        for (i7 = 1; i7 < 187; i7 += 3) {
            if (b) {
                for (i9 = 1; 25 > i9; i9++) {
                    for (i11 = 1; 2 > i11; i11++) {
                        b = b;
                        iArr3[i11 - 1] ^= (int)Test.instanceCount;
                        i12 += (i11 * i11);
                    }
                    switch ((i9 % 2) + 55) {
                    case 55:
                        Test.instanceCount += (((i9 * Test.instanceCount) + i11) - i11);
                        f2 *= 133L;
                        Test.instanceCount *= Test.sFld;
                        break;
                    case 56:
                        b = b;
                    default:
                        byArr[i9][i9] += (byte)90;
                    }
                }
            } else {
                i5 += i7;
            }
        }
        vMeth1_check_sum += by2 + i5 + Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9 + i10 + i11 + i12 + (b ? 1 : 0)
            + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(float f, byte by) {

        int i13=11, i14=-57107, i15=76, i16=-97;
        double d3=-102.124972, d4=-7.12864;

        vMeth1();
        i13 = 1;
        do {
            i14 += i14;
            i14 = i13;
        } while ((i13 += 3) < 394);
        Test.fArrFld[(i13 >>> 1) % N] = -8392259492624343970L;
        if (true) {
            for (d3 = 7; 370 > d3; ++d3) {
                i15 -= i13;
                for (d4 = 1; d4 < 5; d4++) {
                    i14 = (int)Test.instanceCount;
                    switch ((int)(((d3 % 1) * 5) + 16)) {
                    case 18:
                    }
                    i15 = i15;
                }
                i15 += (int)(((d3 * Test.instanceCount) + i13) - i16);
            }
            Test.instanceCount &= 0;
        } else {
            i14 += by;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + by + i13 + i14 + Double.doubleToLongBits(d3) + i15 +
            Double.doubleToLongBits(d4) + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=-5, i17=56, i18=-21720, i19=12889, i20=-9774, i21=-5, i22=-50267, i23=254, iArr[]=new int[N];
        float f3=0.964F, f4=-2.626F;
        byte by3=-121;
        boolean b1=true;
        double d5=-2.75026, dArr[]=new double[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(dArr, 55.105465);

        i = 1;
        while (++i < 209) {
            iArr = (iArr = iArr);
            vMeth(f3, by3);
            Test.iFld *= (int)f3;
            Test.instanceCount = i;
            Test.iFld += -31809;
        }
        for (f4 = 3; f4 < 227; f4++) {
            switch ((int)((f4 % 6) + 122)) {
            case 122:
                i17 += (int)(f4 * f4);
                Test.iFld = (int)Test.instanceCount;
                break;
            case 123:
                Test.instanceCount += (long)f4;
                iArr = iArr;
                if (b1) {
                    iArr[(int)(f4 - 1)] >>= i17;
                    i17 += (int)f4;
                    for (i18 = 5; i18 < 112; i18++) {
                        Test.instanceCount -= i19;
                    }
                    Test.instanceCount ^= i18;
                }
                d5 *= Test.iFld;
                break;
            case 124:
                for (i20 = 112; i20 > 3; i20 -= 3) {
                    f3 -= i20;
                    dArr[i20] += Test.instanceCount;
                    iArr[(int)(f4)] = i17;
                    Test.instanceCount += 13L;
                    iArr[i20 + 1] >>>= -54;
                }
            case 125:
                Test.iFld = i21;
                for (i22 = 112; 4 < i22; --i22) {
                    if (b1) break;
                    i19 = i17;
                    Test.instanceCount >>= -96;
                }
            case 126:
                Test.iFld += (int)f4;
            case 127:
                Test.lArrFld[(int)(f4 + 1)] -= i21;
            default:
                i19 -= 41150;
            }
        }

        FuzzerUtils.out.println("i f3 by3 = " + i + "," + Float.floatToIntBits(f3) + "," + by3);
        FuzzerUtils.out.println("f4 i17 i18 = " + Float.floatToIntBits(f4) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 b1 d5 = " + i19 + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d5));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 iArr dArr = " + i23 + "," + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
