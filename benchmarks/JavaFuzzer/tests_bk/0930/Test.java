// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=134L;
    public static float fFld=-69.171F;
    public static boolean bFld=true;
    public static short sFld=-554;
    public static double dFld=58.43188;
    public static volatile float fArrFld[][]=new float[N][N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -30.667F);
        FuzzerUtils.init(Test.iArrFld, -232);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6) {

        int i7=-149, i8=187, i9=-1, i10=-23178, i11=-5, i12=-1, i13=15987, i14=10;
        boolean b=false;
        byte by=116;
        short s=27624;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 9L);

        for (i7 = 5; i7 < 253; ++i7) {
            if (b) break;
            i8 += i8;
            for (i9 = 7; i9 > 1; --i9) {
                i6 >>>= by;
                i10 = i6;
                for (i11 = 1; i11 < 2; i11++) {
                    lArr[i11] /= -33470;
                }
                i12 += i9;
                i6 = (int)Test.instanceCount;
                for (i13 = 1; i13 < 2; i13++) {
                    i8 = i13;
                    s += (short)(((i13 * Test.instanceCount) + i8) - i7);
                    i6 += i9;
                    if (true) break;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + (b ? 1 : 0) + i9 + i10 + by + i11 + i12 + i13 + i14 + s +
            FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth(long l) {

        int i15=10, i16=-57062, i17=-98, i18=11, i19=-29427, i20=45547, i21=-7;
        double d=0.50527;

        vMeth1(i15);
        Test.fArrFld[(i15 >>> 1) % N][(i15 >>> 1) % N] *= (float)95.66031;
        for (i16 = 9; i16 < 317; ++i16) {
            i15 += (int)d;
            i17 = i17;
            i17 = i16;
            for (i18 = 5; i18 > i16; i18--) {
                i15 = (int)d;
                l = Test.instanceCount;
                Test.fFld *= (float)d;
                for (i20 = 1; i20 < 1; i20++) {
                    i15 ^= (int)45085L;
                    i21 -= -71;
                    Test.bFld = Test.bFld;
                    Test.bFld = Test.bFld;
                }
            }
        }
        long meth_res = l + i15 + i16 + i17 + Double.doubleToLongBits(d) + i18 + i19 + i20 + i21;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=-2, i5=5, i22=25900, i23=90, i24=-204, i25=123, iArr[][]=new int[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)9);
        FuzzerUtils.init(iArr, 24160);

        for (i4 = 3; i4 < 234; ++i4) {
            byte by1=58;
            Test.instanceCount -= (long)(((byArr[i4]--) + (i5 - i3)) * ((i4 + 97) + fMeth(Test.instanceCount)));
            for (i22 = 1; i22 < 7; i22++) {
                double d1=-1.26811;
                Test.instanceCount = Test.instanceCount;
                Test.fFld -= (float)d1;
                for (i24 = 1; i24 < 2; i24 += 2) {
                    if (Test.bFld) break;
                    i25 >>>= i24;
                    i25 += i24;
                }
                Test.fFld = (float)d1;
            }
            by1 += (byte)i4;
            if (Test.bFld) {
                i23 ^= 9;
                iArr[i4 - 1][i4 + 1] = i2;
            } else {
                Test.instanceCount = (long)Test.fFld;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=68, i1=0, i26=34195, i27=-4, i28=-229, i29=-104, i30=253, i31=50741, i32=-3, i33=253, i34=-48068, i35=223;
        double d2=1.121958;

        for (i = 9; i < 383; i++) {
            i1 ^= (int)Test.instanceCount;
            vMeth(i1, i);
            i1 = (int)Test.fFld;
        }
        i26 = 1;
        while (++i26 < 292) {
            Test.iArrFld[i26] *= Test.sFld;
            for (i27 = 3; i27 < 86; ++i27) {
                try {
                    i28 = (385902658 / i28);
                    i1 = (-28356 % Test.iArrFld[i26]);
                    i28 = (Test.iArrFld[i27 + 1] / 152);
                } catch (ArithmeticException a_e) {}
                i1 -= i26;
                for (i29 = 1; i29 < 2; i29++) {
                    Test.dFld *= -401031730638785548L;
                    i30 += (int)Test.instanceCount;
                }
                i1 += (((i27 * i) + Test.instanceCount) - i26);
                Test.dFld = 180L;
                i30 <<= 21822;
                i28 += Test.sFld;
                for (i31 = 1; i31 < 2; i31++) {
                    i30 = 53666;
                }
            }
            i1 += (((i26 * i1) + i29) - Test.fFld);
        }
        Test.iArrFld[(i >>> 1) % N] *= i26;
        i1 += (int)Test.instanceCount;
        Test.iArrFld[(-54732 >>> 1) % N] = i30;
        for (i33 = 243; 2 < i33; --i33) {
            i32 = (int)Test.fFld;
            i32 += i30;
            for (d2 = 1; d2 < 104; d2++) {
                switch ((((-8 >>> 1) % 2) * 5) + 5) {
                case 13:
                    Test.iArrFld[i33 - 1] = i1;
                    Test.fFld = i27;
                case 9:
                    Test.iArrFld[(int)(d2)] += i30;
                    break;
                default:
                    Test.iArrFld[(int)(d2 + 1)] &= i26;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 d2 = " + i33 + "," + i34 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i35 = " + i35);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.dFld Test.fArrFld = " + Test.sFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
