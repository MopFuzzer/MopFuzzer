// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=75L;
    public static double dFld=-1.86972;
    public static volatile float fFld=25.848F;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1097835881L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l, int i3) {

        int i4=-41954, i5=-102, i6=-4, i7=-21012, i8=-34010, i9=-27, i10=19787, i11=6, i12=0, i13=-5, iArr1[][]=new
            int[N][N];
        float f1=-2.523F;
        boolean b=true;

        FuzzerUtils.init(iArr1, -25538);

        try {
            i3 -= i3;
            for (i4 = 2; 249 > i4; ++i4) {
                Test.instanceCount &= l;
            }
            i5 ^= i4;
            i3 = (int)l;
            for (f1 = 9; 244 > f1; f1++) {
                for (i7 = 1; 7 > i7; i7 += 2) {
                    for (i9 = 1; i9 < 3; i9++) {
                        if (b) continue;
                        i3 += (i9 * i9);
                    }
                    l *= i3;
                    for (i11 = 1; 3 > i11; i11 += 3) {
                        iArr1[i7 - 1][i7 + 1] -= (int)f1;
                        l += (i11 * i11);
                    }
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            i13 -= (int)Test.dFld;
        }
        vMeth1_check_sum += i2 + l + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) +
            i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i14=-78, i15=138;
        byte by=-107, byArr[]=new byte[N];
        short s=-2248, s1=22368;
        float f2=1.103F, f3=42.832F;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)-44);
        FuzzerUtils.init(dArr, 2.98360);

        vMeth1(i14, Test.instanceCount, i14);
        i14 >>>= i14;
        Test.instanceCount = Test.instanceCount;
        by = (byte)i15;
        byArr[(10 >>> 1) % N] = (byte)i14;
        Test.lArrFld = Test.lArrFld;
        s += (short)i15;
        i14 = (int)Test.instanceCount;
        f2 = 5L;
        i15 += (int)16668L;
        f3 = 1;
        do {
            i14 = i14;
            if (b1) {
                dArr[(int)(f3 + 1)] = Test.instanceCount;
                i15 *= i14;
            } else {
                i14 = s1;
            }
        } while (++f3 < 178);
        long meth_res = i14 + by + i15 + s + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + (b1 ? 1 : 0) + s1 +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        float f=-38.515F;
        int i16=-22, i17=-8, i18=0, i19=9;
        long l1=50601L;
        boolean b2=true;
        short s2=27037;

        f += iMeth();
        Test.instanceCount *= i16;
        i16 = 12;
        i16 = i16;
        Test.instanceCount ^= -7;
        Test.instanceCount *= i16;
        for (i17 = 4; i17 < 228; ++i17) {
            i18 += (((i17 * i16) + f) - i16);
            f = Test.instanceCount;
            for (l1 = 7; l1 > 1; l1 -= 3) {
                if (b2) continue;
                if (b2) break;
                i19 >>>= -30;
                i16 += (int)(((l1 * l1) + i18) - i19);
                s2 <<= (short)-66;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i16 + i17 + i18 + l1 + i19 + (b2 ? 1 : 0) + s2;
    }

    public void mainTest(String[] strArr1) {

        int i=24517, i1=-5, i21=-43802, i22=7, i23=-439, iArr[]=new int[N];
        long l2=-9L;
        byte by1=-100;
        boolean b3=false;
        short s3=9503;
        float f4=0.1010F;

        FuzzerUtils.init(iArr, -130);

        for (i = 1; 330 > i; i++) {
            iArr[i] >>>= 179;
            Test.instanceCount += (i * i1);
        }
        vMeth();
        Test.instanceCount += 121;
        i1 *= i;
        i1 += i1;
        l2 = 1;
        while (++l2 < 239) {
            if (b3) {
                i1 >>= (int)Test.instanceCount;
                Test.instanceCount -= by1;
            }
        }
        for (int i20 : iArr) {
            i20 -= (int)1.129528;
            iArr[(i >>> 1) % N] <<= -71;
            iArr[(i1 >>> 1) % N] += s3;
            for (i21 = 2; i21 < 63; i21++) {
                i22 += (((i21 * i22) + i21) - i21);
                Test.instanceCount = -6;
                Test.fFld *= Test.instanceCount;
                i1 /= (int)-101L;
                i20 -= (int)Test.dFld;
                i20 <<= -29488;
                for (f4 = i21; f4 < 2; f4++) {
                    Test.instanceCount = 62351;
                    i23 += (int)l2;
                    Test.fFld -= Test.instanceCount;
                    i23 = i20;
                    i22 = (int)Test.instanceCount;
                    s3 *= (short)-12;
                    Test.instanceCount = l2;
                }
            }
        }

        FuzzerUtils.out.println("i i1 l2 = " + i + "," + i1 + "," + l2);
        FuzzerUtils.out.println("by1 b3 s3 = " + by1 + "," + (b3 ? 1 : 0) + "," + s3);
        FuzzerUtils.out.println("i21 i22 f4 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i23 iArr = " + i23 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
