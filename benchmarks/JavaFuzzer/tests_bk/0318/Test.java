// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-64517L;
    public static byte byFld=29;
    public static short sFld=4311;
    public static double dFld=-2.127513;
    public static int iFld=49232;
    public float fFld=-2.468F;
    public static boolean bFld=false;
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 43);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3, int i4) {

        int i5=-16889, i6=-27374, i7=16798, i8=-18429, iArr[]=new int[N];
        float f1=-2.507F;

        FuzzerUtils.init(iArr, -13);

        i3 = i4;
        iArr[(10 >>> 1) % N] %= (int)(Test.byFld | 1);
        i5 = 1;
        do {
            i6 = 9;
            do {
                iArr = iArr;
                Test.sFld += (short)i3;
                i3 *= (int)f1;
                i4 -= 11;
            } while (--i6 > 0);
            i4 = 0;
            for (i7 = 1; i7 < 9; ++i7) {
                f1 = (float)Test.dFld;
                i4 >>= Test.byFld;
                i8 >>= (int)Test.instanceCount;
                Test.instanceCount += (((i7 * i3) + Test.byFld) - i7);
            }
            iArr[i5] *= (int)Test.dFld;
        } while (++i5 < 180);
        long meth_res = i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(byte by, int i2, float f) {

        int i9=100, i10=-9, i11=-3, i12=-1;
        double dArr[][]=new double[N][N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(dArr, -1.13636);
        FuzzerUtils.init(lArr, 8L);

        i2 <<= (int)lMeth(i2, i2);
        for (i9 = 1; i9 < 251; i9++) {
            i2 -= i10;
            i10 = i9;
            dArr[i9][i9 + 1] += i9;
            i11 = 1;
            while (++i11 < 7) {
                dArr[i9 - 1] = dArr[i9];
                i12 = 1;
                do {
                    i2 <<= i10;
                    lArr[i12 + 1][i9] = Test.byFld;
                    i10 += (i12 + i12);
                    i10 = -6;
                    Test.iFld <<= i12;
                    Test.sFld += (short)(6 + (i12 * i12));
                } while (++i12 < 1);
                Test.instanceCount = i12;
            }
        }
        vMeth1_check_sum += by + i2 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, int i1) {

        float f2=2.629F;
        long l=-14L;
        int i13=-2, i14=26144, i15=-182, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -13);

        i = i;
        vMeth1((byte)(12), i1, f2);
        l = 1;
        while (++l < 326) {
            i13 = 5;
            do {
                f2 += i1;
                iArr1 = FuzzerUtils.int1array(N, (int)-24255);
                iArr1[i13 - 1] = i1;
                Test.iFld <<= Test.iFld;
                i1 += (i13 * i13);
                for (i14 = 1; i14 < 2; i14++) {
                    i1 = i1;
                    Test.instanceCount += (((i14 * i1) + i1) - Test.iFld);
                    iArr1[(int)(l)] -= Test.iFld;
                }
                Test.sFld = (short)Test.iFld;
                iArr1[(int)(l + 1)] = (int)Test.instanceCount;
            } while ((i13 -= 2) > 0);
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f2) + l + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i16=-79, i17=-204, i18=-233, i19=24137, i20=-147;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 3L);

        vMeth(Test.iFld, Test.iFld);
        for (i16 = 5; i16 < 248; ++i16) {
            Test.iFld += Test.iFld;
            switch ((i16 % 2) + 55) {
            case 55:
                Test.instanceCount = Test.byFld;
                i18 = 103;
                while (--i18 > 0) {
                    Test.instanceCount -= Test.instanceCount;
                    Test.sFld *= (short)i17;
                    i19 = 1;
                    do {
                        Test.instanceCount += Test.iFld;
                        i17 *= Test.iFld;
                        Test.iArrFld[i16][i16] = 18649;
                        fFld -= i19;
                        Test.iFld += (i19 + i16);
                        i17 += (i19 * i19);
                        try {
                            i17 = (i18 % i19);
                            Test.iFld = (Test.iFld / i17);
                            Test.iFld = (Test.iFld / -76);
                        } catch (ArithmeticException a_e) {}
                        Test.iFld = Test.iFld;
                        i17 %= (int)(i18 | 1);
                        i17 = i18;
                    } while (--i19 > 0);
                    Test.iFld -= 2;
                    Test.iFld -= (int)-219L;
                    switch ((i16 % 6) + 21) {
                    case 21:
                        i20 = 1;
                        do {
                            i17 -= Test.byFld;
                        } while (--i20 > 0);
                        Test.instanceCount += (i18 * i18);
                        Test.bFld = Test.bFld;
                        break;
                    case 22:
                        Test.iArrFld[i16][i18 - 1] = (int)32524L;
                        fFld += Test.instanceCount;
                        Test.byFld = (byte)i17;
                        break;
                    case 23:
                        i17 = Test.iFld;
                    case 24:
                        fFld += (-5 + (i18 * i18));
                        break;
                    case 25:
                        Test.bFld = Test.bFld;
                        break;
                    case 26:
                        lArr1 = FuzzerUtils.long2array(N, (long)-1L);
                        break;
                    default:
                        try {
                            Test.iArrFld[i18][i16] = (i18 % i20);
                            Test.iArrFld[i18 + 1][i16 - 1] = (-245 % i18);
                            Test.iArrFld[i16][i16] = (i19 / i17);
                        } catch (ArithmeticException a_e) {}
                    }
                }
                break;
            case 56:
                i17 += (i16 | i20);
                break;
            default:
                i17 += (i16 * i16);
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 lArr1 = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.iFld fFld = " + Double.doubleToLongBits(Test.dFld) + "," + Test.iFld +
            "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
