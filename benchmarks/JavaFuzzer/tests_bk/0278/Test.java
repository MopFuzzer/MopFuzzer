// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=576L;
    public static int iFld=-29821;
    public static volatile float fFld=117.847F;
    public volatile byte byFld=41;
    public static short sFld=-24741;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static double dArrFld[][]=new double[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
        FuzzerUtils.init(Test.byArrFld, (byte)-31);
        FuzzerUtils.init(Test.dArrFld, -74.19491);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, int i2) {

        short s=17711;
        int i3=103, i4=-41, i5=5, i6=-244, i7=-3928, i8=2, iArr[][]=new int[N][N];
        long l=-2973165329566643043L;

        FuzzerUtils.init(iArr, 154);

        s -= (short)i2;
        i1 = -31700;
        i3 = i1;
        Test.iFld = i3;
        for (i4 = 153; i4 > 6; --i4) {
            for (i6 = i4; 11 > i6; ++i6) {
                Test.instanceCount = 7;
                s -= (short)Test.iFld;
                for (l = 1; 1 > l; l += 3) {
                    iArr = iArr;
                }
            }
            Test.fFld = Test.instanceCount;
            switch ((i4 % 1) + 123) {
            case 123:
                Test.instanceCount -= i8;
                i3 = (int)l;
                break;
            }
            iArr[i4 + 1][i4] |= i6;
        }
        vMeth_check_sum += i1 + i2 + s + i3 + i4 + i5 + i6 + i7 + l + i8 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i9=-57278, i10=9, i11=97, i12=14, i13=-5, i14=-115, i15=0, iArr1[]=new int[N];
        double d=-108.105853;
        byte by=-28;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 2152109161L);
        FuzzerUtils.init(iArr1, -104);

        switch (((Integer.reverseBytes(Test.iFld) >>> 1) % 8) + 24) {
        case 24:
            vMeth(Test.iFld, Test.iFld);
            break;
        case 25:
            for (i9 = 2; 349 > i9; i9++) {
                for (i11 = 1; i11 < 5; i11++) {
                    lArr[i11 - 1] -= i10;
                }
                for (i13 = i9; i13 < 5; ++i13) {
                    Test.instanceCount = (long)-1.689F;
                    try {
                        i14 = (i9 / -7715);
                        i14 = (Test.iFld / 9144);
                        Test.iFld = (iArr1[i13 + 1] / i14);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (long)Test.fFld;
                    i15 = 1;
                    do {
                        Test.iFld += Test.iFld;
                    } while (++i15 < 1);
                    Test.fFld = Test.fFld;
                    Test.instanceCount += i9;
                    i12 = (int)d;
                    Test.instanceCount += (26 + (i13 * i13));
                }
            }
            break;
        case 26:
            lArr[(i13 >>> 1) % N] = i9;
            break;
        case 27:
            Test.instanceCount += 104;
            break;
        case 28:
            i12 += by;
            break;
        case 29:
            Test.iFld -= (int)Test.instanceCount;
            break;
        case 30:
            Test.instanceCount += (long)Test.fFld;
            break;
        case 31:
            iArr1[(i13 >>> 1) % N] += i9;
            break;
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d) + by +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i) {

        int i16=84, i17=-60618, i18=199, i19=-2, i20=-4380;
        boolean b=true;
        byte by1=43, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)48);

        i = (iMeth() - i);
        i16 = 1;
        do {
            if (b) {
                if (b) {
                    i = i16;
                    byArr[i16] = (byte)i16;
                } else {
                    Test.iFld += (int)Test.fFld;
                    for (i17 = 1; 5 > i17; ++i17) {
                        Test.fFld += (((i17 * Test.iFld) + i18) - Test.fFld);
                        for (i19 = 2; i19 > 1; i19--) {
                            i18 -= i20;
                            Test.fFld *= i19;
                            Test.fFld *= Test.instanceCount;
                            i -= (int)Test.fFld;
                            Test.iArrFld[i16] *= (int)Test.instanceCount;
                        }
                    }
                }
            } else {
                i += (((i16 * Test.instanceCount) + by1) - Test.iFld);
            }
        } while (++i16 < 357);
        long meth_res = i + i16 + (b ? 1 : 0) + i17 + i18 + i19 + i20 + by1 + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=22, i22=8119, i23=-12, i24=7, i25=25, i26=6, i27=70, i28=169, i29=-2483, i30=211, i31=-37867;
        long l1=2201225655L;

        Test.instanceCount = lMeth(Test.iFld);
        for (i21 = 3; i21 < 376; i21 += 3) {
            for (i23 = 8; i23 < 202; ++i23) {
                Test.byArrFld[i21 + 1] += (byte)Test.iFld;
            }
            Test.iFld -= i24;
            for (i25 = 10; i25 < 202; ++i25) {
                Test.iArrFld[i21 - 1] = (int)-10L;
                byFld <<= (byte)i21;
            }
            for (l1 = 202; 2 < l1; --l1) {
                switch ((int)((l1 % 1) + 116)) {
                case 116:
                    i27 -= i22;
                    Test.dArrFld[(int)(l1 - 1)][(int)(l1 + 1)] += i23;
                    for (i28 = 1; i28 < 2; ++i28) {
                        i29 += (((i28 * i23) + i25) - i26);
                    }
                    break;
                default:
                    Test.instanceCount = i29;
                    i22 += (int)4872540318315107442L;
                    Test.iFld = Test.sFld;
                    Test.fFld = Test.instanceCount;
                }
                Test.iArrFld[i21] >>= i29;
                Test.fFld *= i23;
                Test.sFld += (short)169;
                for (i30 = (int)(l1); i30 < 2; ++i30) {
                    i27 += i30;
                    Test.instanceCount = l1;
                    Test.iFld += (int)Test.fFld;
                    i27 += i30;
                    Test.instanceCount |= Test.instanceCount;
                    i27 = i23;
                    i27 = i24;
                    i29 += (((i30 * i23) + i29) - i23);
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("l1 i27 i28 = " + l1 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.sFld Test.iArrFld = " + byFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.byArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
