// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-581785872022515415L;
    public static double dFld=2.943;
    public static volatile float fFld=23.433F;
    public static byte byArrFld[]=new byte[N];
    public static volatile int iArrFld[]=new int[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-74);
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.lArrFld, -52196L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=-119, i8=-47311, i9=18, i10=-7, i11=12862, i12=-2, i13=-10, i14=-1;
        boolean b1=false;

        Test.fFld = i7;
        for (i8 = 124; i8 > 3; --i8) {
            Test.instanceCount += i9;
            for (i10 = 13; i10 > 1; --i10) {
                short s=-29851;
                i11 = (int)Test.instanceCount;
                i7 = 105;
                Test.iArrFld[i10] += i9;
                i7 >>= (int)Test.instanceCount;
                s >>= (short)Test.instanceCount;
                for (i12 = 1; i12 < 2; i12++) {
                    boolean b=true;
                    i14 += (((i12 * Test.instanceCount) + s) - s);
                    b = b;
                    try {
                        i13 = (-5 % i7);
                        i13 = (i11 / Test.iArrFld[i10 - 1]);
                        i11 = (i11 % i14);
                    } catch (ArithmeticException a_e) {}
                    i9 = (int)Test.instanceCount;
                }
                b1 = b1;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, int i5) {

        int i6=-109, i15=74, i16=3, i17=63750, iArr[][]=new int[N][N];
        long l1=60697L;
        boolean b2=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, -41802);

        i6 = 1;
        while (++i6 < 219) {
            Test.dFld = i6;
            Test.byArrFld[i6 + 1] %= (byte)(iMeth() | 1);
            i5 += 2;
            i4 += i6;
            switch ((((i4 >>> 1) % 8) * 5) + 10) {
            case 31:
                for (i15 = 1; i15 < 7; ++i15) {
                    Test.fFld += (((i15 * i5) + i4) - Test.instanceCount);
                    i17 = 1;
                    do {
                        i4 = (int)Test.fFld;
                        Test.iArrFld[i6] <<= (int)Test.instanceCount;
                        Test.iArrFld[i17] += (int)1.28305;
                    } while (++i17 < 2);
                    Test.instanceCount *= i15;
                    l1 -= l1;
                }
                i4 -= 129;
                break;
            case 17:
                i4 <<= (int)l1;
                break;
            case 11:
                bArr[i6] = b2;
                break;
            case 29:
                i16 -= (int)Test.fFld;
                break;
            case 37:
                i5 += i6;
                break;
            case 12:
                i5 -= i5;
                break;
            case 42:
                iArr = FuzzerUtils.int2array(N, (int)-25839);
                break;
            case 19:
                Test.instanceCount ^= -20908;
                break;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i15 + i16 + i17 + l1 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static double dMeth(int i) {

        int i1=200, i2=13, i3=-4;
        long l=-84L;
        boolean b3=false;
        byte by=32;

        for (i1 = 7; i1 < 140; ++i1) {
            Test.instanceCount -= i2;
            for (l = 1; l < 12; l++) {
                Test.instanceCount += (61905 + (l * l));
                vMeth(i, i);
                i2 = i2;
                i = i2;
                i3 += (int)(l - i);
                switch ((((i >>> 1) % 6) * 5) + 82) {
                case 103:
                    Test.iArrFld[(int)(l + 1)] = i1;
                    i2 = i3;
                    break;
                case 96:
                    Test.iArrFld[i1 - 1] -= i;
                    Test.lArrFld[(int)(l + 1)] += i;
                    i2 += (0 + (l * l));
                    break;
                case 90:
                case 83:
                    if (b3) break;
                    break;
                case 99:
                    try {
                        i2 = (i1 % i2);
                        i2 = (i2 % Test.iArrFld[(int)(l)]);
                        i2 = (-1738916880 / Test.iArrFld[i1]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 112:
                    Test.byArrFld = Test.byArrFld;
                default:
                    by += (byte)(8013839129097447313L + (l * l));
                }
            }
        }
        long meth_res = i + i1 + i2 + l + i3 + (b3 ? 1 : 0) + by;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-155;

        dMeth(i18);

        FuzzerUtils.out.println("i18 = " + i18);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byArrFld Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) +
            "," + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
