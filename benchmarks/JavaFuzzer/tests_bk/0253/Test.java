// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8020063393389134091L;
    public static int iFld=-64152;
    public static boolean bFld=true;
    public volatile double dFld=25.62870;
    public byte byFld=76;
    public static short sFld=21220;
    public static int iFld1=-10;
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 253);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=4, i5=247, i6=214;
        float f1=-2.539F;
        byte by=119;
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -71.106826);

        i4 = 1;
        do {
            Test.iFld -= (int)f1;
            i5 = 1;
            do {
                Test.iFld >>= by;
                if (b) break;
                f1 = 62496;
                i6 = 1;
                do {
                    dArr[i6] = i4;
                    switch (((i5 % 10) * 5) + 86) {
                    case 90:
                        Test.iFld += (i6 * i6);
                        Test.instanceCount >>= i4;
                        f1 += i6;
                        by = (byte)125;
                        break;
                    case 95:
                        Test.iFld += i5;
                        Test.iFld >>= i4;
                        break;
                    case 107:
                        if (i4 != 0) {
                        }
                        break;
                    case 101:
                        f1 -= Test.iFld;
                        break;
                    case 136:
                        Test.instanceCount *= i6;
                    case 93:
                        Test.iFld -= i6;
                        break;
                    case 98:
                        Test.iFld = 175;
                    case 106:
                    case 91:
                        Test.iFld -= Test.iFld;
                        break;
                    case 113:
                        f1 += i5;
                    }
                } while (++i6 < 1);
            } while (++i5 < 5);
        } while (++i4 < 356);
        long meth_res = i4 + Float.floatToIntBits(f1) + i5 + by + (b ? 1 : 0) + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(float f, long l1) {

        int i3=29168, i7=8, i8=-6, i9=14, i10=11199, i11=52609;
        short s=12284;
        double d=2.82807;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -113.207F);

        Test.iArrFld[(239 >>> 1) % N] = (int)(-((i3 - i3) + (0.584F + (f - i3))));
        switch ((((-(-(i3 + s))) >>> 1) % 5) + 6) {
        case 6:
            i3 *= (int)((-Test.iArrFld[(177 >>> 1) % N]) * ((l1 * -4136189576L) * i3));
            lMeth();
        case 7:
            for (i7 = 183; i7 > 4; i7 -= 2) {
                Test.instanceCount -= l1;
                i8 &= (int)Test.instanceCount;
                Test.instanceCount = i3;
            }
            i3 = 27490;
            d /= (l1 | 1);
            break;
        case 8:
            i9 = 163;
            do {
                for (i10 = 19; i10 > i9; i10 -= 3) {
                    if (Test.bFld) {
                        i8 += i10;
                        i11 %= (int)(Test.iFld | 1);
                    }
                }
            } while ((i9 -= 2) > 0);
            break;
        case 9:
            i3 = (int)94L;
        case 10:
            i11 -= (int)-1289475117047492128L;
        default:
            fArr[(i10 >>> 1) % N] = fArr[(Test.iFld >>> 1) % N];
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + i3 + s + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 +
            i11 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void vMeth(int i2, long l) {

        float f2=-19.481F;
        long l2=-7751462179502668261L;
        double d1=0.114706;
        int i12=0, i13=-210, i14=9, i16=49, i17=10663, i18=-8;

        vMeth1(f2, l);
        i2 = (int)dFld;
        l2 = 1;
        while ((l2 += 3) < 281) {
            for (d1 = 17; d1 > l2; d1--) {
                for (i13 = 1; i13 < 1; i13++) {
                    int i15=-4;
                    i15 = 2609;
                    i14 += i13;
                    Test.iArrFld[(int)(d1 + 1)] -= i14;
                }
                i14 -= i2;
                Test.iFld >>= byFld;
                try {
                    Test.iFld = (1389111523 / i2);
                    Test.iFld = (i13 % i13);
                    i12 = (-44515 % Test.iArrFld[(int)(l2)]);
                } catch (ArithmeticException a_e) {}
                if (Test.bFld) break;
                for (i16 = 1; i16 < 1; i16++) {
                    i12 = i13;
                    Test.iFld <<= i18;
                }
            }
        }
        vMeth_check_sum += i2 + l + Float.floatToIntBits(f2) + l2 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i16
            + i17 + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=127, i1=49822, i19=65486, i20=-50, i21=136, i22=-22, i23=-211;
        float f3=82.704F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8856501409345443443L);

        for (i = 5; i < 293; i++) {
            lArr[i + 1] *= Test.instanceCount;
            i1 += (int)((-(--Test.instanceCount)) + (i1++));
            vMeth(i1, Test.instanceCount);
            for (i19 = 87; i19 > i; --i19) {
                byFld += (byte)i19;
                if (Test.bFld) {
                    i21 = 1;
                    do {
                        Test.sFld += (short)(((i21 * i) + Test.instanceCount) - Test.instanceCount);
                        i20 = -108;
                    } while (++i21 < 1);
                    i1 += 110;
                    Test.instanceCount = i21;
                    Test.iFld -= i1;
                } else if (Test.bFld) {
                    i22 = i19;
                } else {
                    if (Test.bFld) {
                        f3 -= i19;
                        Test.instanceCount += (long)dFld;
                        i23 = 1;
                        do {
                            switch ((i23 % 4) + 80) {
                            case 80:
                                Test.sFld *= (short)f3;
                                Test.iFld1 = Test.sFld;
                                i20 <<= byFld;
                                break;
                            case 81:
                                i22 = i21;
                                Test.iArrFld[i19 + 1] -= i22;
                                i20 *= Test.iFld1;
                                break;
                            case 82:
                                i22 = (int)f3;
                                Test.iFld <<= Test.sFld;
                            case 83:
                                dFld *= 15996;
                                Test.sFld >>= (short)i;
                                i1 >>>= i20;
                                break;
                            default:
                                i22 /= (int)((long)(dFld) | 1);
                            }
                        } while (++i23 < 1);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("f3 i23 lArr = " + Float.floatToIntBits(f3) + "," + i23 + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld byFld Test.sFld = " + Double.doubleToLongBits(dFld) + "," + byFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld = " + Test.iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
