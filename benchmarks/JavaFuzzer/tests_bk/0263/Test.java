// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3625657382L;
    public int iFld=13;
    public static float fFld=-3.619F;
    public static float fFld1=100.544F;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -2);
        FuzzerUtils.init(Test.fArrFld, 0.611F);
        FuzzerUtils.init(Test.sArrFld, (short)-13342);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f1, long l) {

        int i7=9, i8=-13, i9=-30796, i10=31375;
        boolean b=false;
        long l1=-8280L;
        double d=-6.79240;
        short s=24847;

        for (i7 = 385; 23 < i7; --i7) {
            if (b) break;
            for (l1 = 1; l1 < 5; l1++) {
                Test.iArrFld[i7] = i7;
                Test.instanceCount += l1;
                i9 >>= (int)Test.instanceCount;
                d = 1;
                do {
                    Test.instanceCount += (long)(((d * i8) + i9) - f1);
                    i9 = i7;
                    s -= (short)i7;
                    i8 >>= i8;
                    b = false;
                    i10 <<= i8;
                    Test.iArrFld[(int)(l1 - 1)] += i9;
                    l = 19330;
                } while (++d < 2);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l + i7 + i8 + (b ? 1 : 0) + l1 + i9 + Double.doubleToLongBits(d) + s
            + i10;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=9, i6=-13, i11=11, i12=14;
        long l2=12L, lArr[]=new long[N];
        boolean b1=false;

        FuzzerUtils.init(lArr, 4050051249L);

        for (i5 = 386; i5 > 2; i5 -= 2) {
            Test.iArrFld[i5 - 1] = (int)(i6 - (i5 + (-Test.fFld)));
        }
        Test.iArrFld[(i4 >>> 1) % N] = (iMeth1(Test.fFld, Test.instanceCount) * i5);
        i4 = i6;
        for (i11 = 9; i11 < 250; ++i11) {
            switch (((i11 >>> 1) % 5) + 24) {
            case 24:
                Test.iArrFld[i11] -= (int)Test.instanceCount;
                i6 += (int)Test.instanceCount;
                break;
            case 25:
                l2 = 1;
                do {
                    i6 *= (int)l2;
                    lArr[(int)(l2)] %= (i11 | 1);
                    Test.fArrFld[i11 - 1] += i4;
                    if (b1) break;
                    Test.instanceCount += Test.instanceCount;
                    Test.fArrFld[i11 + 1] += 24L;
                } while (++l2 < 7);
                break;
            case 26:
                i12 += i11;
            case 27:
                if (b1) break;
                break;
            case 28:
                i6 = i12;
                break;
            default:
                Test.sArrFld[i11] = (short)i5;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i11 + i12 + l2 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i, byte by, int i1) {

        int i2=-32080, i3=-249, i13=-6975, i14=11;
        float f=2.1017F;
        double d1=-1.54628, d2=-94.95874;
        short s1=-16993;
        long lArr1[][]=new long[N][N], lArr2[]=new long[N];

        FuzzerUtils.init(lArr1, -8814805272512383613L);
        FuzzerUtils.init(lArr2, 2130639780979386665L);

        i2 = 1;
        do {
            for (f = 1; 6 > f; f++) {
                vMeth(i1);
                i13 = 1;
                while ((i13 += 2) < 2) {
                    i *= (int)d1;
                    Test.iArrFld[i13 + 1] *= i3;
                    i -= i1;
                    lArr1[(int)(f)][i2] -= i13;
                }
                Test.instanceCount -= i13;
            }
        } while (++i2 < 291);
        d2 = 1;
        while (++d2 < 338) {
            try {
                i1 = (i13 / 40566);
                i3 = (1966 / Test.iArrFld[(int)(d2)]);
                i3 = (i3 / -221);
            } catch (ArithmeticException a_e) {}
            i += (int)399048332749379707L;
        }
        Test.iArrFld[(i >>> 1) % N] += -52788;
        Test.instanceCount <<= s1;
        lArr1[(i14 >>> 1) % N][(-52076 >>> 1) % N] = 15350;
        long meth_res = i + by + i1 + i2 + Float.floatToIntBits(f) + i3 + i13 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(d2) + s1 + i14 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by1=45;
        int i15=-33658, i16=6, i17=84, i18=-38659, i20=-16722, i21=299, i22=-9, i23=-65;
        boolean b2=true, b3=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.iArrFld[(iFld >>> 1) % N] += (int)(Test.instanceCount >>= (Test.instanceCount--));
        iFld -= iMeth(iFld, by1, iFld);
        Test.iArrFld[(iFld >>> 1) % N] -= iFld;
        for (i15 = 16; i15 < 395; i15++) {
            if (b2) break;
            bArr[i15 - 1] = b3;
            Test.fFld -= Test.fFld;
        }
        Test.instanceCount = i15;
        for (i17 = 1; i17 < 177; ++i17) {
            i20 = 1;
            while (++i20 < 143) {
                Test.fFld += Test.instanceCount;
                i16 += i16;
                iFld -= iFld;
                bArr[(i17 >>> 1) % N] = b2;
                for (i21 = i20; i21 < 1; ++i21) {
                    Test.fFld1 -= i16;
                    i18 += (((i21 * i20) + i18) - Test.instanceCount);
                    Test.fFld1 *= i15;
                    i16 = (int)Test.fFld1;
                    i18 += -16412;
                    lArrFld[i17 + 1] = i17;
                    try {
                        i22 = (-55 % Test.iArrFld[i21 - 1]);
                        i16 = (130 % i20);
                        i22 = (i17 % 12587);
                    } catch (ArithmeticException a_e) {}
                    iFld += i21;
                }
                if (b2) {
                    Test.iArrFld[i17 + 1] ^= i18;
                    i23 = 1;
                    while (++i23 < 1) {
                        Test.instanceCount = i23;
                        i18 -= (int)Test.instanceCount;
                        i16 += (-5 + (i23 * i23));
                        lArrFld[i23 - 1] = iFld;
                    }
                } else if (b2) {
                    Test.iArrFld[i20 - 1] <<= by1;
                } else if (b2) {
                    i16 += (8 + (i20 * i20));
                } else {
                    Test.iArrFld[i20] += i15;
                }
            }
        }

        FuzzerUtils.out.println("by1 i15 i16 = " + by1 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("b2 b3 i17 = " + (b2 ? 1 : 0) + "," + (b3 ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("i18 i20 i21 = " + i18 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 bArr = " + i22 + "," + i23 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.fFld1 Test.iArrFld Test.fArrFld = " + Float.floatToIntBits(Test.fFld1) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.sArrFld lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
