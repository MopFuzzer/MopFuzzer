// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=164L;
    public static double dFld=-2.115610;
    public static byte byFld=-25;
    public static short sFld=-22277;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -123);
        FuzzerUtils.init(Test.fArrFld, 0.572F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, float f2, int i8) {

        int i9=-36205, i10=4457, i11=-2927, i12=-56, i13=-45032, i14=-8;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, 40300L);
        FuzzerUtils.init(bArr, false);

        lArr[(-90 >>> 1) % N] = i8;
        Test.byFld = (byte)-170L;
        for (i9 = 5; i9 < 169; ++i9) {
            i10 *= (int)Test.instanceCount;
            for (i11 = 1; 10 > i11; ++i11) {
                i10 = (int)Test.instanceCount;
                for (i13 = 1; i13 < 2; i13++) {
                    boolean b=true;
                    Test.dFld -= f2;
                    i12 *= i9;
                    bArr[i13 + 1] = b;
                    i12 += (i13 - i9);
                    i10 = i11;
                    i7 += i11;
                    if (b) continue;
                    i7 = (int)f2;
                }
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i6, double d) {

        float f3=26.240F;
        int i15=-77, i16=-4, i17=-5, i18=146, i19=16084, i20=1083;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -309597385L);

        i6 -= (iMeth(i6, f3, i6) + i6);
        i6 += (int)-37493L;
        Test.iArrFld[(-7 >>> 1) % N] = i6;
        Test.iArrFld[(i15 >>> 1) % N] *= (int)f3;
        for (i16 = 18; i16 < 388; i16++) {
            if (i6 != 0) {
                vMeth1_check_sum += i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + i15 + i16 + i17 + i18
                    + i19 + i20 + FuzzerUtils.checkSum(lArr1);
                return;
            }
            lArr1[i16] -= i6;
            i15 = i15;
        }
        lArr1[(i6 >>> 1) % N] -= i15;
        for (i18 = 2; i18 < 253; i18++) {
            Test.instanceCount >>>= Test.instanceCount;
            i15 += i16;
        }
        i20 = 1;
        do {
            f3 -= Test.instanceCount;
            i19 *= (int)Test.instanceCount;
        } while (++i20 < 141);
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + i15 + i16 + i17 + i18 + i19 +
            i20 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i2, int i3, int i4) {

        short s=-7015;
        int i5=-5, i21=-12, i22=18835, i23=-36;
        float f1=1.990F;

        s %= (short)-9347;
        i3 *= i2;
        i5 = 1;
        while (++i5 < 335) {
            Test.iArrFld[i5] -= (int)((long)(Test.iArrFld[i5 - 1] - (f1--)) & i3);
            vMeth1(i2, Test.dFld);
        }
        i2 += 0;
        i21 = 327;
        do {
            Test.iArrFld = Test.iArrFld;
        } while (--i21 > 0);
        Test.fArrFld[(i4 >>> 1) % N] -= Test.instanceCount;
        Test.iArrFld[(i5 >>> 1) % N] = (int)Test.instanceCount;
        i4 += -5;
        f1 += 212L;
        for (i22 = 13; i22 < 228; i22++) {
            i3 ^= i22;
            i3 = 192;
        }
        vMeth_check_sum += i2 + i3 + i4 + s + i5 + Float.floatToIntBits(f1) + i21 + i22 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i=-219, i1=109, i24=-11768, i25=4, i26=-62183, i27=14, i28=-33458, i29=1, i30=57, iArr[]=new int[N];
        float f=91.950F;
        byte by=5;
        boolean b1=true;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr, 190);
        FuzzerUtils.init(lArr2, -3L);

        i += (int)((f++) - ((i + Test.dFld) - (Test.instanceCount << by)));
        i >>= i;
        i1 = 1;
        do {
            i += i1;
            i /= (int)((-((i + Test.instanceCount) - (i *= (int)Test.instanceCount))) | 1);
            Test.instanceCount = i1;
            Test.instanceCount -= (by *= (byte)(--iArr[i1]));
        } while (++i1 < 383);
        vMeth(170, i1, i1);
        i24 = 1;
        do {
            i = (int)Test.instanceCount;
            for (i25 = 108; 4 < i25; i25--) {
                i26 += i25;
                iArr[i25 + 1] = i26;
                for (i27 = i24; i27 < 2; ++i27) {
                    Test.instanceCount += Test.sFld;
                }
                Test.sFld = (short)Test.instanceCount;
            }
            Test.instanceCount >>= Test.sFld;
            if (b1) {
                Test.instanceCount += -6;
                Test.instanceCount += -61767;
                lArr2[i24][(i24 >>> 1) % N] = i27;
                i26 += i;
            } else {
                Test.instanceCount = Test.instanceCount;
                Test.instanceCount -= i26;
                Test.iArrFld[i24 - 1] >>= i24;
                Test.iArrFld[i24 + 1] = i27;
            }
            for (i29 = 2; i29 < 108; ++i29) {
                i30 += (int)Test.instanceCount;
                i -= i;
                i ^= (int)-13L;
            }
        } while (++i24 < 232);

        FuzzerUtils.out.println("i f by = " + i + "," + Float.floatToIntBits(f) + "," + by);
        FuzzerUtils.out.println("i1 i24 i25 = " + i1 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("b1 i29 i30 = " + (b1 ? 1 : 0) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("iArr lArr2 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.iArrFld Test.fArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
