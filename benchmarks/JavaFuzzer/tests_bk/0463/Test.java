// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-182L;
    public static double dFld=-2.37064;
    public boolean bFld=false;
    public int iFld=9;
    public static long lArrFld[]=new long[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3501304770271379911L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=-239, i5=-23034, i6=-178, i7=52545, iArr1[]=new int[N];
        float f1=2.20F;
        byte by1=-89;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(lArr, -214L);

        i3 = 1;
        while (++i3 < 239) {
            try {
                i2 = (i3 / i2);
                i2 = (-18736 / iArr1[i3 + 1]);
                i2 = (i3 % -2095358547);
            } catch (ArithmeticException a_e) {}
            lArr[i3] *= (long)f1;
            switch (((-112 >>> 1) % 1) + 26) {
            case 26:
                i5 = 7;
                do {
                    i2 >>= i2;
                    iArr1 = iArr1;
                    i2 /= (int)-57698L;
                    i2 += (int)Test.instanceCount;
                } while (--i5 > 0);
                for (i6 = 7; i6 > 1; --i6) {
                    i7 += (((i6 * i7) + i3) - i7);
                    i7 = 62901;
                    i2 <<= i7;
                    lArr[i3] = (long)Test.dFld;
                    i7 += (int)-68.81457;
                }
                break;
            default:
                Test.instanceCount -= by1;
            }
        }
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f1) + i5 + i6 + i7 + by1 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, long l, byte by) {

        int i8=-11, i9=-9, i10=-242, i11=-43087, i12=28, iArr2[]=new int[N];
        short s=3737, sArr[]=new short[N];
        long l1=-8093L;

        FuzzerUtils.init(sArr, (short)26492);
        FuzzerUtils.init(iArr2, 6602);

        vMeth1(i8);
        i8 = (int)f;
        i9 = 1;
        do {
            Test.dFld *= 2.209F;
            s -= (short)i8;
            Test.lArrFld[i9 - 1] += i9;
            sArr[i9] += (short)i8;
            Test.dFld = 3;
            s += (short)(((i9 * by) + i8) - i8);
            l1 = i8;
            i8 += i9;
        } while (++i9 < 298);
        s *= (short)i10;
        for (i11 = 8; i11 < 291; ++i11) {
            i12 -= (int)f;
            iArr2[i11 + 1] = i8;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + by + i8 + i9 + s + l1 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static float fMeth(int i1) {

        float f2=-2.801F;
        byte by2=106, byArr[]=new byte[N];
        int i13=5, i14=6, i15=145, i16=-183, i17=123, i18=-50685;

        FuzzerUtils.init(byArr, (byte)125);

        vMeth(f2, Test.instanceCount, by2);
        byArr[(13 >>> 1) % N] += (byte)i1;
        i1 = i1;
        for (i13 = 8; i13 < 274; i13++) {
            Test.dFld = Test.instanceCount;
            for (i15 = 1; i15 < 6; i15 += 2) {
                for (i17 = 1; 3 > i17; i17++) {
                    i16 = i16;
                    by2 *= (byte)i13;
                    Test.instanceCount += -43534;
                    Test.dFld -= by2;
                    switch (((i13 % 1) * 5) + 90) {
                    case 93:
                        Test.dFld *= i1;
                        i16 = by2;
                        break;
                    default:
                        Test.instanceCount += -10;
                    }
                }
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f2) + by2 + i13 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(byArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5100, i19=27287, i20=-67, i21=10, i22=-8, i23=7, i24=3, i25=-17, iArr[]=new int[N];
        float f3=-22.621F;
        byte by3=4;
        long l3=-4002856222L, l4=8418L;

        FuzzerUtils.init(iArr, -3);

        i += i;
        Test.instanceCount >>= (--iArr[(i >>> 1) % N]);
        Test.instanceCount -= (long)(fMeth(i) - i);
        for (long l2 : Test.lArrFld) {
            for (i19 = 2; 63 > i19; i19++) {
                f3 = i19;
            }
            f3 += i19;
            i = i;
            for (i21 = 3; 63 > i21; ++i21) {
                f3 += i21;
                iArr[i21 - 1] = (int)Test.dFld;
                iArr[i21 - 1] = i22;
            }
            switch (((i21 >>> 1) % 9) + 66) {
            case 66:
                by3 = (byte)i22;
                break;
            case 67:
                for (i23 = 3; i23 < 63; ++i23) {
                    i24 = i24;
                    i20 += (((i23 * i) + i22) - l2);
                    bFld = bFld;
                    iArr[i23 - 1] *= (int)l3;
                    try {
                        i22 = (102 % i19);
                        i24 = (i19 / -103);
                        i20 = (i21 / iArr[i23]);
                    } catch (ArithmeticException a_e) {}
                    switch (((i23 >>> 1) % 7) + 61) {
                    case 61:
                        i20 += 35118;
                        break;
                    case 62:
                        if (bFld) {
                            i24 += i23;
                        } else {
                            Test.instanceCount *= i22;
                            i24 = by3;
                            dArrFld[i23 + 1] = Test.dFld;
                        }
                        for (l4 = 1; l4 < 2; ++l4) {
                            iArr[i23] += i24;
                            i25 -= 115;
                        }
                        break;
                    case 63:
                        Test.dFld *= 0.79665;
                        break;
                    case 64:
                        iArr = FuzzerUtils.int1array(N, (int)-173);
                        break;
                    case 65:
                        i25 = (int)f3;
                        break;
                    case 66:
                        l2 >>>= -22;
                        break;
                    case 67:
                        Test.instanceCount += (((i23 * f3) + f3) - f3);
                        break;
                    default:
                        l3 += i19;
                    }
                }
                break;
            case 68:
                iArr[(i22 >>> 1) % N] = i21;
                break;
            case 69:
            case 70:
                i *= 29976;
                break;
            case 71:
                i25 += (int)l4;
            case 72:
                i >>= i19;
                break;
            case 73:
                i += (int)l4;
            case 74:
                by3 >>>= (byte)5;
                break;
            }
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f3 i21 i22 = " + Float.floatToIntBits(f3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by3 i23 i24 = " + by3 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("l3 l4 i25 = " + l3 + "," + l4 + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld Test.lArrFld dArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
