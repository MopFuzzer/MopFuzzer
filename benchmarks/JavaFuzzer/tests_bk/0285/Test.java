// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:00 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-37911L;
    public static float fFld=-2.638F;
    public static long lFld=0L;
    public byte byFld=117;
    public static volatile boolean bFld=true;
    public short sFld=-11846;
    public int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i8=-11, i9=44243, i10=-2, iArr[]=new int[N];
        boolean b=false;
        byte by=-109;
        double d1=2.125117;
        short s=-29630;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6862207546822151529L);
        FuzzerUtils.init(iArr, 30977);

        lArr[(i8 >>> 1) % N] = i8;
        Test.bArrFld[(i8 >>> 1) % N][(i8 >>> 1) % N] = b;
        i8 += (int)Test.instanceCount;
        by -= (byte)d1;
        i8 += -2;
        i8 = s;
        i8 = i8;
        switch ((((i8 >>> 1) % 1) * 5) + 123) {
        case 128:
            for (i9 = 264; i9 > 12; i9 -= 2) {
                Test.instanceCount = i10;
            }
            break;
        default:
            lArr[(i10 >>> 1) % N] += 3320;
            i8 += by;
            iArr[(i9 >>> 1) % N] = (int)Test.instanceCount;
            iArr[(i8 >>> 1) % N] += (int)Test.fFld;
        }
        vMeth2_check_sum += i8 + (b ? 1 : 0) + by + Double.doubleToLongBits(d1) + s + i9 + i10 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i5, int i6, int i7) {


        vMeth2();
        vMeth1_check_sum += i5 + i6 + i7;
    }

    public static void vMeth(long l) {

        int i3=52060, i4=-7195, i11=37432, iArr1[][]=new int[N][N];
        double d=24.77882, d2=0.71152;
        byte by1=-110, byArr[]=new byte[N];
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-26);
        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(lArr1, -37L);

        Test.instanceCount -= (long)(((++i3) - (l + Test.fFld)) + d);
        byArr[(i3 >>> 1) % N] -= (byte)(0.780F + (-(i3 * -124)));
        i4 = 164;
        do {
            Test.fFld = i3;
            vMeth1(i4, i4, i3);
            i3 = (int)l;
            i3 ^= i4;
            i3 += (((i4 * l) + i3) - l);
            iArr1[i4][i4] += (int)Test.lFld;
            lArr1[i4 - 1] = i4;
            Test.lFld = (long)Test.fFld;
            for (d2 = 1; d2 < 19; d2 += 2) {
                if (b1) {
                    Test.fFld *= by1;
                }
                iArr1[i4][(int)(d2 + 1)] = -1;
            }
        } while ((i4 -= 2) > 0);
        vMeth_check_sum += l + i3 + Double.doubleToLongBits(d) + i4 + Double.doubleToLongBits(d2) + i11 + by1 + (b1 ? 1
            : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-164, i1=137, i2=-20, i12=40289, i13=32743, iArr2[][]=new int[N][N];
        double d3=1.59686, dArr[]=new double[N];
        long lArr2[]=new long[N];

        FuzzerUtils.init(dArr, 95.20340);
        FuzzerUtils.init(lArr2, -3022533108L);
        FuzzerUtils.init(iArr2, 33355);

        for (i = 139; 2 < i; --i) {
            iArrFld[i] += (++iArrFld[i - 1]);
            iArrFld[i] = -36;
            if (Test.bFld) {
                i1 >>= (int)(i * (--Test.fFld));
                i2 = 1;
                while (++i2 < 183) {
                    dArr = (dArr = (dArr = (dArr = dArr)));
                    i1 = (int)(Test.fFld + (++i1));
                    vMeth(Test.instanceCount);
                    Test.instanceCount = Test.lFld;
                    i1 = (int)-98L;
                    i1 = (int)Test.instanceCount;
                    for (i12 = 1; i12 < 1; ++i12) {
                        d3 += d3;
                        switch ((i % 6) + 27) {
                        case 27:
                            i1 += (((i12 * Test.instanceCount) + Test.lFld) - Test.fFld);
                            dArr[i12 - 1] *= 18707;
                            break;
                        case 28:
                            i13 <<= 5;
                            i13 += byFld;
                            break;
                        case 29:
                            i13 = (int)Test.lFld;
                            iArrFld[(i12 >>> 1) % N] >>= i;
                            Test.fFld *= 95.794F;
                            break;
                        case 30:
                            if (Test.bFld) break;
                            i13 = i13;
                            lArr2[i - 1] /= (sFld | 1);
                            iArrFld[i + 1] >>= 55;
                            break;
                        case 31:
                            Test.fFld += (i12 * i12);
                            iArr2 = iArr2;
                            Test.fFld += Test.fFld;
                            if (false) break;
                        case 32:
                            if (Test.bFld) break;
                            break;
                        }
                    }
                }
            } else {
                Test.instanceCount *= i12;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i12 i13 d3 = " + i12 + "," + i13 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("dArr lArr2 iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.lFld);
        FuzzerUtils.out.println("byFld Test.bFld sFld = " + byFld + "," + (Test.bFld ? 1 : 0) + "," + sFld);
        FuzzerUtils.out.println("iArrFld Test.bArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
