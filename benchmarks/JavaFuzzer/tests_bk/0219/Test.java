// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=51978L;
    public static int iFld=10;
    public byte byFld=-62;
    public double dFld=0.17553;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.59031);
        FuzzerUtils.init(Test.iArrFld, 170);
    }

    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        int i8=13, i9=-5, i10=9, i11=25460, i12=242, i13=-2, i14=-55066, iArr[]=new int[N];
        float f1=57.304F;
        double d2=96.86890;
        short s=2616;
        boolean b1=true, bArr[]=new boolean[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)14);
        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(bArr, false);

        i8 *= (int)l;
        f1 *= Test.instanceCount;
        for (i9 = 6; 394 > i9; i9++) {
            d2 += i9;
            for (i11 = 1; i11 < 4; i11++) {
                s += (short)(((i11 * l) + s) - i9);
                switch (((i11 % 9) * 5) + 47) {
                case 65:
                    i12 = i8;
                case 66:
                    i10 |= (int)Test.instanceCount;
                    for (i13 = 1; i13 < 2; i13++) {
                        boolean b=true;
                        b = b;
                        byArr[i13 + 1] = (byte)i11;
                        l = (long)d2;
                        f1 -= i13;
                        i14 >>= -32;
                    }
                    break;
                case 54:
                    iArr[i11 - 1] += i14;
                    break;
                case 59:
                    f1 *= i14;
                    break;
                case 70:
                    bArr[i9 + 1] = b1;
                    break;
                case 60:
                    i10 += i14;
                    break;
                case 76:
                    i8 <<= (int)49500L;
                case 89:
                    l += (i11 + i9);
                    break;
                case 48:
                default:
                    i8 = -44924;
                }
            }
        }
        vMeth_check_sum += l + i8 + Float.floatToIntBits(f1) + i9 + i10 + Double.doubleToLongBits(d2) + i11 + i12 + s +
            i13 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth(int i, int i1) {

        int i2=-79, i3=-103, i4=-38031, i5=-8, i6=-7, i7=81, i15=-64571, i16=3, i17=224, i18=24142;
        float f=-1.328F;
        double d1=0.36650;

        for (i2 = 303; i2 > 2; i2 -= 3) {
            byte by1=-77;
            Test.instanceCount += (-236 + (i2 * i2));
            i3 -= (((i2 - 137) + i2) * i1);
            f -= by1;
        }
        d1 += 153;
        for (i4 = 13; 396 > i4; i4++) {
            byte by2=28;
            i += (int)(i * (by2 * (i3 - d1)));
            for (i6 = 4; i6 > 1; --i6) {
                vMeth(Test.instanceCount);
            }
            if (i != 0) {
            }
            i7 |= (int)10L;
            for (i15 = 4; i15 > 1; i15 -= 2) {
                for (i17 = 1; i17 < 4; i17++) {
                    Test.instanceCount += Test.instanceCount;
                    Test.instanceCount += (i17 - i4);
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1) + i4 + i5 + i6 + i7 +
            i15 + i16 + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public byte byMeth(byte by, double d) {

        int i19=4510, i20=-9410, i21=31139, i22=60, i23=-51274, i24=-47887, i25=-157, iArr1[]=new int[N];
        float f2=-2.69F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(sArr, (short)-11099);

        lMeth(i19, i19);
        for (i20 = 5; 283 > i20; ++i20) {
            i19 -= i20;
            f2 = i20;
            f2 += (-4701817347416405327L + (i20 * i20));
            for (i22 = 1; 6 > i22; ++i22) {
                i21 += i23;
                i21 = (int)1.69860;
                i23 = i19;
            }
        }
        for (i24 = 3; i24 < 152; ++i24) {
            i25 = (int)Test.instanceCount;
            iArr1[i24] = Test.iFld;
            sArr = sArr;
            i19 = (int)213L;
            Test.iFld -= (int)Test.instanceCount;
        }
        long meth_res = by + Double.doubleToLongBits(d) + i19 + i20 + i21 + Float.floatToIntBits(f2) + i22 + i23 + i24
            + i25 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i27=28759, i28=-1, i29=180, i30=12, i31=0, i33=4, i34=7, i35=-188, i36=7;
        float f4=-1.428F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.91F);

        byMeth(byFld, dFld);
        i27 = 1;
        while (++i27 < 150) {
            switch ((((Test.iFld >>> 1) % 3) * 5) + 76) {
            case 91:
                Test.iFld -= (int)Test.instanceCount;
                for (i28 = 6; i28 < 167; ++i28) {
                    int i32=-247;
                    for (i30 = 1; i30 < 2; i30++) {
                        float f3=30.593F;
                        f3 = Test.instanceCount;
                        Test.instanceCount += (243L + (i30 * i30));
                        Test.instanceCount += (long)dFld;
                        switch ((i30 % 2) + 102) {
                        case 102:
                            i31 = 26;
                            Test.instanceCount += (long)-6.281F;
                            break;
                        case 103:
                            f3 *= -2.994F;
                            try {
                                Test.iFld = (i29 % -40660);
                                Test.iFld = (i29 / i27);
                                Test.iFld = (-75 % Test.iArrFld[i28 - 1]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                    }
                    Test.iFld += i32;
                    Test.iFld += (i28 * i28);
                    i29 -= i30;
                    Test.iFld += i28;
                    Test.instanceCount += i27;
                }
                i29 += (i27 * Test.instanceCount);
                Test.instanceCount += 63037;
                break;
            case 80:
                Test.iFld %= (int)1.454F;
                i29 &= 4;
                for (i33 = 8; i33 < 167; ++i33) {
                    for (i35 = 1; i35 < 2; ++i35) {
                        i29 = (int)Test.instanceCount;
                        Test.instanceCount += i30;
                        fArr[i33] -= i35;
                        Test.iArrFld[i27 + 1] -= i31;
                    }
                    f4 += (-1.181F + (i33 * i33));
                }
                break;
            case 78:
                Test.instanceCount = i35;
                break;
            default:
                Test.iArrFld = Test.iArrFld;
            }
        }

        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i33 = " + i30 + "," + i31 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("f4 fArr = " + Float.floatToIntBits(f4) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld byFld = " + Test.instanceCount + "," + Test.iFld + "," +
            byFld);
        FuzzerUtils.out.println("dFld Test.dArrFld Test.iArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
