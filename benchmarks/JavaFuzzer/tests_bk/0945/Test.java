// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=189L;
    public static volatile double dFld=78.116547;
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 403483% 60);
        FuzzerUtils.init(Test.fArrFld, 100.777F);
        FuzzerUtils.init(Test.iArrFld, -9);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static int iMeth() {

        int i5=-11283, i6=-17824, iArr1[]=new int[N];
        double d2=-2.73457;
        float f=-112.89F;

        FuzzerUtils.init(iArr1, 12);

        for (i5 = 130; i5 > 6; i5--) {
            i6 += (i5 - i6);
            i6 += (i5 ^ i5);
        }
        d2 = Math.min(i6++, (int)(i6 ^= (int)(f + i6)));
        Test.instanceCount = (i6 *= (++iArr1[(-16617 >>> 1) % N]));
        long meth_res = i5 + i6 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(boolean b1, int i10, int i11) {

        int i12=100, i13=-225, i14=254, i15=-61433;

        for (float f4 : Test.fArrFld) {
            f4 = i10;
            b1 = b1;
            f4 *= i10;
            i10 -= (int)Test.instanceCount;
            for (i12 = 1; i12 < 4; ++i12) {
                Test.lArrFld[i12 + 1] -= i10;
                for (i14 = 1; i14 < 2; i14++) {
                    double d4=28.16534;
                    Test.instanceCount *= i14;
                    b1 = b1;
                    d4 = i12;
                    f4 *= i13;
                    i15 += (-68 + (i14 * i14));
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)12);
                    i15 = 9;
                }
            }
        }
        long meth_res = (b1 ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + i15;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s, int i9, boolean b) {

        float f3=0.152F;
        double d3=0.71919, dArr1[]=new double[N];
        int i16=165, i17=958, i18=79, i19=-2, i20=-40592, iArr3[][]=new int[N][N];
        byte by=21;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr3, -81);
        FuzzerUtils.init(sArr, (short)-6538);
        FuzzerUtils.init(dArr1, 88.97825);

        Test.lArrFld = (Test.lArrFld = (Test.lArrFld = (Test.lArrFld = Test.lArrFld)));
        iArr3[(48660 >>> 1) % N][(i9 >>> 1) % N] -= (int)(((Test.lArrFld[(i9 >>> 1) % N]--) - (--f3)) * (-(-1.6F *
            i9)));
        Test.lArrFld[(i9 >>> 1) % N] += (long)(sArr[(-129 >>> 1) % N] + ((d3 + Test.instanceCount) *
            (Test.instanceCount * i9)));
        switch ((((iArr3[(i9 >>> 1) % N][(i9 >>> 1) % N] >>> 1) % 2) * 5) + 39) {
        case 47:
            i9 += (int)(lMeth(b, 23998, i9) - i9);
            if (false) {
                i16 = 1;
                do {
                    i17 >>= by;
                } while (++i16 < 124);
                Test.iArrFld[(i17 >>> 1) % N] >>= i16;
            } else {
                for (i18 = 335; i18 > 4; i18--) {
                    i19 = (int)Test.instanceCount;
                    i20 = 5;
                    do {
                        dArr1[i20 - 1] = i19;
                        iArr3[i20][i20] = (int)Test.instanceCount;
                        i9 = (int)Test.instanceCount;
                    } while (--i20 > 0);
                }
            }
            break;
        case 48:
            iArr3[(i17 >>> 1) % N][(i20 >>> 1) % N] *= i19;
        }
        vMeth_check_sum += s + i9 + (b ? 1 : 0) + Float.floatToIntBits(f3) + Double.doubleToLongBits(d3) + i16 + i17 +
            by + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static int iMeth1(int i7, float f2, long l) {

        short s1=17916;
        float f5=90.508F;
        int i21=-4445, i22=-194, i23=-180, iArr2[]=new int[N];
        double d5=79.112420;
        byte by1=24;

        FuzzerUtils.init(iArr2, 58140);

        for (int i8 : iArr2) {
            vMeth(s1, i7, false);
            i7 = i7;
            iArr2[(10 >>> 1) % N] *= i7;
            if (false) break;
            for (f5 = 1; f5 < 4; f5++) {
                Test.instanceCount *= (long)f2;
                Test.lArrFld[(int)(f5)] = -75;
                s1 += (short)f5;
                i7 += (int)-8.124906;
            }
            if (false) {
                iArr2[(i21 >>> 1) % N] = (int)d5;
                for (i22 = 4; 1 < i22; i22--) {
                    by1 += (byte)i23;
                    f2 *= (float)-1.1325;
                }
            } else {
                f2 = f5;
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f2) + l + s1 + Float.floatToIntBits(f5) + i21 +
            Double.doubleToLongBits(d5) + i22 + i23 + by1 + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-197, i1=6, i2=33202, i3=4, i4=-3664, i24=26033, i25=-14, iArr[]=new int[N];
        double d=-2.67391, d1=62.9023, dArr[]=new double[N];
        float f1=2.172F;
        boolean b2=false;

        FuzzerUtils.init(iArr, -74);
        FuzzerUtils.init(dArr, 0.3058);

        iArr[(153 >>> 1) % N] += (-i);
        for (d = 245; d > 12; d -= 3) {
            i1 += (++i);
            for (d1 = 16; d1 < 325; d1++) {
                dArr[(int)(d1)] -= iArr[(int)(d1 + 1)];
                for (i3 = 1; i3 < 2; i3++) {
                    dArr[(int)(d1 - 1)] -= iMeth();
                    i = (int)(((Test.instanceCount - -3) - (-(5L * (f1 - i)))) * iMeth1(-31162, f1, -28L));
                    b2 = b2;
                    i1 += (-8 + (i3 * i3));
                    i4 += (int)116.452F;
                    Test.instanceCount = i3;
                    Test.dFld = 17;
                    Test.lArrFld[i3] = i1;
                }
                i4 = i3;
                for (i24 = 1; i24 < 2; ++i24) {
                    Test.lArrFld[(int)(d)] &= i4;
                    switch (((i24 % 2) * 5) + 45) {
                    case 46:
                        i2 = (int)f1;
                        switch ((((62197 >>> 1) % 6) * 5) + 47) {
                        case 59:
                            f1 = i24;
                            f1 = i4;
                            if (b2) {
                                i1 = -154;
                            } else {
                                Test.instanceCount *= Test.instanceCount;
                                i4 += (int)Test.dFld;
                                switch ((i24 % 4) + 10) {
                                case 10:
                                    i25 *= i24;
                                    Test.dFld %= (i2 | 1);
                                    i2 += i1;
                                    break;
                                case 11:
                                    Test.iArrFld[(int)(d1)] = i1;
                                    break;
                                case 12:
                                    i1 = (int)85.127F;
                                    break;
                                case 13:
                                    i4 /= (int)(i25 | 1);
                                    break;
                                default:
                                    i2 <<= i2;
                                }
                            }
                            break;
                        case 60:
                            Test.lArrFld[(int)(d - 1)] = Test.instanceCount;
                            break;
                        case 56:
                            b2 = true;
                            break;
                        case 65:
                            Test.instanceCount -= i1;
                            break;
                        case 69:
                            f1 += (0.362F + (i24 * i24));
                            break;
                        case 66:
                            i2 |= i25;
                        default:
                        }
                        break;
                    case 54:
                    }
                }
            }
        }

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("d1 i2 i3 = " + Double.doubleToLongBits(d1) + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 f1 b2 = " + i4 + "," + Float.floatToIntBits(f1) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 iArr = " + i24 + "," + i25 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.lArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.iArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  vMeth ->  vMeth iMeth1 mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
