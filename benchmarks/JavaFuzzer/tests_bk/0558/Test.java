// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-246L;
    public static int iFld=-14705;
    public static float fFld=0.828F;
    public static double dFld=0.104767;
    public static short sFld=9316;
    public int iFld1=-2;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, short s) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -75);

        iArr1[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
        long meth_res = i6 + s + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, long l) {

        int i2=-12153, i3=0, i4=10840, i5=-203, i7=109, i8=200;
        short s1=2075;

        for (i2 = 4; i2 < 351; ++i2) {
            for (i4 = 5; i4 > 1; i4 -= 2) {
                i5 += i2;
                l += lMeth(Test.iFld, s1);
                l >>= l;
                l = 58629;
                Test.fFld *= i4;
                i1 += (int)Test.fFld;
            }
            Test.dFld -= Test.dFld;
            i1 -= -208;
            i3 = (int)l;
            for (i7 = 1; i7 < 5; i7++) {
                i1 += (((i7 * Test.fFld) + i4) - l);
                l = i5;
                i3 = i2;
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + i4 + i5 + s1 + i7 + i8;
    }

    public static int iMeth() {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -28);

        Test.instanceCount = (Math.max(Math.min(Test.iFld, Test.iFld), iArr[(Test.iFld >>> 1) % N]) - 1L);
        vMeth(Test.iFld, Test.instanceCount);
        long meth_res = FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=134, i9=20, i10=-9, i11=227, i12=21160, i13=-9, i14=56863, iArr2[]=new int[N], iArr3[][]=new int[N][N];
        byte by=-127, byArr[]=new byte[N];
        double d=127.119460;

        FuzzerUtils.init(byArr, (byte)-69);
        FuzzerUtils.init(iArr2, -64282);
        FuzzerUtils.init(iArr3, -119);

        i = 1;
        while (++i < 361) {
            byArr[i] <<= (byte)iMeth();
            Test.iFld += (i ^ Test.instanceCount);
        }
        Test.iFld %= (int)((long)(Test.fFld) | 1);
        Test.fFld += i;
        Test.iFld = by;
        Test.iFld -= -137;
        Test.iFld = (int)Test.instanceCount;
        i9 = 1;
        while (++i9 < 179) {
            switch ((i9 % 5) + 49) {
            case 49:
                i10 = 1;
                do {
                    switch (((i10 % 10) * 5) + 106) {
                    case 111:
                        for (i11 = 1; i11 < 1; i11++) {
                            Test.iFld = i11;
                            Test.instanceCount = i12;
                            iArr2[i10] = (int)-18.1012F;
                            iArr2[i9 - 1] = i12;
                            Test.instanceCount = i11;
                            Test.iFld += (i11 ^ Test.instanceCount);
                            Test.instanceCount += (i11 * by);
                        }
                        i12 += (((i10 * i12) + i) - Test.sFld);
                    case 148:
                        i12 += (int)(0.813F + (i10 * i10));
                        Test.iFld >>= Test.iFld;
                        break;
                    case 140:
                        Test.fFld += i10;
                        i12 += i10;
                        for (i13 = i9; 1 > i13; i13++) {
                            Test.iFld *= i14;
                            i12 = (int)d;
                            Test.fFld += (i13 + Test.instanceCount);
                            iFld1 += (((i13 * Test.instanceCount) + Test.fFld) - i9);
                        }
                        break;
                    case 107:
                        iArr2[i10 - 1] += by;
                        break;
                    case 138:
                        Test.iFld -= 6171;
                        break;
                    case 131:
                        iArr2[i10] = i;
                        break;
                    case 141:
                        Test.instanceCount += i10;
                        break;
                    case 123:
                        i12 *= (int)Test.fFld;
                        break;
                    case 137:
                        Test.instanceCount += i11;
                        break;
                    case 155:
                    default:
                        iArr2[i9 - 1] += (int)Test.fFld;
                    }
                } while (++i10 < 140);
            case 50:
                iArr3 = FuzzerUtils.int2array(N, (int)-58);
                break;
            case 51:
                Test.instanceCount += (i9 | Test.instanceCount);
                break;
            case 52:
            case 53:
                iArr3[i9][i9 - 1] = -7095;
                break;
            }
        }

        FuzzerUtils.out.println("i by i9 = " + i + "," + by + "," + i9);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 d = " + i13 + "," + i14 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("byArr iArr2 iArr3 = " + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dFld Test.sFld iFld1 = " + Double.doubleToLongBits(Test.dFld) + "," + Test.sFld +
            "," + iFld1);

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
