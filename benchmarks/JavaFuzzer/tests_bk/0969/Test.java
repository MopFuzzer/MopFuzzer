// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-30693L;
    public int iFld=-164;
    public static boolean bFld=false;
    public static byte byFld=-14;
    public static int iFld1=208;
    public static short sFld=9498;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5) {

        int i6=-40978, i7=213, i8=-241, i9=7435, i10=-61952, iArr1[]=new int[N];
        float f=37.420F;
        byte by=-38;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 206);
        FuzzerUtils.init(lArr, 2L);

        i6 = 1;
        while (++i6 < 248) {
            for (i7 = 7; i6 < i7; i7--) {
                switch ((i7 % 2) + 83) {
                case 83:
                    if (Test.bFld) continue;
                case 84:
                    i8 += i6;
                    i4 -= -3;
                    for (i9 = i7; i9 < 1; ++i9) {
                        i4 -= i5;
                        f -= by;
                        iArr1[i7] >>>= (int)Test.instanceCount;
                        f += ((long)i9 ^ (long)i7);
                        i4 = i7;
                        Test.instanceCount += i9;
                        i4 |= -41520;
                        lArr[i9 - 1] &= i9;
                    }
                    break;
                default:
                    if (Test.bFld) break;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + by +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, int i2, int i3) {

        int i11=-9, i12=-6, i13=-1, i14=-12938, iArr2[]=new int[N];
        float f1=-23.11F;
        double d1=-2.60632;

        FuzzerUtils.init(iArr2, 10);

        vMeth2(i2, i2);
        Test.byFld *= (byte)i2;
        iArr2[(i3 >>> 1) % N] *= i2;
        switch (((i3 >>> 1) % 10) + 89) {
        case 89:
            for (i11 = 136; i11 > 2; i11 -= 3) {
                if (true) {
                    Test.instanceCount *= (long)f1;
                    if (i2 != 0) {
                        vMeth1_check_sum += l + i2 + i3 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 +
                            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    iArr2[i11] = (int)f1;
                    f1 = l;
                } else {
                    i12 -= -1;
                    i2 = i12;
                }
            }
            for (i13 = 4; i13 < 358; ++i13) {
                try {
                    i12 = (156 / i3);
                    iArr2[i13] = (i2 / iArr2[i13 + 1]);
                    iArr2[i13] = (47953 / iArr2[i13 - 1]);
                } catch (ArithmeticException a_e) {}
                try {
                    i14 = (i11 % i12);
                    i14 = (i3 % -28732);
                    i2 = (i11 / 119);
                } catch (ArithmeticException a_e) {}
            }
            break;
        case 90:
            i3 += i14;
            break;
        case 91:
            i2 = i13;
            break;
        case 92:
            iArr2[(i2 >>> 1) % N] = i3;
        case 93:
            i2 += (int)f1;
            break;
        case 94:
            l *= Test.instanceCount;
            break;
        case 95:
            Test.instanceCount += i12;
            break;
        case 96:
            i14 = -166;
        case 97:
            d1 = 0.95026;
        case 98:
            l = i2;
            break;
        }
        vMeth1_check_sum += l + i2 + i3 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(int i1) {

        int i15=17712, i16=-12, i17=11, i18=7, i19=16579, i20=-37710, i21=-24, i22=36477;
        float f2=1.63F;

        vMeth1(Test.instanceCount, i1, i1);
        Test.byFld -= (byte)iFld;
        for (i15 = 3; i15 < 133; ++i15) {
            for (i17 = 1; i17 < 12; i17++) {
                Test.instanceCount -= Test.iFld1;
                for (i19 = 2; i19 > 1; --i19) {
                    Test.iFld1 = -48186;
                    switch ((i19 % 1) + 50) {
                    case 50:
                        i18 = -7;
                        break;
                    }
                    i18 = i17;
                    f2 -= i18;
                    Test.instanceCount *= i15;
                }
                for (i21 = 1; i21 < 2; ++i21) {
                    iFld = i21;
                    Test.instanceCount = -110;
                }
            }
        }
        vMeth_check_sum += i1 + i15 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i23=-66, i24=23840, i25=3, i26=-158, i27=14, i28=36878, i29=-19364, iArr[]=new int[N];
        double d=118.89497, d2=-80.66310;
        float f3=-39.798F;

        FuzzerUtils.init(iArr, -17931);

        i = 128;
        do {
            iFld -= (int)(d - (Test.instanceCount - (iFld % 42826L)));
            iArr[i] += i;
            vMeth(Test.iFld1);
            Test.iFld1 *= iFld;
            iArr[i - 1] = Test.sFld;
            Test.iFld1 = (int)d;
            for (i23 = 4; i23 < 196; i23++) {
                Test.instanceCount *= (long)f3;
                iFld = i24;
                Test.iFld1 = Test.byFld;
                switch (((Test.iFld1 >>> 1) % 1) + 73) {
                case 73:
                    for (i25 = 2; i25 > 1; i25 -= 2) {
                        i26 += (((i25 * Test.iFld1) + Test.instanceCount) - Test.sFld);
                        Test.iFld1 -= (int)d;
                        i26 -= i;
                        Test.sFld -= (short)134;
                        Test.iFld1 += i25;
                    }
                    break;
                default:
                    if (Test.bFld) continue;
                }
            }
            for (i27 = i; i27 < 196; i27++) {
                d += iFld;
                iArr[i] = (int)Test.instanceCount;
                f3 += ((long)i27 | (long)Test.instanceCount);
                i26 += (int)60.974F;
                for (d2 = 1; d2 < 1; ++d2) {
                    i28 += (int)(((d2 * Test.instanceCount) + Test.instanceCount) - iFld);
                    iFld >>= i24;
                    Test.instanceCount += i23;
                    if (Test.bFld) break;
                }
                Test.instanceCount >>= i27;
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i d i23 = " + i + "," + Double.doubleToLongBits(d) + "," + i23);
        FuzzerUtils.out.println("i24 f3 i25 = " + i24 + "," + Float.floatToIntBits(f3) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d2 i29 iArr = " + Double.doubleToLongBits(d2) + "," + i29 + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.bFld = " + Test.instanceCount + "," + iFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld Test.iFld1 Test.sFld = " + Test.byFld + "," + Test.iFld1 + "," + Test.sFld);

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
