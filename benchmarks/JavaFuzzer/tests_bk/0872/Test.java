// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=58297L;
    public int iFld=243;
    public static byte byFld=-7;
    public static boolean bFld=true;
    public static volatile float fFld=30.632F;
    public static double dFld=79.23967;
    public static int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -36993);
        FuzzerUtils.init(Test.sArrFld, (short)-19336);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=0, i2=-10, i3=44252, i4=107, i5=-3337, i6=8, i7=3;
        short s=-22706;
        double d=69.42316;

        Test.iArrFld[(i1 >>> 1) % N] = i1;
        for (i2 = 7; 312 > i2; i2++) {
            s -= (short)i1;
            if (Test.bFld) {
                i4 = 1;
                do {
                    i3 >>= i4;
                    i5 = 1;
                    while (--i5 > 0) {
                        i6 <<= i4;
                        i1 += (i5 - i4);
                        i3 = i6;
                        i1 = Test.byFld;
                    }
                } while (++i4 < 5);
            } else if (Test.bFld) {
                for (d = 1; 5 > d; ++d) {
                    i7 -= 31907;
                    i1 %= (int)(Test.instanceCount | 1);
                    Test.instanceCount = i2;
                }
            } else {
                i3 *= i7;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + s + i4 + i5 + i6 + Double.doubleToLongBits(d) + i7;
    }

    public static int iMeth1(long l) {

        int i8=4, i9=-50373, i10=-130, i11=184, i12=-6;
        double d1=36.74590;
        long l1=-5056858597552030764L;

        vMeth();
        i8 = 1;
        do {
            i9 = 1;
            do {
                short s1=-2817;
                i10 <<= i10;
                i10 <<= s1;
                i10 *= i10;
                if (true) {
                    switch (((i9 % 3) * 5) + 37) {
                    case 46:
                        for (i11 = 1; i11 < 1; ++i11) {
                            Test.iArrFld[i9 - 1] = i8;
                            i12 = i8;
                            d1 *= i11;
                            i12 <<= (int)-5166L;
                            i12 *= (int)d1;
                            l1 += (((i11 * i10) + i12) - i8);
                        }
                        break;
                    case 43:
                        d1 -= Test.fFld;
                        break;
                    case 45:
                        Test.instanceCount += i12;
                        break;
                    default:
                        Test.iArrFld[i9 + 1] = i10;
                    }
                } else if (Test.bFld) {
                    Test.fFld = (float)70.127040;
                } else if (Test.bFld) {
                    Test.iArrFld[i9 - 1] = (int)Test.instanceCount;
                } else {
                    i10 >>= i11;
                }
            } while (++i9 < 5);
        } while (++i8 < 313);
        long meth_res = l + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + l1;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i14=32002, i15=42771;
        short s2=-11511;

        Test.instanceCount = iMeth1(Test.instanceCount);
        for (int i13 : Test.iArrFld) {
            i13 = (int)12.87526;
            i13 -= 12;
            Test.instanceCount <<= i13;
            if (Test.bFld) {
                for (i14 = 1; i14 < 4; i14++) {
                    s2 += (short)(12 + (i14 * i14));
                    i13 += -64290;
                    i13 = (int)Test.instanceCount;
                    i15 <<= i14;
                    Test.iArrFld[i14 + 1] = (int)-2050634350L;
                    if (Test.bFld) continue;
                    i15 = i15;
                }
                i15 >>>= i13;
            } else {
                Test.instanceCount = i13;
            }
        }
        long meth_res = i14 + i15 + s2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=26401, i17=60027, i18=-6, i19=3, i20=-3680, i21=-56136, i22=42516, iArr[]=new int[N];
        float f=-88.686F;
        short s3=31510;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 125);
        FuzzerUtils.init(lArr, 10415L);

        i = 1;
        while (++i < 319) {
            iFld = (int)Long.reverseBytes(Test.instanceCount);
            iFld += (((i * iFld) + i) - f);
            iArr[i + 1] = (int)((iMeth() * s3) + Test.dFld);
        }
        lArr[(iFld >>> 1) % N] = 20785;
        for (int i16 : Test.iArrFld) {
            if (Test.bFld) {
                iFld -= (int)f;
                Test.instanceCount = (long)Test.dFld;
            } else {
                iFld = (int)Test.fFld;
            }
            for (i17 = 2; i17 < 63; ++i17) {
                f *= Test.fFld;
                Test.instanceCount -= Test.instanceCount;
                for (i19 = 1; i19 < 2; i19 += 3) {
                    Test.sArrFld[i19] = (short)Test.dFld;
                    lArr = lArr;
                    Test.fFld *= f;
                }
                for (i21 = i17; i21 < 2; i21++) {
                    s3 -= Test.byFld;
                    switch (((i21 % 6) * 5) + 34) {
                    case 42:
                        Test.iArrFld = Test.iArrFld;
                        break;
                    case 37:
                        switch (((i17 % 3) * 5) + 3) {
                        case 11:
                            iArr[i17] += (int)113L;
                            break;
                        case 16:
                            iArr[i21] = i;
                            i16 += (i21 * i21);
                            Test.instanceCount += -44L;
                            break;
                        case 13:
                            i18 += (-229 + (i21 * i21));
                            Test.bFld = Test.bFld;
                            i16 += (i21 * i21);
                            s3 += (short)(((i21 * i21) + i16) - s3);
                        }
                    case 45:
                        if (Test.bFld) continue;
                        break;
                    case 50:
                        i20 = (int)Test.dFld;
                        break;
                    case 51:
                        f += (i21 + Test.instanceCount);
                    case 53:
                        i18 += (i21 | Test.instanceCount);
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i f s3 = " + i + "," + Float.floatToIntBits(f) + "," + s3);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr lArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.dFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
