// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=64836L;
    public static float fFld=25.287F;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 1);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i4, int i5, int i6) {

        int i7=16550, i8=61311, i9=-17357, i10=5, i12=-1, i13=231;
        float f1=1.409F;
        boolean b=false;
        short s=25132;
        double d=0.74222;

        for (i7 = 1; i7 < 243; i7++) {
            Test.iArrFld[i7 + 1] = i7;
            Test.iArrFld[i7] += i8;
        }
        i4 = (int)f1;
        b = b;
        s -= (short)i4;
        for (i9 = 8; 190 > i9; i9++) {
            if (b) continue;
            i8 -= i10;
            for (i12 = 9; i12 > 1; i12 -= 2) {
                Test.instanceCount <<= i10;
                i5 = (int)d;
                i8 = s;
                i6 += s;
                i10 += (i12 + Test.instanceCount);
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b ? 1 : 0) + s + i9 + i10 + i12 + i13 +
            Double.doubleToLongBits(d);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l, float f) {

        int i3=61, i14=-19850, i15=-1, i16=-60, i17=0, i19=-64854, i20=-226;
        short s1=24597, sArr[]=new short[N];
        boolean b1=false, bArr[]=new boolean[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 81.52407);
        FuzzerUtils.init(sArr, (short)-12097);
        FuzzerUtils.init(bArr, true);

        Test.iArrFld[(i3 >>> 1) % N] = (((-(i3 - i3)) * (i3 / (i3 | 1))) + iMeth1(i3, i3, i3));
        for (i14 = 8; i14 < 236; i14++) {
            i16 = 1;
            do {
                try {
                    i3 = (Test.iArrFld[(3816 >>> 1) % N] % -1777849188);
                    i17 = (86 / Test.iArrFld[i14]);
                    i3 = (267769163 % i14);
                } catch (ArithmeticException a_e) {}
            } while (++i16 < 7);
            i15 += (((i14 * f) + Test.instanceCount) - Test.instanceCount);
            for (i19 = i14; 7 > i19; i19++) {
                i20 &= 61692;
                i3 = s1;
                f *= f;
                dArr[i14 + 1] -= i19;
                sArr[i14] >>= (short)l;
                bArr[i14] = b1;
                i20 *= i20;
                Test.instanceCount >>>= i3;
                i15 = i15;
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i3 + i14 + i15 + i16 + i17 + i19 + i20 + s1 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i2) {


        Test.iArrFld[(-225 >>> 1) % N] *= (int)lMeth(-196L, -1.429F);
        Test.instanceCount = (long)Test.fFld;
        i2 += i2;
        Test.fFld = -6368;
        i2 += (int)-1.128078;
        long meth_res = i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6, i1=48433, i21=46, i22=31, i23=5, i24=-47918, i25=11530, i26=-12, i27=8, i28=-6, i29=-14, i30=4194,
            i31=-35976, i32=-5;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 44051L);

        for (i = 208; i > 12; i--) {
            Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
            i1 = iMeth(i);
            i1 += (i * i);
            for (i21 = 8; i21 < 128; ++i21) {
                Test.fFld *= 119;
                if (Test.bFld) continue;
                Test.fFld += (((i21 * Test.fFld) + i22) - i21);
                i1 = (int)Test.instanceCount;
                Test.instanceCount += i21;
                i22 += i22;
                for (i23 = 1; 2 > i23; i23++) {
                    try {
                        i1 = (i23 % i);
                        i24 = (i22 % 57061);
                        i22 = (i23 / Test.iArrFld[i23 - 1]);
                    } catch (ArithmeticException a_e) {}
                    lArr[i23] -= -118;
                    i22 -= (int)207L;
                    i22 <<= 10;
                    i24 += (int)-7L;
                }
                for (i25 = 1; i25 < 2; ++i25) {
                    lArr[i21] = (long)Test.fFld;
                }
                Test.instanceCount -= Test.instanceCount;
                i26 -= (int)Test.fFld;
            }
        }
        for (i27 = 138; i27 > 1; i27--) {
            i28 *= (int)Test.fFld;
            for (i29 = 11; i29 < 183; ++i29) {
                for (i31 = 1; i31 < 2; i31++) {
                    i1 += i31;
                    i30 += i31;
                    i24 += i23;
                    i24 *= i28;
                    i24 = (int)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 lArr = " + i31 + "," + i32 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
