// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3620027771306711263L;
    public static byte byFld=98;
    public static int iFld=-175;
    public int iFld1=-2;
    public static float fFld=-81.858F;
    public static long lArrFld[][]=new long[N][N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 10L);
        FuzzerUtils.init(Test.byArrFld, (byte)112);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(double d1, long l) {

        int i5=153, i6=61, i7=13, i8=-65166, i9=-31454, i10=213, i11=-178;
        boolean b=false;

        l -= i5;
        i5 |= (int)l;
        b = b;
        i6 = 1;
        while (++i6 < 235) {
            i5 += (i6 * i6);
            Test.instanceCount = Test.instanceCount;
            i7 *= i6;
            i5 += i6;
            for (i8 = 7; i8 > 1; --i8) {
                i7 = (int)Test.instanceCount;
                i7 = (int)Test.instanceCount;
            }
            for (i10 = 1; 7 > i10; i10++) {
                b = b;
                i5 = i6;
                i7 = i9;
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + l + i5 + (b ? 1 : 0) + i6 + i7 + i8 + i9 + i10 + i11;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i4) {

        double d2=2.32696, d3=107.3010;
        boolean b1=false;
        int i13=-148, i14=31807, iArr[]=new int[N];
        float f=2.712F, f1=-126.735F;
        short s=7655;

        FuzzerUtils.init(iArr, 68);

        sMeth(d2, Test.instanceCount);
        for (int i12 : iArr) {
            switch (((10 >>> 1) % 7) + 62) {
            case 62:
                i12 -= (int)10.204F;
                i4 &= i4;
            case 63:
                switch (((i4 >>> 1) % 1) + 10) {
                case 10:
                    d3 = 1;
                    do {
                        if (b1) break;
                        i4 = -8;
                        i4 = i12;
                        try {
                            i12 = (17003 / i12);
                            i4 = (i12 % iArr[(int)(d3 + 1)]);
                            i12 = (iArr[(int)(d3)] / -179);
                        } catch (ArithmeticException a_e) {}
                        for (i13 = (int)(d3); 1 > i13; i13++) {
                            d2 *= 10356;
                            Test.instanceCount += (i13 - Test.instanceCount);
                            f += 8L;
                        }
                    } while (++d3 < 4);
                    break;
                default:
                    if (b1) break;
                }
                break;
            case 64:
                s += (short)i14;
                break;
            case 65:
                Test.instanceCount >>= i14;
                break;
            case 66:
                s >>= s;
                break;
            case 67:
                Test.lArrFld = Test.lArrFld;
                break;
            case 68:
            default:
                f1 = -26401;
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + (b1 ? 1 : 0) + i13 + i14 +
            Float.floatToIntBits(f) + s + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(double d, int i, int i1) {

        int i2=-7, i3=193, i16=-46422, i17=78, iArr1[]=new int[N];
        double d4=-50.49001, d5=-2.29263;
        short s1=-835;
        boolean b2=true;

        FuzzerUtils.init(iArr1, -10);

        i1 = (int)(-((Test.instanceCount = 4708897497559208500L) + (i * 30552)));
        for (i2 = 2; i2 < 379; i2++) {
            i = iMeth(i1);
        }
        i3 = -39287;
        iArr1[(-6 >>> 1) % N] = i2;
        for (int i15 : iArr1) {
            for (d4 = 1; d4 < 4; d4++) {
                i3 += (int)(((d4 * Test.instanceCount) + s1) - Test.byFld);
                d = i15;
                if (b2) {
                    for (d5 = 1; d5 < 2; ++d5) {
                        d -= Test.instanceCount;
                        i3 = (int)d4;
                        i3 += (-11 + (d5 * d5));
                        i17 = (int)Test.instanceCount;
                    }
                } else if (b2) {
                    i15 -= i2;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + i2 + i3 + Double.doubleToLongBits(d4) + i16 + s1 +
            Double.doubleToLongBits(d5) + i17 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-4, i19=-3, i20=-34866, i21=29727, i22=-44, i23=-1, iArr2[]=new int[N];
        double d6=0.101509;
        boolean b3=false;
        float f2=57.351F;
        short s2=23138, sArr[]=new short[N];

        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(sArr, (short)29639);

        vMeth(76.88733, 4, Test.iFld);
        i18 = 1;
        while (++i18 < 338) {
            d6 -= i18;
            for (i19 = 74; i19 > 2; i19 -= 2) {
                iArr2[i18] >>= i18;
                if (b3) {
                    Test.iFld += (i19 * i19);
                    i20 /= (int)((long)(d6) | 1);
                    Test.instanceCount += iFld1;
                }
                d6 -= Test.byFld;
                Test.iFld -= i19;
                sArr[i19] = (short)Test.iFld;
                b3 = b3;
            }
            switch ((i18 % 8) + 62) {
            case 62:
                iFld1 += (i18 | (long)Test.fFld);
                Test.byArrFld[i18 - 1] += (byte)i20;
                if (b3) {
                    Test.lArrFld[i18][i18] = i18;
                    f2 -= (float)d6;
                    i20 += (int)f2;
                    iArr2[i18 - 1] = Test.iFld;
                }
            case 63:
                for (i21 = 4; i21 < 74; ++i21) {
                    i23 = 1;
                    do {
                        f2 = Test.instanceCount;
                    } while (++i23 < 2);
                    iFld1 += i21;
                    iFld1 = (int)Test.fFld;
                    i22 += (i21 + Test.instanceCount);
                    Test.fFld += (1L + (i21 * i21));
                    Test.instanceCount -= i23;
                    i20 = (int)Test.instanceCount;
                }
            case 64:
                f2 -= i19;
                break;
            case 65:
                Test.instanceCount -= s2;
            case 66:
                i20 = (int)Test.fFld;
            case 67:
                Test.instanceCount *= Test.iFld;
                break;
            case 68:
                d6 = i21;
                break;
            case 69:
                iArr2[i18] = Test.iFld;
                break;
            }
        }

        FuzzerUtils.out.println("i18 d6 i19 = " + i18 + "," + Double.doubleToLongBits(d6) + "," + i19);
        FuzzerUtils.out.println("i20 b3 f2 = " + i20 + "," + (b3 ? 1 : 0) + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("s2 iArr2 sArr = " + s2 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("iFld1 Test.fFld Test.lArrFld = " + iFld1 + "," + Float.floatToIntBits(Test.fFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
