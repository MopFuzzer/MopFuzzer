// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3991613832L;
    public static boolean bFld=false;
    public static long lFld=-70L;
    public int iFld=-81;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.138F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        float f1=101.560F;
        int i4=-13351, i5=-21776, i6=4, i7=-3, iArr[]=new int[N];
        byte by=1;
        double d=-59.108017, dArr[]=new double[N];
        long l=142L;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(dArr, -97.13217);
        FuzzerUtils.init(bArr, true);

        if (Test.bFld) {
            f1 *= i3;
        } else {
            for (i4 = 4; i4 < 293; ++i4) {
                iArr[i4 - 1] = (int)1.207F;
                i5 += (int)Test.instanceCount;
                Test.instanceCount = (long)f1;
                by = by;
                i5 = i3;
                for (i6 = 1; i6 < 6; ++i6) {
                    d = 22350;
                    i3 *= 14011;
                    switch ((((i4 >>> 1) % 7) * 5) + 110) {
                    case 113:
                        dArr[i4] = l;
                        i5 += by;
                        i3 *= (int)Test.instanceCount;
                        break;
                    case 131:
                        bArr[i4 - 1] = Test.bFld;
                        break;
                    case 121:
                        iArr[i4 + 1] = i7;
                        break;
                    case 140:
                        i5 = i4;
                        break;
                    case 142:
                        if (false) break;
                        break;
                    case 129:
                        f1 = 32660;
                        break;
                    case 128:
                        i3 += (1 + (i6 * i6));
                        break;
                    default:
                        if (Test.bFld) break;
                    }
                }
            }
        }
        vMeth2_check_sum += i3 + Float.floatToIntBits(f1) + i4 + i5 + by + i6 + i7 + Double.doubleToLongBits(d) + l +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i1) {

        float f=65.968F, f2=0.663F;
        int i2=30, i8=-32364, i9=13, i10=-111, i11=251, iArr1[]=new int[N];
        byte by1=106;
        double d1=-122.16964;

        FuzzerUtils.init(iArr1, 215);

        for (f = 6; f < 311; ++f) {
            Test.instanceCount += i1;
            if (true) {
                i2 >>= i2;
            } else if (false) {
                vMeth2(11);
                iArr1[(int)(f)] >>= i2;
            }
            Test.fArrFld[(int)(f - 1)] = f2;
            if (Test.bFld) {
                for (i8 = 1; 5 > i8; i8 += 2) {
                    for (i10 = 1; i10 < 3; ++i10) {
                        Test.fArrFld[i10 - 1] *= i1;
                        if (Test.bFld) continue;
                        i1 = i8;
                        i2 >>= i8;
                        f2 *= -16028;
                    }
                }
            } else if (Test.bFld) {
                by1 *= (byte)d1;
            } else {
                i9 += (int)(((f * f2) + Test.instanceCount) - Test.instanceCount);
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + by1 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i12=-1, i13=59583, i14=-481, i16=5, i17=-4, iArr2[]=new int[N];
        float f3=0.656F, f4=-1.528F;

        FuzzerUtils.init(iArr2, -1);

        vMeth1(i12);
        for (i13 = 4; 127 > i13; ++i13) {
            f3 *= i14;
            f4 = 1;
            do {
                int i15=-4;
                i12 = 38;
                i14 += (int)(f4 * f4);
                iArr2[i13 + 1] = -14537;
                Test.instanceCount += (long)(((f4 * i15) + Test.instanceCount) - i12);
                i15 += (int)(f4 + i14);
                for (i16 = 1; i16 < 1; i16++) {
                    double d2=39.128211;
                    iArr2[i13 - 1] = i17;
                    switch ((int)(((f4 % 1) * 5) + 102)) {
                    case 106:
                        d2 = i17;
                        break;
                    default:
                        Test.instanceCount += (192 + (i16 * i16));
                        i14 &= i15;
                    }
                }
            } while (++f4 < 13);
        }
        vMeth_check_sum += i12 + i13 + i14 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i18=2, i19=-9, i20=-2, i21=-1, i22=-56, i23=215, i24=-10, i25=-242, i26=-152, i27=58211;
        double d3=99.26003;
        float f5=-4.255F;
        short s=22488;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 57011L);

        i = 1;
        while (++i < 127) {
            vMeth();
            i18 += (int)d3;
            f5 -= -10661;
            for (i19 = 1; i19 < 197; ++i19) {
                for (i21 = 1; i21 < 2; ++i21) {
                    i22 *= (int)Test.instanceCount;
                    f5 += (((i21 * i19) + i21) - i20);
                    if (Test.bFld) continue;
                    i20 = 6;
                    i18 -= (int)Test.instanceCount;
                }
                lArr[i19][i] *= i19;
                if (Test.bFld) {
                    Test.instanceCount += i19;
                    i22 = i22;
                    for (i23 = i; i23 < 2; ++i23) {
                        i18 += (((i23 * i19) + i23) - Test.instanceCount);
                        i24 = i19;
                        Test.lFld = iFld;
                        f5 += Test.lFld;
                        lArr[i][i19 - 1] -= i20;
                    }
                    iFld *= i22;
                }
            }
            i25 = 1;
            do {
                s = (short)30275;
                i20 = (int)Test.instanceCount;
                i18 -= (int)Test.instanceCount;
                for (i26 = 1; 1 > i26; ++i26) {
                    lArr[i25] = lArr[i - 1];
                    i24 = i24;
                }
            } while (++i25 < 197);
            Test.instanceCount += i21;
        }

        FuzzerUtils.out.println("i i18 d3 = " + i + "," + i18 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("f5 i19 i20 = " + Float.floatToIntBits(f5) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 s = " + i24 + "," + i25 + "," + s);
        FuzzerUtils.out.println("i26 i27 lArr = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.lFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.lFld);
        FuzzerUtils.out.println("iFld Test.fArrFld = " + iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
