// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-6L;
    public static byte byFld=60;
    public static int iFld=31278;
    public static volatile float fFld=51.483F;
    public static volatile short sArrFld[][]=new short[N][N];
    public double dArrFld[]=new double[N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-15348);
        FuzzerUtils.init(Test.iArrFld, -35337);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i6=-251, i7=-27, i8=2923, i9=-49581, i10=6, i11=-45737, i12=5, iArr1[]=new int[N];
        long l=229L;
        boolean b=false;

        FuzzerUtils.init(iArr1, -10463);

        i6 = i6;
        for (i7 = 16; i7 < 264; i7++) {
            iArr1[i7 + 1] >>= -41156;
            for (l = 1; 7 > l; l++) {
                for (i10 = (int)(l); i10 < 2; i10++) {
                    Test.instanceCount = i9;
                    i8 *= i6;
                    i8 += (-57 + (i10 * i10));
                    i12 -= i8;
                    iArr1[i10] *= i10;
                    i8 += i10;
                    if (b) break;
                }
                i9 = i10;
                i9 = (int)l;
            }
            Test.byFld >>= (byte)i10;
        }
        vMeth2_check_sum += i6 + i7 + i8 + l + i9 + i10 + i11 + i12 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {


        vMeth2();
        Test.iFld -= -19722;
        Test.iFld = Test.iFld;
        Test.iFld += Test.iFld;
        Test.iFld >>= Test.iFld;
        vMeth1_check_sum += 0;
    }

    public static void vMeth(int i, int i1) {

        int i2=-71, i3=-5, i4=65454, i5=0, i13=-20804, i14=-5, i15=-11, i16=-11, i17=14, iArr[]=new int[N];
        double d=76.50456;
        byte byArr[][]=new byte[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -107);
        FuzzerUtils.init(byArr, (byte)-41);
        FuzzerUtils.init(lArr, 154L);

        for (i2 = 10; i2 < 207; i2++) {
            float f=39.26F;
            for (i4 = 1; i4 < 8; i4 += 2) {
                iArr[i4 - 1] -= (int)(-((57.83155 + (i5 - i3)) * (byArr[i4 + 1][i4]++)));
                iArr[i4] <<= i4;
            }
            vMeth1();
            i += (((i2 * i4) + i4) - f);
            for (d = i2; 8 > d; ++d) {
                for (i14 = 1; i14 < 1; ++i14) {
                    Test.instanceCount %= ((long)(d) | 1);
                }
            }
            iArr[i2] = i2;
            for (i16 = i2; 8 > i16; ++i16) {
                switch (((i2 % 1) * 5) + 36) {
                case 37:
                    lArr[i2 + 1] += i17;
                    i3 %= (int)1.31878;
                    break;
                default:
                    Test.instanceCount <<= i16;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=-9, i19=-201, i20=3, i21=-27252, i22=-28882, i23=79, i24=-6796, i25=-123;
        boolean b1=true;
        short s=20905;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -92L);

        vMeth(55857, 59458);
        lArr1[(Test.iFld >>> 1) % N] *= Test.iFld;
        Test.iFld += (int)1.1018F;
        Test.fFld -= Test.fFld;
        i18 = 1;
        do {
            Test.iFld += (i18 + Test.fFld);
            for (i19 = 82; i19 > 2; --i19) {
                Test.fFld += Test.iFld;
                Test.fFld -= Test.instanceCount;
            }
            Test.sArrFld[i18 - 1][i18 + 1] >>>= (short)Test.instanceCount;
            Test.iFld += 12;
            for (i21 = i18; i21 < 82; ++i21) {
                lArr1[i18] = i20;
                switch (((i21 % 2) * 5) + 102) {
                case 107:
                    Test.instanceCount >>= i21;
                    Test.instanceCount -= i20;
                    b1 = b1;
                    Test.iFld = i22;
                case 112:
                    i20 = i22;
                    break;
                default:
                    for (i23 = 1; i23 < 1; ++i23) {
                        i20 = i24;
                        switch ((((Test.iFld >>> 1) % 7) * 5) + 72) {
                        case 99:
                            dArrFld[i18 + 1] += 0.15196;
                            switch (((i23 >>> 1) % 4) + 28) {
                            case 28:
                                i24 += (i23 + i22);
                                break;
                            case 29:
                                Test.iArrFld[i18][i23 - 1] <<= Test.iFld;
                                i24 += (((i23 * i19) + i18) - i21);
                                i22 >>= (int)Test.instanceCount;
                                i22 = i22;
                                break;
                            case 30:
                            case 31:
                                s += (short)i23;
                                break;
                            }
                            break;
                        case 97:
                            i20 -= i24;
                        case 95:
                            i22 -= -12;
                        case 82:
                            Test.instanceCount += i18;
                            break;
                        case 92:
                            i22 |= Test.byFld;
                            break;
                        case 81:
                            Test.iFld = i24;
                        case 85:
                            try {
                                i20 = (i25 % 183);
                                i22 = (i22 / Test.iArrFld[i21][i21 - 1]);
                                Test.iArrFld[i21 - 1][i18 - 1] = (Test.iArrFld[i23][i23 - 1] / Test.iArrFld[i21 +
                                    1][i18]);
                            } catch (ArithmeticException a_e) {}
                            break;
                        }
                    }
                }
            }
        } while (++i18 < 308);

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 b1 = " + i21 + "," + i22 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i23 i24 s = " + i23 + "," + i24 + "," + s);
        FuzzerUtils.out.println("i25 lArr1 = " + i25 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.sArrFld dArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
