// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-107L;
    public static boolean bFld=true;
    public static volatile short sFld=-20169;
    public double dFld=-115.123538;
    public static float fFld=63.613F;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static byte byArrFld[][]=new byte[N][N];
    public static int iArrFld[][]=new int[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-29742);
        FuzzerUtils.init(Test.lArrFld, -3512689331150801882L);
        FuzzerUtils.init(Test.byArrFld, (byte)36);
        FuzzerUtils.init(Test.iArrFld, 203);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i9) {

        double d=84.105621;
        int i10=64581, i11=0, i12=-22393, i13=-21896, iArr2[]=new int[N];
        short s1=-32497;
        byte by=-49;
        float f2=2.250F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 20);
        FuzzerUtils.init(lArr1, 4282931217L);

        iArr2[(i9 >>> 1) % N] = i9;
        i9 += i9;
        i9 -= i9;
        for (d = 297; d > 7; --d) {
            i11 = 1;
            do {
                i9 *= s1;
                if (Test.bFld) {
                    i9 <<= i11;
                    iArr2[(int)(d)] ^= (int)Test.instanceCount;
                    for (i12 = i11; i12 < 1; ++i12) {
                        Test.instanceCount &= by;
                        if (Test.bFld) {
                            Test.instanceCount += Test.instanceCount;
                            i9 += i12;
                            lArr1[i11 + 1] = (long)f2;
                        } else if (Test.bFld) {
                            i9 *= (int)Test.instanceCount;
                        } else if (false) {
                            iArr2[(int)(d)] *= i13;
                        } else {
                            i13 /= (int)(i11 | 1);
                        }
                    }
                } else if (Test.bFld) {
                    i13 -= (int)-137L;
                } else {
                    Test.instanceCount = 28350;
                }
            } while (++i11 < 6);
        }
        long meth_res = i9 + Double.doubleToLongBits(d) + i10 + i11 + s1 + i12 + i13 + by + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static boolean bMeth(long l1) {

        int i5=137, i6=13976, i7=-46322, i8=7588, iArr1[]=new int[N];
        float f3=107.274F;
        double d1=0.82707;
        byte by1=-20;

        FuzzerUtils.init(iArr1, 10);

        for (i5 = 11; i5 < 229; i5++) {
            for (i7 = 1; i7 < 7; i7++) {
                iArr1[i7 - 1] = (int)(Math.abs(fMeth(i6)) - Test.sFld);
                iArr1[i5] += (int)f3;
                switch (((i5 % 8) * 5) + 123) {
                case 162:
                    i6 += i8;
                    d1 = f3;
                    break;
                case 125:
                    Test.lArrFld[i5 - 1] += l1;
                    break;
                case 151:
                    i8 -= (int)3774790178L;
                    i6 -= (int)f3;
                    Test.instanceCount %= (i6 | 1);
                    l1 = by1;
                    break;
                case 160:
                    Test.lArrFld[i7 - 1] = 3;
                    break;
                case 143:
                    Test.lArrFld[i5] <<= i7;
                    i8 += (i7 - i6);
                    break;
                case 134:
                    i8 *= i7;
                    break;
                case 124:
                    i8 += i8;
                case 159:
                    l1 = by1;
                default:
                    i6 *= (int)f3;
                }
            }
        }
        long meth_res = l1 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) + by1 +
            FuzzerUtils.checkSum(iArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth(long l, boolean b) {

        int i1=242, i2=207, i3=4, i4=32, iArr[]=new int[N];
        float f=26.654F, f1=10.772F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, -34142L);
        FuzzerUtils.init(fArr, -1.467F);

        i1 = 1;
        do {
            if (i1 != 0) {
                vMeth_check_sum += l + (b ? 1 : 0) + i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3
                    + i4 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            }
        } while (++i1 < 311);
        if (false) {
            for (f = 16; 274 > f; f++) {
                f1 = (iArr[(int)(f)]++);
            }
        } else if (Test.bFld) {
            i2 -= (int)Test.instanceCount;
            for (i3 = 5; i3 < 175; i3++) {
                l = (long)(((++lArr[i3]) * (f * i3)) + ((-1479931412L + (i2 * l)) * Math.max(i1, i3)));
                fArr[i3 - 1] -= (i4 -= ((-6 - (i3 + i2)) * i3));
                l += (i3 + f);
                iArr[i3] = (iArr[i3]--);
                b = bMeth(l);
                l += i1;
                iArr[i3 - 1] = -47114;
                i2 <<= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += l + (b ? 1 : 0) + i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=24915, i14=-176, i15=-203, i16=9, i17=22311, i18=31, i19=-2976, i20=13;
        short s=5759;
        float f4=1.715F, f5=1.727F;
        byte by2=-20;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -103.100168);

        Test.sArrFld[(i >>> 1) % N] >>= (short)(s - (i = (i - i)));
        vMeth(Test.instanceCount, false);
        for (f4 = 175; f4 > 1; f4--) {
            i15 = 1;
            do {
                i16 = 1;
                while (++i16 < 1) {
                    i |= -131;
                    f5 -= -127;
                    i14 -= 28320;
                }
            } while (++i15 < 144);
            Test.instanceCount <<= -1682;
            f5 = (float)-89.24188;
            i += i14;
            i14 = (int)dFld;
        }
        i = i;
        Test.instanceCount += (long)dFld;
        for (i17 = 3; i17 < 150; ++i17) {
            f5 += i14;
            i14 >>= i15;
            i19 = 1;
            while (++i19 < 171) {
                Test.byArrFld[i19][i17] *= (byte)i17;
                by2 += (byte)-5;
                dFld /= (i14 | 1);
                Test.iArrFld = Test.iArrFld;
            }
            Test.instanceCount = (long)dFld;
            i = i18;
            Test.bFld = Test.bFld;
            dArr[i17 - 1] *= Test.fFld;
            i14 = (int)Test.instanceCount;
            Test.instanceCount = i;
        }
        i ^= (int)Test.instanceCount;
        Test.fFld = i20;

        FuzzerUtils.out.println("i s f4 = " + i + "," + s + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("f5 i17 i18 = " + Float.floatToIntBits(f5) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 by2 i20 = " + i19 + "," + by2 + "," + i20);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("dFld Test.fFld Test.sArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.byArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
