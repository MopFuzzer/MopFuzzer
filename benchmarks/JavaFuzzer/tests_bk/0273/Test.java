// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2378964728L;
    public static byte byFld=-86;
    public static float fFld=8.157F;
    public static short sFld=2754;
    public volatile boolean bFld=true;
    public static volatile long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 6L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6) {

        int i7=-101, i8=130, i9=34745, i10=6, i11=13, iArr1[]=new int[N];
        boolean b=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -28);
        FuzzerUtils.init(dArr, 109.100323);

        Test.byFld *= (byte)-206;
        i6 += i6;
        i7 = 1;
        while (++i7 < 339) {
            i6 -= i7;
            for (i8 = 5; i8 > 1; i8--) {
                i9 = i7;
                for (i10 = 1; i10 < 2; i10++) {
                    i6 *= i10;
                    Test.byFld += (byte)i10;
                }
                iArr1[i8 - 1] += (int)-34L;
                switch (((i8 % 6) * 5) + 44) {
                case 68:
                    Test.fFld += Test.instanceCount;
                    if (b) break;
                    try {
                        i11 = (i11 / i7);
                        iArr1[i7] = (i10 % i9);
                        i6 = (i7 / i10);
                    } catch (ArithmeticException a_e) {}
                    i11 += (((i8 * Test.instanceCount) + Test.instanceCount) - i8);
                case 54:
                    dArr[i7] = i7;
                    break;
                case 71:
                    i9 = -34260;
                case 52:
                    i9 += i9;
                    break;
                case 47:
                    i9 = i7;
                    break;
                case 45:
                    iArr1[i8 - 1] -= (int)Test.instanceCount;
                    break;
                default:
                    i9 += i11;
                }
            }
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i2, int i3) {

        int i4=-4, i5=-12, i12=-50582, iArr[][]=new int[N][N];
        double d=89.120718;
        short s1=-22836;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -31.985F);
        FuzzerUtils.init(iArr, 8);

        i2 -= (int)((-(i2 * 13)) - fArr[(i3 >>> 1) % N]);
        Test.lArrFld[(i3 >>> 1) % N] = -39278L;
        i3 = iArr[(i3 >>> 1) % N][(i2 >>> 1) % N];
        for (i4 = 2; i4 < 218; ++i4) {
            vMeth2(i2);
            i5 = i4;
            i3 -= i2;
            i12 = 1;
            while (++i12 < 7) {
                iArr[i12][i4] -= (int)d;
                s1 -= (short)Test.instanceCount;
                i5 <<= (int)Test.instanceCount;
                fArr[i12 - 1] += i2;
                Test.fFld = i4;
                Test.instanceCount *= i2;
                i5 <<= i5;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i12 + Double.doubleToLongBits(d) + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(int i1) {

        int i13=-29297, i14=-39, iArr2[]=new int[N];
        double d1=-56.115077;

        FuzzerUtils.init(iArr2, 2);

        vMeth1(i1, i1);
        for (i13 = 12; i13 < 271; i13++) {
            Test.lArrFld[i13 - 1] *= i1;
            Test.instanceCount = i13;
        }
        iArr2[(i1 >>> 1) % N] = i14;
        Test.instanceCount = (long)d1;
        Test.fFld -= i13;
        Test.instanceCount ^= Test.sFld;
        Test.fFld -= Test.fFld;
        i1 = 122;
        i14 <<= -13;
        Test.byFld = (byte)i1;
        d1 -= i14;
        Test.fFld = -30069;
        Test.instanceCount = (long)Test.fFld;
        vMeth_check_sum += i1 + i13 + i14 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-17595, i15=-60777, i16=-8, i17=138, i18=21, i19=27906, i20=60585;
        float f=0.662F;
        short s=-27006;
        long l=-2674481267L, l1=-7L;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-11);

        i <<= (int)(((Test.byFld - Test.instanceCount) - (f / (i | 1))) - ((i++) - i));
        s = (short)i;
        vMeth(-18);
        for (i15 = 17; i15 < 274; ++i15) {
            double d2=2.12412;
            i16 += i15;
            i16 += (i15 | s);
            f = 7;
            iArrFld[i15 - 1] = i16;
            i += (i15 * i15);
            iArrFld[i15] <<= (int)Test.instanceCount;
            d2 = i16;
            for (i17 = 2; i17 < 98; ++i17) {
                iArrFld[i17 - 1] = (int)Test.instanceCount;
                l = 1;
                while (++l < 2) {
                    Test.instanceCount += (long)d2;
                    i = i18;
                }
                i18 /= (int)(l | 1);
                i16 *= i17;
            }
            i = i17;
            i16 = (int)l;
        }
        Test.instanceCount = i18;
        l1 = 1;
        do {
            Test.fFld = Test.byFld;
            i16 %= (int)(i15 | 1);
            Test.instanceCount += l1;
        } while (++l1 < 152);
        bFld = bFld;
        for (i19 = 13; 263 > i19; i19++) {
            byArr[i19 + 1] = (byte)Test.fFld;
            Test.instanceCount *= i;
            i18 += (((i19 * i20) + i20) - i20);
        }

        FuzzerUtils.out.println("i f s = " + i + "," + Float.floatToIntBits(f) + "," + s);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 l l1 = " + i18 + "," + l + "," + l1);
        FuzzerUtils.out.println("i19 i20 byArr = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld bFld Test.lArrFld = " + Test.sFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
