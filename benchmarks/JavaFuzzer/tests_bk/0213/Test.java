// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=30136L;
    public static int iFld=7;
    public static byte byFld=-11;
    public static float fFld=-84.416F;
    public double dFld=0.1808;
    public volatile boolean bFld=false;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 2429124805L);
        FuzzerUtils.init(Test.iArrFld, -13);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static int iMeth(long l) {


        Test.iFld = (int)l;
        Test.iFld >>= (Test.iFld + (-7 - Test.byFld));
        long meth_res = l;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        int i5=113, i6=-76, i7=-100, i8=245, iArr1[]=new int[N];
        double d=-21.61839;

        FuzzerUtils.init(iArr1, -10);

        Test.lArrFld = FuzzerUtils.long1array(N, (long)1006752648180793849L);
        Test.iFld -= -50;
        for (int i4 : iArr1) {
            short s=-7618;
            Test.iFld = (int)Test.instanceCount;
            Test.instanceCount &= s;
            for (i5 = 1; i5 < 4; i5 += 2) {
                for (i7 = i5; 4 > i7; i7++) {
                    Test.instanceCount -= Test.instanceCount;
                    s = (short)Test.iFld;
                    iArr1[i7] = i7;
                    i4 >>= 23;
                    i8 = i4;
                    i6 *= (int)d;
                }
                Test.instanceCount *= Test.iFld;
            }
            Test.instanceCount = 12;
        }
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public short sMeth(int i3) {

        int i9=12189, i10=-26999, i11=3, i12=-5, iArr2[]=new int[N];
        short s1=30831;
        double d1=106.70025;

        FuzzerUtils.init(iArr2, 58);

        i3 *= (Test.iFld--);
        Test.byFld -= (byte)fMeth();
        Test.iFld = 14;
        for (i9 = 15; i9 < 332; ++i9) {
            i3 = (int)Test.instanceCount;
            Test.iFld = (int)19187L;
            for (i11 = 1; i11 < 5; i11++) {
                Test.fFld += (((i11 * i9) + Test.iFld) - i9);
                iArr2 = iArr2;
                i10 += (i11 * Test.fFld);
                Test.fFld -= i11;
                i12 += (223 + (i11 * i11));
                s1 *= s1;
                d1 -= Test.iFld;
                i10 += (14 + (i11 * i11));
            }
        }
        long meth_res = i3 + i9 + i10 + i11 + i12 + s1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void vMeth() {

        long l1=-38944L;
        int i=9, i1=3456, i2=-5, i13=-69, i14=30805, iArr[]=new int[N];
        short s2=-15969;
        boolean b=true;

        FuzzerUtils.init(iArr, -11);

        iArr[(-11 >>> 1) % N] >>= iMeth(-(-4 - iMeth(Test.instanceCount)));
        for (l1 = 12; l1 < 285; l1++) {
            Test.instanceCount -= (long)(-(iArr[(int)(l1 - 1)] - (Test.fFld++)));
            if (b) {
                for (i1 = 1; i1 < 6; i1++) {
                    Test.byFld -= (byte)sMeth(i1);
                    switch ((i1 % 2) + 103) {
                    case 103:
                        i += i1;
                    case 104:
                        dFld += Test.iFld;
                        Test.iFld += (22124 + (i1 * i1));
                        s2 &= (short)Test.iFld;
                        break;
                    default:
                        for (i13 = 1; i13 < 2; ++i13) {
                            Test.instanceCount += (113 + (i13 * i13));
                            Test.fFld -= l1;
                            Test.fFld -= Test.instanceCount;
                        }
                    }
                }
            } else if (b) {
                Test.iFld += (int)(((l1 * Test.instanceCount) + l1) - i13);
            } else {
                Test.iFld = i;
            }
        }
        vMeth_check_sum += l1 + i + i1 + i2 + s2 + i13 + i14 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i15=27662, i16=-143, i17=-202, i18=191, i20=7, i21=57466;
        short s3=13879;

        vMeth();
        for (i15 = 11; i15 < 352; ++i15) {
            Test.iArrFld[i15 - 1] += (int)-1.23966;
            Test.fFld += i15;
            Test.iArrFld[i15 - 1] <<= 8;
            bFld = bFld;
            if (false) continue;
            for (i17 = 74; i17 > 1; i17--) {
                try {
                    Test.iFld = (-99 / i16);
                    Test.iArrFld[i17 - 1] = (i15 % i17);
                    Test.iFld = (-28437 % i16);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += Test.iFld;
            }
            Test.fFld += (i15 * Test.byFld);
            Test.iFld *= (int)Test.fFld;
            Test.iArrFld[i15 - 1] = i18;
            for (i20 = 2; i20 < 74; i20++) {
                Test.fFld -= Test.fFld;
                switch ((i15 % 4) + 71) {
                case 71:
                    Test.lArrFld[i20 - 1] -= i17;
                    i21 *= (int)Test.fFld;
                case 72:
                case 73:
                case 74:
                    dFld -= Test.instanceCount;
                    i21 += (i20 + i21);
                    break;
                default:
                    Test.byFld += (byte)Test.instanceCount;
                    Test.iFld -= i15;
                    s3 -= (short)i16;
                    Test.instanceCount -= i21;
                }
                i18 -= i17;
                Test.iArrFld[i15 - 1] -= 48041;
                Test.instanceCount = -94;
                Test.iFld -= 226;
                i21 += i20;
                i21 += (i20 * i20);
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i20 i21 = " + i18 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("s3 = " + s3);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.fFld dFld bFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(dFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth sMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
