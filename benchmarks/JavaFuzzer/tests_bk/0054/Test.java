// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4109836315L;
    public static boolean bFld=false;
    public static float fFld=0.10F;
    public static volatile int iFld=-71;
    public static double dFld=-1.24619;
    public short sFld=10716;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 25552);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l, int i10, long l1) {

        int i11=9464, i12=-123, i13=77, i14=10, i15=12301, iArr2[]=new int[N];
        float f2=56.725F, fArr1[]=new float[N];
        byte by=-72;

        FuzzerUtils.init(fArr1, 0.71F);
        FuzzerUtils.init(iArr2, 243);

        Test.fFld = i10;
        i11 = 1;
        do {
            for (i12 = 1; i12 < 5; i12++) {
                Test.fFld -= l1;
                Test.fFld *= Test.instanceCount;
                fArr1[i11 - 1] += i10;
            }
            for (i14 = 5; 1 < i14; --i14) {
                if (i15 != 0) {
                }
                i10 <<= i14;
                switch ((i11 % 6) + 67) {
                case 67:
                    i10 += (int)f2;
                    i13 += 143;
                    i15 &= i10;
                    break;
                case 68:
                    i13 += (((i14 * i14) + i14) - f2);
                    l1 = by;
                    break;
                case 69:
                    iArr2[i11] = (int)-52125L;
                    break;
                case 70:
                    i15 *= i15;
                    break;
                case 71:
                    i15 = i10;
                    break;
                case 72:
                    l *= i15;
                    break;
                }
            }
        } while (++i11 < 305);
        long meth_res = l + i10 + l1 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        int i8=53515, i9=105, i16=-8, i17=10, iArr1[]=new int[N];
        short s=22909;
        float f1=-106.1019F, fArr[][]=new float[N][N];
        byte by1=76;

        FuzzerUtils.init(iArr1, 35784);
        FuzzerUtils.init(fArr, -2.380F);

        for (int i7 : iArr1) {
            i7 = (int)((fArr[(i4 >>> 1) % N][(-57 >>> 1) % N]++) / (((i4 * i5) - (++iArr1[(i5 >>> 1) % N])) | 1));
            i8 = 4;
            do {
                s += (short)(((Test.instanceCount % (i6 | 1)) - 2) * Math.abs(i6));
                Test.instanceCount -= (iArr1[i8 + 1]--);
                f1 += i8;
            } while (--i8 > 0);
            i6 -= (int)(i7 * Test.instanceCount);
            i9 = 4;
            do {
                i5 += (int)((iMeth1(Test.instanceCount, i8, Test.instanceCount) + Test.instanceCount) - i7);
                f1 += (i9 * i9);
                by1 = (byte)2;
            } while ((i9 -= 2) > 0);
            Test.iFld <<= 197;
            for (i16 = 1; i16 < 4; ++i16) {
                i17 = (int)-3857494479L;
                Test.iFld += (int)f1;
            }
        }
        long meth_res = i4 + i5 + i6 + i8 + s + Float.floatToIntBits(f1) + i9 + by1 + i16 + i17 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i=-13132, i1=175, i2=-65, i3=18957, iArr[][]=new int[N][N];
        double d=-1.48379, d1=0.29166;
        boolean bArr[]=new boolean[N];
        short sArr[][]=new short[N][N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -10869);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr, (short)-5981);
        FuzzerUtils.init(lArr, 3947087499L);

        for (i = 371; i > 7; --i) {
            i1 += (i | i);
            i2 = 1;
            do {
                float f=1.775F;
                f += (i2 * i2);
                i1 += i2;
                for (d = 1; d > 1; d -= 2) {
                    i3 &= (int)(f + (d1--));
                    switch ((int)(((d % 10) * 5) + 53)) {
                    case 81:
                        Test.bFld = Test.bFld;
                        break;
                    case 93:
                        Test.instanceCount -= iArr[i2 + 1][i];
                        if (bArr[i2 - 1]) continue;
                        iArr[i2][i] = (int)(((Test.instanceCount >> -12) - Math.max(i3, -53059)) |
                            (Test.instanceCount--));
                        iMeth(i1, i3, i1);
                        break;
                    case 59:
                        sArr[i2 + 1][i] += (short)i;
                        Test.instanceCount >>= i1;
                        break;
                    case 62:
                        i1 -= (int)-20.813F;
                    case 95:
                        if (Test.bFld) break;
                        break;
                    case 103:
                        i1 <<= (int)3889L;
                    case 58:
                        lArr[i2] = -5482760691246374412L;
                    case 87:
                        Test.instanceCount += (long)(d * Test.instanceCount);
                        break;
                    case 76:
                    case 101:
                        iArr[(int)(d + 1)][i + 1] -= (int)Test.fFld;
                        break;
                    }
                }
            } while (++i2 < 5);
        }
        long meth_res = i + i1 + i2 + Double.doubleToLongBits(d) + i3 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f3=-1.443F, f4=1.86F;
        int i18=7, i19=-10, i20=22109, i21=1, i22=-3, i23=-57698, i24=1, i25=-50928;
        double d2=0.64442;
        byte by2=-59, byArr[]=new byte[N];
        short sArr1[]=new short[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)64);
        FuzzerUtils.init(sArr1, (short)-4009);
        FuzzerUtils.init(lArr1, -350308866573569146L);

        lMeth();
        f3 = 1;
        while (++f3 < 243) {
            Test.iArrFld[(int)(f3)] -= -252;
            Test.iFld += (int)(f3 * Test.instanceCount);
            Test.iFld /= (int)((long)(f3) | 1);
            Test.iFld = Test.iFld;
            switch ((int)((f3 % 2) + 64)) {
            case 64:
                switch ((int)(((f3 % 10) * 5) + 10)) {
                case 36:
                    Test.dFld = Test.iFld;
                    break;
                case 28:
                    Test.iFld += (int)(((f3 * Test.iFld) + sFld) - Test.iFld);
                case 52:
                    Test.instanceCount = Test.instanceCount;
                    f4 = 1;
                    while (++f4 < 103) {
                        Test.iFld += (int)(f4 * Test.iFld);
                        for (i18 = 1; 1 > i18; i18++) {
                            Test.instanceCount += (7814854250319029223L + (i18 * i18));
                        }
                        Test.iFld = i19;
                    }
                    for (i20 = 103; i20 > f3; i20 -= 3) {
                        for (i22 = 1; i22 < 1; i22++) {
                            sFld += (short)i18;
                            Test.iFld += (13 + (i22 * i22));
                            byArr[i20 + 1] -= (byte)3L;
                            sFld = (short)i18;
                            Test.fFld += i18;
                            i21 += (110 + (i22 * i22));
                            i23 += i20;
                        }
                        Test.instanceCount *= i18;
                        sArr1[(int)(f3 - 1)] = (short)i18;
                        for (d2 = 1; d2 > 1; --d2) {
                            Test.iFld *= by2;
                            i25 = Test.iFld;
                        }
                    }
                    break;
                case 47:
                    Test.iArrFld[(int)(f3 - 1)] = i25;
                    break;
                case 22:
                    lArr1[(int)(f3 - 1)] -= i25;
                    break;
                case 35:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 15:
                    i24 |= i24;
                case 12:
                    Test.instanceCount += (long)f3;
                    break;
                case 57:
                    i19 -= (int)-111.986F;
                case 17:
                    lArr1 = lArr1;
                    break;
                }
                break;
            case 65:
                Test.iFld = i24;
                break;
            default:
                Test.dFld += by2;
            }
        }

        FuzzerUtils.out.println("f3 f4 i18 = " + Float.floatToIntBits(f3) + "," + Float.floatToIntBits(f4) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 d2 = " + i22 + "," + i23 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i24 by2 i25 = " + i24 + "," + by2 + "," + i25);
        FuzzerUtils.out.println("byArr sArr1 lArr1 = " + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(sArr1) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld Test.dFld sFld = " + Test.iFld + "," + Double.doubleToLongBits(Test.dFld) +
            "," + sFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
