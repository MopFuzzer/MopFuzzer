// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=50592L;
    public static volatile int iFld=14065;
    public static double dFld=-110.29112;
    public static float fFld=-1.817F;
    public double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 20);
        FuzzerUtils.init(Test.fArrFld, 0.713F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2() {

        int i8=49881, i9=-2, i10=4, iArr[]=new int[N];
        boolean b=true;
        double d1=92.37419, dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, -21);
        FuzzerUtils.init(dArr, 1.75641);
        FuzzerUtils.init(fArr, 1.534F);

        i8 = 1;
        while (++i8 < 267) {
            Test.instanceCount -= i8;
            iArr[i8 + 1] = i8;
            iArr[i8 - 1] += (int)Test.instanceCount;
            if (b) continue;
            dArr[i8 + 1] -= d1;
            switch ((i8 % 1) + 26) {
            case 26:
                Test.iFld += (i8 * i8);
                Test.iFld -= Test.iFld;
                fArr = FuzzerUtils.float1array(N, (float)105.730F);
                break;
            }
            d1 -= Test.iFld;
            for (i9 = i8; i9 < 6; ++i9) {
                if (i8 != 0) {
                }
            }
            Test.iFld += i9;
            if (i8 != 0) {
            }
        }
        long meth_res = i8 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i9 + i10 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l, int i7, float f1) {

        double d2=2.122840;
        int i11=-8, i12=207, i13=55057;
        long lArr[]=new long[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -1352712652809757922L);
        FuzzerUtils.init(sArr, (short)-30450);

        for (long l1 : lArr) {
            byte by=-28;
            i7 >>= (-iMeth2());
            d2 = 1;
            do {
                Test.iFld = (int)Test.instanceCount;
                sArr[(int)(d2 - 1)] = (short)Test.iFld;
                for (i11 = 1; i11 < 1; ++i11) {
                    i12 += (i11 + i7);
                    Test.iArrFld[i11 + 1] -= i7;
                    i12 -= i11;
                }
            } while (++d2 < 4);
            by = (byte)i12;
            i12 = (int)l1;
            i13 = 1;
            do {
                i7 = i11;
            } while (++i13 < 4);
            by >>= by;
            Test.fArrFld = FuzzerUtils.float1array(N, (float)-79.764F);
        }
        long meth_res = l + i7 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i4=19482, i5=-5, i6=-8, i14=51924, i15=-142;
        float f=1.340F;
        short s=9868;
        long l2=14L;
        byte by1=104;
        boolean b1=false;

        i4 = 1;
        while (++i4 < 190) {
            for (i5 = i4; i5 < 8; i5++) {
                f += (i5 - s);
                i6 += (i5 + Test.instanceCount);
                i6 = (int)f;
            }
            Test.instanceCount *= ((--i6) + iMeth1(l2, i6, f));
            for (i14 = 1; i14 < 8; i14 += 2) {
                if (b1) {
                    Test.iFld *= 162;
                    i15 = by1;
                    switch ((i4 % 1) + 107) {
                    case 107:
                    default:
                        Test.iArrFld[i4] = i15;
                    }
                } else {
                    i6 = i14;
                    Test.iFld += (i14 | i4);
                    Test.dFld *= i14;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + Float.floatToIntBits(f) + s + l2 + i14 + i15 + by1 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=63064, i1=-97, i2=-110, i3=-12, i16=-251;
        double d=1.12495;
        long l3=24417L;
        byte by2=-74;
        boolean b2=true;

        for (i = 242; i > 3; --i) {
            for (i2 = 1; i2 < 105; i2++) {
                dArrFld[i2 - 1] -= -98;
                switch ((i % 8) + 82) {
                case 82:
                case 83:
                    i1 <<= (i3++);
                    i3 >>= (int)(d * (iMeth() + Test.iFld));
                    break;
                case 84:
                    Test.instanceCount >>= Test.instanceCount;
                    i3 += (i2 * i2);
                    Test.iFld = (int)l3;
                    l3 = Test.instanceCount;
                    break;
                case 85:
                    i1 += (int)Test.instanceCount;
                    i1 = (int)Test.instanceCount;
                    i16 = 1;
                    do {
                        i1 >>= Test.iFld;
                        i1 &= i;
                        if (b2) {
                            l3 = (long)Test.fFld;
                            Test.dFld = 680126935L;
                            i3 -= (int)l3;
                            if (false) {
                                by2 = (byte)i2;
                                if (true) break;
                            } else {
                                i1 |= 14;
                                b2 = b2;
                            }
                        } else if (b2) {
                        }
                        i3 += (i16 * i16);
                    } while (++i16 < 2);
                    break;
                case 86:
                    Test.iFld = 11163;
                    l3 += (((i2 * l3) + i2) - Test.fFld);
                    i3 += i2;
                    i1 += (int)(-54736L + (i2 * i2));
                    break;
                case 87:
                    Test.fFld += i16;
                    break;
                case 88:
                    Test.instanceCount %= (Test.iFld | 1);
                case 89:
                    l3 += (i2 * i2);
                    break;
                default:
                    if (b2) continue;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d l3 = " + i3 + "," + Double.doubleToLongBits(d) + "," + l3);
        FuzzerUtils.out.println("i16 by2 b2 = " + i16 + "," + by2 + "," + (b2 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld dArrFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
