// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-149L;
    public static byte byFld=11;
    public float fFld=60.718F;
    public volatile int iFld=37398;
    public static float fFld1=0.652F;
    public static short sFld=7684;
    public static int iFld1=-28408;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 1.59720);
        FuzzerUtils.init(Test.iArrFld, 37303);
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i1=13;
        float f=123.798F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)60);

        Test.dArrFld[(i1 >>> 1) % N] -= (((Test.instanceCount = Test.byFld) * (i1 = (int)f)) * Test.byFld);
        byArr[(i1 >>> 1) % N] = (byte)i1;
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(long l, int i11) {

        int i12=9309, i13=7, i14=4, i15=44, i16=15186;

        Test.lArrFld[(i11 >>> 1) % N] <<= 154;
        Test.fFld1 -= -95.238F;
        Test.lArrFld[(i11 >>> 1) % N] ^= 27741;
        i11 *= i11;
        i12 = 1;
        while ((i12 += 2) < 189) {
            Test.fFld1 *= i11;
            switch (((i12 % 2) * 5) + 40) {
            case 46:
                try {
                    i11 = (i11 % i11);
                    i11 = (1063867034 / Test.iArrFld[i12 + 1]);
                    i11 = (i12 / i12);
                } catch (ArithmeticException a_e) {}
                break;
            case 49:
                for (i13 = i12; i13 < 16; i13++) {
                    Test.fFld1 = i12;
                    i11 = (int)112.65463;
                    for (i15 = 1; i15 < 1; i15++) {
                        Test.sFld -= Test.byFld;
                        Test.fFld1 += i13;
                        i14 = (int)Test.fFld1;
                    }
                }
                break;
            }
        }
        vMeth1_check_sum += l + i11 + i12 + i13 + i14 + i15 + i16;
    }

    public static int iMeth(int i8, int i9, int i10) {

        boolean b1=false;
        int i17=-18411, i18=9120, i19=-11;
        double d2=67.35775, d3=56.47816;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -54.531F);

        vMeth1(Test.instanceCount, -32694);
        i8 = (int)Test.instanceCount;
        b1 = b1;
        for (long l1 : Test.lArrFld) {
            i10 <<= i9;
            i17 = 1;
            while (++i17 < 4) {
                Test.instanceCount = (long)Test.fFld1;
                Test.iArrFld[i17 + 1] <<= (int)Test.instanceCount;
                fArr[i17 - 1] += (float)d2;
                for (i18 = 1; i18 > i17; --i18) {
                    try {
                        Test.iArrFld[i18 - 1] = (i19 % 6876);
                        i10 = (Test.iArrFld[i18 - 1] / Test.iArrFld[i17]);
                        Test.iArrFld[i17] = (i10 % -63804);
                    } catch (ArithmeticException a_e) {}
                    i10 = (int)d3;
                }
                i9 = (int)Test.fFld1;
                Test.dArrFld[i17] = i9;
                d2 = i19;
            }
        }
        long meth_res = i8 + i9 + i10 + (b1 ? 1 : 0) + i17 + Double.doubleToLongBits(d2) + i18 + i19 +
            Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(byte by, int i5) {

        double d1=-17.56785;
        boolean b=true;
        int i6=-4080, i7=46688, i20=54, i21=-246;

        Test.iArrFld[(i5 >>> 1) % N] = (int)Math.min(Test.instanceCount--, Test.instanceCount);
        Test.fFld1 += Test.sFld;
        if (b) {
            Test.fFld1 = Test.instanceCount;
            d1 -= Test.byFld;
        } else {
            for (i6 = 2; i6 < 318; ++i6) {
                Test.instanceCount <<= iMeth(i5, -252, i5);
                Test.lArrFld[i6 + 1] += Test.sFld;
                i5 += (4 + (i6 * i6));
                Test.fFld1 += Test.fFld1;
                Test.iArrFld[i6] -= i7;
            }
            Test.fFld1 = i7;
            for (i20 = 15; i20 < 358; i20++) {
                b = b;
            }
        }
        vMeth_check_sum += by + i5 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i6 + i7 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i=31, i2=11775, i3=12, i4=92, i22=-11663, i23=30, i24=177, i25=-1;
        boolean b2=true;
        float f1=82.351F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 14L);

        lArr[(16412 >>> 1) % N] *= i;
        for (int smallinvoc=0; smallinvoc<292; smallinvoc++) vSmallMeth();
        i2 = 333;
        while (--i2 > 0) {
            double d=1.129022;
            fFld += iFld;
            Test.byFld = (byte)((d -= (Test.byFld * i2)) + -55L);
            i3 = 76;
            while (--i3 > 0) {
                if (b2) {
                    i4 = 1;
                    do {
                        Test.byFld = (byte)(-i3);
                        vMeth(Test.byFld, i);
                        Test.instanceCount = Test.instanceCount;
                        i >>= -42030;
                        Test.instanceCount += -31;
                        i ^= i3;
                        b2 = b2;
                    } while ((i4 -= 3) > 0);
                    i22 = 1;
                    while (++i22 < 1) {
                        iFld = i;
                        i = Test.sFld;
                        i += (((i22 * i4) + i4) - i23);
                        i23 *= (int)1.13959;
                        Test.instanceCount = Test.instanceCount;
                    }
                } else if (b2) {
                    for (i24 = 1; i24 < 1; i24 += 3) {
                        Test.instanceCount = -152;
                        Test.instanceCount += (((i24 * fFld) + fFld) - i22);
                        d = i;
                        i25 -= i22;
                        Test.dArrFld[i3] = 105;
                    }
                    i23 += i3;
                    Test.fFld1 = f1;
                    Test.iFld1 = i24;
                } else {
                    fArrFld[i2 - 1] += -1;
                }
            }
        }

        FuzzerUtils.out.println("i i2 i3 = " + i + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 b2 i22 = " + i4 + "," + (b2 ? 1 : 0) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("f1 lArr = " + Float.floatToIntBits(f1) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld fFld = " + Test.instanceCount + "," + Test.byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iFld Test.fFld1 Test.sFld = " + iFld + "," + Float.floatToIntBits(Test.fFld1) + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.iFld1 Test.dArrFld Test.iArrFld = " + Test.iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
