// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1714765314189981567L;
    public static float fFld=-1.101F;
    public static byte byFld=89;
    public static boolean bFld=true;
    public short sFld=-25280;
    public static int iArrFld[][]=new int[N][N];
    public static boolean bArrFld[]=new boolean[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, int i6) {

        int i7=149, i8=-6, i9=-6, i10=-61, i11=-120, i12=-76;
        float f=-84.690F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 115L);

        i7 = 1;
        do {
            i4 = (int)Test.instanceCount;
        } while (++i7 < 377);
        for (i8 = 3; i8 < 186; ++i8) {
            i10 = 1;
            do {
                i5 = i5;
                lArr[i8 + 1] -= Test.instanceCount;
                i6 += (int)(2.235F + (i10 * i10));
                i6 *= (int)f;
                for (i11 = 1; 1 > i11; ++i11) {
                    i12 += (((i11 * i5) + i12) - i6);
                    Test.iArrFld[i10 + 1][i8 + 1] <<= 4;
                }
                Test.bArrFld[i8 + 1] = true;
                i4 = i5;
                i4 = i9;
                i12 >>= (int)Test.instanceCount;
            } while (++i10 < 9);
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + i11 + i12 +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1, int i2) {

        int i3=-5, i13=-77;

        i3 = 1;
        do {
            Test.iArrFld[i3 - 1][i3 - 1] = Integer.reverseBytes(Test.iArrFld[i3 - 1][i3 - 1]);
            vMeth1(i1, i1, i3);
            Test.instanceCount = -8;
            i1 += (-4 + (i3 * i3));
            Test.fFld = i1;
            i13 = 1;
            do {
                try {
                    i2 = (-26862 % i13);
                    i1 = (127 / i3);
                    i1 = (i3 % Test.iArrFld[i3][i3]);
                } catch (ArithmeticException a_e) {}
                i1 += (-9 + (i13 * i13));
                i2 >>>= i2;
            } while (++i13 < 4);
            Test.instanceCount >>>= -49311;
        } while (++i3 < 393);
        Test.iArrFld[(i3 >>> 1) % N][(i2 >>> 1) % N] = -26;
        Test.iArrFld[(i2 >>> 1) % N][(i13 >>> 1) % N] |= i13;
        Test.byFld = (byte)i1;
        i1 *= Test.byFld;
        long meth_res = i1 + i2 + i3 + i13;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=61479, i14=214, i15=113, i16=116, i17=95, i18=31507, i19=-8, i20=180, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -30);

        iArr[(i >>> 1) % N] <<= iMeth(i, 13825);
        for (i14 = 11; i14 < 201; ++i14) {
            i16 = 1;
            do {
                if (Test.bFld) continue;
                if (i14 != 0) {
                    vMeth_check_sum += i + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i15 = Test.byFld;
                i15 ^= i15;
                i15 -= i16;
                i += (((i16 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                Test.byFld += (byte)i15;
                try {
                    i15 = (62884 % i14);
                    iArr[i16 + 1] = (i16 % i14);
                    i15 = (Test.iArrFld[i14][i14] / i16);
                } catch (ArithmeticException a_e) {}
            } while (++i16 < 8);
        }
        for (i17 = 7; i17 < 271; i17++) {
            for (i19 = 1; i19 < 6; ++i19) {
                short s=22570;
                if (i20 != 0) {
                    vMeth_check_sum += i + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                i18 += s;
            }
        }
        vMeth_check_sum += i + i14 + i15 + i16 + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-25.81177;
        int i21=57687, i22=-61225, i23=3, i24=207, i25=-24917, i26=-50717, i27=-12176, i28=-1242, i29=-131, i30=8;
        float f1=2.118F;

        vMeth();
        d *= Test.instanceCount;
        i21 = 1;
        do {
            i22 <<= i21;
        } while (++i21 < 156);
        Test.iArrFld[(i22 >>> 1) % N][(202 >>> 1) % N] += i22;
        Test.fFld *= i21;
        for (i23 = 212; i23 > 8; i23 -= 3) {
            for (f1 = 20; f1 < 368; f1++) {
                i22 += (int)Test.instanceCount;
                for (i26 = 1; i26 < 2; ++i26) {
                    Test.fFld += (i26 * i26);
                    i27 >>= sFld;
                    i24 ^= 14;
                }
                d += f1;
            }
            Test.fFld += (i23 - i27);
            i27 += (i23 | i22);
            i28 = 368;
            do {
                for (i29 = 1; i29 < 2; i29++) {
                    i25 += i25;
                    i22 *= Test.byFld;
                    Test.iArrFld[i28 - 1][i29] /= (int)((long)(Test.fFld) | 1);
                    i22 += (int)d;
                    i25 += (i29 + i21);
                    Test.instanceCount >>= i30;
                    try {
                        i24 = (i25 % i30);
                        i25 = (i23 / 207);
                        i30 = (i25 / Test.iArrFld[i28 + 1][i29]);
                    } catch (ArithmeticException a_e) {}
                    i27 -= i22;
                    i22 = Test.byFld;
                    fArrFld[i28 + 1] += -3728550055L;
                }
                i24 &= i25;
            } while ((i28 -= 2) > 0);
            fArrFld = fArrFld;
        }

        FuzzerUtils.out.println("d i21 i22 = " + Double.doubleToLongBits(d) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 f1 = " + i23 + "," + i24 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld sFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld fArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
