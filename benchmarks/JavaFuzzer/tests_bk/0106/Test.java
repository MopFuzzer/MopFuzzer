// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-59414L;
    public byte byFld=-31;
    public static short sFld=22671;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 29852);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vMeth(boolean b, short s) {

        int i1=253;

        i1 = (i1--);
        vMeth_check_sum += (b ? 1 : 0) + s + i1;
    }

    public static double dMeth(int i4) {

        double d1=0.37055;
        int i5=219, i6=-11, i7=163, i8=12, i9=-13, i10=9;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2050747556L);

        Test.iArrFld[(i4 >>> 1) % N] -= (int)(i4 = (int)(Test.instanceCount = (Test.instanceCount * Test.sFld)));
        d1 -= Test.instanceCount;
        for (i5 = 7; i5 < 136; ++i5) {
            vMeth(b1, Test.sFld);
            for (i7 = 1; i7 < 12; i7++) {
                if (b1) continue;
            }
            Test.instanceCount = i5;
            Test.instanceCount -= i5;
            i6 += (i5 * i4);
            lArr1 = lArr1;
            i8 += i7;
            for (i9 = 1; i9 < 12; i9++) {
                i8 += (i9 + Test.sFld);
                if (i10 != 0) {
                }
                i6 = (int)d1;
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d1) + i5 + i6 + (b1 ? 1 : 0) + i7 + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(long l) {

        int i2=-13, i3=-11178, i11=35152, i12=13, iArr1[]=new int[N];
        double d2=-2.66165;
        boolean b2=false;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -49757L);
        FuzzerUtils.init(iArr1, 37);

        for (i2 = 8; 249 > i2; i2++) {
            i3 = (int)(Math.max(4 - (i3--), l + i3) + ((i3 << i2) - dMeth(i3)));
            lArr2[i2] -= (long)d2;
            l >>= i3;
            for (i11 = 1; i11 < 7; ++i11) {
                i12 >>>= -58476;
                l *= 14;
                i12 += (i11 ^ i11);
                d2 = l;
                i12 = i12;
                Test.iArrFld[i11 + 1] = i2;
                i12 += (int)Test.instanceCount;
            }
            if (b2) continue;
            iArr1[i2] = i11;
            i12 = (int)-2704095041L;
        }
        long meth_res = l + i2 + i3 + Double.doubleToLongBits(d2) + i11 + i12 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i13=-60667, i14=5, i15=56735, i16=-5163, iArr[]=new int[N];
        double d=0.106293;
        float f=0.595F, f1=-2.974F, f2=0.336F, fArr[][]=new float[N][N];
        short s1=20265;
        long l1=1420440926L, lArr[]=new long[N];
        boolean b3=false;

        FuzzerUtils.init(lArr, -10L);
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(fArr, -2.185F);

        lArr[(i >>> 1) % N] = byFld;
        if (b3) {
            i -= (int)((28145 * Math.min(Test.instanceCount, Test.instanceCount)) + ((i + i) - byFld));
            d = 1;
            do {
                switch (((((i += i) >>> 1) % 9) * 5) + 110) {
                case 140:
                    vMeth(Test.iArrFld[(int)(d - 1)] != ((f * i) + (Test.instanceCount + i)), (short)(s1 =
                        (short)7935));
                    iArr[(int)(d - 1)] = (int)((i--) - ((-3 - (iArr[(int)(d)]--)) << lMeth(Test.instanceCount)));
                    break;
                case 131:
                    if (true) break;
                    break;
                case 120:
                    Test.instanceCount <<= Test.sFld;
                    Test.iArrFld[(int)(d - 1)] = i;
                    break;
                case 147:
                    f += i;
                    i13 = 1;
                    while (++i13 < 94) {
                        double d3=-2.94007;
                        d3 -= d3;
                        i /= (int)(i13 | 1);
                    }
                    i14 = 1;
                    do {
                        switch ((i14 % 7) + 47) {
                        case 47:
                            i *= (int)f;
                            iArr[i14 + 1] >>= i;
                            for (f1 = 1; 1 > f1; ++f1) {
                                f += (f1 * Test.instanceCount);
                            }
                        case 48:
                            Test.sFld = (short)115;
                            l1 += Test.instanceCount;
                            f = i13;
                            iArr[i14 - 1] = 8;
                        case 49:
                            for (f2 = 1; f2 < 1; f2 += 3) {
                                iArr[(int)(f2)] -= i14;
                                i15 <<= (int)Test.instanceCount;
                                Test.instanceCount = (long)-93.84467;
                                f += i15;
                                i16 *= 39936;
                            }
                            break;
                        case 50:
                            i15 /= (int)(i15 | 1);
                            break;
                        case 51:
                            l1 = i14;
                            break;
                        case 52:
                            Test.iArrFld[(int)(d - 1)] ^= (int)1190398592169133942L;
                            break;
                        case 53:
                            lArr[i14 + 1] *= i14;
                            break;
                        }
                    } while (++i14 < 94);
                    break;
                case 119:
                    i += (15232 + (d * d));
                    break;
                case 149:
                    f += l1;
                    break;
                case 141:
                    fArr = FuzzerUtils.float2array(N, (float)35.86F);
                case 127:
                    byFld <<= (byte)Test.instanceCount;
                case 154:
                }
            } while (++d < 267);
        } else if (b3) {
            Test.instanceCount *= -1;
        } else if (b3) {
            Test.sFld = (short)-62;
        }

        FuzzerUtils.out.println("i d f = " + i + "," + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("s1 i13 i14 = " + s1 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("f1 i15 l1 = " + Float.floatToIntBits(f1) + "," + i15 + "," + l1);
        FuzzerUtils.out.println("f2 i16 b3 = " + Float.floatToIntBits(f2) + "," + i16 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("lArr iArr fArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.sFld = " + Test.instanceCount + "," + byFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest dMeth lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
