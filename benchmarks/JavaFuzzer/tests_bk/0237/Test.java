// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static byte byFld=-33;
    public volatile int iArrFld[]=new int[N];
    public short sArrFld[]=new short[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(double d, int i3, int i4) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -30896);

        iArr[(i4 >>> 1) % N] = ((i3 = (-11 + i3)) - (i3++));
        Test.instanceCount >>= Math.max(i3, -i4);
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i12, double d4) {

        int i13=-10, iArr1[]=new int[N];
        short s1=3891;
        float f4=0.896F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, 48);
        FuzzerUtils.init(lArr1, -44L);

        iArr1[(i12 >>> 1) % N] = Test.byFld;
        i13 = 1;
        while (++i13 < 127) {
            iArr1[i13] *= 245;
            s1 += (short)(i13 | Test.instanceCount);
            i12 = i13;
            i12 <<= i12;
            s1 = (short)60;
            i12 = (int)Test.instanceCount;
            i12 += (-148 + (i13 * i13));
        }
        lArr1[(i13 >>> 1) % N] -= i12;
        iArr1[(i13 >>> 1) % N] = i13;
        Test.instanceCount += i13;
        lArr1[(-4814 >>> 1) % N] *= (long)d4;
        i12 = Test.byFld;
        Test.instanceCount += (long)f4;
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d4) + i13 + s1 + Float.floatToIntBits(f4) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth1(int i9, int i10, float f2) {

        float f3=2.247F;
        int i11=12, i14=6, i15=209, i16=-51008, i17=10, i18=-2, i19=-204, iArr2[]=new int[N];
        double d5=0.37718;
        short s2=29362;

        FuzzerUtils.init(iArr2, 161);

        for (f3 = 10; f3 < 223; ++f3) {
            vMeth1(i11, d5);
            Test.byFld = (byte)11640;
            i11 += i9;
        }
        Test.instanceCount -= i11;
        i14 = 1;
        do {
            for (i15 = 1; i15 < 5; ++i15) {
                iArr2[i14] += (int)d5;
                i10 >>>= i14;
                for (i17 = i14; i17 < 2; i17 += 2) {
                    i9 *= s2;
                    i10 = i19;
                    i19 += (((i17 * i17) + i11) - i9);
                    i18 -= i11;
                    iArr2[i17 + 1] *= (int)25688L;
                }
            }
        } while (++i14 < 305);
        long meth_res = i9 + i10 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i11 +
            Double.doubleToLongBits(d5) + i14 + i15 + i16 + i17 + i18 + s2 + i19 + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i6, float f1, int i7) {

        int i8=8;
        double d3=-2.88;

        Test.instanceCount = (long)((Math.max(i7, i7) * (i6 = (int)1.659F)) - ((i8 >> i6) - Math.min(i6, i7)));
        d3 += (-((f1++) * Integer.reverseBytes(i6)));
        vMeth((i7 | (Test.instanceCount - i6)) - ((i8 + f1) - (i8 - i7)), (int)(iMeth1(i6, i8, f1) *
            Test.instanceCount), 8);
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=212, i1=13, i2=28613, i5=44040, i20=11, i21=-166, i22=197, i23=-3844, i24=-11, i25=-90;
        long l=-55673L, lArr[]=new long[N];
        short s=731;
        double d1=-5.106121;
        float f=29.529F;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(bArr, true);

        for (i = 5; i < 361; i++) {
            for (l = 71; l > 1; l -= 3) {
                double d2=0.45675;
                vMeth(Math.abs(l - (iArrFld[i + 1]++)), (int)(((i2 = i1) + (Test.instanceCount * i2)) - ((s - i1) -
                    iArrFld[i + 1])), i2);
                for (d1 = 1; d1 < 4; d1++) {
                    i5 = (int)(--lArr[(int)(l - 1)]);
                    i1 = (int)(--Test.instanceCount);
                }
                if (b) {
                    if (b = ((iArrFld[i + 1]--) != iArrFld[(int)(l - 1)])) {
                        iArrFld[(int)(l)] = (int)l;
                        i2 = (int)((f++) + (Math.max(i2, i2) + d1));
                        d2 -= (((Test.instanceCount = i5) * 11599L) + (f++));
                        bArr[(int)(l - 1)] = (b = ((-2.330F - (iArrFld[(int)(l - 1)]++)) != (Test.instanceCount =
                            (long)d1)));
                    } else {
                        i2 += (-iMeth(i5, f, i));
                        for (i20 = 1; i20 < 4; ++i20) {
                            sArrFld[(i2 >>> 1) % N] <<= (short)i20;
                        }
                        iArrFld[i + 1] = i2;
                    }
                    i21 *= (int)d1;
                    try {
                        i2 = (89 / iArrFld[i]);
                        i5 = (i21 / i20);
                        i21 = (i2 % 248);
                    } catch (ArithmeticException a_e) {}
                } else if (b) {
                    i2 >>= i5;
                    for (i22 = 1; i22 < 4; i22++) {
                        iArrFld[i + 1] += (int)Test.instanceCount;
                        i23 += i23;
                        iArrFld[i22 - 1] -= i;
                        i23 += i22;
                        try {
                            i21 = (i2 / i21);
                            iArrFld[(int)(l - 1)] = (96 % i22);
                            i23 = (i / i1);
                        } catch (ArithmeticException a_e) {}
                        i2 = (int)l;
                        s -= s;
                    }
                    for (i24 = 1; i24 < 4; ++i24) {
                        iArrFld[i] *= (int)Test.instanceCount;
                        d2 = -74;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("i2 s d1 = " + i2 + "," + s + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i5 f b = " + i5 + "," + Float.floatToIntBits(f) + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("lArr bArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld iArrFld = " + Test.instanceCount + "," + Test.byFld +
            "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
