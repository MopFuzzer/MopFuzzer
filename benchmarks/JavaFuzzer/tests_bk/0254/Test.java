// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-55296L;
    public static float fFld=42.29F;
    public static double dFld=50.53734;
    public static volatile short sFld=-17131;
    public static volatile boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public static volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -23266);
        FuzzerUtils.init(Test.byArrFld, (byte)71);
        FuzzerUtils.init(Test.lArrFld, -187955588L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, double d, int i3) {

        int i4=-11379, i5=26070, i6=1, i7=-14;
        boolean b=true;
        byte by=82;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.102F);

        for (i4 = 12; i4 < 320; i4++) {
            if (b) continue;
            fArr[i4] += 151;
            i2 = i5;
            i5 = by;
            i2 += i3;
            Test.instanceCount = i3;
            Test.fFld = -25;
            Test.instanceCount *= i2;
            i2 = (int)Test.instanceCount;
        }
        Test.instanceCount -= i3;
        for (i6 = 7; i6 < 377; i6++) {
            Test.iArrFld[(i5 >>> 1) % N] -= (int)-118.274F;
            Test.fFld += (i6 - i6);
            Test.byArrFld[i6 - 1] = (byte)Test.instanceCount;
        }
        vMeth_check_sum += i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + (b ? 1 : 0) + by + i6 + i7 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(int i1) {

        long l=-55195L;
        int i8=-17962;

        vMeth(i1, Test.dFld, i1);
        for (l = 17; l < 288; ++l) {
            if (false) {
                switch ((int)((l % 3) + 46)) {
                case 46:
                    i1 >>= i1;
                    Test.byArrFld[(int)(l)] = (byte)Test.instanceCount;
                    break;
                case 47:
                case 48:
                    Test.instanceCount += i1;
                    break;
                }
                Test.instanceCount -= i8;
                i1 *= (int)Test.fFld;
                Test.instanceCount += (l * l);
            } else {
                i8 = i1;
                i1 += (int)(l ^ i8);
                i8 ^= 111;
            }
            i8 -= (int)l;
            Test.iArrFld[(int)(l - 1)] = (int)Test.fFld;
        }
        long meth_res = i1 + l + i8;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i, float f) {


        Test.instanceCount = i;
        i += (int)lMeth(i);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i9=-185, i10=-48981, i11=-3, i12=-157, i13=3582, i14=-197, i15=64058, i16=-29167, i17=46299;
        float f2=0.740F, fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -48.105700);
        FuzzerUtils.init(fArr1, -1.96F);

        for (int smallinvoc=0; smallinvoc<386; smallinvoc++) vSmallMeth(i9, Test.fFld);
        i9 -= i9;
        for (i10 = 4; i10 < 198; i10++) {
            i11 = (int)Test.instanceCount;
            dArr[i10 + 1] = 4400;
            Test.iArrFld[i10 - 1] -= Test.sFld;
            i9 += (i10 | i9);
            for (f2 = 7; 129 > f2; ++f2) {
                Test.fFld += (-12L + (f2 * f2));
                if (Test.bFld) continue;
                for (i13 = 1; i13 < 2; i13++) {
                    i9 ^= i9;
                    i14 >>>= (int)Test.instanceCount;
                    Test.dFld = i11;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)0L);
                    Test.iArrFld[i10 + 1] *= (int)Test.instanceCount;
                    Test.fFld += (-200 + (i13 * i13));
                    Test.instanceCount = i10;
                    i15 = (int)Test.instanceCount;
                }
                fArr1[i10 - 1] -= Test.instanceCount;
                Test.iArrFld[(int)(f2 - 1)] >>= -61249;
                for (i16 = 1; i16 < 2; ++i16) {
                    Test.dFld += i13;
                    switch (((i16 % 2) * 5) + 85) {
                    case 92:
                        i11 += (i16 * i16);
                        i11 += (-59877 + (i16 * i16));
                        break;
                    case 88:
                        i12 -= i10;
                        break;
                    }
                    dArr[(int)(f2)] += i10;
                    dArr[i10 + 1] -= i13;
                    Test.instanceCount -= Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("f2 i12 i13 = " + Float.floatToIntBits(f2) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 dArr fArr1 = " + i17 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.iArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.byArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
