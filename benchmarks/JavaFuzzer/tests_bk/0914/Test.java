// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-31596L;
    public static volatile short sFld=-2103;
    public static boolean bFld=false;
    public static volatile float fFld=-62.884F;
    public static int iArrFld[]=new int[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 5);
        FuzzerUtils.init(Test.fArrFld, 1.287F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i11=-242, i12=4, i13=1, i14=-6, i15=-129, iArr1[][]=new int[N][N];
        float f1=94.335F, f2=5.951F, fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -20802);
        FuzzerUtils.init(fArr, 2.286F);

        i11 = 1;
        while (++i11 < 126) {
            i12 = 10;
            i12 += (i11 | Test.sFld);
            for (f1 = 1; 12 > f1; ++f1) {
                i13 = 94;
                Test.instanceCount += (long)(f1 * f1);
                i13 += (int)f1;
                for (i14 = i11; i14 < 2; i14++) {
                    i15 = i11;
                    i15 = -125;
                    Test.instanceCount += (((i14 * i12) + Test.instanceCount) - f1);
                    f2 *= i14;
                    f2 = i14;
                    try {
                        iArr1[(int)(f1 + 1)][(int)(f1 + 1)] = (iArr1[(int)(f1)][(int)(f1 + 1)] / i13);
                        iArr1[i11 - 1][i14 + 1] = (23489 / i11);
                        i15 = (i13 / 82);
                    } catch (ArithmeticException a_e) {}
                    fArr[i14 + 1] -= i15;
                }
            }
        }
        long meth_res = i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i2, double d, long l1) {

        byte by=8;
        float f=2.143F;
        int i3=38595, i4=-9508, i5=9, i6=-40, i7=57693, i8=-7, i9=4, i10=-914, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 85);
        FuzzerUtils.init(lArr, 53461L);

        by += (byte)f;
        for (i3 = 5; i3 < 167; ++i3) {
            for (i5 = i3; i5 < 10; ++i5) {
                for (i7 = i3; i7 < 1; ++i7) {
                    Test.instanceCount = i4;
                    i4 += (int)l1;
                }
                l1 = 43089;
                i8 = i7;
                i8 -= (int)(i3 * (i2 = (int)(Test.instanceCount * 26)));
                i6 = (int)((143 << (--i4)) * (iArr[i3 + 1] -= (int)(Test.instanceCount++)));
            }
            for (i9 = 1; i9 < 10; i9++) {
                if (Test.bFld) {
                    lArr[i3 - 1] = iMeth();
                    try {
                        i6 = (i5 % i8);
                        i10 = (iArr[i9] / i4);
                        i8 = (i10 / iArr[i9]);
                    } catch (ArithmeticException a_e) {}
                    i8 += (i9 ^ i7);
                }
            }
        }
        vMeth1_check_sum += i2 + Double.doubleToLongBits(d) + l1 + by + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 +
            i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i, long l, int i1) {

        double d1=-70.115188, d2=0.30586;
        int i16=47232, i17=217, i18=3, i19=-45883, i20=-26996, i21=-104;
        byte by1=-104;

        vMeth1(3574, d1, l);
        for (i16 = 20; 354 > i16; i16++) {
            for (d2 = i16; d2 < 5; d2++) {
                i17 += (int)((long)d2 ^ i17);
                Test.instanceCount += (long)(d2 + i1);
                Test.iArrFld[(int)(d2)] += (int)Test.fFld;
                i18 += (int)(((d2 * i16) + by1) - i1);
                d1 = i18;
            }
            for (i19 = 1; i19 < 5; i19++) {
                l -= -14682;
                l += (i19 | i18);
                i1 -= (int)-186L;
            }
            i21 = 1;
            while (++i21 < 5) {
                i >>= 2;
                i >>= i19;
            }
        }
        vMeth_check_sum += i + l + i1 + Double.doubleToLongBits(d1) + i16 + i17 + Double.doubleToLongBits(d2) + i18 +
            by1 + i19 + i20 + i21;
    }

    public void mainTest(String[] strArr1) {

        int i22=-36036, i23=-79, i24=-1, i25=3, i26=-19, i27=-94, i28=-123, i29=43331, i30=-161;
        double d3=2.27209;
        byte by3=89;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-8772);

        vMeth(i22, -63405L, i22);
        i22 -= (int)Test.instanceCount;
        i22 >>= (int)Test.instanceCount;
        Test.fArrFld = Test.fArrFld;
        for (i23 = 2; 267 > i23; i23++) {
            Test.instanceCount = i23;
            for (i25 = 3; i25 < 95; ++i25) {
                i24 += (((i25 * i25) + i22) - i22);
                for (i27 = i25; i27 < 2; ++i27) {
                    byte by2=-92;
                    switch ((i23 % 2) + 86) {
                    case 86:
                        Test.fFld = i23;
                        d3 += i23;
                        break;
                    case 87:
                        i22 ^= i28;
                        Test.instanceCount += (i27 * i22);
                        i26 = (int)Test.instanceCount;
                        break;
                    default:
                        Test.fFld -= 4457383867707081160L;
                        i26 += (i27 * by2);
                        Test.iArrFld[i25 - 1] = i23;
                    }
                    Test.fArrFld[i23] = i23;
                    Test.instanceCount -= i25;
                    i24 = by2;
                    if (Test.bFld) break;
                    Test.instanceCount = i27;
                    i24 = i22;
                    i28 &= (int)Test.instanceCount;
                }
            }
            switch (((6 >>> 1) % 6) + 113) {
            case 113:
                if (Test.bFld) {
                    for (i29 = 95; i29 > i23; i29--) {
                        i28 = i27;
                        Test.iArrFld[i29] = i26;
                    }
                }
                break;
            case 114:
                i30 -= (int)Test.fFld;
            case 115:
                i22 -= (int)Test.fFld;
            case 116:
                Test.sFld += (short)(i23 - by3);
            case 117:
                i30 += (((i23 * i22) + i28) - Test.fFld);
                break;
            case 118:
                sArr[i23 - 1] = (short)185;
            default:
                i28 *= i23;
            }
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 d3 i29 = " + i28 + "," + Double.doubleToLongBits(d3) + "," + i29);
        FuzzerUtils.out.println("i30 by3 sArr = " + i30 + "," + by3 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iArrFld Test.fArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
