// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static volatile int iFld=1;
    public static boolean bFld=false;
    public static float fFld=83.185F;
    public static double dFld=0.53798;
    public static short sFld=21830;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 23884);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, int i5, int i6) {

        int i7=-5, i8=13, i9=-2, i10=-138, i11=12;
        short s=17367;
        double d=125.54092;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 5572047651832305707L);
        FuzzerUtils.init(byArr, (byte)113);

        for (i7 = 8; i7 < 300; ++i7) {
            Test.instanceCount += (i7 | i7);
            Test.iArrFld[i7] = s;
            for (i9 = 1; 6 > i9; i9++) {
                i10 = i8;
                for (d = 1; 2 > d; d++) {
                    if (Test.bFld) continue;
                    i8 = s;
                    Test.iFld += (int)48148L;
                    i4 = (int)d;
                    Test.instanceCount = i5;
                    lArr[i9] ^= i6;
                    Test.instanceCount -= Test.iFld;
                    byArr = FuzzerUtils.byte1array(N, (byte)-86);
                    Test.iFld += (int)d;
                }
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + s + i9 + i10 + Double.doubleToLongBits(d) + i11 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1() {

        short s1=29753;
        long l1=5L;
        int i12=-200, i13=-8, i14=6;
        byte by1=-16;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -98.404F);

        Test.iFld = Test.iArrFld[(-7 >>> 1) % N];
        vMeth2(Test.iFld, -4, Test.iFld);
        Test.iFld = s1;
        for (l1 = 6; l1 < 141; ++l1) {
            if (true) {
                Test.instanceCount += (long)Test.fFld;
            }
            i12 >>= i12;
        }
        i13 = 1;
        while (++i13 < 357) {
            by1 = (byte)-1;
            i12 = (int)l1;
            Test.iArrFld = Test.iArrFld;
        }
        if (Test.bFld) {
            i14 = 1;
            do {
                s1 = (short)l1;
                fArr1[i14] = Test.iFld;
            } while (++i14 < 180);
        } else {
            Test.dFld *= Test.iFld;
            vMeth1_check_sum += s1 + l1 + i12 + i13 + by1 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
            return;
        }
        vMeth1_check_sum += s1 + l1 + i12 + i13 + by1 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(long l, byte by, float f) {

        int i2=145, i3=-51232, i15=7, i16=-5, i17=2426, i18=0, i19=14;

        for (i2 = 2; i2 < 233; i2++) {
            by += (byte)(i2 * i2);
            Test.iFld += (int)(--Test.instanceCount);
        }
        vMeth1();
        i15 = 1;
        while (++i15 < 228) {
            for (i16 = 1; i16 < 7; ++i16) {
                if (Test.bFld) continue;
                for (i18 = 2; 1 < i18; i18 -= 2) {
                    i17 += Test.iFld;
                }
                i17 += (i16 * Test.fFld);
            }
            Test.iFld = (int)Test.instanceCount;
            i19 += (((i15 * i15) + i19) - i3);
            i19 <<= (int)l;
            Test.iArrFld[i15 - 1] -= i15;
            Test.iArrFld[i15 - 1] = i16;
        }
        vMeth_check_sum += l + by + Float.floatToIntBits(f) + i2 + i3 + i15 + i16 + i17 + i18 + i19;
    }

    public void mainTest(String[] strArr1) {

        int i=213, i1=12, i20=-6, i21=-150;
        byte by2=-20;
        long l2=-12L;
        float fArr[]=new float[N];
        short sArr[]=new short[N];
        boolean bArr[][]=new boolean[N][N];

        FuzzerUtils.init(fArr, -127.899F);
        FuzzerUtils.init(sArr, (short)30944);
        FuzzerUtils.init(bArr, true);

        fArr[(Test.iFld >>> 1) % N] += (++Test.iArrFld[(Test.iFld >>> 1) % N]);
        for (i = 230; i > 5; i -= 3) {
            vMeth(-166L, by2, Test.fFld);
            l2 = 334;
            while ((l2 -= 3) > 0) {
                Test.instanceCount -= Test.iFld;
                Test.instanceCount += -43819L;
                for (i20 = 1; i20 < 3; ++i20) {
                    switch ((int)((l2 % 9) + 18)) {
                    case 18:
                        Test.instanceCount -= i21;
                        i21 = (int)46L;
                        break;
                    case 19:
                        switch (((185 >>> 1) % 1) + 98) {
                        case 98:
                            Test.iFld += i20;
                            i21 = (int)-20.28F;
                            i1 <<= i20;
                            i1 = (int)l2;
                            break;
                        }
                        break;
                    case 20:
                        Test.iFld |= i21;
                        Test.iFld = (int)l2;
                        if (Test.bFld) continue;
                        switch ((i20 % 1) + 90) {
                        case 90:
                            Test.sFld += (short)i20;
                            i21 |= by2;
                            i1 = i20;
                            Test.bFld = false;
                        default:
                            i1 >>>= i1;
                            switch (((i >>> 1) % 5) + 113) {
                            case 113:
                                i21 += (int)-2.488F;
                                sArr[i20 + 1] -= (short)Test.iFld;
                                if (true) {
                                    try {
                                        Test.iArrFld[i20 + 1] = (i20 % 61550);
                                        Test.iArrFld[i20 + 1] = (99 / i21);
                                        i21 = (Test.iFld % Test.iFld);
                                    } catch (ArithmeticException a_e) {}
                                    Test.fFld -= i;
                                } else {
                                    bArr[i20 - 1][i20 + 1] = Test.bFld;
                                }
                                break;
                            case 114:
                                Test.dFld += i;
                                break;
                            case 115:
                                Test.iArrFld[(5 >>> 1) % N] *= Test.iFld;
                            case 116:
                                Test.iFld = (int)Test.dFld;
                                break;
                            case 117:
                                i1 >>= (int)l2;
                            }
                        }
                    case 21:
                        Test.iArrFld[i + 1] &= i21;
                        break;
                    case 22:
                        Test.iArrFld[i20 + 1] *= i21;
                        break;
                    case 23:
                        Test.instanceCount += i20;
                        break;
                    case 24:
                        Test.iArrFld[(int)(l2 + 1)] *= i1;
                        break;
                    case 25:
                        i1 <<= i20;
                        break;
                    case 26:
                        Test.instanceCount += i20;
                        break;
                    default:
                        Test.bFld = Test.bFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 by2 = " + i + "," + i1 + "," + by2);
        FuzzerUtils.out.println("l2 i20 i21 = " + l2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("fArr sArr bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.dFld Test.sFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
