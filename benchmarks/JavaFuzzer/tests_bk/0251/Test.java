// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=317819800L;
    public int iFld=-6;
    public static int iFld1=-12032;
    public float fFld=-116.734F;
    public static float fFld1=-61.855F;
    public static long lFld=-4258685817L;
    public long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static void vSmallMeth(int i2, byte by, int i3) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3356934677364878096L);

        i2 = (int)(lArr[(i3 >>> 1) % N]--);
        vSmallMeth_check_sum += i2 + by + i3 + FuzzerUtils.checkSum(lArr);
    }

    public static float fMeth() {

        int i9=13, i10=2, i11=-10, i12=213, i13=-101, i14=-8, iArr1[]=new int[N];
        byte by1=1;
        boolean b2=false;

        FuzzerUtils.init(iArr1, 59);

        Test.iFld1 += 1864;
        Test.iFld1 += Test.iFld1;
        Test.iFld1 = -26056;
        Test.iFld1 = (int)Test.fFld1;
        for (i9 = 24; 392 > i9; i9++) {
            by1 += (byte)16;
            if (b2) break;
            i11 -= i12;
            by1 += (byte)(((i9 * i12) + i10) - i12);
            b2 = b2;
            iArr1 = iArr1;
            Test.instanceCount -= Test.iFld1;
        }
        for (i13 = 15; 353 > i13; ++i13) {
            Test.fFld1 *= -3338;
            iArr1[i13 - 1] = Test.iFld1;
        }
        long meth_res = i9 + i10 + by1 + (b2 ? 1 : 0) + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i7, boolean b1, int i8) {

        float f=-30.524F;
        int i15=14, i16=-12, i17=-3, i18=-32642, i19=-64364, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 13536);

        f = 1;
        do {
            Test.iFld1 += (int)(f * f);
            iArr[(int)(f)] += (int)(Integer.reverseBytes(i8) * Test.instanceCount);
            Test.instanceCount += (long)(Test.iFld1 / ((long)(fMeth()) | 1));
            if (b1) continue;
            for (i15 = 1; 8 > i15; i15++) {
                if (b1) continue;
            }
        } while (++f < 191);
        i8 *= i7;
        Test.iFld1 = (int)Test.lFld;
        i17 = 1;
        do {
            for (i18 = 1; 5 > i18; ++i18) {
                Test.lFld = 12;
                Test.iFld1 ^= i16;
                iArr[i17 + 1] *= i16;
                Test.lFld &= i17;
            }
        } while (++i17 < 338);
        long meth_res = i7 + (b1 ? 1 : 0) + i8 + Float.floatToIntBits(f) + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(int i4, long l) {

        int i5=-42670, i6=-54093, i20=-43688, i21=1724, i22=4, i23=11;

        for (i5 = 1; i5 < 136; i5++) {
            boolean b3=true;
            if (true) {
                vSmallMeth(i5, (byte)((--i4) * ((-iMeth(-56594, b3, 45896)) + Test.iFld1)), i5);
                for (i20 = 1; i20 < 12; ++i20) {
                    double d=1.116925;
                    i4 ^= Test.iFld1;
                    l >>= i4;
                    Test.lFld = Test.instanceCount;
                    for (i22 = 1; i22 < 2; i22++) {
                        Test.lFld += (i22 | l);
                        i21 += (int)Test.lFld;
                    }
                    if (b3) break;
                    i4 -= i4;
                    d = l;
                    i21 += (i20 ^ (long)Test.fFld1);
                    i4 = i22;
                }
            } else {
                i23 += (i5 * i5);
            }
        }
        long meth_res = i4 + l + i5 + i6 + i20 + i21 + i22 + i23;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false;
        int i=-47135, i1=151, i24=2, i25=-83, i26=-11318, i27=132, i28=46173, i29=-207;
        short s=-18200;
        byte by2=-78;

        iFld = (int)(9 - (--lArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N]));
        lArrFld[(iFld >>> 1) % N] = (lArrFld[(14 >>> 1) % N] = (lArrFld[(iFld >>> 1) % N] = lArrFld[(12 >>> 1) % N]));
        iFld >>= (int)((162L - (110L - (iFld * Test.iFld1))) + iFld);
        b = (!(Test.instanceCount != (iFld - fFld)));
        for (i = 2; i < 261; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(++iFld, byMeth(iFld, Test.instanceCount), i);
            for (i24 = 5; i24 < 97; ++i24) {
                if (b) continue;
            }
            iFld = iFld;
            if (b) {
                i25 = -5596;
                for (i26 = 3; i26 < 97; i26++) {
                    double d1=-54.111642;
                    b = b;
                    i1 = (int)Test.fFld1;
                    fFld = fFld;
                    i1 = 1;
                    switch (((i26 % 4) * 5) + 71) {
                    case 80:
                        switch ((((iFld >>> 1) % 7) * 5) + 35) {
                        case 54:
                            Test.iFld1 >>= i27;
                            Test.iFld1 <<= i25;
                            if (b) {
                                Test.iFld1 = (int)fFld;
                                for (i28 = 1; 2 > i28; i28++) {
                                    lArrFld[i28][i] += i29;
                                    b = b;
                                    Test.fFld1 += (((i28 * Test.instanceCount) + Test.lFld) - i24);
                                    s = (short)i28;
                                    by2 += (byte)(i28 | i29);
                                    i29 += (i28 * i28);
                                    Test.iFld1 *= (int)Test.fFld1;
                                }
                            }
                            break;
                        case 37:
                            by2 = (byte)i25;
                        case 45:
                            d1 = 64455;
                            break;
                        case 68:
                            iFld -= (int)Test.lFld;
                            break;
                        case 52:
                            Test.instanceCount -= 1847;
                            break;
                        case 38:
                            iArrFld[i26 + 1] *= i28;
                            break;
                        case 43:
                            i1 = iFld;
                            break;
                        }
                        break;
                    case 72:
                        iFld *= i;
                        break;
                    case 82:
                        by2 += (byte)(i26 ^ Test.iFld1);
                        break;
                    case 91:
                    }
                }
            } else {
                iFld = i25;
            }
        }

        FuzzerUtils.out.println("b i i1 = " + (b ? 1 : 0) + "," + i + "," + i1);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("s by2 = " + s + "," + by2);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("fFld Test.fFld1 Test.lFld = " + Float.floatToIntBits(fFld) + "," +
            Float.floatToIntBits(Test.fFld1) + "," + Test.lFld);
        FuzzerUtils.out.println("lArrFld iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test byMeth
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
