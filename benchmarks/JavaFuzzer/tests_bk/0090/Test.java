// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1573976398857764135L;
    public static int iFld=-209;
    public static byte byFld=-79;
    public short sFld=2428;
    public static double dFld=39.97096;
    public static short sFld1=-1425;
    public static boolean bFld=true;
    public static float fFld=-51.528F;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 154377834L);
        FuzzerUtils.init(Test.iArrFld, 151);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i7=4277, i8=-14, i9=-107;
        long l1=-6268L;
        float f1=1.822F;

        Test.iFld = Test.iFld;
        i7 = 1;
        do {
            Test.instanceCount *= Test.instanceCount;
            switch ((i7 % 4) + 36) {
            case 36:
                l1 = 1;
                while (++l1 < 8) {
                    Test.iArrFld = Test.iArrFld;
                    switch ((((Test.iFld >>> 1) % 2) * 5) + 114) {
                    case 124:
                        Test.iFld += (int)(l1 ^ i7);
                        break;
                    case 117:
                        for (i8 = 1; i8 < 1; i8++) {
                            Test.iFld = Test.iFld;
                            Test.iFld = Test.byFld;
                            Test.iFld += (((i8 * i9) + l1) - f1);
                            i9 >>= Test.iFld;
                            Test.instanceCount = -53614;
                            if (i8 != 0) {
                            }
                        }
                        break;
                    }
                }
                break;
            case 37:
                Test.instanceCount += (((i7 * i9) + Test.sFld1) - Test.instanceCount);
                break;
            case 38:
                Test.iFld = i8;
            case 39:
                Test.instanceCount = i7;
                break;
            }
        } while (++i7 < 210);
        long meth_res = i7 + l1 + i8 + i9 + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(double d) {

        float f2=2.502F;
        boolean b=false;
        int i10=-238, i11=21239, i12=251, i13=5;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(byArr, (byte)-114);
        FuzzerUtils.init(sArr, (short)-28555);

        Test.iFld = (int)(Test.instanceCount - Test.iFld);
        Test.lArrFld[(-55494 >>> 1) % N] = Math.abs(iMeth());
        if (b) {
            Test.sFld1 -= (short)f2;
        } else {
            for (i10 = 14; i10 < 310; ++i10) {
                byArr[i10 - 1] -= (byte)Test.instanceCount;
                i12 = 1;
                while (++i12 < 6) {
                    f2 += 80;
                    sArr[i12] = (short)-1.61282;
                    Test.iFld *= 157;
                    d *= f2;
                    Test.lArrFld = Test.lArrFld;
                    Test.iFld = i13;
                    Test.iFld = i13;
                    Test.instanceCount += i12;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + (b ? 1 : 0) + i10 + i11 + i12 + i13
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i3, int i4) {

        int i5=113, i6=-22970, i14=181, iArr1[]=new int[N];
        float f=-15.831F;
        long lArr[]=new long[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 2);
        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(bArr, true);

        Test.dFld = Math.abs(iArr1[(i3 >>> 1) % N]);
        for (long l : lArr) {
            for (i5 = 1; i5 < 4; i5++) {
                l += (((i5 * f) + i6) - Test.iFld);
                Test.instanceCount = i4;
                i3 += (i5 + i3);
                i6 >>= i4;
                i6 += (i5 * i5);
                vMeth1(Test.dFld);
                i14 = 1;
                do {
                    f *= 2;
                    bArr[i5] = Test.bFld;
                    if (true) break;
                    Test.instanceCount = -14;
                    Test.iFld = -48477;
                } while (++i14 < 2);
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + i14 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-173, i1=56261, i2=-12484, i15=-88, iArr[]=new int[N];
        double dArr[]=new double[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, -65.23680);
        FuzzerUtils.init(fArr, 51.137F);
        FuzzerUtils.init(iArr, -54830);

        i = 1;
        do {
            Test.iFld = (int)Test.instanceCount;
            for (i1 = 1; i1 < 132; ++i1) {
                int i16=110;
                Test.byFld = (byte)((dArr[i - 1] * (sFld - i)) - (fArr[i1]++));
                switch (((i % 1) * 5) + 100) {
                case 105:
                    Test.instanceCount += (iArr[i - 1]--);
                    break;
                default:
                    vMeth(i1, i2);
                    i2 = (int)Test.instanceCount;
                    iArr[i1 + 1] *= Test.iFld;
                    Test.instanceCount -= -106;
                }
                iArr[i1 - 1] += (int)Test.instanceCount;
                Test.instanceCount |= -189;
                iArr[i] = Test.iFld;
                switch ((i % 6) + 82) {
                case 82:
                    Test.iArrFld[i] >>= Test.iFld;
                    iArr[i + 1] >>= i1;
                    break;
                case 83:
                    switch ((i % 6) + 25) {
                    case 25:
                        Test.byFld *= (byte)Test.instanceCount;
                        switch (((i % 6) * 5) + 44) {
                        case 56:
                            i15 = 2;
                            do {
                                Test.iFld += (int)Test.instanceCount;
                                i2 -= -31949;
                                if (true) break;
                                Test.iArrFld[i1 - 1] = (int)Test.instanceCount;
                                Test.fFld -= Test.fFld;
                                Test.iFld *= i2;
                                dArr = dArr;
                            } while (--i15 > 0);
                            Test.fFld += 6;
                            break;
                        case 66:
                            i2 -= (int)Test.fFld;
                            i2 *= (int)6182632113231479196L;
                            break;
                        case 60:
                            Test.fFld -= Test.fFld;
                        case 59:
                            i2 |= Test.iFld;
                            break;
                        case 45:
                        case 54:
                            Test.fFld -= i;
                            break;
                        default:
                            Test.instanceCount *= Test.instanceCount;
                        }
                        break;
                    case 26:
                        Test.instanceCount = i2;
                        break;
                    case 27:
                        Test.iFld = i;
                        break;
                    case 28:
                        Test.lArrFld[i1 - 1] = -185;
                        break;
                    case 29:
                        iArr[i] = Test.byFld;
                        break;
                    case 30:
                        Test.sFld1 += (short)(i1 | Test.instanceCount);
                        break;
                    default:
                        iArr[i1] %= (int)(i1 | 1);
                    }
                case 84:
                    i2 *= (int)Test.dFld;
                    break;
                case 85:
                    Test.lArrFld[i1] -= (long)Test.fFld;
                    break;
                case 86:
                    i2 /= (int)(i16 | 1);
                    break;
                case 87:
                    i2 = (int)Test.instanceCount;
                    break;
                default:
                    Test.sFld1 += (short)i1;
                }
            }
        } while (++i < 190);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i15 dArr fArr = " + i15 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("sFld Test.dFld Test.sFld1 = " + sFld + "," + Double.doubleToLongBits(Test.dFld) + ","
            + Test.sFld1);
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
