// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-240788709L;
    public static boolean bFld=false;
    public static double dFld=-49.75388;
    public static float fFld=65.926F;
    public static int iFld=-51365;
    public double dArrFld[]=new double[N];

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9) {

        int i10=-32600, i11=9, i12=41, i13=-11, i14=-51885, i15=54988, iArr1[]=new int[N];
        byte by1=-64;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 39.43848);
        FuzzerUtils.init(iArr1, 8);

        Test.dFld = 42.83205;
        for (i10 = 3; i10 < 302; ++i10) {
            for (i12 = 1; i12 < 6; i12++) {
                i9 = (int)-52.249F;
                i9 += (((i12 * by1) + i11) - i12);
                i14 = i9;
                i15 = 1;
                while ((i15 += 2) < 2) {
                    Test.instanceCount += i15;
                    by1 += (byte)(-51 + (i15 * i15));
                    Test.instanceCount -= Test.instanceCount;
                    i13 += (i15 | i15);
                    dArr[i12 + 1] = i14;
                }
                Test.fFld = i10;
                iArr1[i12 + 1] <<= (int)Test.instanceCount;
                i9 += (int)Test.fFld;
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + by1 + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i5=48, i6=-52, i7=-4, i8=114, i16=-1, i17=-7, i18=-3, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -124);

        for (i5 = 4; i5 < 184; ++i5) {
            for (i7 = 9; i7 > 1; --i7) {
                Test.instanceCount = (-((++iArr[i7]) - iMeth1(i16)));
                for (i17 = 1; i17 < 2; i17++) {
                    if (Test.bFld) {
                        try {
                            i16 = (i6 / i5);
                            i18 = (-15470 / i7);
                            i16 = (i7 % -51);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        Test.instanceCount = -31937L;
                        i18 += (i17 + Test.fFld);
                    }
                    iArr[i5 + 1] = i6;
                    Test.bFld = Test.bFld;
                    i16 >>= i18;
                    if (i17 != 0) {
                    }
                    Test.instanceCount += (long)Test.fFld;
                    Test.instanceCount += i17;
                }
                i18 += (int)(0.892F + (i7 * i7));
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public long lMeth(int i1, int i2) {

        int i3=-114, i4=9449, i19=13, i20=-10799, i21=128, i22=187;
        byte by=-92;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i3 = 24; 393 > i3; ++i3) {
            i1 = i3;
            i2 += (((i3 * by) + i1) - i3);
            i4 = (i4--);
            if (bArr[i3 - 1] = (((Test.bFld = Test.bFld) ^ Test.bFld) == (Test.bFld = (i1 != Test.instanceCount))))
                continue;
            i1 = ((iMeth() * 117) * i4);
        }
        if (Test.bFld) {
            if (Test.bFld) {
                for (i19 = 21; 374 > i19; ++i19) {
                    for (i21 = 5; 1 < i21; i21--) {
                        i4 *= (int)Test.dFld;
                        Test.instanceCount += i3;
                        i1 -= i3;
                        Test.instanceCount = i19;
                        i4 = 124;
                    }
                }
            }
        } else {
            Test.dFld = -2744521868012146908L;
        }
        long meth_res = i1 + i2 + i3 + i4 + by + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-27272, i23=1, i24=151, i25=13, i26=-4, i27=5755, i28=-20, i29=5, i30=48696, iArr2[]=new int[N];
        double d=79.73462;
        short s=27123;
        float f=-72.865F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -979);
        FuzzerUtils.init(lArr, -5L);

        i += Integer.reverseBytes((int)((i + 53812) * (i - d)));
        i >>= (int)lMeth(i, i);
        Test.instanceCount = i;
        for (i23 = 9; i23 < 181; ++i23) {
            Test.bFld = Test.bFld;
            iArr2[i23] += i24;
            Test.bFld = Test.bFld;
            lArr[i23 - 1] <<= Test.instanceCount;
            i24 *= (int)Test.instanceCount;
            i -= s;
            iArr2[i23 + 1] *= 186;
            Test.iFld += (((i23 * Test.instanceCount) + i) - Test.instanceCount);
            Test.instanceCount += (long)Test.dFld;
        }
        for (i25 = 8; 128 > i25; ++i25) {
            for (f = 2; 209 > f; ++f) {
                iArr2[(int)(f - 1)] -= -104;
                i28 = 1;
                while (++i28 < 2) {
                    byte by2=14;
                    by2 -= (byte)i25;
                }
                switch ((int)(((f % 2) * 5) + 52)) {
                case 53:
                    i += i26;
                    s >>= (short)Test.iFld;
                    Test.dFld -= s;
                case 54:
                    i26 *= i25;
                    Test.instanceCount += -14;
                    for (i29 = i25; i29 < 2; i29++) {
                        dArrFld[i29] += i24;
                        i += (int)244L;
                        Test.fFld *= i;
                        i = (int)Test.instanceCount;
                        i *= i;
                    }
                    break;
                default:
                    i27 += (int)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i d i23 = " + i + "," + Double.doubleToLongBits(d) + "," + i23);
        FuzzerUtils.out.println("i24 s i25 = " + i24 + "," + s + "," + i25);
        FuzzerUtils.out.println("i26 f i27 = " + i26 + "," + Float.floatToIntBits(f) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("iArr2 lArr = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.dFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.iFld dArrFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
