// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-139L;
    public static byte byFld=113;
    public static boolean bFld=false;
    public static volatile short sFld=25342;
    public volatile double dFld=-64.5972;
    public static volatile int iFld=-191;
    public static long lArrFld[]=new long[N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -9L);
        FuzzerUtils.init(Test.lArrFld1, -181L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static void vSmallMeth(int i4, int i5, long l) {

        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -127.62717);

        dArr = dArr;
        vSmallMeth_check_sum += i4 + i5 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth1(long l1) {

        int i8=13, i9=57200, i10=-7, i11=-4, iArr2[]=new int[N], iArr3[]=new int[N];
        double d1=-2.75617;
        float f2=0.586F;
        short s=801;

        FuzzerUtils.init(iArr2, -158);
        FuzzerUtils.init(iArr3, -153);

        i8 = 303;
        while (--i8 > 0) {
            i9 += i9;
            i9 *= (int)d1;
            f2 += (((i8 * l1) + i8) - i9);
            iArr2[i8 + 1] >>= i9;
            for (i10 = 1; 5 > i10; i10++) {
                iArr2[i10 + 1] += -26646;
                if (Test.bFld) break;
                switch (((93 >>> 1) % 4) + 115) {
                case 115:
                    i9 += i10;
                    iArr2[i10 - 1] = (int)d1;
                    f2 -= -1.948F;
                    break;
                case 116:
                    i11 += (int)Test.instanceCount;
                    break;
                case 117:
                    iArr2[i8 + 1] -= i8;
                    iArr3[i10] >>= s;
                    break;
                case 118:
                    i9 = i8;
                    break;
                default:
                    s -= (short)i9;
                }
            }
        }
        long meth_res = l1 + i8 + i9 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i10 + i11 + s +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(iArr3);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(float f1, int i7) {

        double d2=124.33855;
        int i13=-211, i14=-14, i15=-32961, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -52634);

        i7 += Short.reverseBytes((short)((iArr1[(i7 >>> 1) % N] &= (int)Test.instanceCount) * lMeth1(-60189L)));
        d2 *= i7;
        i7 = 31837;
        iArr1[(i7 >>> 1) % N] = (int)Test.instanceCount;
        for (int i12 : iArr1) {
            i12 += 224;
            Test.instanceCount ^= 167;
            switch ((((i7 >>> 1) % 1) * 5) + 23) {
            case 28:
                i7 &= i12;
                i12 += i7;
                break;
            }
            i12 += i7;
            for (i13 = 1; i13 < 4; i13++) {
                iArr1 = iArr1;
                i14 <<= i14;
                i14 += i15;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i7 + Double.doubleToLongBits(d2) + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(double d) {

        int i6=76, i16=237;
        float f3=-55.953F;

        vSmallMeth(-i6, i6++, (long)(Math.max(iMeth(f3, i6), i6) + 0.98863));
        i16 = 1;
        do {
            i6 <<= 8;
            Test.lArrFld = Test.lArrFld1;
        } while (++i16 < 132);
        Test.sFld &= (short)i16;
        long meth_res = Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f3) + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=2, i2=221, i3=243, i17=230, iArr[]=new int[N];
        float f=-2.853F;
        double d3=-48.70844;

        FuzzerUtils.init(iArr, -27603);

        for (i = 10; i < 358; i++) {
            iArr = iArr;
            i2 = 1;
            while (++i2 < 72) {
                i1 = (int)(-((i - Test.byFld) - (i1 + f)));
                i3 += (((i2 * Test.instanceCount) + i1) - i1);
                i3 += i2;
                switch ((i % 2) + 63) {
                case 63:
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(i1++, i, lMeth(dFld));
                    if (Test.bFld) {
                        i1 += (i2 * i2);
                        for (d3 = 1; d3 < 1; d3++) {
                            i17 -= -170;
                            i17 += i17;
                            dFld %= (i1 | 1);
                            Test.instanceCount >>= i1;
                            Test.instanceCount += (long)((long)d3 ^ i3);
                            i3 += (int)(((d3 * Test.instanceCount) + i1) - Test.instanceCount);
                            i1 += i;
                            Test.instanceCount += (long)d3;
                        }
                    } else if (Test.bFld) {
                        if (false) break;
                    }
                    Test.lArrFld[i + 1] = i2;
                    break;
                case 64:
                    Test.iFld &= (int)Test.instanceCount;
                    break;
                default:
                    f += (i2 * i2);
                    Test.sFld -= (short)i1;
                    iArr[i2 - 1] -= (int)f;
                    i3 += (int)Test.instanceCount;
                }
                switch ((i2 % 1) + 77) {
                case 77:
                    Test.bFld = false;
                    i1 = i2;
                    break;
                default:
                    Test.iFld = (int)4L;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f i3 d3 = " + Float.floatToIntBits(f) + "," + i3 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i17 iArr = " + i17 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.bFld = " + Test.instanceCount + "," + Test.byFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld dFld Test.iFld = " + Test.sFld + "," + Double.doubleToLongBits(dFld) + "," +
            Test.iFld);
        FuzzerUtils.out.println("Test.lArrFld Test.lArrFld1 = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld1));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
