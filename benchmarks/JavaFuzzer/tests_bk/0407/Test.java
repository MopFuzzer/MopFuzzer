// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7730003960938305776L;
    public static short sFld=-30150;
    public static float fFld=1.466F;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i5) {

        int i6=-142, i7=-3321, i8=12382;
        long l1=25L;
        boolean b=false;
        short sArr[]=new short[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(sArr, (short)-15581);
        FuzzerUtils.init(dArr1, 2.114128);

        for (i6 = 2; i6 < 301; i6++) {
            l1 = 1;
            while (++l1 < 6) {
                Test.instanceCount *= i6;
                sArr[(int)(l1 + 1)] = (short)i7;
                dArr1[(int)(l1)] -= 3233303869L;
                Test.instanceCount += i5;
                i8 = 1;
                do {
                    byte by=82;
                    i5 += (int)l1;
                    Test.fFld = i7;
                    i5 &= (int)Test.instanceCount;
                    i5 += (((i8 * Test.fFld) + i8) - by);
                    if (b) continue;
                    by = (byte)i6;
                    i5 += i8;
                    i7 = (int)Test.instanceCount;
                } while (++i8 < 1);
            }
        }
        long meth_res = i5 + i6 + i7 + l1 + i8 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(double d) {

        int i2=-15610, i3=44265, i4=69, i9=-4, i10=21591;
        boolean b1=false;
        double dArr2[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr2, 49.9915);
        FuzzerUtils.init(lArr, 4007610683L);

        i2 *= (++Test.sFld);
        for (i3 = 4; 297 > i3; i3++) {
            i2 += (((i3 * Test.fFld) + i2) - i4);
            Test.iArrFld[i3] *= (int)(i3 + (fMeth(2) - 9));
            i2 <<= (int)Test.instanceCount;
            Test.iArrFld[i3 + 1] -= i4;
            if (b1) {
                for (i9 = 6; i9 > 1; --i9) {
                    Test.fFld *= i10;
                    dArr2 = dArr2;
                    switch ((i3 % 7) + 80) {
                    case 80:
                        dArr2[i3 - 1] -= -5;
                        i4 = (int)Test.fFld;
                        i10 *= i10;
                        d += Test.instanceCount;
                        break;
                    case 81:
                        Test.fFld -= 6732201080840625820L;
                        break;
                    case 82:
                        Test.instanceCount = i4;
                        break;
                    case 83:
                        Test.iArrFld[i3 + 1] ^= i3;
                        break;
                    case 84:
                    case 85:
                        Test.iArrFld[i3 - 1] >>= 14;
                        break;
                    case 86:
                        if (i2 != 0) {
                        }
                        break;
                    default:
                        lArr[i3] >>= i10;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + i9 + i10 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth() {

        long l=32667L, lArr1[]=new long[N];
        short s1=7907;
        float f=2.149F;
        int i1=-46070, i11=2320, i12=-57532, i14=-5, i15=-19627, i16=58, i17=-40;
        double d1=106.44738, dArr[]=new double[N];
        byte by1=125;

        FuzzerUtils.init(dArr, 105.127571);
        FuzzerUtils.init(lArr1, 207L);

        for (int i : Test.iArrFld) {
            Test.instanceCount &= (long)(l - ((110 * dArr[(i >>> 1) % N]) * s1));
        }
        f *= Math.max(i1, iMeth(d1));
        for (i11 = 13; i11 < 273; i11++) {
            switch (((i1 >>> 1) % 4) + 48) {
            case 48:
                i12 = (int)l;
                i12 = i12;
                Test.iArrFld[i11] -= -146;
                for (i14 = 1; i14 < 6; ++i14) {
                    for (i16 = 1; 2 > i16; i16++) {
                        Test.iArrFld[i14] -= (int)l;
                        Test.instanceCount = -62171;
                        by1 = (byte)i14;
                    }
                    i15 += (i14 * i14);
                    f += i15;
                }
                break;
            case 49:
                lArr1 = lArr1;
                break;
            case 50:
                s1 = (short)l;
                break;
            case 51:
                Test.iArrFld[i11 - 1] += i12;
                break;
            }
        }
        long meth_res = l + s1 + Float.floatToIntBits(f) + i1 + Double.doubleToLongBits(d1) + i11 + i12 + i14 + i15 +
            i16 + i17 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=3164;
        int i18=7, i19=62827, i20=197, i21=-5789, i22=11150, i23=-7, i24=-3, i25=-1, i26=-22, i27=-9, i28=-162,
            i29=111, i30=12023, i31=-63984, i32=-44, i33=17289, i34=12, iArr[][]=new int[N][N];
        double d2=0.65539;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr, 10);

        s += (short)(((-byMeth()) - Test.fFld) - Test.instanceCount);
        i18 -= (int)Test.instanceCount;
        Test.instanceCount -= Test.instanceCount;
        i18 -= -8;
        bArr[(i18 >>> 1) % N] = Test.bFld;
        for (i19 = 13; i19 < 346; i19++) {
            for (i21 = i19; i21 < 76; i21 += 3) {
                if (Test.bFld) break;
                for (i23 = 1; i23 < 1; i23++) {
                    i24 = i24;
                    i18 = i20;
                }
            }
            i24 += i19;
            Test.iArrFld[i19] <<= 132;
            for (i25 = 2; i25 < 76; ++i25) {
                for (i27 = 1; i27 < 2; ++i27) {
                    i20 += (i27 * i27);
                }
            }
            for (i29 = 2; 76 > i29; i29++) {
                Test.bFld = Test.bFld;
                i20 = 2;
                for (i31 = i19; i31 < 2; ++i31) {
                    try {
                        i28 = (i33 % i31);
                        Test.iArrFld[i19] = (i34 / -27649);
                        i20 = (i25 % i24);
                    } catch (ArithmeticException a_e) {}
                    d2 = i20;
                    Test.bFld = Test.bFld;
                    Test.instanceCount += (i31 + i26);
                    iArr = iArr;
                    lArrFld[i29 - 1][i31] = i26;
                    i34 = i23;
                }
            }
            Test.instanceCount = i24;
            Test.instanceCount = (long)39.7776;
            i34 = 3;
        }

        FuzzerUtils.out.println("s i18 i19 = " + s + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("d2 bArr iArr = " + Double.doubleToLongBits(d2) + "," + FuzzerUtils.checkSum(bArr) +
            "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.fFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
