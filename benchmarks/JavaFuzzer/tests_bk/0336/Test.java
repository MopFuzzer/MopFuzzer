// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public int iFld=11412;
    public static int iFld1=-2;
    public static short sFld=-3258;
    public int iFld2=226;
    public boolean bFld=true;
    public float fArrFld[]=new float[N];
    public int iArrFld[][]=new int[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i1) {

        int i2=-182, i3=126, i4=-10, i5=2, i6=230, i7=5, i8=43789, i9=152, iArr1[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 163);

        if (b) {
            for (i2 = 7; 143 > i2; i2 += 2) {
                i3 -= i3;
                if (b) continue;
                bArr[i2] = b;
                for (i4 = 1; i4 < 23; ++i4) {
                    i3 += (41601 + (i4 * i4));
                }
                Test.iFld1 += (i2 ^ Test.iFld1);
                iArr1[i2 + 1] -= (int)Test.instanceCount;
                if (i3 != 0) {
                    vMeth2_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 +
                        FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                for (i6 = i2; i6 < 23; ++i6) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        Test.instanceCount = i6;
                        Test.instanceCount >>>= Test.iFld1;
                        Test.instanceCount = Test.instanceCount;
                    }
                }
            }
        }
        vMeth2_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l1) {

        float f=33.616F;
        byte by=98;
        boolean b1=true, bArr1[]=new boolean[N];
        int i10=2, i11=95, i12=0, iArr2[]=new int[N];
        double d=-2.120722;

        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr2, 12);

        f += (Test.iFld1++);
        Test.iFld1 *= (int)(l1 * (++Test.iFld1));
        vMeth2(Test.iFld1);
        by = (byte)Test.iFld1;
        Test.instanceCount = -55L;
        l1 = Test.iFld1;
        bArr1[(-253 >>> 1) % N] = b1;
        for (i10 = 5; i10 < 280; i10++) {
            Test.iFld1 <<= Test.iFld1;
        }
        Test.instanceCount -= Test.instanceCount;
        i12 = 1;
        do {
            iArr2 = iArr2;
            i11 >>>= i10;
            Test.instanceCount -= (long)d;
            i11 = i12;
        } while (++i12 < 245);
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + by + (b1 ? 1 : 0) + i10 + i11 + i12 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l) {

        int i=-64478, i13=-162, i14=59562, iArr3[]=new int[N];
        float f1=33.890F, fArr[]=new float[N];
        boolean b2=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(fArr, 121.126F);
        FuzzerUtils.init(iArr3, -129);

        i = 1;
        while (++i < 372) {
            vMeth1(l);
            Test.sFld = (short)Test.instanceCount;
            switch (((i % 2) * 5) + 54) {
            case 57:
            case 55:
                lArr[i + 1] = Test.instanceCount;
                fArr[i] -= l;
                Test.iFld1 -= (int)f1;
                break;
            }
        }
        for (i13 = 3; i13 < 122; i13++) {
            Test.iFld1 = 13;
            Test.instanceCount = i14;
            Test.iFld1 <<= i14;
            iArr3[i13 + 1] -= i14;
            if (b2) continue;
        }
        vMeth_check_sum += l + i + Float.floatToIntBits(f1) + i13 + i14 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        long l2=19L, lArr1[]=new long[N];
        int i15=3, i16=-27, i17=-1, i18=-6, iArr[]=new int[N];
        double d1=104.18292, d2=-2.99466;

        FuzzerUtils.init(iArr, 21106);
        FuzzerUtils.init(lArr1, -123315472L);

        iFld <<= (++iArr[(0 >>> 1) % N]);
        iFld -= (int)(Float.intBitsToFloat(iFld += iFld) - iFld);
        vMeth(Test.instanceCount);
        Test.instanceCount <<= iFld;
        for (l2 = 2; l2 < 268; ++l2) {
            iFld2 = i15;
            Test.instanceCount += l2;
            iArr[(int)(l2 + 1)] += (int)2.977F;
        }
        for (float f2 : fArrFld) {
            Test.sFld = (short)i15;
            iFld *= (int)l2;
        }
        iArr[(i15 >>> 1) % N] = iFld2;
        for (float f3 : fArrFld) {
            i16 = 1;
            while (++i16 < 63) {
                iArr[i16 - 1] = Test.iFld1;
                Test.iFld1 >>>= i16;
                d1 += -13;
            }
            lArr1[(12 >>> 1) % N] /= 187;
            d2 = 1;
            while (++d2 < 63) {
                iFld <<= iFld;
                Test.instanceCount = l2;
                iFld = iFld;
                try {
                    iFld2 = (iArr[(int)(d2 - 1)] % -8803);
                    i15 = (39 / i16);
                    iArr[(int)(d2)] = (i16 / 238);
                } catch (ArithmeticException a_e) {}
                switch ((int)((d2 % 9) + 34)) {
                case 34:
                    for (i17 = 1; i17 > 1; --i17) {
                        Test.instanceCount += i18;
                        if (bFld) {
                            i15 = i16;
                            iArrFld = iArrFld;
                            Test.instanceCount += -9831;
                        } else if (false) {
                            Test.instanceCount = i16;
                        } else if (bFld) {
                            iFld2 >>= i15;
                        }
                    }
                    break;
                case 35:
                    f3 = iFld2;
                    break;
                case 36:
                    f3 += iFld2;
                case 37:
                    Test.iFld1 = i17;
                    break;
                case 38:
                    Test.iFld1 += (int)(d2 + l2);
                    break;
                case 39:
                    d1 = 221;
                    break;
                case 40:
                    iFld -= (int)d1;
                    break;
                case 41:
                    d1 = i17;
                case 42:
                    iArrFld[(int)(d2 - 1)][(int)(d2)] -= iFld2;
                    break;
                default:
                    i15 += (int)(d2 * d2);
                }
            }
        }

        FuzzerUtils.out.println("l2 i15 i16 = " + l2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("d1 d2 i17 = " + Double.doubleToLongBits(d1) + "," + Double.doubleToLongBits(d2) + ","
            + i17);
        FuzzerUtils.out.println("i18 iArr lArr1 = " + i18 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("Test.sFld iFld2 bFld = " + Test.sFld + "," + iFld2 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
