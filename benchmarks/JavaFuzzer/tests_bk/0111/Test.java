// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=1581991124L;
    public float fFld=-1.896F;
    public boolean bFld=true;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i11) {

        short s1=-11542;
        int i12=0, i13=-4, i14=6, i15=-39, i16=-37364, i17=11, i18=50841;
        boolean b=true;

        i11 ^= i11;
        s1 = (short)-63929;
        for (i12 = 5; i12 < 199; ++i12) {
            i13 -= (int)f1;
            Test.instanceCount <<= i12;
        }
        i13 &= i12;
        i13 = i13;
        if (b) {
            for (i14 = 7; i14 < 325; i14++) {
                Test.instanceCount = (long)f1;
                i16 = 1;
                while (++i16 < 5) {
                    s1 = (short)f1;
                    for (i17 = 1; i17 > 1; --i17) {
                        Test.instanceCount <<= i14;
                        if (i16 != 0) {
                            vMeth1_check_sum += Float.floatToIntBits(f1) + i11 + s1 + i12 + i13 + i14 + i15 + i16 + i17
                                + i18 + (b ? 1 : 0);
                            return;
                        }
                    }
                }
            }
            vMeth1_check_sum += Float.floatToIntBits(f1) + i11 + s1 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1
                : 0);
            return;
        } else if (b) {
            i11 -= (int)f1;
        } else if (b) {
            i18 = i18;
        } else {
            i11 += i14;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i11 + s1 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0);
    }

    public static int iMeth(int i9, int i10) {

        double d=-1.54372;
        int i19=-47789, i20=59908, i21=24870, i22=-58155, i23=49949, iArr2[][]=new int[N][N];
        float f2=90.460F;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -3450294206L);
        FuzzerUtils.init(iArr2, 87);

        lArr[(i10 >>> 1) % N][(11 >>> 1) % N] = (long)((-(-(i10 + i10))) + ((--i10) * (-1.657F - (d + 111))));
        vMeth1(0.540F, i9);
        for (i19 = 10; 328 > i19; ++i19) {
            try {
                i20 = (i20 % i10);
                iArr2[i19][i19 - 1] = (i10 / i19);
                iArr2[i19 + 1][i19 - 1] = (i19 % i20);
            } catch (ArithmeticException a_e) {}
            f2 -= i19;
            f2 *= i19;
            iArr2[i19 - 1][i19 - 1] += (int)Test.instanceCount;
        }
        i21 = 1;
        while (++i21 < 359) {
            for (i22 = 1; 5 > i22; ++i22) {
                i10 = i10;
            }
        }
        f2 += i21;
        i9 *= i19;
        long meth_res = i9 + i10 + Double.doubleToLongBits(d) + i19 + i20 + Float.floatToIntBits(f2) + i21 + i22 + i23
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=-20015, i4=-14492, i5=95, i6=23101, i7=-10, i8=-1, iArr1[]=new int[N];
        float f=-25.463F;
        short s=-10296;
        byte by=-121;
        boolean b1=true;

        FuzzerUtils.init(iArr1, -13);

        i2 = (int)Test.instanceCount;
        i3 = 187;
        do {
            i2 += (14512 + (i3 * i3));
        } while (--i3 > 0);
        for (i4 = 2; i4 < 172; i4++) {
            for (i6 = 1; 9 > i6; i6 += 3) {
                i8 = 1;
                while (++i8 < 5) {
                    i7 += ((i5--) * i6);
                    i5 = i4;
                    i5 += (((i8 * f) + i5) - i3);
                }
                i7 += (((i6 * i2) + f) - s);
                iArr1[i6] <<= (iMeth(i4, i4) + by);
                switch (((i4 >>> 1) % 5) + 121) {
                case 121:
                    s &= (short)Test.instanceCount;
                    i5 += i6;
                    i2 -= by;
                    break;
                case 122:
                    i5 += (-7794 + (i6 * i6));
                    break;
                case 123:
                    if (b1) break;
                    break;
                case 124:
                    i2 -= i6;
                    break;
                case 125:
                    iArr1[i4 + 1] <<= (int)Test.instanceCount;
                    break;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + s + by + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        long l=58768L;
        int i=-5337, i1=62, i24=-5630, i25=7, i26=123, i27=208, iArr[]=new int[N];
        double d1=1.40658;
        byte by1=126;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr, 210);
        FuzzerUtils.init(fArr, 35.772F);

        for (l = 12; l < 385; ++l) {
            i1 = 68;
            while ((i1 -= 2) > 0) {
                try {
                    i = (i % 122);
                    i = (-121 % i);
                    i = (i % iArr[i1]);
                } catch (ArithmeticException a_e) {}
                fFld *= (i1 - Integer.reverseBytes(i));
                i *= i;
            }
            vMeth(25566);
            if (bFld) continue;
            i = (int)fFld;
            fFld += l;
            for (i24 = (int)(l); i24 < 68; ++i24) {
                fFld *= l;
                i *= i25;
            }
            i = i24;
            Test.instanceCount += i24;
            iArr[(int)(l + 1)] = i;
            i += (int)(l + Test.instanceCount);
        }
        d1 += -14;
        i = 90;
        Test.instanceCount += by1;
        Test.instanceCount *= (long)d1;
        i26 = 1;
        while (++i26 < 294) {
            fArr[i26 - 1] -= l;
            i += i26;
            Test.instanceCount <<= 35673;
            i25 += i26;
            i27 = 1;
            do {
                Test.instanceCount += by1;
                i25 += 29939;
                i = by1;
                i25 += (((i27 * i) + i1) - i27);
            } while (++i27 < 86);
        }

        FuzzerUtils.out.println("l i i1 = " + l + "," + i + "," + i1);
        FuzzerUtils.out.println("i24 i25 d1 = " + i24 + "," + i25 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("by1 i26 i27 = " + by1 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("iArr fArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount fFld bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + (bFld ? 1 : 0));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
