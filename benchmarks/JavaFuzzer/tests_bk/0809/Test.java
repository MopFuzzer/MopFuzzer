// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static double dFld=10.15458;
    public static byte byFld=94;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 67);
        FuzzerUtils.init(Test.lArrFld, -3374638035L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i, long l) {


        i = (int)(((156 + (-12 - (i - 13))) * (Test.instanceCount * i)) - ((++i) - (-(i--))));
        vSmallMeth_check_sum += i + l;
    }

    public static void vMeth(int i6, long l2, long l3) {

        int i7=-5, i8=15188, i9=-13, i10=118, i11=243, i12=16861, i13=-239, i14=-221, iArr[]=new int[N];
        byte by=-10;
        short s=19662;

        FuzzerUtils.init(iArr, 16);

        for (i7 = 2; 220 > i7; i7++) {
            for (i9 = 1; i9 < 7; i9 += 2) {
                l2 = Test.instanceCount;
                for (i11 = 1; i11 < 3; ++i11) {
                    float f1=-42.950F;
                    i8 += (int)l3;
                    iArr[i11 - 1] = (int)f1;
                    by += (byte)i11;
                    i12 = (int)l3;
                }
                i13 = 3;
                do {
                    i10 -= i12;
                    Test.instanceCount += (60240L + (i13 * i13));
                    i14 += i13;
                    i8 -= (int)Test.dFld;
                } while (--i13 > 0);
            }
            iArr[i7 - 1] *= i12;
            i8 >>= s;
        }
        vMeth_check_sum += i6 + l2 + l3 + i7 + i8 + i9 + i10 + i11 + i12 + by + i13 + i14 + s +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i15=-136, i16=10, i17=-14, i18=-213, i19=19813, iArr1[]=new int[N];
        long l4=-2015365792413672993L;

        FuzzerUtils.init(iArr1, -13);

        vMeth(i15, Test.instanceCount, Test.instanceCount);
        i15 += i15;
        for (i16 = 5; i16 < 176; ++i16) {
            try {
                i15 = (i16 / i16);
                i17 = (-1412290756 / Test.iArrFld[i16][i16 - 1]);
                i15 = (i15 / Test.iArrFld[i16 + 1][i16]);
            } catch (ArithmeticException a_e) {}
            i15 -= Test.byFld;
        }
        Test.iArrFld[(186 >>> 1) % N] = iArr1;
        i15 = i17;
        Test.dFld -= i15;
        iArr1[(i16 >>> 1) % N] += i16;
        if (Test.bFld) {
            for (i18 = 22; i18 < 352; i18++) {
                Test.dFld += Test.dFld;
                l4 = i18;
                if (Test.bFld) break;
                Test.instanceCount *= Test.instanceCount;
            }
        } else if (Test.bFld) {
            Test.instanceCount -= l4;
        } else if (Test.bFld) {
            Test.dFld = i16;
        }
        long meth_res = i15 + i16 + i17 + i18 + i19 + l4 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, long l1, float f) {

        int i4=14, i5=6, i20=-20425, i21=246, i22=0, i23=-9;
        long lArr[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 85770487L);
        FuzzerUtils.init(fArr, -1.357F);

        for (i4 = 7; i4 < 249; i4++) {
            i5 %= (int)((((i4 - 1) - (-lArr[i4 + 1][i4])) * (iMeth() * i5)) | 1);
        }
        for (i20 = 310; i20 > 13; --i20) {
            i21 *= i4;
            if (Test.bFld) {
                fArr = fArr;
                i5 = i5;
                f -= i21;
            } else if (Test.bFld) {
                try {
                    i21 = (i20 % Test.iArrFld[i20][i20 + 1]);
                    i21 = (i4 / 17662);
                    Test.iArrFld[i20][i20 - 1] = (i5 / -27271);
                } catch (ArithmeticException a_e) {}
                for (i22 = i20; i22 < 6; i22++) {
                    try {
                        Test.iArrFld[i20][i20] = (i3 % 212);
                        i5 = (99 % i3);
                        Test.iArrFld[i22 + 1][i22] = (i20 / 337065687);
                    } catch (ArithmeticException a_e) {}
                    i21 += (i22 * l1);
                    if (Test.bFld) continue;
                    Test.bFld = Test.bFld;
                    i3 -= 9;
                }
            } else {
                Test.bFld = true;
            }
        }
        long meth_res = i3 + l1 + Float.floatToIntBits(f) + i4 + i5 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=35, i2=-3, i24=9071, i25=12, i26=-123, i27=-1, i28=-30942, i29=6;
        float f2=26.330F;
        short s1=-19304;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -77.62780);

        for (int smallinvoc=0; smallinvoc<231; smallinvoc++) vSmallMeth(Integer.reverseBytes((int)((i1 +
            Test.instanceCount) * i1)), (long)(((-Test.instanceCount) - dArr[(59 >>> 1) % N]) * (++i1)));
        i2 = 1;
        do {
            vSmallMeth((int)((lMeth(i2, Test.instanceCount, -3.225F) * i2) * i1), Test.instanceCount);
            i1 += (((i2 * Test.instanceCount) + i1) - i1);
            for (i24 = 4; 78 > i24; ++i24) {
                Test.instanceCount -= i2;
                f2 = 1;
                do {
                    Test.instanceCount -= i2;
                    Test.lArrFld[(int)(f2)] = i25;
                    if (true) break;
                    i1 += (int)(((f2 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                    Test.iArrFld[i24 + 1][i2 + 1] = (int)1.61F;
                    Test.instanceCount >>= i2;
                    if (true) continue;
                    try {
                        i25 = (i25 % 246);
                        i1 = (Test.iArrFld[i2][i2] % i24);
                        Test.iArrFld[i2][i24 - 1] = (Test.iArrFld[i2 + 1][(int)(f2 - 1)] % -17321);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = s1;
                } while ((f2 += 3) < 2);
                for (i26 = 1; 2 > i26; i26 += 3) {
                    Test.iArrFld[i24 - 1][i24] <<= i27;
                    try {
                        i25 = (i28 % i2);
                        i25 = (i25 / i24);
                        i27 = (i28 / i26);
                    } catch (ArithmeticException a_e) {}
                    i28 >>= i2;
                }
                i29 = 1;
                while (++i29 < 2) {
                    Test.iArrFld[i2][i24 - 1] >>= Test.byFld;
                    i25 += (int)(-13L + (i29 * i29));
                }
                Test.iArrFld[i24][i2 - 1] ^= (int)Test.instanceCount;
                Test.iArrFld[i24 + 1][i24] *= Test.byFld;
                Test.dFld += i2;
                i28 *= (int)Test.dFld;
                i1 ^= i25;
            }
            if (Test.bFld) break;
            try {
                i25 = (i26 % i26);
                Test.iArrFld[i2][i2 - 1] = (i29 % i27);
                i27 = (i25 / i25);
            } catch (ArithmeticException a_e) {}
        } while (++i2 < 323);

        FuzzerUtils.out.println("i1 i2 i24 = " + i1 + "," + i2 + "," + i24);
        FuzzerUtils.out.println("i25 f2 s1 = " + i25 + "," + Float.floatToIntBits(f2) + "," + s1);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 dArr = " + i29 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
