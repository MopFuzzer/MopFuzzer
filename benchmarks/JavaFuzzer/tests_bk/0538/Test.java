// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static boolean bFld=true;
    public static short sFld=31018;
    public static volatile int iFld=-138;
    public static int iFld1=202;
    public float fFld=101.134F;
    public byte byFld=60;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 737332451L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth1(int i1, int i2, long l) {

        float f=-32.980F;

        i1 = (int)(((f * Test.instanceCount) + i1) * ((-(Test.instanceCount + i2)) + (0 + i2)));
        vMeth1_check_sum += i1 + i2 + l + Float.floatToIntBits(f);
    }

    public static void vMeth2(short s) {

        int i4=63651, i5=7, i6=6, i7=76, i8=52476, i9=222, iArr[]=new int[N];
        float f2=0.975F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(fArr, 84.961F);
        FuzzerUtils.init(iArr, 0);

        for (i4 = 5; 204 > i4; ++i4) {
            for (i6 = 1; 8 > i6; ++i6) {
                i7 <<= (int)Test.instanceCount;
                for (i8 = 1; i8 < 2; i8++) {
                    fArr[i6] -= Test.instanceCount;
                    i7 += (int)Test.instanceCount;
                    i7 = -48306;
                    i7 += i8;
                    if (b) {
                        Test.instanceCount = i8;
                        i7 >>>= i4;
                        iArr[i8 + 1] = i7;
                        Test.instanceCount |= Test.instanceCount;
                    } else if (b) {
                        Test.lArrFld[i6 - 1] *= (long)f2;
                        i9 |= i5;
                    } else {
                        i9 -= i7;
                    }
                }
            }
        }
        vMeth2_check_sum += s + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth() {

        int i3=-12, i10=9, i11=11, i12=8, iArr1[]=new int[N];
        byte by=39;
        boolean b1=true;
        float f3=1.604F;

        FuzzerUtils.init(iArr1, 11522);

        i3 = 1;
        while (++i3 < 248) {
            vMeth2((short)(11732));
            for (i10 = i3; i10 < 7; i10++) {
                i11 += i10;
                Test.instanceCount = by;
                i12 = 1;
                while (++i12 < 1) {
                    Test.lArrFld[i10] <<= Test.instanceCount;
                    iArr1[i10] -= i12;
                    try {
                        iArr1[i12] = (-44929 % i10);
                        i11 = (iArr1[i3 - 1] % 116360091);
                        i11 = (520773970 / i3);
                    } catch (ArithmeticException a_e) {}
                    try {
                        i11 = (i11 % 618263257);
                        i11 = (i11 % 163);
                        i11 = (i12 % i3);
                    } catch (ArithmeticException a_e) {}
                }
                i11 = 118;
                b1 = b1;
                i11 /= (int)(i3 | 1);
                f3 = Test.instanceCount;
                Test.instanceCount = by;
            }
        }
        long meth_res = i3 + i10 + i11 + by + i12 + (b1 ? 1 : 0) + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i) {

        float f1=41.393F;
        int i13=51924, i15=-51187, i16=-38399, i17=-133, iArr2[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 191);
        FuzzerUtils.init(dArr, -47.35153);

        vMeth1((int)(((--f1) - Test.instanceCount) - (i--)), -61716, lMeth());
        Test.bFld = true;
        i13 = 1;
        do {
            Test.instanceCount += (long)f1;
            for (i15 = 1; i15 < 5; ++i15) {
                i17 = 1;
                do {
                    i += i15;
                    i16 = (int)Test.instanceCount;
                    f1 = i;
                    dArr = dArr;
                    i &= i15;
                    Test.sFld ^= (short)i13;
                    i *= i15;
                    try {
                        i = (iArr2[i17 + 1] / -19685);
                        i = (iArr2[i17 - 1] / 42576);
                        i16 = (i17 % -58);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (long)f1;
                } while (++i17 < 2);
            }
        } while (++i13 < 320);
        vMeth_check_sum += i + Float.floatToIntBits(f1) + i13 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        double d=0.124993, d1=0.65351;
        int i18=34250, i19=7, i20=-41831, iArr3[][]=new int[N][N];
        short sArr[][]=new short[N][N];
        float fArr1[]=new float[N];

        FuzzerUtils.init(iArr3, -3);
        FuzzerUtils.init(sArr, (short)-4183);
        FuzzerUtils.init(fArr1, -1.967F);

        vMeth(Test.iFld);
        d = 1;
        while (++d < 291) {
            for (i18 = 2; i18 < 86; i18 += 2) {
                for (d1 = 3; d1 > 1; d1--) {
                    int i21=-2;
                    i19 += Test.iFld;
                    Test.instanceCount = Test.instanceCount;
                    iArr3[(int)(d1 + 1)][(int)(d + 1)] >>= i20;
                    i20 = i19;
                    switch ((i18 % 10) + 120) {
                    case 120:
                        i19 = i20;
                        switch ((((i19 >>> 1) % 9) * 5) + 45) {
                        case 81:
                            Test.instanceCount = 56;
                            Test.instanceCount += (long)d;
                        case 59:
                            Test.iFld -= (int)d1;
                            Test.iFld += (int)(d1 * d1);
                            switch ((i18 % 2) + 80) {
                            case 80:
                                Test.iFld *= (int)-3896659673L;
                                Test.iFld = i18;
                                i19 >>= i18;
                            case 81:
                                i20 -= i19;
                            }
                            break;
                        case 46:
                            switch ((int)(((d1 % 8) * 5) + 65)) {
                            case 84:
                                i20 += Test.iFld;
                                Test.iFld1 = (int)-6359L;
                            case 76:
                                i19 += (int)d1;
                                Test.instanceCount <<= Test.instanceCount;
                            case 96:
                                fFld = i20;
                                sArr[(int)(d - 1)][i18] += (short)i20;
                                break;
                            case 69:
                                Test.iFld1 += i20;
                                iArr3[(int)(d)][(int)(d + 1)] >>= 23;
                                break;
                            case 99:
                                Test.instanceCount += (long)(-26.1005F + (d1 * d1));
                                break;
                            case 102:
                                i20 += (int)d1;
                                break;
                            case 79:
                                fArr1[i18 + 1] = fFld;
                                break;
                            case 80:
                                Test.instanceCount *= (long)fFld;
                                break;
                            }
                        case 74:
                            Test.instanceCount = Test.iFld;
                        case 80:
                            fFld *= Test.iFld1;
                            break;
                        case 53:
                            if (Test.bFld) break;
                            break;
                        case 83:
                            Test.iFld1 += Test.iFld;
                            break;
                        case 82:
                            fFld *= Test.iFld1;
                        case 72:
                            fFld += (float)(((d1 * Test.sFld) + Test.instanceCount) - Test.iFld);
                            break;
                        default:
                            Test.iFld1 += (int)(((d1 * Test.instanceCount) + Test.instanceCount) - Test.sFld);
                        }
                        break;
                    case 121:
                        Test.iFld += i20;
                    case 122:
                        fFld = Test.iFld;
                        break;
                    case 123:
                        try {
                            iArr3[i18 - 1][(int)(d + 1)] = (iArr3[i18][(int)(d1 - 1)] / -8260440);
                            Test.iFld1 = (i20 % iArr3[(int)(d + 1)][(int)(d - 1)]);
                            i19 = (i21 % -57396);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 124:
                        i21 += (int)(((d1 * i20) + i18) - i19);
                        break;
                    case 125:
                        Test.iFld1 = -16249;
                    case 126:
                        Test.iFld = i18;
                        break;
                    case 127:
                        i21 += i19;
                    case 128:
                        Test.instanceCount += (long)(d1 * d1);
                    case 129:
                        iArr3[i18 + 1][(int)(d1 - 1)] = byFld;
                        break;
                    default:
                        Test.iFld *= (int)28L;
                    }
                }
            }
        }

        FuzzerUtils.out.println("d i18 i19 = " + Double.doubleToLongBits(d) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("d1 i20 iArr3 = " + Double.doubleToLongBits(d1) + "," + i20 + "," +
            FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("sArr fArr1 = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld Test.iFld1 fFld = " + Test.iFld + "," + Test.iFld1 + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("byFld Test.lArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
