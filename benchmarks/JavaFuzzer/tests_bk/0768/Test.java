// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7682919945445440201L;
    public static double dFld=105.38946;
    public static byte byFld=116;
    public float fFld=-2.255F;
    public short sFld=-4767;
    public static boolean bFld=false;
    public static volatile int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -219);
        FuzzerUtils.init(Test.lArrFld, 13L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9, int i10) {

        float f1=0.352F;
        int i11=3, i12=41047, iArr[][]=new int[N][N];
        double d=1.31312, d1=1.89545, dArr[]=new double[N];
        short s=-5115;
        boolean b=true;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(dArr, -103.31103);
        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr, 3124684284052715672L);

        for (f1 = 1; f1 < 382; ++f1) {
            for (d = 1; d < 4; ++d) {
                s <<= (short)i10;
                Test.lArrFld[(int)(f1 - 1)] += 49;
                i12 -= i10;
                dArr[(int)(d + 1)] *= i10;
                s -= (short)i8;
                if (b) break;
                Test.iArrFld[(int)(d)] *= (int)d;
            }
            d1 += i11;
            iArr = iArr;
            i11 -= (int)1.59712;
        }
        i11 /= (int)(Test.instanceCount | 1);
        lArr = lArr;
        vMeth1_check_sum += i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + Double.doubleToLongBits(d) + i12 + s + (b
            ? 1 : 0) + Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i3, float f, int i4) {

        int i6=5677, i7=12, i13=-8, i14=2, i15=-39886;
        byte by=111;
        double d2=0.94440;

        for (int i5 : Test.iArrFld) {
            for (i6 = 1; i6 < 4; i6 += 3) {
                vMeth1(i5, i4, -98);
                for (i13 = 1; i13 < 4; ++i13) {
                    Test.instanceCount += -174;
                    f = f;
                }
                i4 += (int)2.546F;
                by = (byte)46534;
                Test.instanceCount += i6;
                i15 = 1;
                while (++i15 < 4) {
                    Test.iArrFld[i6] = i4;
                    d2 -= i13;
                    i14 += i15;
                    f -= i13;
                    i5 -= i7;
                }
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + i4 + i6 + i7 + i13 + i14 + by + i15 +
            Double.doubleToLongBits(d2);
    }

    public static float fMeth(int i1, long l, int i2) {

        float f2=0.282F, fArr[]=new float[N];
        long l2=-2947630425L;
        int i16=-16164, i17=-250, i18=5;

        FuzzerUtils.init(fArr, 0.448F);

        vMeth(i1, f2, i2);
        l2 = 348;
        while (--l2 > 0) {
            fArr[(int)(l2)] += i1;
            for (i16 = (int)(l2); 5 > i16; i16++) {
                fArr[(int)(l2 + 1)] += (float)Test.dFld;
                i1 += i2;
                i2 += (i16 * i16);
                f2 += (i16 * i16);
                if (i16 != 0) {
                }
                f2 = Test.instanceCount;
            }
        }
        i18 = 296;
        while (--i18 > 0) {
            boolean b1=true;
            Test.byFld += (byte)(i18 * i18);
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-3);
            i2 >>= 0;
            if (b1) continue;
        }
        long meth_res = i1 + l + i2 + Float.floatToIntBits(f2) + l2 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=35370, i19=-55122, i20=3, i21=-24230, i22=42200, i23=1, i24=-11688, i25=12, i26=223, i27=5, i28=0, i29=9;
        double d3=-1.46860;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 5.472F);

        i = (int)(i + fMeth(i, 4L, i));
        i19 *= i;
        for (i20 = 3; 155 > i20; i20++) {
            i *= Test.byFld;
        }
        Test.lArrFld[(i >>> 1) % N] -= 73;
        switch (((i20 >>> 1) % 9) + 3) {
        case 3:
            fArr1[(i >>> 1) % N] -= fFld;
            i22 = 1;
            while (++i22 < 126) {
                i21 *= (int)57521L;
            }
            for (i23 = 3; i23 < 175; ++i23) {
                for (i25 = 7; i25 < 146; i25++) {
                    for (d3 = 1; d3 < 2; d3++) {
                        Test.iArrFld = Test.iArrFld;
                        fFld = Test.instanceCount;
                        Test.instanceCount *= i25;
                        Test.iArrFld[i25 + 1] -= i28;
                        switch (((i19 >>> 1) % 8) + 74) {
                        case 74:
                            Test.instanceCount &= i28;
                            switch (((i19 >>> 1) % 1) + 44) {
                            case 44:
                                Test.instanceCount >>= 97;
                                fFld = -89;
                                Test.iArrFld[i25] *= Test.byFld;
                                i29 += sFld;
                            }
                            break;
                        case 75:
                            Test.lArrFld[i23] >>>= i28;
                            Test.instanceCount += i21;
                            Test.instanceCount = i21;
                        case 76:
                        case 77:
                            fFld += (float)(d3 * i25);
                            Test.instanceCount >>= i24;
                            break;
                        case 78:
                            i26 += (int)Test.instanceCount;
                            break;
                        case 79:
                            i += 193;
                            break;
                        case 80:
                        case 81:
                            fFld = i29;
                            break;
                        }
                    }
                }
            }
            break;
        case 4:
            Test.instanceCount -= Test.instanceCount;
        case 5:
        case 6:
            Test.instanceCount += i21;
            break;
        case 7:
            Test.iArrFld[(i23 >>> 1) % N] -= i23;
            break;
        case 8:
            Test.byFld += (byte)fFld;
            break;
        case 9:
            Test.byFld = (byte)i26;
        case 10:
            i19 -= sFld;
            break;
        case 11:
            Test.bFld = Test.bFld;
            break;
        default:
            Test.dFld -= i19;
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d3 i27 i28 = " + Double.doubleToLongBits(d3) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 fArr1 = " + i29 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("fFld sFld Test.bFld = " + Float.floatToIntBits(fFld) + "," + sFld + "," + (Test.bFld ?
            1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
