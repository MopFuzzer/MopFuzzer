// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-109L;
    public static volatile double dFld=21.22053;
    public short sFld=22712;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
        FuzzerUtils.init(Test.fArrFld, -114.771F);
        FuzzerUtils.init(Test.dArrFld, -2.125015);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i11, long l) {

        int i12=37464, i13=-10, i14=-43838, i15=181, i16=-59515, i17=-38509, i18=-235, i19=-220, i20=-4389, i21=96,
            iArr1[]=new int[N];
        byte by1=123, byArr[]=new byte[N];
        float f=-2.125F;
        boolean b1=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(byArr, (byte)-113);

        for (i12 = 11; i12 < 242; i12++) {
            i13 += by1;
            lArr[i12 + 1][i12 - 1] -= i13;
            i13 += (i12 * i12);
        }
        for (i14 = 4; 191 > i14; ++i14) {
            i15 = i12;
        }
        i16 = 1;
        do {
            i15 += (((i16 * i16) + i14) - i11);
        } while (++i16 < 333);
        for (i17 = 23; i17 < 378; ++i17) {
            if (b1) {
                iArr1[i17 + 1] -= (int)f;
                i19 = 1;
                while (++i19 < 5) {
                    for (i20 = 1; i17 < i20; i20--) {
                        f = i14;
                        i18 = i16;
                    }
                }
            } else if (b1) {
                f = -48225;
            } else if (b1) {
                byArr = byArr;
            } else {
                i21 += (i17 * i11);
            }
        }
        long meth_res = i11 + l + i12 + i13 + by1 + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f) + i19 + i20 +
            i21 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=-30, i6=-62, i7=-2, i8=41, i9=-17412, i10=-2522, iArr[]=new int[N];
        boolean b=true;
        byte by=-41;
        float f1=2.711F;

        FuzzerUtils.init(iArr, 13626);

        for (i5 = 7; i5 < 287; ++i5) {
            i3 += (int)Test.instanceCount;
            for (i7 = 1; i7 < 6; i7 += 3) {
                iArr = (iArr = iArr);
                for (i9 = 1; i9 < 6; ++i9) {
                    if (b = (((long)(Test.dFld + 19970) ^ by) == ((i5 + i10) * lMeth(i4, Test.instanceCount)))) break;
                    Test.instanceCount >>= i6;
                    f1 = f1;
                    Test.instanceCount += (i9 + i9);
                    by = (byte)i3;
                }
                i3 += (i7 - f1);
            }
            i6 -= -10;
            i4 ^= i9;
            i3 = i9;
        }
        Test.dFld += i8;
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + (b ? 1 : 0) + by + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(double d, int i2) {

        int i22=5478, i23=63, i25=132;
        float f2=107.678F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -36.8620);

        for (double d1 : dArr) {
            vMeth1(-2, i2);
            for (i22 = 4; i22 > 1; i22 -= 3) {
                boolean b2=true;
                i2 = i2;
                b2 = false;
                i2 = (int)-60L;
                Test.iArrFld[i22 + 1] >>= -14;
                Test.instanceCount = i23;
                i2 >>>= i23;
                i2 += i22;
            }
            d1 -= 10L;
            i23 = (int)Test.instanceCount;
            i25 = 1;
            do {
                i2 += (i25 - f2);
                f2 = Test.instanceCount;
            } while (++i25 < 4);
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i22 + i23 + i25 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-1, i1=-5, i26=219, i27=-239, i28=-198, i29=-5;
        boolean b3=true;
        long l1=-12L, lArr1[]=new long[N];
        float f3=1.705F;

        FuzzerUtils.init(lArr1, 3L);

        i *= (-(i++));
        i1 = 1;
        while (++i1 < 351) {
            vMeth(Test.dFld, -52369);
            for (i26 = i1; i26 < 72; i26++) {
                if (b3) {
                    i28 >>= (int)Test.instanceCount;
                }
                i = 4;
                i *= -11;
                i27 -= i1;
                i27 *= i1;
                for (l1 = 1; l1 < 1; l1 += 2) {
                    Test.instanceCount -= -14;
                    Test.dFld = Test.instanceCount;
                    Test.instanceCount += l1;
                    if (b3) continue;
                    lArr1[(int)(l1)] *= 21;
                    switch (((i26 % 5) * 5) + 80) {
                    case 101:
                        i27 = i27;
                        if (b3) break;
                    case 93:
                        i28 ^= 16208;
                        Test.instanceCount += (((l1 * i1) + i27) - i28);
                        sFld *= (short)i;
                    case 92:
                        Test.instanceCount += Test.instanceCount;
                        Test.fArrFld[(int)(l1)] = i27;
                        break;
                    case 91:
                        i28 += (int)l1;
                        Test.instanceCount &= i;
                        break;
                    case 97:
                        i29 += (int)(((l1 * i1) + i29) - f3);
                        i27 ^= i27;
                        i28 >>>= i27;
                        Test.iArrFld[(int)(l1 - 1)] = (int)Test.instanceCount;
                    default:
                        Test.dArrFld[i26] = i27;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 b3 = " + i27 + "," + i28 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("l1 i29 f3 = " + l1 + "," + i29 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + sFld);
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
