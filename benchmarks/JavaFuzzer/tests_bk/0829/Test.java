// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-58L;
    public static float fFld=-63.161F;
    public static byte byFld=114;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7) {

        double d2=109.4181;
        int i9=-41485, i10=49752, i11=-3, iArr1[]=new int[N];
        boolean b2=true;

        FuzzerUtils.init(iArr1, 9);

        for (int i8 : iArr1) {
            for (d2 = 1; 4 > d2; ++d2) {
                for (i10 = (int)(d2); 2 > i10; i10++) {
                    float f=63.600F;
                    f *= Test.instanceCount;
                    if (b2) break;
                }
                i9 += (int)Test.instanceCount;
                i7 -= i9;
                try {
                    i11 = (57035 % i8);
                    i9 = (iArr1[(int)(d2)] % i8);
                    i7 = (iArr1[(int)(d2)] / i8);
                } catch (ArithmeticException a_e) {}
            }
            Test.instanceCount <<= i10;
        }
        Test.instanceCount = -245;
        long meth_res = i7 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, boolean b1, int i6) {

        double d1=-57.110207;
        float f1=2.996F;
        int i12=50264, i13=37094, i14=0, i15=-142;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, 447778645L);

        Test.instanceCount = (i5 * Integer.reverseBytes((int)(Test.fFld * d1)));
        lArr1[(165 >>> 1) % N][(i6 >>> 1) % N] -= iMeth(-103);
        f1 = 1;
        do {
            Test.byFld *= (byte)Test.fFld;
            i5 *= i5;
            i6 = i5;
            Test.iArrFld1[(int)(f1 - 1)] -= i6;
            i5 >>= i5;
            for (i12 = 10; i12 > f1; --i12) {
                Test.iArrFld1[i12 + 1] >>= i6;
                i5 *= i5;
                for (i14 = 1; i14 < 1; i14++) {
                    short s=-18721;
                    Test.byFld += (byte)-48L;
                    s -= (short)Test.instanceCount;
                    i13 += (i14 * i14);
                }
            }
        } while (++f1 < 151);
        vMeth1_check_sum += i5 + (b1 ? 1 : 0) + i6 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i12 + i13
            + i14 + i15 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(long l, int i2) {

        double d=-1.101556, dArr[]=new double[N];
        int i3=-2966, i4=9, iArr[]=new int[N];
        boolean b=false;
        long lArr[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(dArr, 1.28738);
        FuzzerUtils.init(lArr, -177L);
        FuzzerUtils.init(fArr, -126.291F);
        FuzzerUtils.init(iArr, -14);

        Test.fFld -= (float)(d *= ((-(i2 - -15351)) * i2));
        i2 -= (int)((Test.fFld - Test.fFld) + (i2 * (++i2)));
        i3 = 1;
        do {
            Test.instanceCount <<= (long)(((i2 -= -50522) - (dArr[i3 - 1]--)) - (Test.fFld *= (i3 + i4)));
            if (b) {
                Test.fFld += (lArr[(i3 >>> 1) % N][i3] - (i4++));
                Test.fFld *= fArr[i3 + 1];
                iArr[i3 - 1] = (i4--);
                i4 = (int)(--Test.instanceCount);
            } else {
                i2 ^= Math.min((i4 - i3) * (++i2), i3);
                vMeth1(i2, b, i4);
            }
        } while ((i3 += 3) < 175);
        i4 ^= -14;
        Test.fFld *= -24436;
        i4 = i3;
        b = b;
        vMeth_check_sum += l + i2 + Double.doubleToLongBits(d) + i3 + i4 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=6;

        for (i = 15; i < 350; ++i) {
            Test.instanceCount += i;
            i1 = (++i1);
            iArrFld[i - 1] = (--i1);
        }
        vMeth(Test.instanceCount, i1);
        i1 *= (int)Test.fFld;

        FuzzerUtils.out.println("i i1 = " + i + "," + i1);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
