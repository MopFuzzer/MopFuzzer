// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2641161741088188485L;
    public static volatile int iFld=18;
    public static byte byFld=-88;
    public static boolean bFld=true;
    public static float fFld=0.259F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 38);
        FuzzerUtils.init(Test.lArrFld, -30878L);
        FuzzerUtils.init(Test.dArrFld, 0.35620);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static boolean bMeth() {

        double d=2.55215;
        int i3=-19858;

        d = (((Test.instanceCount - -65003) - Math.max(-205, i3)) * (Test.iArrFld[(Test.iFld >>> 1) % N]++));
        long meth_res = Double.doubleToLongBits(d) + i3;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i8, float f1) {

        int i9=-6, i10=10, i11=13908, i12=-23, i13=64, i14=-10, i15=-61055;
        short s=11338;

        for (i9 = 1; 143 > i9; i9++) {
            boolean b=false;
            Test.instanceCount += 58;
            switch (((i9 % 3) * 5) + 34) {
            case 43:
                b = true;
                break;
            case 41:
                Test.iArrFld[i9 + 1] -= s;
                for (i11 = i9; i11 < 11; i11++) {
                    i12 -= (int)Test.instanceCount;
                }
                for (i13 = 1; 11 > i13; i13++) {
                    Test.iArrFld[i9 - 1] *= -12;
                    i15 = 1;
                    do {
                        i10 = i9;
                        Test.instanceCount -= 13;
                        i14 <<= Test.iFld;
                        Test.instanceCount = -77L;
                        i8 += (-1 + (i15 * i15));
                    } while (++i15 < 2);
                }
            case 42:
                i8 = i8;
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + i10 + s + i11 + i12 + i13 + i14 + i15;
    }

    public static long lMeth(float f, int i4, int i5) {

        int i6=34830, i7=28428, i16=-144;
        boolean b1=true;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)42);

        for (i6 = 18; i6 < 331; i6++) {
            if (false) {
                vMeth1(i6, f);
                f -= i5;
                i4 = 52789;
                if (i4 != 0) {
                }
            } else {
                i5 += (i6 * i6);
                i5 -= i4;
                Test.instanceCount = Test.byFld;
            }
            Test.iArrFld[i6] = 206;
            i16 = 1;
            while (++i16 < 5) {
                try {
                    Test.iFld = (Test.iArrFld[i6 + 1] % -189);
                    i5 = (59365 / Test.iArrFld[i16]);
                    i4 = (33285 / i6);
                } catch (ArithmeticException a_e) {}
                if (b1) continue;
                byArr[i6] = byArr[i6];
                Test.iFld = i16;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i1=14, i2=0, i17=-14;
        float f2=2.641F;
        double d1=1.341, d2=-61.50296;
        long l=2103178755L;

        for (i1 = 374; 11 < i1; --i1) {
            if (bMeth()) break;
            if (Test.bFld) {
                i2 = Math.abs((int)(Test.instanceCount - lMeth(f2, i2, i1)));
                Test.lArrFld[i1 + 1] += (long)d1;
            }
            i2 += (179 + (i1 * i1));
            l = 1;
            do {
                for (d2 = 1; 1 > d2; d2++) {
                    Test.iFld += (int)(d2 * d2);
                    Test.iFld -= (int)l;
                    f2 = -7;
                    Test.instanceCount += -11L;
                    Test.iFld -= i17;
                    i2 *= -7;
                }
                Test.iFld ^= 12;
            } while (++l < 5);
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + l +
            Double.doubleToLongBits(d2) + i17;
    }

    public void mainTest(String[] strArr1) {

        int i=58741, i18=-1, i19=184, i20=10477, i21=33, i22=-43116;
        short s1=12494;
        double d3=27.117146, d4=-2.121569;

        i = 1;
        do {
            vMeth();
            s1 += (short)(i | Test.instanceCount);
            Test.iArrFld[i - 1] *= (int)Test.instanceCount;
            Test.dArrFld[i] -= -12241;
            Test.instanceCount -= -150;
            if (Test.bFld) break;
        } while (++i < 182);
        Test.iArrFld[(-243 >>> 1) % N] -= (int)8L;
        for (d3 = 273; d3 > 16; --d3) {
            Test.byFld -= (byte)-16758;
            for (i19 = (int)(d3); i19 < 98; i19++) {
                i20 -= i20;
                i20 <<= i19;
                i20 -= (int)d3;
                switch (((i19 % 10) * 5) + 122) {
                case 134:
                    Test.iFld += (i19 * i19);
                    Test.iArrFld[i19] = Test.byFld;
                    Test.iFld -= i20;
                    break;
                case 159:
                    d4 = i20;
                    i18 += (-10 + (i19 * i19));
                case 137:
                    for (i21 = 1; i21 < 1; i21 += 3) {
                        Test.iArrFld[i19] = s1;
                        Test.byFld += (byte)(i21 * Test.instanceCount);
                        Test.lArrFld[i19 - 1] *= i19;
                        Test.bFld = false;
                        if (Test.bFld) {
                            switch ((((i >>> 1) % 2) * 5) + 51) {
                            case 58:
                                i18 += (41794 + (i21 * i21));
                                Test.instanceCount = i21;
                                break;
                            case 52:
                                Test.iArrFld[i21] += (int)d4;
                                break;
                            }
                        } else {
                            Test.iFld = i21;
                        }
                    }
                    break;
                case 164:
                    i20 += (((i19 * Test.instanceCount) + i18) - i18);
                    break;
                case 170:
                    try {
                        i22 = (-288 / i22);
                        Test.iFld = (i21 % -132);
                        i18 = (i19 / i21);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 150:
                    Test.iFld = (int)Test.instanceCount;
                    break;
                case 154:
                    Test.instanceCount *= 188L;
                case 156:
                    i20 *= 22185;
                    break;
                case 153:
                    Test.iFld >>= i20;
                case 132:
                    Test.iArrFld[i19] = (int)Test.instanceCount;
                default:
                    Test.fFld = Test.iFld;
                }
            }
        }

        FuzzerUtils.out.println("i s1 d3 = " + i + "," + s1 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d4 i21 i22 = " + Double.doubleToLongBits(d4) + "," + i21 + "," + i22);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.fFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
