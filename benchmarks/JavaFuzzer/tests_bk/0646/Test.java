// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-48992L;
    public static double dFld=2.120525;
    public static volatile float fFld=-2.172F;
    public static volatile boolean bFld=false;
    public int iFld=-3;
    public static boolean bArrFld[]=new boolean[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
        FuzzerUtils.init(Test.iArrFld, -52370);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static int iMeth(byte by, int i, float f1) {


        i = (int)Test.instanceCount;
        long meth_res = by + i + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(float f) {

        byte by1=33;
        int i1=-63474;

        Test.instanceCount = iMeth(by1, (int)((++Test.instanceCount) + (i1 * f)), i1 + f);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + by1 + i1;
    }

    public static long lMeth(byte by2, long l) {

        int i10=186, i11=-38072, i12=-6, i13=-14, i14=-10, i15=0, i16=-4, i17=-22758, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 234);

        for (i10 = 10; 383 > i10; i10++) {
            iArr = iArr;
        }
        for (i12 = 273; i12 > 9; i12--) {
            Test.instanceCount += (((i12 * l) + i11) - i11);
            for (i14 = 1; i14 < 6; i14++) {
                i15 <<= i12;
            }
            for (i16 = 1; i16 < 6; i16++) {
                i15 -= i14;
                l *= (long)Test.fFld;
                i15 += (i16 * i16);
            }
            if (true) {
                Test.fFld += i12;
                by2 = (byte)Test.fFld;
                if (Test.bFld) break;
            } else if (true) {
                iArr[i12] = i16;
            } else {
                iArr = FuzzerUtils.int1array(N, (int)-46);
            }
        }
        long meth_res = by2 + l + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(int i9) {

        byte by3=-14;
        int i18=-10, i19=-194, i20=4662, i21=4, i22=3, i23=-110, i24=-29, i25=40, iArr1[]=new int[N];
        short s=15040;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 12L);
        FuzzerUtils.init(iArr1, -29551);

        lArr2[(-7 >>> 1) % N] -= lMeth(by3, Test.instanceCount);
        for (i18 = 12; 246 > i18; ++i18) {
            s *= (short)42566;
            for (i20 = 7; i20 > 1; i20 -= 3) {
                if (i19 != 0) {
                }
                i19 -= i19;
                for (i22 = 4; i22 > 1; i22--) {
                    i23 = (int)Test.instanceCount;
                }
            }
            for (i24 = 1; 7 > i24; i24++) {
                by3 -= (byte)-165;
                i25 = 192;
                Test.instanceCount = 244;
                iArr1[i18 + 1] -= i23;
                iArr1[i18 + 1] = (int)Test.instanceCount;
                i23 += (i24 - i25);
            }
        }
        long meth_res = i9 + by3 + i18 + i19 + s + i20 + i21 + i22 + i23 + i24 + i25 + FuzzerUtils.checkSum(lArr2) +
            FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static short sMeth() {

        int i4=-87, i5=27857, i6=-141, i7=76, i8=-14153, i26=-4, i27=-12;
        boolean b=false;
        short s1=374;
        byte by4=62;
        float fArr1[]=new float[N];
        long lArr1[]=new long[N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(fArr1, -79.121F);
        FuzzerUtils.init(lArr1, 53395L);
        FuzzerUtils.init(dArr1, -78.127714);

        i4 -= (int)(fArr1[(i4 >>> 1) % N]--);
        Test.dFld += (--Test.fFld);
        i4 ^= (int)(lArr1[(i4 >>> 1) % N] - (i4--));
        for (i5 = 6; i5 < 180; i5++) {
            Test.bArrFld[i5] = (b = b);
            i7 = 1;
            do {
                i8 = 1;
                while (++i8 < 1) {
                    i4 = byMeth(-31092);
                    s1 += (short)(i8 - Test.instanceCount);
                    by4 += (byte)i8;
                }
                for (i26 = 1; i26 < 1; i26 += 3) {
                    dArr1[i26 + 1] += i7;
                }
                i6 *= s1;
            } while (++i7 < 9);
            if (Test.bFld) break;
            Test.dFld -= i8;
        }
        long meth_res = i4 + i5 + i6 + (b ? 1 : 0) + i7 + i8 + s1 + by4 + i26 + i27 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i2=-7075, i3=197, i28=-47410, i29=59400, i30=-3, i31=-56193, i32=61, i33=14554, i34=-14;
        short s2=15168, sArr[][]=new short[N][N];
        double d1=0.95533, dArr[]=new double[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -2.836F);
        FuzzerUtils.init(dArr, -2.82849);
        FuzzerUtils.init(lArr, -31L);
        FuzzerUtils.init(sArr, (short)-31039);

        for (int smallinvoc=0; smallinvoc<352; smallinvoc++) vSmallMeth(++fArr[(23190 >>> 1) % N]);
        for (double d : dArr) {
            for (i2 = 2; i2 < 63; ++i2) {
                lArr[i2 - 1] += (long)(((Test.instanceCount + d) * sMeth()) * Test.fFld);
                Test.iArrFld[i2] += -69;
                Test.iArrFld = Test.iArrFld;
            }
        }
        for (i28 = 11; i28 < 289; i28++) {
            i3 = i2;
            switch ((i28 % 10) + 60) {
            case 60:
                Test.iArrFld[i28 + 1] >>>= s2;
                i29 = i3;
                Test.iArrFld[i28] -= i29;
                break;
            case 61:
                Test.dFld = 3496513936L;
                if (true) continue;
                break;
            case 62:
                for (d1 = 4; d1 < 90; d1++) {
                    sArr[(int)(d1 + 1)][(int)(d1 + 1)] -= (short)i29;
                    i29 -= i3;
                    switch ((((i2 >>> 1) % 1) * 5) + 12) {
                    case 14:
                        for (i31 = 2; i31 > 1; --i31) {
                            if (false) continue;
                            i30 >>= -10874;
                        }
                    }
                    switch ((i28 % 8) + 24) {
                    case 24:
                    case 25:
                        for (i33 = i28; i33 < 2; i33++) {
                            Test.instanceCount = 6;
                            Test.instanceCount = -1;
                            Test.iArrFld[i28 - 1] = iFld;
                            i34 = 3;
                            i34 = i34;
                            Test.instanceCount += (((i33 * Test.fFld) + Test.instanceCount) - i30);
                            i29 += (((i33 * i33) + i2) - Test.instanceCount);
                        }
                        break;
                    case 26:
                        Test.iArrFld[(int)(d1 + 1)] += (int)Test.instanceCount;
                        break;
                    case 27:
                        Test.iArrFld[i28 - 1] ^= i34;
                        break;
                    case 28:
                        if (true) break;
                        break;
                    case 29:
                        fArr[i28] += i3;
                        break;
                    case 30:
                    case 31:
                        Test.bFld = Test.bFld;
                        break;
                    }
                }
                break;
            case 63:
                iFld >>= (int)Test.instanceCount;
            case 64:
                i29 += (int)Test.fFld;
                break;
            case 65:
                Test.instanceCount += (i28 * i28);
                break;
            case 66:
                iFld -= i31;
                break;
            case 67:
                Test.dFld += s2;
                break;
            case 68:
                Test.instanceCount += Test.instanceCount;
                break;
            case 69:
                i29 = i3;
                break;
            }
        }

        FuzzerUtils.out.println("i2 i3 i28 = " + i2 + "," + i3 + "," + i28);
        FuzzerUtils.out.println("i29 s2 d1 = " + i29 + "," + s2 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 fArr = " + i33 + "," + i34 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("dArr lArr sArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld iFld Test.bArrFld = " + (Test.bFld ? 1 : 0) + "," + iFld + "," +
            FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  byMeth ->  byMeth sMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
