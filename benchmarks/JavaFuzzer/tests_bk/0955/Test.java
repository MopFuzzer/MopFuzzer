// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2094637529L;
    public static boolean bFld=true;
    public double dFld=1.111602;
    public static int iFld=-1;
    public static int iFld1=-10311;
    public int iFld2=20354;
    public static double dFld1=0.103127;
    public static volatile long lArrFld[][]=new long[N][N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 3674442366642107876L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, byte by, float f2) {

        float f3=1.135F;
        int i7=16552, i8=-43761, i9=-32, i10=-60284, i11=-24097, i12=12, iArr[]=new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, -16);

        i6 >>= i6;
        f3 = 1;
        while (++f3 < 361) {
            for (i7 = 1; 5 > i7; i7++) {
                f2 = i6;
                i6 >>= (int)Test.instanceCount;
                if (b) {
                    i9 = 1;
                    while (++i9 < 2) {
                        try {
                            i8 = (i7 / i6);
                            i10 = (i8 % 161);
                            iArr[i7] = (i7 / 914142196);
                        } catch (ArithmeticException a_e) {}
                        i10 <<= i10;
                        i8 = (int)2.113567;
                        i6 -= i6;
                    }
                } else {
                    f2 += i6;
                    for (i11 = 1; i11 < 2; ++i11) {
                        i12 = i7;
                        i6 *= i11;
                    }
                }
            }
        }
        vMeth2_check_sum += i6 + by + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i7 + i8 + i9 + i10 + (b ? 1
            : 0) + i11 + i12 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l, long l1) {

        int i2=56015, i3=6, i4=-4, i5=-39, i13=35841, i14=9303, i15=-84, iArr1[]=new int[N];
        float f1=87.258F;
        byte by1=-28;
        short s=-11363;
        long lArr[][]=new long[N][N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, -23374);
        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(bArr, false);

        for (i2 = 8; i2 < 273; i2++) {
            f1 *= i3;
            i3 += i2;
            for (i4 = 1; i4 < 6; i4++) {
                l1 += (Math.abs(i3) + ((i2 << i4) - (-137 - (++i5))));
                if (Test.bFld) {
                    l1 -= (-37503 * i2);
                } else if (Test.bFld) {
                    vMeth2(i5, by1, f1);
                    l = i5;
                    for (i13 = i2; i13 < 2; ++i13) {
                        try {
                            i5 = (iArr1[i2] % 49);
                            i14 = (226 % i4);
                            i15 = (i5 % 146);
                        } catch (ArithmeticException a_e) {}
                        if (Test.bFld) break;
                        iArr1[i2 - 1] = s;
                        lArr[i4 - 1][i2 + 1] *= (long)f1;
                        if (i13 != 0) {
                            vMeth1_check_sum += l + l1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + by1 + i13 + i14
                                + i15 + s + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
                                FuzzerUtils.checkSum(bArr);
                            return;
                        }
                    }
                    vMeth1_check_sum += l + l1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + by1 + i13 + i14 + i15 +
                        s + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
                    return;
                } else {
                    bArr[i4 - 1] = false;
                    vMeth1_check_sum += l + l1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + by1 + i13 + i14 + i15 +
                        s + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
                    return;
                }
            }
        }
        vMeth1_check_sum += l + l1 + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + by1 + i13 + i14 + i15 + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(float f, int i, int i1) {

        int i16=-132, i17=0, i18=-16684, i19=30039, i21=-24369, i22=0;
        byte by2=-102;

        vMeth1(Test.instanceCount, Test.instanceCount);
        Test.bFld = Test.bFld;
        for (i16 = 9; i16 < 307; ++i16) {
            for (i18 = 1; 6 > i18; i18++) {
                by2 >>= (byte)Test.instanceCount;
                i19 *= i;
                dFld = f;
                i19 += i18;
                Test.lArrFld = Test.lArrFld;
            }
        }
        for (int i20 : iArrFld) {
            for (i21 = 1; i21 < 4; i21++) {
                i19 += (i21 * i19);
                i19 += i17;
                iArrFld[i21 + 1] *= i1;
                i22 += (int)f;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i16 + i17 + i18 + i19 + by2 + i21 + i22;
    }

    public void mainTest(String[] strArr1) {

        float f4=-127.796F;
        int i23=-12, i24=-12095, i25=13282, i26=-16, i27=49, i28=-59791;
        long l2=-3465821022969042037L;
        short s1=8163;

        vMeth(f4, Test.iFld, Test.iFld);
        Test.iFld = Test.iFld1;
        i23 = 1;
        do {
            Test.instanceCount *= (long)-2.52584;
            l2 = 1;
            do {
                for (i24 = 1; i24 > 1; --i24) {
                    switch ((((4 >>> 1) % 5) * 5) + 10) {
                    case 23:
                        Test.iFld1 += -231;
                        f4 = Test.instanceCount;
                    case 30:
                        iArrFld[i24] *= i23;
                        break;
                    case 21:
                        Test.iFld1 += i24;
                        iFld2 -= i23;
                        Test.iFld += (i24 - f4);
                        Test.lArrFld[i23] = Test.lArrFld[i24];
                    case 25:
                        Test.iFld -= i23;
                        Test.iFld *= (int)-29.481F;
                        iArrFld[(int)(l2 + 1)] >>>= i23;
                        break;
                    case 26:
                        Test.dFld1 -= 53;
                        switch (((i25 >>> 1) % 1) + 30) {
                        case 30:
                            iArrFld[i23 - 1] <<= Test.iFld1;
                            break;
                        }
                        Test.instanceCount <<= Test.instanceCount;
                        break;
                    }
                    iArrFld[(int)(l2)] = i26;
                }
                for (i27 = 1; 1 > i27; ++i27) {
                    iFld2 = s1;
                    Test.lArrFld[(int)(l2 - 1)] = Test.lArrFld[i27];
                    if (false) continue;
                    switch ((int)((l2 % 8) + 9)) {
                    case 9:
                        dFld += f4;
                        iArrFld[i27 + 1] = i27;
                        f4 = Test.instanceCount;
                        break;
                    case 10:
                        Test.iFld -= i27;
                        break;
                    case 11:
                        Test.iFld -= (int)1.65883;
                        break;
                    case 12:
                        i26 += 151;
                        break;
                    case 13:
                        i28 <<= Test.iFld;
                    case 14:
                        iArrFld[i27] = (int)l2;
                        break;
                    case 15:
                        i25 += (i27 * i27);
                        break;
                    case 16:
                        Test.lArrFld[i27][(int)(l2 - 1)] -= i27;
                        break;
                    }
                }
            } while (++l2 < 148);
        } while (++i23 < 170);

        FuzzerUtils.out.println("f4 i23 l2 = " + Float.floatToIntBits(f4) + "," + i23 + "," + l2);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 s1 = " + i27 + "," + i28 + "," + s1);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld dFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld Test.iFld1 iFld2 = " + Test.iFld + "," + Test.iFld1 + "," + iFld2);
        FuzzerUtils.out.println("Test.dFld1 Test.lArrFld iArrFld = " + Double.doubleToLongBits(Test.dFld1) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
