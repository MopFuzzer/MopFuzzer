// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static int iFld=60;
    public double dFld=2.120146;
    public static short sFld=-9986;
    public static float fFld=13.888F;
    public long lArrFld[]=new long[N];

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        byte by=104, byArr[]=new byte[N];
        int i13=-12, i14=14427, i15=205, i16=51211, i17=39, i18=-8, iArr1[]=new int[N];
        boolean b2=true;
        double d1=1.12888;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4608506395665963606L);
        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(byArr, (byte)-71);

        Test.iFld += by;
        for (i13 = 8; i13 < 342; ++i13) {
            for (i15 = i13; 5 > i15; i15++) {
                lArr[i15] = i15;
            }
            i16 += (((i13 * i14) + i14) - Test.instanceCount);
            Test.iFld += i15;
            switch ((i13 % 7) + 57) {
            case 57:
                for (i17 = 1; i17 < 5; i17++) {
                    iArr1[i17] += (int)Test.fFld;
                    Test.fFld -= 9;
                    Test.instanceCount *= 41907L;
                    i16 -= Test.iFld;
                }
                iArr1[i13 - 1] += i17;
            case 58:
                lArr[i13] *= Test.iFld;
                break;
            case 59:
                Test.iFld -= i18;
                break;
            case 60:
                if (b2) break;
                break;
            case 61:
                i16 -= (int)Test.instanceCount;
                break;
            case 62:
                d1 *= i13;
                break;
            case 63:
                byArr[i13 + 1] += (byte)Test.instanceCount;
                break;
            }
        }
        long meth_res = by + i13 + i14 + i15 + i16 + i17 + i18 + (b2 ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l1, double d, int i8) {

        int i9=-1, i10=-4, i11=-3, i12=-14402, i19=-47222, i20=131, iArr[]=new int[N];
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 37);
        FuzzerUtils.init(lArr1, -77L);

        for (i9 = 21; i9 < 371; i9++) {
            for (i11 = i9; i11 < 5; ++i11) {
                b1 = ((i12--) < -7);
                iArr[i11 - 1] += i10;
                Test.sFld += (short)((i8 - i12) + (iMeth1() + Test.instanceCount));
            }
            for (i19 = 1; i19 < 5; ++i19) {
                switch (((i19 % 1) * 5) + 40) {
                case 41:
                    i12 *= i20;
                    break;
                }
                Test.fFld += -51153;
                Test.fFld -= i8;
                i10 = Test.iFld;
                Test.iFld = i11;
            }
            lArr1 = lArr1;
            iArr[i9] = i9;
            i20 += (i9 | (long)Test.fFld);
        }
        vMeth_check_sum += l1 + Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) + i19 + i20 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public int iMeth(long l, int i6, int i7) {

        int i21=-50, i22=-25160, i23=141, i24=3, iArr2[]=new int[N];
        boolean b3=true;
        byte byArr1[]=new byte[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr2, 11);
        FuzzerUtils.init(byArr1, (byte)-2);
        FuzzerUtils.init(dArr, 0.44119);

        vMeth(Test.instanceCount, dFld, Test.iFld);
        i6 = i7;
        i21 = 1;
        do {
            Test.fFld += (147 + (i21 * i21));
            for (i22 = i21; i22 < 6; ++i22) {
                byte by1=96;
                iArr2[i21 + 1] = i21;
                b3 = b3;
                i6 >>>= Test.iFld;
                by1 = (byte)i23;
                switch (((i22 >>> 1) % 3) + 113) {
                case 113:
                    Test.iFld += i22;
                    i24 = 1;
                    do {
                        byArr1[i24 + 1] |= (byte)29388;
                        lArrFld[(-59116 >>> 1) % N] += -5728;
                        dArr[i24][i24 + 1] %= (i21 | 1);
                    } while (++i24 < 1);
                    break;
                case 114:
                    iArr2[i21] >>= i23;
                    break;
                case 115:
                    i7 *= i21;
                    break;
                }
            }
        } while (++i21 < 267);
        long meth_res = l + i6 + i7 + i21 + i22 + i23 + (b3 ? 1 : 0) + i24 + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(byArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        boolean b=false, bArr[]=new boolean[N];
        int i=-1, i1=-13, i2=-156, i3=14, i4=8, i5=13, i25=-8, iArr3[]=new int[N];
        byte by2=-41;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr3, 240);

        try {
            b = (b = bArr[(Test.iFld >>> 1) % N]);
            Test.iFld -= (int)(Test.instanceCount = (-(--Test.iFld)));
            for (i = 4; i < (240 + 400); ++i) {
                Test.instanceCount = (((Test.iFld - -65203L) - (i1 - -1)) + ((5 * (i1 - Test.instanceCount)) + (-45 -
                    (Test.iFld++))));
                for (i2 = 2; i2 < (63 + 400); i2++) {
                    for (i4 = 1; i4 < (1 + 400); i4 += 2) {
                        dFld = (iMeth(Test.instanceCount, 167, i3) + -166);
                        iArr3[i2 - 1] += i2;
                        i1 %= (int)(i | 1);
                        i1 |= i1;
                        Test.instanceCount *= i1;
                        by2 += (byte)Test.instanceCount;
                        by2 -= (byte)Test.fFld;
                        if (b) continue;
                    }
                    Test.iFld = i5;
                    i1 = Test.sFld;
                    try {
                        Test.iFld = (Test.iFld / -24011);
                        Test.iFld = (165 / iArr3[i]);
                        iArr3[i] = (36686 % Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    i5 -= i;
                    Test.iFld = i5;
                    iArr3[i2 - 1] *= -5774;
                    Test.instanceCount -= (long)dFld;
                }
                iArr3 = iArr3;
                i25 = 1;
                while (++i25 < 63) {
                    switch (((i25 % 1) * 5) + 125) {
                    case 126:
                        Test.instanceCount = i;
                        iArr3 = FuzzerUtils.int1array(N, (int)-165);
                        break;
                    default:
                        i5 >>= (int)Test.instanceCount;
                    }
                    i5 += i25;
                    Test.instanceCount *= Test.iFld;
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            iArr3[(i1 >>> 1) % N] = (int)-54.106F;
        }

        FuzzerUtils.out.println("b i i1 = " + (b ? 1 : 0) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i5 by2 i25 = " + i5 + "," + by2 + "," + i25);
        FuzzerUtils.out.println("bArr iArr3 = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.sFld Test.fFld lArrFld = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld) +
            "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
