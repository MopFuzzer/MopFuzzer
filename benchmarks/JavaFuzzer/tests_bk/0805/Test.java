// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7801189634897519656L;
    public static volatile byte byFld=64;
    public static double dFld=112.10481;
    public int iFld=-5;
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 107.175F);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9, int i10) {

        long l1=389880623L, l2=2798304732073668046L;
        int i11=-154, i12=-10;
        double d=-104.118863;
        float f2=0.259F;

        Test.fArrFld[(i10 >>> 1) % N] += -60081;
        Test.instanceCount |= i9;
        for (l1 = 20; l1 < 350; ++l1) {
            i12 = 1;
            while (++i12 < 5) {
                Test.instanceCount >>>= i12;
                i9 -= 13;
                i9 = i11;
                l2 = 1;
                while (++l2 < 1) {
                    i10 /= (int)(i10 | 1);
                    d *= f2;
                    d = f2;
                    f2 = 1.309F;
                    Test.fArrFld[(int)(l1)] *= 187;
                    f2 *= i10;
                }
            }
            i9 -= i10;
        }
        vMeth1_check_sum += i9 + i10 + l1 + i11 + i12 + l2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2);
    }

    public static int iMeth() {

        int i13=207, i14=-82, iArr[]=new int[N];
        float f3=1.891F, f4=1.772F;
        boolean b=false;

        FuzzerUtils.init(iArr, 230);

        vMeth1(i13, -8);
        iArr[(i13 >>> 1) % N] = Test.byFld;
        i13 *= i13;
        iArr[(i13 >>> 1) % N] *= (int)f3;
        Test.instanceCount += (long)f3;
        f3 = i13;
        i13 >>= (int)Test.instanceCount;
        Test.instanceCount = Test.instanceCount;
        i14 = 1;
        do {
            i13 += i14;
            f4 = 1;
            while (++f4 < 9) {
                if (b) break;
                try {
                    i13 = (iArr[(int)(f4)] % i14);
                    i13 = (48434 / i13);
                    iArr[i14 - 1] = (iArr[(int)(f4)] / i14);
                } catch (ArithmeticException a_e) {}
                i13 -= i13;
            }
            i13 *= i14;
        } while (++i14 < 183);
        long meth_res = i13 + Float.floatToIntBits(f3) + i14 + Float.floatToIntBits(f4) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i3) {

        int i4=-63277, i5=2, i6=-25280, i7=64007, i8=-13, iArr1[]=new int[N];
        float f1=-2.907F;
        long l=2121329343L;
        boolean b1=true;
        double d1=0.16547;

        FuzzerUtils.init(iArr1, -51383);

        for (i4 = 4; 334 > i4; i4 += 3) {
            Test.instanceCount = (long)(((Test.instanceCount + Test.instanceCount) - Test.instanceCount) * ((f1 - i3) +
                i3));
            i5 |= i5;
            for (i6 = 1; i6 < 14; ++i6) {
                for (l = 2; 1 < l; --l) {
                    Test.instanceCount += l;
                    switch ((i4 % 1) + 74) {
                    case 74:
                    }
                    i5 = (int)Math.sqrt(i3 - i5);
                    i7 = Math.max(i6, iMeth());
                    if (b1) continue;
                    switch ((i6 % 8) + 41) {
                    case 41:
                        switch ((i8 >>> 1) % 3) {
                        case 0:
                            f1 -= i4;
                            break;
                        case 1:
                            Test.instanceCount = (long)f1;
                            i3 >>= (int)Test.instanceCount;
                            break;
                        case 2:
                            i7 *= i8;
                            break;
                        }
                        break;
                    case 42:
                        Test.instanceCount = -4;
                        break;
                    case 43:
                        if (false) break;
                        break;
                    case 44:
                        iArr1[i6] = -32827;
                        break;
                    case 45:
                        d1 -= i7;
                        break;
                    case 46:
                        i3 += (int)(l + i5);
                    case 47:
                        i7 >>>= i7;
                        break;
                    case 48:
                    default:
                        i3 += (0 + (l * l));
                    }
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + l + i8 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=178, i1=155, i2=62700, i15=-5, i16=12, i17=-12, i18=4379, i19=-100, i20=-15115, i21=-45832, iArr2[]=new
            int[N];
        float f=-56.192F;
        long l3=658382797L, lArr[]=new long[N];
        double d2=-1.124788;
        boolean b2=false;
        short s=-23327;

        FuzzerUtils.init(iArr2, 3884);
        FuzzerUtils.init(lArr, 6L);

        i = 1;
        while (++i < 361) {
            f *= i;
        }
        for (i1 = 15; i1 < 342; i1++) {
            i2 = (int)Test.instanceCount;
            vMeth(i);
        }
        for (i15 = 16; i15 < 385; i15++) {
            i16 ^= i1;
            Test.instanceCount *= i16;
        }
        f += i15;
        if (b2) {
            for (l3 = 7; l3 < 270; ++l3) {
                for (d2 = l3; d2 < 96; ++d2) {
                    i19 = 1;
                    while (++i19 < 1) {
                        i18 = (int)l3;
                        Test.dFld -= -54441;
                        i18 += i19;
                    }
                    i17 += i18;
                    Test.instanceCount -= 24;
                    i16 = i18;
                    for (i20 = 1; i20 < 1; i20 += 3) {
                        switch ((int)((d2 % 9) + 101)) {
                        case 101:
                            i17 -= i1;
                            Test.bArrFld[(int)(l3)] = b2;
                            i16 += i2;
                            break;
                        case 102:
                            try {
                                i2 = (iArr2[(int)(d2)] / 61640);
                                i2 = (i19 % i);
                                i16 = (i18 % i15);
                            } catch (ArithmeticException a_e) {}
                            i17 += i20;
                            switch ((((i17 >>> 1) % 2) * 5) + 69) {
                            case 77:
                                if (false) continue;
                                i16 = (int)Test.instanceCount;
                                lArr[i20 + 1] += iFld;
                                break;
                            case 71:
                                f = l3;
                                break;
                            default:
                                i16 += -28301;
                            }
                            break;
                        case 103:
                            Test.instanceCount += (((i20 * f) + i17) - iFld);
                            break;
                        case 104:
                            i2 += iFld;
                            break;
                        case 105:
                            s = (short)-29238L;
                            break;
                        case 106:
                            iArr2[i20 - 1] += i2;
                            break;
                        case 107:
                            Test.instanceCount -= Test.instanceCount;
                            break;
                        case 108:
                            Test.dFld += iFld;
                        case 109:
                            lArr[i20] += Test.instanceCount;
                        }
                    }
                }
            }
        } else {
            iArr2[(i20 >>> 1) % N] += (int)l3;
        }

        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i15 i16 = " + i2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("l3 i17 d2 = " + l3 + "," + i17 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 b2 s = " + i21 + "," + (b2 ? 1 : 0) + "," + s);
        FuzzerUtils.out.println("iArr2 lArr = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iFld Test.fArrFld Test.bArrFld = " + iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
