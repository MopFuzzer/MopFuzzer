// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-22L;
    public byte byFld=97;
    public static boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 97);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth() {

        int i2=-190, i3=-1;

        for (i2 = 9; i2 < 226; ++i2) {
            i3 >>>= (int)((-91L * i2) >> (i3++));
        }
        long meth_res = i2 + i3;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth1(int i15) {

        boolean b=false;
        byte by=122;
        int i16=-6, i17=-23852, i18=-68, i19=-46, i20=87, i21=-164, iArr1[]=new int[N];
        float f1=-118.861F;
        double d1=-41.75658;

        FuzzerUtils.init(iArr1, 8);

        i15 <<= i15;
        b = b;
        by = (byte)i15;
        i15 = (int)2.806F;
        i15 += by;
        i16 = 221;
        while (--i16 > 0) {
            i17 = 1;
            while (++i17 < 7) {
                for (i18 = 1; i18 < 1; ++i18) {
                    i19 <<= by;
                }
                for (i20 = 1; 1 > i20; i20++) {
                    i19 *= i19;
                    f1 -= (float)d1;
                    iArr1[i16] = i17;
                    i21 += i17;
                    i19 -= 48;
                }
            }
        }
        long meth_res = i15 + (b ? 1 : 0) + by + i16 + i17 + i18 + i19 + i20 + i21 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i12=-46847, i13=52908, i14=-2592, i22=-1, i23=-7;
        double d=-113.69128, d2=0.88425;
        float f2=1.830F, fArr[]=new float[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 56493L);
        FuzzerUtils.init(fArr, 14.315F);

        i12 = (int)d;
        for (i13 = 7; 140 > i13; ++i13) {
            i14 = (int)(lMeth1(i13) * Test.instanceCount);
            i14 += (-56138 + (i13 * i13));
            i12 = i12;
            i22 = 1;
            while (++i22 < 12) {
                for (d2 = 1; 1 < d2; d2--) {
                    Test.iArrFld[(int)(d2 - 1)] >>= 8;
                }
                i14 += (((i22 * i22) + f2) - i12);
            }
        }
        f2 -= 39867;
        lArr[(i13 >>> 1) % N][(i22 >>> 1) % N] = -141;
        i12 ^= (int)1845641104L;
        Test.iArrFld = Test.iArrFld;
        fArr[(i12 >>> 1) % N] += i14;
        vMeth1_check_sum += i12 + Double.doubleToLongBits(d) + i13 + i14 + i22 + Double.doubleToLongBits(d2) + i23 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i4, int i5) {

        int i6=4117, i7=8187, i8=165, i9=165, i10=160, i11=-32017, iArr[]=new int[N];
        byte by1=-122;
        float f3=2.494F, fArr1[]=new float[N];

        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(fArr1, 2.202F);

        for (i6 = 5; i6 < 293; ++i6) {
            for (i8 = 1; i8 < 6; ++i8) {
                Test.instanceCount = iArr[i6 - 1];
                for (i10 = 1; i10 < 2; ++i10) {
                    vMeth1();
                    by1 <<= (byte)i8;
                    Test.instanceCount /= (i6 | 1);
                    Test.instanceCount += (9 + (i10 * i10));
                    fArr1[i6 + 1] = i7;
                    switch (((i10 % 1) * 5) + 12) {
                    case 13:
                        Test.instanceCount |= i11;
                        i9 -= i5;
                        Test.instanceCount += (41323 + (i10 * i10));
                        break;
                    }
                    Test.instanceCount += (long)f3;
                    f3 = f3;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + by1 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=3377, i1=23479, i24=145, i25=12, i26=-63985, i27=-10, i28=10, iArr2[][]=new int[N][N];
        float f=2.155F, fArr2[][]=new float[N][N];
        double d3=0.11832;
        short s=-1238;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 40857L);
        FuzzerUtils.init(fArr2, 0.324F);
        FuzzerUtils.init(iArr2, -5);

        for (i = 4; i < 198; i++) {
            f *= lMeth();
        }
        vMeth(i1, i);
        d3 -= 7125;
        for (i24 = 3; 144 > i24; ++i24) {
            i26 = 178;
            do {
                lArr1 = lArr1;
                i27 = 1;
                do {
                    switch (((i27 % 4) * 5) + 6) {
                    case 7:
                    case 9:
                        dArrFld[i27 + 1] -= 21.278F;
                        break;
                    case 18:
                        Test.instanceCount = Test.instanceCount;
                        i25 <<= -5;
                    case 26:
                        i25 += -1;
                        i1 += byFld;
                        i25 = (int)f;
                        break;
                    }
                    if (Test.bFld) continue;
                    f = (float)d3;
                    i25 = i;
                    fArr2 = fArr2;
                    iArr2 = iArr2;
                    i1 += (((i27 * i27) + i1) - i25);
                    i25 += (int)Test.instanceCount;
                    i25 += i;
                    s = s;
                } while (++i27 < 1);
                fArr2[i24 + 1][i26 + 1] -= Test.instanceCount;
                i28 = 1;
                do {
                    fArr2[i26 - 1] = fArr2[i28];
                    f += Test.instanceCount;
                    i1 = -8;
                    Test.instanceCount -= Test.instanceCount;
                } while (++i28 < 1);
            } while (--i26 > 0);
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d3 i24 i25 = " + Double.doubleToLongBits(d3) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 s = " + i26 + "," + i27 + "," + s);
        FuzzerUtils.out.println("i28 lArr1 fArr2 = " + i28 + "," + FuzzerUtils.checkSum(lArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.bFld = " + Test.instanceCount + "," + byFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
