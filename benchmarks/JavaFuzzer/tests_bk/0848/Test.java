// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4181797839401415061L;
    public static volatile float fFld=1.125F;
    public static byte byFld=-34;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 114.124620);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, boolean b) {

        int i8=-58, i9=-63672, i10=-6, i11=-17175, i12=7, i13=-23615, i14=-10, i15=-4, i16=10, i17=-4;
        float f=-111.462F, fArr[]=new float[N];
        double d1=71.107902;
        byte by=119;

        FuzzerUtils.init(fArr, -77.824F);

        i8 += (int)f;
        for (i9 = 389; i9 > 13; --i9) {
            for (i11 = 4; i11 > 1; --i11) {
                fArr[i9] -= f;
                i8 <<= i8;
            }
            for (d1 = i9; d1 < 4; d1++) {
                l = i12;
                f += (float)d1;
                by >>= (byte)l;
            }
            for (i14 = 4; i14 > i9; i14 -= 2) {
                Test.instanceCount = -10;
                for (i16 = 1; 1 < i16; i16 -= 3) {
                    i17 <<= i8;
                    i13 -= -2;
                    if (i12 != 0) {
                        vMeth2_check_sum += l + (b ? 1 : 0) + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
                            Double.doubleToLongBits(d1) + i13 + by + i14 + i15 + i16 + i17 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                }
            }
        }
        vMeth2_check_sum += l + (b ? 1 : 0) + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(d1) + i13 + by + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d, int i7) {

        int i18=-50829, i20=-40302, i21=-32048, i22=94, i23=-146, iArr[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr, -70L);

        i7 = (int)(Test.instanceCount++);
        vMeth2(-11L, false);
        i18 = 1;
        while (++i18 < 217) {
            Test.instanceCount = (long)Test.fFld;
            i20 = 1;
            while (++i20 < 7) {
                Test.dArrFld[i20 - 1] = i7;
                for (i21 = 1; i21 < 1; i21 += 2) {
                    i7 = (int)Test.fFld;
                    lArr[i20 - 1] = lArr[i20];
                    Test.fFld -= i21;
                }
                i7 += (int)2.902F;
                i7 = (int)Test.instanceCount;
                Test.dArrFld[i18 - 1] = 35449;
                i23 ^= (int)Test.instanceCount;
                i22 += (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i7 + i18 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i2) {

        int i3=-249, i4=-54424, i5=7, i6=-219, i24=188, i25=54192, i26=214;
        short s=-10141;
        boolean b1=false;
        float f1=-42.960F;

        for (i3 = 23; 378 > i3; ++i3) {
            for (i5 = 1; i5 < 5; ++i5) {
                vMeth1(65.108646, i3);
                for (i24 = 2; 1 < i24; --i24) {
                    Test.instanceCount += (i24 ^ s);
                    s >>= (short)-219L;
                    Test.fFld = -5;
                    Test.instanceCount *= Test.instanceCount;
                    Test.instanceCount += (-9L + (i24 * i24));
                    if (b1) break;
                    i25 += (i24 * i24);
                    Test.instanceCount >>= 1;
                }
                for (f1 = 1; f1 < 2; f1++) {
                    Test.byFld -= (byte)i6;
                    i2 = (int)-106.427F;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i24 + i25 + s + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i26;
    }

    public void mainTest(String[] strArr1) {

        int i=-178, i1=-100, i27=32263, i28=-48084, i29=216, i30=-37714, i31=140, i32=50925, i33=-26082, i34=4, i35=-8,
            iArr1[][]=new int[N][N];
        short s1=19735, sArr[]=new short[N];
        float f2=0.957F;
        boolean b2=true;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(lArr1, 9L);
        FuzzerUtils.init(sArr, (short)26571);

        for (i = 13; 362 > i; ++i) {
            vMeth(51);
            i1 -= i1;
            i1 += (int)Test.instanceCount;
            s1 &= (short)i;
        }
        Test.instanceCount = i;
        Test.instanceCount = i1;
        for (i27 = 6; i27 < 227; ++i27) {
            for (f2 = 6; f2 < 114; f2++) {
                for (i30 = 1; i30 < 2; ++i30) {
                    double d2=-80.100220;
                    i29 >>= (int)Test.instanceCount;
                    s1 *= (short)i30;
                    iArr1[(int)(f2 - 1)][(int)(f2 + 1)] += (int)d2;
                    i31 |= (int)Test.instanceCount;
                    lArr1 = lArr1;
                    Test.instanceCount += (long)d2;
                    try {
                        i28 = (iArr1[i30 - 1][i27 + 1] % iArr1[(int)(f2)][(int)(f2 - 1)]);
                        i31 = (137885236 / iArr1[i30][i27 + 1]);
                        i28 = (i28 / -48);
                    } catch (ArithmeticException a_e) {}
                }
                i31 *= i;
                iArr1[(int)(f2 - 1)][i27 - 1] = i1;
                Test.byFld += (byte)f2;
                i1 += i1;
            }
            switch (((i27 >>> 1) % 1) + 111) {
            case 111:
                lArr1 = lArr1;
            default:
                Test.instanceCount += (((i27 * i30) + Test.fFld) - Test.fFld);
            }
            for (i32 = 114; i32 > i27; --i32) {
                for (i34 = 1; i34 < 1; i34 += 2) {
                    i31 = i35;
                    if (b2) break;
                    i29 += (((i34 * i31) + i30) - i28);
                    sArr[i34 - 1] = (short)Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 s1 = " + i + "," + i1 + "," + s1);
        FuzzerUtils.out.println("i27 i28 f2 = " + i27 + "," + i28 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 b2 iArr1 = " + i35 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("lArr1 sArr = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
