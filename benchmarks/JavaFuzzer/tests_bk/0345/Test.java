// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public static double dFld=0.67909;
    public static volatile byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)121);
        FuzzerUtils.init(Test.lArrFld, -53L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static int iMeth(byte by, double d, int i3) {

        int i4=9, i5=-96, i6=41770, i7=-23028, i8=4, iArr[]=new int[N];
        float f=-111.496F;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)12539);
        FuzzerUtils.init(iArr, -195);

        i4 = 1;
        do {
            i3 += (i4 * Test.instanceCount);
            for (i5 = 1; i5 < 5; i5++) {
                i3 += (i5 * i5);
                Test.instanceCount += (i5 * i5);
                Test.byArrFld[i4 + 1] += (byte)i4;
                for (i7 = i5; i7 < 2; ++i7) {
                    sArr = (sArr = sArr);
                    d = (Test.instanceCount * i8);
                    iArr[i7] &= (int)(f + (i4 - -4188963495L));
                    iArr[i5 + 1] += i5;
                    i6 -= (int)((Test.instanceCount++) % (((8 - (++i6)) + iArr[i5 - 1]) | 1));
                    d = (iArr[i7]++);
                    Test.instanceCount += (4 + (i7 * i7));
                    if (i5 != 0) {
                    }
                }
            }
        } while (++i4 < 357);
        long meth_res = by + Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        int i13=-10, i14=-4, i15=-38, i16=167, i17=-7, i18=10, i19=10, i20=-54;
        short s=20721;
        boolean b=true;
        double d1=-66.9574, dArr[]=new double[N];
        byte by2=24;
        float f2=2.651F;

        FuzzerUtils.init(dArr, -1.88563);

        for (i13 = 4; i13 < 178; ++i13) {
            Test.lArrFld[i13] |= Test.instanceCount;
            i15 += i15;
        }
        for (i16 = 2; i16 < 313; i16++) {
            switch (((i16 % 1) * 5) + 59) {
            case 64:
            }
            for (i18 = 1; 5 > i18; ++i18) {
                s += (short)(i18 * Test.instanceCount);
                if (b) continue;
                for (d1 = i18; 2 > d1; d1++) {
                    by2 += (byte)i16;
                    i17 -= (int)f2;
                    Test.instanceCount -= by2;
                    i15 = i15;
                    dArr[i18 - 1] += f2;
                    f2 += (float)d1;
                }
            }
        }
        long meth_res = i13 + i14 + i15 + i16 + i17 + i18 + i19 + s + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i20 +
            by2 + Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(int i12) {


        i12 = sMeth();
        vMeth1_check_sum += i12;
    }

    public static void vMeth() {

        int i2=17757, i9=17916, i10=0, i11=-39929, i21=20, i22=1, iArr1[][]=new int[N][N];
        byte by1=-16;
        float f1=-1.322F;
        long l=-191L, l1=-3L;

        FuzzerUtils.init(iArr1, 195);

        i2 += Math.min(iMeth(by1, f1 * Test.instanceCount, (int)(2.587F + (228 + (i2 * i2)))), (int)(i2 - Test.dFld));
        by1 += (byte)(i2++);
        for (i9 = 214; 10 < i9; --i9) {
            Test.instanceCount += (i9 ^ i9);
            for (l = 1; l < 8; l++) {
                vMeth1(9);
                Test.instanceCount += (((l * i10) + i11) - i9);
                for (i21 = 2; i21 > l; i21 -= 2) {
                    i11 += -55;
                    i11 >>= i22;
                    f1 += 155;
                }
                l1 -= by1;
                Test.instanceCount >>= -3703068105L;
                iArr1[i9] = iArr1[(int)(l - 1)];
                l1 = i11;
            }
        }
        vMeth_check_sum += i2 + by1 + Float.floatToIntBits(f1) + i9 + i10 + l + i11 + i21 + i22 + l1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=56661, i1=14, i23=29048, i24=-1, i25=-34067, i26=14, i27=-45, i28=222, i29=-63061, i30=200, i31=-1,
            iArr2[]=new int[N];
        float f3=-112.719F;
        boolean b1=false;
        byte by3=-28;

        FuzzerUtils.init(iArr2, 4);

        for (i = 251; i > 3; --i) {
            i1 += (-40633 + (i * i));
        }
        vMeth();
        for (i23 = 7; 162 > i23; i23++) {
            Test.instanceCount = i;
            for (i25 = 3; i25 < 162; i25++) {
                i1 -= (int)53.332F;
            }
        }
        i1 >>= i1;
        i27 = 1;
        do {
            iArr2[(-188 >>> 1) % N] = i26;
            switch ((i27 % 8) + 18) {
            case 18:
                for (i28 = i27; 227 > i28; i28++) {
                    i1 = (int)f3;
                    i24 = 58;
                    i24 += (int)f3;
                    i1 = i28;
                    if (b1) continue;
                }
                for (i30 = 1; i27 > i30; i30++) {
                    short s1=3671;
                    i29 = (int)63930L;
                    if (false) break;
                    s1 = (short)i30;
                    i26 += (int)Test.instanceCount;
                    i24 += (i30 * i1);
                    b1 = false;
                    s1 |= (short)i23;
                    switch (((i24 >>> 1) % 5) + 29) {
                    case 29:
                        Test.lArrFld[i27] <<= by3;
                        i31 *= (int)f3;
                    case 30:
                    case 31:
                    case 32:
                        Test.lArrFld[(i30 >>> 1) % N] = i1;
                        i24 <<= i26;
                    case 33:
                        i1 *= i28;
                        break;
                    }
                }
            case 19:
                f3 += (i27 * f3);
                break;
            case 20:
                iArr2[i27] = i23;
                break;
            case 21:
            case 22:
                i1 += i23;
                break;
            case 23:
                i31 *= (int)Test.instanceCount;
                break;
            case 24:
                Test.instanceCount <<= i23;
            case 25:
                f3 = i1;
                break;
            default:
                if (b1) continue;
            }
        } while ((i27 += 3) < 142);

        FuzzerUtils.out.println("i i1 i23 = " + i + "," + i1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("f3 b1 i30 = " + Float.floatToIntBits(f3) + "," + (b1 ? 1 : 0) + "," + i30);
        FuzzerUtils.out.println("i31 by3 iArr2 = " + i31 + "," + by3 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
