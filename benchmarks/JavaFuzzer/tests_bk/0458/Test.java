// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2927325188L;
    public short sFld=-30722;
    public static boolean bFld=false;
    public static double dFld=1.40609;
    public int iArrFld[]=new int[N];
    public byte byArrFld[][]=new byte[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, float f2, int i9) {

        int i10=158, i11=-117, i12=-38403, i13=141, i14=-36311, i15=-37672, i16=-14, i17=-147;
        short s1=-23013;
        double d1=44.43726;

        for (i10 = 3; i10 < 192; i10++) {
            i9 *= i9;
        }
        i9 *= (int)l;
        for (i12 = 5; i12 < 245; i12++) {
            for (i14 = 1; 7 > i14; i14++) {
                i15 *= (int)1.498F;
                i9 += (i14 - i15);
                i15 = (int)Test.instanceCount;
            }
            f2 = i14;
            for (i16 = 1; 7 > i16; i16++) {
                byte by1=-3;
                i15 -= i15;
                s1 += (short)(((i16 * f2) + i17) - Test.instanceCount);
                if (i13 != 0) {
                    vMeth2_check_sum += l + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
                        i17 + s1 + Double.doubleToLongBits(d1);
                    return;
                }
                d1 += f2;
                by1 &= (byte)l;
            }
        }
        vMeth2_check_sum += l + Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + s1 +
            Double.doubleToLongBits(d1);
    }

    public void vMeth1(float f1, int i8) {


        vMeth2(-2249477487L, -1.160F, i8);
        vMeth1_check_sum += Float.floatToIntBits(f1) + i8;
    }

    public void vMeth() {

        int i3=80, i4=-6, i5=55590, i6=-2, i7=13;
        float f=-1.309F;
        double d=93.94286;
        byte by=78;

        iArrFld = (iArrFld = (iArrFld = iArrFld));
        for (i3 = 3; i3 < 122; i3++) {
            i5 = 13;
            do {
                sFld -= (short)(i4++);
                i4 += (i5 * f);
                if (Test.bFld) continue;
                iArrFld[i3 + 1] += (int)(((i3 * i5) * (Test.instanceCount--)) | (long)(d - (i5 * i4)));
                i4 += (i5 | i4);
                for (i6 = 1; i6 < 3; i6++) {
                    switch ((((i6 * i4) >>> 1) % 6) + 100) {
                    case 100:
                        f *= f;
                    case 101:
                        iArrFld[i6 - 1] -= Math.min(i4 <<= (i4 >>= i7), (int)((-Math.sqrt(d)) * i3));
                        i4 += (((i6 * i5) + by) - Test.instanceCount);
                        break;
                    case 102:
                        vMeth1(f, i3);
                        d = Test.instanceCount;
                        break;
                    case 103:
                        i4 += i6;
                    case 104:
                        i7 -= sFld;
                        break;
                    case 105:
                        iArrFld = iArrFld;
                        break;
                    default:
                        if (i7 != 0) {
                            vMeth_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6
                                + i7 + by;
                            return;
                        }
                    }
                }
            } while ((i5 -= 3) > 0);
        }
        vMeth_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 + i7 + by;
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-723, i2=-144, i18=10896, i19=254, i20=12;
        short s=-3918;
        byte by2=-86;
        float f3=1.489F;
        long l1=-114L;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 25.79753);

        i -= (++i);
        i &= i;
        for (i1 = 278; i1 > 13; --i1) {
            switch ((i1 % 9) + 54) {
            case 54:
            case 55:
                i2 += (((i1 * Test.instanceCount) + Test.instanceCount) - s);
                vMeth();
                break;
            case 56:
                if (Test.bFld) {
                    i %= (int)(by2 | 1);
                }
                i2 >>= (int)Test.instanceCount;
                break;
            case 57:
                f3 += i2;
                break;
            case 58:
                i2 += i;
                break;
            case 59:
                i18 = 1;
                while (++i18 < 95) {
                    switch ((((i >>> 1) % 5) * 5) + 116) {
                    case 123:
                        dArr[i18] = i2;
                        break;
                    case 135:
                        i = (int)Test.dFld;
                        break;
                    case 117:
                        switch ((i18 % 2) + 102) {
                        case 102:
                            Test.instanceCount = i1;
                        case 103:
                            l1 = 1;
                            do {
                                i = i2;
                                Test.instanceCount *= i;
                                i2 = i2;
                                i += i18;
                                i2 >>= i;
                                by2 += (byte)i2;
                                i += (int)Test.instanceCount;
                            } while (++l1 < 1);
                            for (i19 = 1; i19 < 1; ++i19) {
                                i <<= i19;
                                i += (i19 * i19);
                            }
                            Test.instanceCount = -53973;
                            i += (int)Test.instanceCount;
                            break;
                        }
                        break;
                    case 129:
                        byArrFld[i1 - 1][i1] = (byte)i18;
                        break;
                    case 132:
                        Test.instanceCount *= i18;
                        break;
                    default:
                        s <<= (short)i18;
                    }
                }
                break;
            case 60:
                iArrFld[i1] *= i;
            case 61:
                i20 *= sFld;
                break;
            case 62:
                i -= 60;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s by2 f3 = " + s + "," + by2 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i18 l1 i19 = " + i18 + "," + l1 + "," + i19);
        FuzzerUtils.out.println("i20 dArr = " + i20 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.bFld = " + Test.instanceCount + "," + sFld + "," +
            (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld iArrFld byArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
