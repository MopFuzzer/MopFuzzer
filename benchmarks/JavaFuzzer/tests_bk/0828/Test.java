// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2763836565L;
    public static int iFld=173;
    public float fFld=0.346F;
    public static short sFld=28676;
    public static int iFld1=-13;
    public static volatile double dFld=-121.121600;
    public static boolean bFld=true;
    public static int iArrFld[][]=new int[N][N];
    public static byte byArrFld[]=new byte[N];
    public static volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -26);
        FuzzerUtils.init(Test.byArrFld, (byte)-26);
        FuzzerUtils.init(Test.fArrFld, -91.570F);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static int iMeth(int i, long l) {

        int i1=56262, i2=-207;

        for (i1 = 3; i1 < 237; i1++) {
            i = (i * i2);
        }
        i2 += (-i1);
        long meth_res = i + l + i1 + i2;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i8, int i9) {

        int i10=-29134, i11=26838, i12=102, i13=18, i14=-156;
        float f2=0.419F;
        boolean b=false;

        i10 = 1;
        do {
            Test.iArrFld[i10][i10 - 1] <<= Test.sFld;
            Test.byArrFld[i10] += (byte)9;
            try {
                i9 = (Test.iFld1 % Test.iArrFld[i10][i10]);
                i9 = (i10 / Test.iFld);
                i8 = (-1303035308 / Test.iFld1);
            } catch (ArithmeticException a_e) {}
            for (i11 = 1; i11 < 4; ++i11) {
                i13 = 1;
                do {
                    i12 += (int)Test.instanceCount;
                    Test.iFld &= i8;
                    f2 = f2;
                    Test.iArrFld[i10][i13] *= (int)Test.instanceCount;
                    i8 -= i11;
                    b = b;
                } while (++i13 < 2);
                i14 *= -74;
                f2 -= f2;
                Test.sFld = (short)i13;
            }
        } while (++i10 < 387);
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i14;
    }

    public static void vMeth(int i5, float f1) {

        int i6=178, i7=-50618, i15=172, i16=-12, i17=-5, i18=14, i19=7, i20=-32;
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -39L);

        for (i6 = 259; i6 > 2; i6 -= 2) {
            vMeth1(i7, i5);
        }
        Test.iFld >>>= (int)Test.instanceCount;
        b1 = b1;
        for (i15 = 9; 392 > i15; i15++) {
            switch ((((i15 >>> 1) % 2) * 5) + 34) {
            case 42:
                i5 -= Test.iFld1;
            case 39:
                i16 /= (int)-127.68165;
                for (i17 = 1; 4 > i17; i17++) {
                    double d1=-21.13423;
                    for (i19 = 1; 2 > i19; i19++) {
                        Test.iFld = i17;
                        i5 -= 29;
                    }
                    lArr[i15 + 1] *= i5;
                    d1 = -16.122253;
                    i20 = (int)Test.instanceCount;
                }
            default:
                Test.iArrFld[i15][i15] = (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(long l1) {

        int i4=-2, i21=-52846, i22=43984, iArr1[]=new int[N];
        double d=-2.22310;

        FuzzerUtils.init(iArr1, 37702);

        i4 = 1;
        while (++i4 < 341) {
            float f=-30.649F;
            d -= (l1 - i4);
            Test.iFld <<= (int)(((f * l1) * Test.sFld) - (f * (--iArr1[i4 - 1])));
            vMeth(8, f);
            Test.iFld1 *= Test.iFld1;
            l1 += (-7 + (i4 * i4));
            Test.dFld = Test.iFld1;
            if (Test.bFld) {
                i21 = 1;
                do {
                    Test.iFld = Test.iFld;
                    f *= f;
                    Test.iFld1 -= Test.iFld1;
                    Test.iFld1 = Test.iFld;
                    Test.iFld1 %= (int)(i21 | 1);
                    try {
                        Test.iFld = (94 % i4);
                        Test.iFld = (i21 / i21);
                        i22 = (Test.iFld1 % i4);
                    } catch (ArithmeticException a_e) {}
                } while (++i21 < 5);
            } else if (Test.bFld) {
                Test.iFld1 -= Test.iFld1;
            }
        }
        long meth_res = l1 + i4 + Double.doubleToLongBits(d) + i21 + i22 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-4164;
        byte by=-16;
        int i3=-183, i23=12, i24=3327, i25=41644, i26=185, i27=29370, iArr[]=new int[N];
        float f3=2.176F;
        double d2=-2.94538;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(lArr1, -3441308938639443441L);

        Test.iFld = (int)(((--Test.instanceCount) - (20408 * Test.iFld)) - (fFld++));
        Test.iFld += (Test.iFld - iMeth(Test.iFld--, Test.instanceCount));
        Test.iFld = (int)(fFld - Test.iFld);
        Test.iFld |= (-Short.reverseBytes((short)(++s)));
        Test.iFld = (int)Test.instanceCount;
        iMeth((int)((-(-118L - by)) - (Test.iFld++)), (--Test.instanceCount) + (iArr[(108 >>> 1) % N] + (-26172 +
            Test.instanceCount)));
        i3 = 1;
        while (++i3 < 273) {
            s = (short)(lMeth(3937303212347561586L) | 2);
            Test.fArrFld[i3 + 1] *= (float)Test.dFld;
            lArr1[i3 + 1] = Test.iFld;
            Test.instanceCount -= Test.instanceCount;
            i23 = 1;
            do {
                Test.iFld <<= -14609;
                Test.iFld *= i23;
                fFld = i23;
                f3 = fFld;
                d2 = 1;
                do {
                    Test.iFld1 += (int)d2;
                    f3 -= 0.742F;
                    Test.iFld1 >>= -68;
                    try {
                        iArr[(int)(d2 - 1)] = (Test.iFld1 % -10028);
                        Test.iFld1 = (Test.iFld1 % 234);
                        Test.iFld1 = (Test.iFld1 / i3);
                    } catch (ArithmeticException a_e) {}
                    Test.iFld = Test.iFld;
                } while (++d2 < 1);
                Test.iFld = Test.sFld;
            } while (++i23 < 92);
        }
        for (i24 = 7; i24 < 137; ++i24) {
            if (Test.bFld) {
                Test.iFld += Test.iFld;
                Test.fArrFld[i24] /= (i3 | 1);
                for (i26 = 1; 193 > i26; i26++) {
                    Test.instanceCount *= 32090;
                    iArr[i24] >>= (int)Test.instanceCount;
                }
            } else {
                by = by;
            }
        }

        FuzzerUtils.out.println("s by i3 = " + s + "," + by + "," + i3);
        FuzzerUtils.out.println("i23 f3 d2 = " + i23 + "," + Float.floatToIntBits(f3) + "," +
            Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 iArr lArr1 = " + i27 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.sFld Test.iFld1 Test.dFld = " + Test.sFld + "," + Test.iFld1 + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.iArrFld Test.byArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
