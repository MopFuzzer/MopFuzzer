// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4045398542L;
    public float fFld=2.671F;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -78.580F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, int i8) {

        int i9=18151, i10=-13, i11=-1666, i12=-10, i13=-14, i14=-110, i15=-40, i16=217, iArr1[]=new int[N];
        byte by=-86;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 5494515822726355807L);
        FuzzerUtils.init(iArr1, 64571);

        i9 = 1;
        do {
            Test.instanceCount = Test.instanceCount;
            i7 -= (int)Test.instanceCount;
            i10 = 4;
            do {
                try {
                    i8 = (-1801799807 % i7);
                    i8 = (84 / i9);
                    i7 = (i8 % 1066);
                } catch (ArithmeticException a_e) {}
                for (i11 = 1; i11 < 2; ++i11) {
                    i8 |= by;
                    lArr[i10] /= (i11 | 1);
                    iArr1 = iArr1;
                }
                i7 = i9;
            } while ((i10 -= 3) > 0);
        } while (++i9 < 387);
        i12 += -1;
        for (i13 = 16; i13 < 346; ++i13) {
            for (i15 = i13; i15 < 5; ++i15) {
                i8 -= i16;
                Test.instanceCount = i14;
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + by + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i, int i1, int i2) {

        int i3=6, i4=12, i5=-9538, i6=-62, i17=36085, iArr2[]=new int[N];
        double d=-2.48930;
        float f=78.241F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.434F);
        FuzzerUtils.init(iArr2, -10450);

        for (i3 = 325; i3 > 8; i3 -= 3) {
            for (i5 = 15; i5 > i3; i5--) {
                i = (int)((-186L % ((i6 += i6) | 1)) * iMeth(-8, i4));
                fArr[i3 - 1] = i1;
                if (true) continue;
                i1 = (int)d;
                i1 <<= -3;
                i17 = 1;
                do {
                    switch ((((-22 >>> 1) % 2) * 5) + 12) {
                    case 16:
                        i1 >>>= (int)-17632L;
                        iArr2[i3] -= i2;
                        f *= i4;
                    case 21:
                        i6 -= (int)Test.instanceCount;
                        f /= (Test.instanceCount | 1);
                        break;
                    }
                    i4 += (-84 + (i17 * i17));
                } while ((i17 -= 3) > 0);
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + i17 +
            Float.floatToIntBits(f) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth() {

        int i18=-50541, i19=-42270, i20=85, i21=47227, i22=30212, iArr[]=new int[N];
        short s=-2774;
        double d1=114.80860;
        byte by1=-65;

        FuzzerUtils.init(iArr, -188);

        iArr = (iArr = (iArr = (iArr = iArr)));
        vMeth1(i18, 161, i18);
        i18 = -23;
        for (float f1 : Test.fArrFld) {
            Test.fArrFld[(i18 >>> 1) % N] -= i18;
            for (i19 = 1; i19 < 4; i19++) {
                i20 /= (int)(Test.instanceCount | 1);
                s += (short)(((i19 * i18) + i19) - Test.instanceCount);
                d1 -= i19;
                Test.instanceCount <<= by1;
                i20 = i18;
                for (i21 = 1; i21 < 2; ++i21) {
                    i20 >>= -57051;
                    i20 += (i21 | i21);
                    s -= (short)i21;
                }
            }
        }
        vMeth_check_sum += i18 + i19 + i20 + s + Double.doubleToLongBits(d1) + by1 + i21 + i22 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23=13, i24=-176, i25=56, i26=74, i27=-22167, i28=111, i29=14, i30=162, i31=7, i32=254, i33=107, i34=-4628,
            i35=-121, i36=-78, i37=-7, iArr3[]=new int[N];
        byte by2=-107;
        short s1=-30411;

        FuzzerUtils.init(iArr3, 22720);

        vMeth();
        for (i23 = 7; i23 < 194; ++i23) {
            i24 += i24;
        }
        by2 = (byte)i23;
        i24 -= i24;
        for (i25 = 1; 197 > i25; i25++) {
            for (i27 = i25; 128 > i27; i27++) {
                Test.instanceCount -= Test.instanceCount;
                for (i29 = 1; i29 < 1; i29++) {
                    i24 >>= i23;
                    iArr3[i25] = i27;
                    by2 = (byte)-13;
                }
            }
            Test.instanceCount = Test.instanceCount;
            fFld += i27;
            try {
                i28 = (i24 / iArr3[i25 + 1]);
                iArr3[i25 + 1] = (i25 % i27);
                i30 = (i25 % 83);
            } catch (ArithmeticException a_e) {}
        }
        s1 = (short)i27;
        for (i31 = 345; 4 < i31; i31--) {
            i30 += s1;
            i30 *= i28;
            switch ((i31 % 1) + 15) {
            case 15:
                i26 = i25;
                for (i33 = 2; i33 < 74; i33++) {
                    Test.instanceCount += (-64542L + (i33 * i33));
                }
                break;
            }
            s1 += (short)i31;
        }
        i24 = i27;
        for (i35 = 24; i35 < 392; i35 += 2) {
            fFld %= (Test.instanceCount | 1);
            i37 = 1;
            do {
                i30 |= (int)Test.instanceCount;
                fFld *= 7675;
            } while (++i37 < 136);
        }

        FuzzerUtils.out.println("i23 i24 by2 = " + i23 + "," + i24 + "," + by2);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("s1 i31 i32 = " + s1 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 iArr3 = " + i36 + "," + i37 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.fArrFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
