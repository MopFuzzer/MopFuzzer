// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=3664565253L;
    public static volatile boolean bFld=true;
    public static long lFld=30809L;
    public static float fArrFld[]=new float[N];
    public static double dArrFld[]=new double[N];
    public static long lArrFld[][]=new long[N][N];
    public static volatile byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 16.39F);
        FuzzerUtils.init(Test.dArrFld, -83.109547);
        FuzzerUtils.init(Test.lArrFld, -4227270188940253940L);
        FuzzerUtils.init(Test.byArrFld, (byte)-39);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i5, int i6, int i7) {

        int i8=-212, i9=-14, i10=-2303, i11=-4, i12=-21264, iArr[]=new int[N];
        double d=-109.107982;
        short s=-10196;
        boolean b=false;
        float f1=1.719F, fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -150);
        FuzzerUtils.init(lArr, 113L);
        FuzzerUtils.init(fArr, 2.701F);

        for (i8 = 9; i8 < 149; i8++) {
            for (i10 = 1; 11 > i10; i10++) {
                d = i9;
                i5 += (i10 | i10);
                i12 = 1;
                while (++i12 < 2) {
                    if (i8 != 0) {
                        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + s +
                            (b ? 1 : 0) + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                    switch ((((i9 >>> 1) % 8) * 5) + 16) {
                    case 18:
                        switch ((i10 % 6) + 11) {
                        case 11:
                            i9 += (int)(-2810693067358346381L + (i12 * i12));
                            i9 += (int)-97L;
                            i5 = i6;
                            break;
                        case 12:
                            Test.instanceCount *= s;
                            iArr[i12 - 1] += i11;
                            i11 = (int)Test.instanceCount;
                            break;
                        case 13:
                            if (b) break;
                            break;
                        case 14:
                            i6 *= i5;
                            break;
                        case 15:
                            i6 >>= (int)Test.instanceCount;
                        case 16:
                            f1 += i8;
                            break;
                        default:
                            d += -42847;
                        }
                        break;
                    case 20:
                        lArr = lArr;
                        break;
                    case 42:
                        f1 *= 61798;
                    case 41:
                        i11 = i10;
                        break;
                    case 30:
                        Test.instanceCount += (-111 + (i12 * i12));
                        break;
                    case 27:
                        lArr[i12 + 1] = i6;
                        break;
                    case 37:
                        fArr[i10 + 1] = Test.instanceCount;
                    case 19:
                        i9 = i9;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + s + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(float f, byte by, int i4) {

        int i13=247, i14=-4927, i15=1, i16=-4182, iArr1[]=new int[N];
        long l=-4041L;

        FuzzerUtils.init(iArr1, -64144);

        vMeth(i4, 14, i4);
        for (i13 = 4; i13 < 125; i13++) {
            i4 *= i13;
            i4 >>= (int)Test.instanceCount;
            i14 = 109;
        }
        Test.bFld = Test.bFld;
        for (i15 = 11; i15 < 285; ++i15) {
            i14 %= (int)(i14 | 1);
            Test.fArrFld[i15 + 1] = i13;
            l = 1;
            while (++l < 6) {
                try {
                    i16 = (-8507 / i15);
                    i16 = (-1287994114 / iArr1[i15 - 1]);
                    i14 = (iArr1[(int)(l + 1)] / -1085528086);
                } catch (ArithmeticException a_e) {}
                i16 -= i16;
            }
            i16 = i15;
            Test.dArrFld[(i4 >>> 1) % N] = i13;
            i4 >>= i14;
        }
        long meth_res = Float.floatToIntBits(f) + by + i4 + i13 + i14 + i15 + i16 + l + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3) {

        byte by1=-59;
        int i17=11, i18=-1, i19=17301, iArr2[]=new int[N];
        short s1=12203;
        double d1=-1.110416;

        FuzzerUtils.init(iArr2, 10);

        i3 -= (int)((-(i3 - 1)) + lMeth(-2.904F, by1, i3));
        Test.instanceCount = i3;
        Test.lFld *= Test.instanceCount;
        Test.lFld = -7;
        i3 <<= 4;
        i17 = 1;
        while (++i17 < 174) {
            for (i18 = 1; i18 < 9; i18++) {
                i19 = s1;
                if (i18 != 0) {
                }
                iArr2[(i17 >>> 1) % N] = i19;
                if (Test.bFld) break;
                switch ((((i17 >>> 1) % 1) * 5) + 28) {
                case 31:
                    Test.instanceCount &= -699463100L;
                    iArr2[i18] = i3;
                    d1 *= i19;
                    break;
                default:
                    by1 <<= (byte)19881;
                }
            }
        }
        long meth_res = i3 + by1 + i17 + i18 + i19 + s1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=-177, i2=-8, i20=-4, i21=-13372, iArr3[]=new int[N];
        float f2=1.345F;
        byte by2=-30;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr3, -140);
        FuzzerUtils.init(sArr, (short)-31862);

        try {
            for (i = 12; i < 292; ++i) {
                i2 = 1;
                while (++i2 < 90) {
                    Test.instanceCount *= ((i << i) - iMeth(i));
                    for (i20 = 1; i20 < 1; ++i20) {
                        iArr3 = iArr3;
                        switch ((i % 8) + 12) {
                        case 12:
                            i1 = -9;
                            i1 += -5;
                            Test.lArrFld[i2][i20] = Test.lFld;
                            break;
                        case 13:
                        case 14:
                            i1 += (((i20 * i21) + i20) - Test.instanceCount);
                            i1 <<= -206;
                            i1 -= (int)-5506437239335554298L;
                            iArr3[i + 1] -= i1;
                            break;
                        case 15:
                            Test.lFld /= (i2 | 1);
                            sArr = sArr;
                            break;
                        case 16:
                            i21 += i;
                            Test.lFld *= i20;
                            i21 = 0;
                            break;
                        case 17:
                            i21 = i;
                            break;
                        case 18:
                            Test.instanceCount -= i21;
                            i21 = i21;
                            Test.instanceCount <<= i21;
                            break;
                        case 19:
                            Test.instanceCount -= -54306;
                            iArr3[i2] = i1;
                            Test.lArrFld[(i21 >>> 1) % N][i20] += i20;
                            break;
                        }
                        i21 += i20;
                        Test.lFld += i20;
                        Test.byArrFld[i - 1] <<= (byte)i21;
                        i1 = (int)f2;
                    }
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            f2 = Test.lFld;
        }
        finally {
            iArr3[(i20 >>> 1) % N] = by2;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 i21 f2 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("by2 iArr3 sArr = " + by2 + "," + FuzzerUtils.checkSum(iArr3) + "," +
            FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.lFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.fArrFld Test.dArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.byArrFld = " + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
