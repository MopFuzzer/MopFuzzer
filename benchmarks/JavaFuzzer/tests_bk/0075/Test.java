// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1946827231L;
    public static double dFld=-2.70058;
    public static int iFld=233;
    public static short sFld=27386;
    public static float fFld=-93.96F;
    public static int iFld1=5;
    public static long lFld=4L;
    public static boolean bFld=true;
    public static boolean bArrFld[]=new boolean[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, 2.41047);
        FuzzerUtils.init(Test.fArrFld, -2.608F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        long l=-4528901021554128268L;
        int i12=32, i13=30729, i14=5, i15=48, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 0);

        Test.instanceCount = Test.iFld;
        for (double d1 : Test.dArrFld) {
            for (l = 1; 4 > l; l++) {
                i12 = Test.iFld;
                Test.instanceCount += l;
                switch ((int)((l % 10) + 26)) {
                case 26:
                    Test.iFld <<= i12;
                    iArr[(int)(l - 1)] = 5;
                    break;
                case 27:
                    for (i13 = (int)(l); 2 > i13; i13++) {
                        i12 = (int)l;
                        iArr[i13] = -61592;
                        try {
                            i15 = (Test.iFld % -189);
                            i15 = (50616 / i12);
                            i12 = (-31062 / iArr[i13 - 1]);
                        } catch (ArithmeticException a_e) {}
                        try {
                            i12 = (i13 % iArr[(int)(l + 1)]);
                            i12 = (i14 % 1087964965);
                            Test.iFld = (iArr[i13 - 1] / -28660);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += i13;
                        Test.sFld -= (short)Test.instanceCount;
                    }
                case 28:
                    Test.instanceCount -= i12;
                    break;
                case 29:
                    i15 = (int)Test.fFld;
                    break;
                case 30:
                    i12 ^= i13;
                case 31:
                    Test.fArrFld[(int)(l)] *= i14;
                case 32:
                    Test.instanceCount += (((l * i12) + i13) - i13);
                    break;
                case 33:
                    Test.iFld = -50863;
                    break;
                case 34:
                    i14 = 1;
                    break;
                case 35:
                    i14 *= i12;
                    break;
                }
            }
        }
        long meth_res = l + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void vMeth1(int i7, double d, short s) {

        int i8=180, i9=61, i10=-59, i11=-229, i16=-2, iArr1[][]=new int[N][N];
        boolean b=true;

        FuzzerUtils.init(iArr1, 35);

        for (i8 = 7; i8 < 235; i8++) {
            i9 *= (int)((i7 & (i9 * i9)) + ((i7 * i9) - Float.intBitsToFloat(i9)));
            for (i10 = 1; 7 > i10; ++i10) {
                if (Test.bArrFld[i10] && bMeth()) break;
                i16 = 1;
                do {
                    b = b;
                    switch ((i16 % 7) + 63) {
                    case 63:
                        iArr1[i16 + 1][i10 + 1] |= s;
                        break;
                    case 64:
                        i7 = (int)-3L;
                        break;
                    case 65:
                        i9 = i8;
                        i9 = 0;
                        Test.fFld += (i16 * Test.iFld1);
                        if (b) {
                            Test.iFld1 += -4;
                            if (b) continue;
                        }
                        break;
                    case 66:
                        i9 -= (int)Test.lFld;
                        break;
                    case 67:
                        i7 += (i16 * i16);
                        break;
                    case 68:
                        Test.fFld *= -14733;
                        break;
                    case 69:
                        Test.iFld /= (int)(i10 | 1);
                        break;
                    default:
                        Test.lFld = Test.instanceCount;
                    }
                } while (++i16 < 2);
            }
        }
        vMeth1_check_sum += i7 + Double.doubleToLongBits(d) + s + i8 + i9 + i10 + i11 + i16 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i2=-183, i3=-5, i4=97, i5=63, i6=-8, i17=71, i18=-67, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -43431);

        i2 >>>= (-Math.min((int)(Test.instanceCount * i2), i2));
        Test.dFld = (Test.instanceCount + i2);
        for (i3 = 4; i3 < 222; i3 += 3) {
            for (i5 = 21; 1 < i5; i5--) {
                switch ((i5 % 4) + 97) {
                case 97:
                    vMeth1(i17, -23.127866, Test.sFld);
                    i18 = 1;
                    do {
                        Test.instanceCount += (i18 * i18);
                        i6 -= (int)Test.dFld;
                        Test.fFld -= i18;
                        i17 = i3;
                        Test.sFld *= (short)Test.lFld;
                        try {
                            Test.iFld1 = (Test.iFld1 % i6);
                            i2 = (Test.iFld % 105);
                            Test.iFld1 = (153 / i4);
                        } catch (ArithmeticException a_e) {}
                        iArr2 = iArr2;
                        i4 += (((i18 * Test.iFld1) + Test.lFld) - i2);
                    } while (++i18 < 2);
                    break;
                case 98:
                case 99:
                    i6 = -10;
                    break;
                case 100:
                    i2 -= i17;
                    break;
                default:
                    i6 = Test.iFld;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i17 + i18 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=-102, i1=-1, i19=-29874, i20=4, i21=10, i22=-10452;
        float f=45.882F, f1=-1.293F;

        for (i = 14; i < 343; i++) {
            vMeth();
        }
        Test.lFld -= i1;
        Test.dFld -= Test.dFld;
        i1 -= Test.iFld;
        Test.iFld1 >>= i1;
        if (Test.bFld) {
            i19 = 1;
            do {
                Test.iFld += i19;
                Test.iFld += (i19 * i19);
                Test.lFld += i19;
                Test.instanceCount *= (long)Test.fFld;
                Test.iFld += (int)Test.lFld;
                Test.fFld -= i;
                f = 1;
                do {
                    i1 += (int)(f * f);
                    Test.lFld *= (long)-1.944F;
                    Test.iFld1 *= 4;
                    Test.instanceCount = i;
                    Test.bFld = false;
                    i1 = (int)1.853F;
                    Test.bFld = Test.bFld;
                } while (++f < 86);
                Test.iFld += (int)Test.instanceCount;
                for (i20 = 5; i20 < 86; i20++) {
                    for (f1 = i20; f1 < 2; f1++) {
                        i21 = (int)Test.lFld;
                        Test.iFld1 += Test.sFld;
                        Test.iFld1 = (int)Test.lFld;
                        Test.instanceCount >>= Test.iFld1;
                        Test.lFld /= (i19 | 1);
                    }
                }
            } while (++i19 < 294);
        }

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("f i20 i21 = " + Float.floatToIntBits(f) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("f1 i22 = " + Float.floatToIntBits(f1) + "," + i22);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.sFld Test.fFld Test.iFld1 = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld)
            + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.lFld Test.bFld Test.bArrFld = " + Test.lFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));
        FuzzerUtils.out.println("Test.dArrFld Test.fArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
