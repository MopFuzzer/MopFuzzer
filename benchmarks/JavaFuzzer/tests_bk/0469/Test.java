// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-270097106950165181L;
    public static float fFld=0.372F;
    public double dFld=0.20936;
    public static int iFld=208;
    public static double dFld1=-2.91353;
    public static short sFld=-11820;
    public volatile boolean bFld=false;
    public int iFld1=-114;
    public static float fFld1=13.947F;
    public short sFld1=14173;
    public int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.23968);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth(int i1) {

        int i2=-206, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -12);

        iArr[(i2 >>> 1) % N] *= (int)(((++iArr[(i1 >>> 1) % N]) * i1) - Test.fFld);
        vMeth_check_sum += i1 + i2 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth2(int i11, float f) {

        int i12=-8219, i13=-24444, i14=-40486, i15=-60758, i16=-121, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        long l=11L;
        byte by=-35;

        FuzzerUtils.init(iArr1, -14);
        FuzzerUtils.init(iArr2, 57011);

        Test.iFld += i11;
        for (i12 = 11; i12 < 201; i12++) {
            Test.iFld += (i12 + i11);
            Test.instanceCount *= i13;
            for (l = i12; 8 > l; l++) {
                iArr1[(int)(l)] *= (int)Test.instanceCount;
                for (i15 = 1; i15 < 1; ++i15) {
                    if (i13 != 0) {
                        vMeth2_check_sum += i11 + Float.floatToIntBits(f) + i12 + i13 + l + i14 + i15 + i16 + by +
                            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    Test.iFld += (int)Test.dFld1;
                    i13 -= (int)l;
                    iArr2 = iArr2;
                    i11 <<= i12;
                    Test.instanceCount = i11;
                    by -= (byte)i16;
                }
                i16 += i14;
            }
        }
        vMeth2_check_sum += i11 + Float.floatToIntBits(f) + i12 + i13 + l + i14 + i15 + i16 + by +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i6, int i7, int i8) {

        int i9=-30106, i10=-49246, i18=-27542, i19=52, i20=10, i21=9417, i22=3, i23=3, iArr3[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr3, 19916);

        for (i9 = 4; i9 < 158; ++i9) {
            int i17=37;
            i6 = (i10 <<= i8);
            vMeth2(i7, Test.fFld);
            Test.fFld += (((i9 * i7) + Test.fFld) - i17);
            for (i18 = 1; i18 < 10; i18++) {
                for (i20 = 2; i20 > 1; --i20) {
                    i8 -= (int)Test.dFld1;
                    iArr3[i9 - 1] = -48;
                    i21 -= (int)Test.instanceCount;
                    b = b;
                }
                Test.dArrFld[i18 - 1] -= Test.instanceCount;
                switch ((((i17 >>> 1) % 3) * 5) + 89) {
                case 98:
                    for (i22 = 1; i22 < 2; ++i22) {
                        i10 += (i22 - Test.iFld);
                        Test.dFld1 += -1;
                    }
                    break;
                case 94:
                case 93:
                    i17 *= i21;
                    break;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i18 + i19 + i20 + i21 + (b ? 1 : 0) + i22 + i23 +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i3) {

        int i4=48050, i5=-12, i24=-130, i25=31908, i26=111, iArr4[]=new int[N];
        short s=4555;
        float f1=-53.311F;
        boolean b1=true;

        FuzzerUtils.init(iArr4, 117);

        i4 = 1;
        while ((i4 += 2) < 337) {
            s = (short)(++i3);
        }
        i5 = 1;
        while (++i5 < 352) {
            switch ((i5 % 2) + 78) {
            case 78:
                iMeth(Test.iFld, -7501, i5);
                i3 <<= (int)Test.instanceCount;
                break;
            case 79:
                for (f1 = 1; f1 < 5; ++f1) {
                    Test.instanceCount = i3;
                    for (i25 = 1; i25 < 2; i25++) {
                        iArr4[i25 - 1] -= i24;
                        Test.instanceCount <<= i5;
                        if (b1) break;
                        Test.instanceCount += Test.instanceCount;
                        iArr4 = iArr4;
                        i3 >>>= 7;
                    }
                }
                break;
            }
        }
        vMeth1_check_sum += i3 + i4 + s + i5 + Float.floatToIntBits(f1) + i24 + i25 + i26 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {

        int i=-62, i27=-48207, i28=-190, i29=42889;
        float f2=2.218F;
        long l1=-7L, lArr[]=new long[N];
        short sArr[]=new short[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(sArr, (short)-18082);
        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(bArr, true);

        i = 1;
        do {
            vMeth(Math.max((int)(-(dFld++)), i));
            iArrFld[i + 1] = (iArrFld[i - 1] = (iArrFld[i - 1] = (iArrFld[i] = iArrFld[i])));
            vMeth1(i);
            i27 = 1;
            while (++i27 < 159) {
                iArrFld[i27 + 1][i27] = i27;
                for (i28 = 1; 1 > i28; ++i28) {
                    byte by1=-48;
                    switch (i27 + 8) {
                    case 8:
                        Test.sFld = (short)Test.dFld1;
                        i29 >>>= i28;
                        Test.iFld <<= (int)Test.instanceCount;
                        break;
                    case 9:
                        Test.instanceCount -= i29;
                        Test.instanceCount = Test.iFld;
                        i29 %= (int)(Test.iFld | 1);
                        Test.instanceCount += i29;
                        break;
                    case 10:
                        Test.instanceCount <<= i27;
                        Test.iFld += (((i28 * Test.sFld) + i) - i);
                        break;
                    case 11:
                        i29 = (int)Test.instanceCount;
                    case 12:
                        i29 += (((i28 * Test.instanceCount) + Test.fFld) - i28);
                        break;
                    case 13:
                        bFld = bFld;
                        i29 = i28;
                        Test.iFld = (int)Test.fFld;
                        switch (((i28 % 5) * 5) + 39) {
                        case 61:
                            Test.fFld += 8633;
                            break;
                        case 49:
                            sArr[i - 1] = (short)i29;
                            Test.dFld1 = Test.instanceCount;
                            break;
                        case 53:
                            i29 -= i;
                            Test.iFld += (int)(175L + (i28 * i28));
                        case 51:
                            i29 += (i28 * i27);
                            Test.iFld %= (int)(i27 | 1);
                            break;
                        case 52:
                            i29 -= i28;
                        default:
                            Test.instanceCount += (long)Test.fFld;
                        }
                        break;
                    case 14:
                    case 15:
                        iArrFld[i - 1][i27] += i27;
                        break;
                    case 16:
                        Test.instanceCount += -6196861427145672026L;
                    case 17:
                        try {
                            i29 = (i29 / 1044331192);
                            i29 = (i29 / i27);
                            Test.iFld = (1097723160 % i27);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 18:
                        Test.instanceCount += (-2229L + (i28 * i28));
                        break;
                    case 19:
                        Test.instanceCount -= i28;
                    case 20:
                        i29 = Test.iFld;
                        break;
                    case 21:
                        Test.iFld += (((i28 * Test.instanceCount) + Test.iFld) - i28);
                        break;
                    case 22:
                        Test.fFld = Test.instanceCount;
                    case 23:
                        Test.instanceCount |= 28563;
                        break;
                    case 24:
                        iArrFld[i + 1][i] -= -113;
                        break;
                    case 25:
                        lArr = lArr;
                        break;
                    case 26:
                        Test.fFld -= -12;
                    case 27:
                        i29 += i29;
                        break;
                    case 28:
                        bArr[i - 1] = bFld;
                    case 29:
                        i29 += 5;
                        break;
                    case 30:
                    case 31:
                        i29 *= i28;
                        break;
                    case 32:
                        Test.iFld += (((i28 * Test.instanceCount) + i27) - i);
                    case 33:
                        Test.instanceCount >>= iFld1;
                        break;
                    case 34:
                        iArrFld[i][i27] += i;
                    case 35:
                        Test.fFld += 90;
                        break;
                    case 36:
                        Test.fFld = i;
                        break;
                    case 37:
                        Test.instanceCount *= i;
                    case 38:
                        iFld1 *= (int)Test.instanceCount;
                        break;
                    case 39:
                        Test.iFld *= (int)Test.fFld1;
                        break;
                    case 40:
                        iFld1 += (int)Test.instanceCount;
                        break;
                    case 41:
                        i29 >>= 5;
                        break;
                    case 42:
                        Test.instanceCount = 211;
                        break;
                    case 43:
                        try {
                            iFld1 = (iFld1 % i28);
                            iFld1 = (34999 % i28);
                            iArrFld[i27][i] = (-201 % i27);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 44:
                        if (true) continue;
                        break;
                    case 45:
                    case 46:
                        sFld1 = sFld1;
                        break;
                    case 47:
                        iArrFld[i28 + 1] = iArrFld[i27];
                    case 48:
                        Test.iFld = by1;
                    case 49:
                        iFld1 -= (int)Test.instanceCount;
                        break;
                    case 50:
                        iFld1 = (int)211L;
                        break;
                    case 51:
                        Test.instanceCount += i28;
                        break;
                    case 52:
                        iFld1 = i27;
                        break;
                    case 53:
                        iArrFld[i27 - 1][i - 1] = (int)-2.189F;
                        break;
                    case 54:
                        Test.iFld = i29;
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                        Test.iFld = i;
                        break;
                    case 60:
                        if (bFld) break;
                    case 61:
                        Test.instanceCount = (long)dFld;
                        break;
                    case 62:
                        if (bFld) continue;
                    case 63:
                        f2 = (float)-123.24559;
                        break;
                    case 64:
                        Test.iFld ^= 180;
                    case 65:
                        iArrFld[i - 1][i27 - 1] >>= i28;
                        break;
                    case 66:
                        Test.dFld1 += i29;
                        break;
                    case 67:
                        iArrFld[i][i27 + 1] = 123;
                    case 68:
                        f2 += iFld1;
                    case 69:
                    case 70:
                        lArr[i27 - 1] *= (long)Test.dFld1;
                        break;
                    case 71:
                        Test.dArrFld[i] -= f2;
                        break;
                    case 72:
                        Test.instanceCount += i;
                        break;
                    case 73:
                        l1 += (216L + (i28 * i28));
                    case 74:
                        Test.iFld = i;
                        break;
                    case 75:
                        by1 /= (byte)84;
                        break;
                    case 76:
                        iFld1 = i28;
                        break;
                    case 77:
                        if (bFld) continue;
                        break;
                    default:
                        i29 *= i;
                    }
                }
            }
        } while (++i < 158);

        FuzzerUtils.out.println("i i27 i28 = " + i + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 f2 l1 = " + i29 + "," + Float.floatToIntBits(f2) + "," + l1);
        FuzzerUtils.out.println("sArr lArr bArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr) +
            "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld Test.dFld1 Test.sFld = " + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld1) + "," + Test.sFld);
        FuzzerUtils.out.println("bFld iFld1 Test.fFld1 = " + (bFld ? 1 : 0) + "," + iFld1 + "," +
            Float.floatToIntBits(Test.fFld1));
        FuzzerUtils.out.println("sFld1 iArrFld Test.dArrFld = " + sFld1 + "," + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 mainTest
//DEBUG  iMeth ->  iMeth vMeth1 mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth vMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
