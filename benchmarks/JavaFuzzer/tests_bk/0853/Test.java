// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-227161403L;
    public static float fFld=117.851F;
    public static boolean bFld=false;
    public static long lFld=-3L;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -145);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth(float f1, int i5) {

        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -90);

        i5 -= (++iArr[(i5 >>> 1) % N]);
        vMeth_check_sum += Float.floatToIntBits(f1) + i5 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1() {

        double d1=0.72465;
        int i9=-160, i10=-22, i11=-5, i12=-213, i13=1;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -7L);

        Test.iArrFld[(12 >>> 1) % N] -= (int)Test.instanceCount;
        Test.iArrFld[(-57783 >>> 1) % N] += (int)Test.instanceCount;
        d1 += i9;
        lArr[(i9 >>> 1) % N] *= i9;
        Test.instanceCount |= -23710;
        for (i10 = 8; 329 > i10; i10 += 2) {
            Test.iArrFld[i10] = i11;
            Test.instanceCount += 5L;
            i11 += (i10 ^ i9);
            i11 = i10;
        }
        switch ((((i11 >>> 1) % 2) * 5) + 41) {
        case 45:
            for (i12 = 5; i12 < 348; ++i12) {
                Test.instanceCount /= (i9 | 1);
                Test.bFld = Test.bFld;
                i11 += (i12 * i10);
            }
            break;
        case 43:
            i9 = i12;
            break;
        }
        long meth_res = Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        int i6=-44282, i7=35523, i8=-172, i14=18558, i15=48;
        byte by=108;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 1L);

        for (i6 = 6; i6 < 245; ++i6) {
            i8 = 1;
            do {
                i7 += (int)(-68.487F + (i8 * i8));
                Test.fFld -= iMeth1();
                lArr1[i8] = Test.instanceCount;
                for (i14 = 1; i14 < 1; ++i14) {
                    double d2=-47.107678;
                    Test.iArrFld[i14] = (int)Test.instanceCount;
                    Test.fFld -= Test.instanceCount;
                    i7 = (int)d2;
                    Test.bFld = Test.bFld;
                    if (Test.bFld) continue;
                    i15 = 44;
                    i15 <<= by;
                    i15 -= 7;
                    i15 ^= i14;
                }
            } while (++i8 < 7);
        }
        long meth_res = i6 + i7 + i8 + i14 + i15 + by + FuzzerUtils.checkSum(lArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i2, long l) {

        int i3=-111, i4=-53453, i16=-4, i17=4, i18=7;
        long l1=-3534755579810082023L;
        short s=13886;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -16.366F);

        for (i3 = 3; i3 < 240; ++i3) {
            vMeth(sMeth() + i2, i4);
            i16 = 1;
            do {
                Test.iArrFld[i16] = i3;
                for (l1 = 1; l1 < 1; ++l1) {
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)30275);
                    i2 = s;
                    i2 += (int)(((l1 * i2) + i2) - l);
                    i17 <<= i3;
                    fArr[(int)(l1 - 1)] += Test.fFld;
                    Test.iArrFld[(int)(l1 - 1)] += (int)-45.651F;
                    i2 >>>= i17;
                    i4 *= (int)12L;
                    Test.iArrFld[i16] >>>= i3;
                }
            } while (++i16 < 7);
            i18 += (i3 * i3);
        }
        long meth_res = i2 + l + i3 + i4 + i16 + l1 + i17 + s + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=2.63236;
        int i=-5, i1=-47, i19=-4, i20=-36331, i21=-5, i22=-13266;
        float f=0.1010F;
        short s1=-3197;
        byte by1=33;
        long lArr2[][]=new long[N][N];

        FuzzerUtils.init(lArr2, 3918040767L);

        for (d = 6; d < 384; d++) {
            for (f = 1; 67 > f; ++f) {
                Test.instanceCount = ((++i) | iMeth(i, Test.instanceCount));
                Test.instanceCount += (long)(f * f);
                i = 5657;
                i1 += (int)(f - i1);
                Test.fFld -= i1;
                i += (75 + (f * f));
                if (true) {
                    Test.fFld += ((long)f ^ (long)i1);
                    for (i19 = (int)(f); i19 < 2; i19++) {
                        lArr2[i19 + 1][i19] = Test.instanceCount;
                        Test.iArrFld[(int)(d)] *= i;
                        i /= (int)1.1019F;
                        i20 += (i19 * i19);
                        Test.instanceCount -= i1;
                        i += (i19 - i20);
                        i = -7;
                    }
                    Test.fFld *= -27798;
                } else {
                    switch ((int)(((f % 1) * 5) + 23)) {
                    case 27:
                        i -= (int)Test.lFld;
                        i1 = i;
                        break;
                    }
                    i1 -= 3;
                    for (i21 = 1; i21 < 2; i21++) {
                        i20 += (int)Test.instanceCount;
                        s1 = (short)i1;
                        Test.iArrFld[(int)(f)] *= (int)2736630806L;
                        fArrFld[i21] -= i;
                        i1 += i21;
                        Test.iArrFld[i21 + 1] -= by1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("d i f = " + Double.doubleToLongBits(d) + "," + i + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i1 i19 i20 = " + i1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 s1 = " + i21 + "," + i22 + "," + s1);
        FuzzerUtils.out.println("by1 lArr2 = " + by1 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld Test.iArrFld fArrFld = " + Test.lFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
