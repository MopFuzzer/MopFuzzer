// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4213839737L;
    public static float fFld=1.0F;
    public static boolean bFld=false;
    public static double dFld=1.9756;
    public static volatile int iFld=90;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.46754);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(byte by, int i6, int i7) {

        float f=0.761F;
        int i8=7, i9=-35411, i10=14, i11=18746, i12=19, i13=-9, i14=-46043, iArr[]=new int[N];
        double d=-38.94516, d1=-2.66939;

        FuzzerUtils.init(iArr, 50003);

        iArr = iArr;
        f *= Test.instanceCount;
        i7 *= (int)Test.instanceCount;
        for (i8 = 3; i8 < 135; i8++) {
            i7 += i6;
            d = 1;
            do {
                i10 = 1;
                do {
                    Test.instanceCount += (long)(21.448F + (i10 * i10));
                } while (++i10 < 1);
                for (i11 = 1; i11 < 1; i11++) {
                    i6 >>= i8;
                }
                i6 += (int)d;
                for (i13 = 1; i13 < 1; ++i13) {
                    f += (i13 + i12);
                    d1 *= i12;
                    i6 += i7;
                }
            } while (++d < 12);
        }
        long meth_res = by + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + i12
            + i13 + i14 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, int i4, int i5) {

        byte by1=19, byArr[]=new byte[N];
        int i15=85, i16=224, i17=61, i18=-26006, iArr1[]=new int[N];
        boolean b=true;
        double d2=-22.58980;
        float f1=40.549F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(byArr, (byte)-94);

        iMeth1(by1, i5, 19486);
        Test.instanceCount += i5;
        i15 = 1;
        do {
            try {
                iArr1[(-135 >>> 1) % N] = (i5 / 249);
                i4 = (30415 % i4);
                i3 = (56070 % i15);
            } catch (ArithmeticException a_e) {}
            i3 = i5;
            for (i16 = 1; i16 < 8; ++i16) {
                iArr1[i16] += -21;
                switch ((i16 % 10) + 119) {
                case 119:
                    b = b;
                    d2 -= i17;
                    switch ((i16 % 2) + 57) {
                    case 57:
                        switch (((i16 % 6) * 5) + 97) {
                        case 110:
                            i18 = 1;
                            while (++i18 < 2) {
                                Test.instanceCount *= i4;
                                i4 = -23029;
                            }
                        case 124:
                            by1 += (byte)i17;
                            break;
                        case 104:
                            d2 = i16;
                            break;
                        case 109:
                            i5 &= i15;
                        case 99:
                            Test.dArrFld = Test.dArrFld;
                            break;
                        case 122:
                            iArr1[i15 + 1] = (int)f1;
                            break;
                        }
                        break;
                    case 58:
                        Test.instanceCount >>= i16;
                        break;
                    }
                case 120:
                    i3 -= i17;
                    break;
                case 121:
                    lArr = lArr;
                case 122:
                case 123:
                    byArr[i15] += (byte)Test.instanceCount;
                    break;
                case 124:
                    i3 += i16;
                    break;
                case 125:
                    i3 += (i16 | i16);
                    break;
                case 126:
                    Test.instanceCount <<= i17;
                    break;
                case 127:
                    i4 += by1;
                    break;
                case 128:
                    lArr[i15] = (long)f1;
                    break;
                }
            }
        } while (++i15 < 190);
        long meth_res = i3 + i4 + i5 + by1 + i15 + i16 + i17 + (b ? 1 : 0) + Double.doubleToLongBits(d2) + i18 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(long l, int i1, int i2) {

        double d3=-1.123019;
        short s=7326;

        lMeth(i1, i1, i1);
        i2 <<= i2;
        i1 = (int)d3;
        Test.fFld *= s;
        long meth_res = l + i1 + i2 + Double.doubleToLongBits(d3) + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-58283, i19=86, i20=-1869, i21=5, i22=9, i23=1, i24=52, i25=36937, i26=-2, i27=228, i28=2, i29=-46723,
            i30=-179, iArr2[]=new int[N];
        short s1=-14411;
        long lArr1[]=new long[N], lArr2[][]=new long[N][N];

        FuzzerUtils.init(iArr2, -33249);
        FuzzerUtils.init(lArr1, 1873225067663915920L);
        FuzzerUtils.init(lArr2, -15177L);

        i = (iMeth(52064L, -29740, -1489) - i);
        for (i19 = 15; 263 > i19; ++i19) {
            for (i21 = 5; i21 < 101; ++i21) {
                Test.instanceCount += i19;
            }
        }
        for (i23 = 14; i23 < 272; i23++) {
            for (i25 = 5; i25 < 97; ++i25) {
                for (i27 = 1; i27 < 2; ++i27) {
                    i26 = i20;
                    i20 = i20;
                    iArr2[i27 - 1] |= i26;
                    Test.bFld = Test.bFld;
                    if (true) {
                        Test.instanceCount += 126;
                    } else {
                    }
                    i24 <<= (int)Test.instanceCount;
                    i24 += i25;
                    lArr1[i27 + 1] ^= Test.instanceCount;
                    Test.instanceCount = i20;
                    if (false) {
                        Test.instanceCount += (i27 + Test.fFld);
                        Test.dFld -= i21;
                        iArr2[i27] *= (int)Test.instanceCount;
                    } else if (Test.bFld) {
                        i20 -= i20;
                        Test.dFld += i26;
                        Test.fFld = i21;
                        if (Test.bFld) break;
                    }
                }
                for (i29 = 1; 2 > i29; ++i29) {
                    if (Test.bFld) {
                        Test.iFld *= (int)Test.fFld;
                        i += i29;
                        s1 = (short)i20;
                    } else {
                        lArr2 = lArr2;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 s1 iArr2 = " + i30 + "," + s1 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("lArr1 lArr2 = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.dFld Test.iFld Test.dArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.iFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
