// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-30880L;
    public static double dFld=-2.62759;
    public float fFld=-113.16F;
    public static int iFld=-14;
    public static boolean bFld=false;
    public static volatile byte byArrFld[]=new byte[N];
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];
    public short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)71);
        FuzzerUtils.init(Test.iArrFld, 77);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        short s=22410;
        int i9=17818, i10=0, iArr[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 1254271291423672423L);
        FuzzerUtils.init(iArr, 6);
        FuzzerUtils.init(bArr, false);

        lArr[(i8 >>> 1) % N][(i8 >>> 1) % N] = i8;
        i8 *= 218;
        iArr[(-16184 >>> 1) % N] += s;
        for (i9 = 369; i9 > 6; i9--) {
            bArr[i9] = b1;
            i10 = i10;
            i8 = s;
            i8 ^= 40028;
            i8 = i10;
        }
        vMeth1_check_sum += i8 + s + i9 + i10 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(bArr);
    }

    public void vMeth(float f, int i6, int i7) {

        int i11=25456, i12=64525, i13=-98, i14=-18133, i15=63019;

        i6 += (int)((Test.instanceCount + Test.dFld) - ((++lArrFld[(i7 >>> 1) % N]) - (i6 + Test.instanceCount)));
        vMeth1(-7731);
        Test.dFld *= -7;
        for (i11 = 13; i11 < 359; i11++) {
            if (true) break;
            if (false) break;
            i12 += (i11 * i11);
            for (i13 = 1; i13 < 5; i13++) {
                Test.iArrFld[i13 + 1] = (int)Test.instanceCount;
                i12 += (148 + (i13 * i13));
                i14 *= -30100;
            }
        }
        fArrFld[(i6 >>> 1) % N] -= Test.instanceCount;
        i15 = 1;
        while (++i15 < 277) {
            Test.iArrFld[i15] -= (int)8284L;
            Test.byArrFld[i15] = (byte)i11;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i6 + i7 + i11 + i12 + i13 + i14 + i15;
    }

    public long lMeth() {

        boolean b=true;
        int i5=-172, i16=-9, i17=-7, i18=99, i19=-14, i20=-12047, i21=16802, iArr1[]=new int[N];
        float f1=-1.579F;
        short s1=23963;

        FuzzerUtils.init(iArr1, 180);

        b = ((i5++) <= (i5 + (Test.dFld - i5)));
        vMeth(f1, i5, i5);
        for (i16 = 3; i16 < 368; i16++) {
            switch (((-241 >>> 1) % 2) + 29) {
            case 29:
                i5 -= i17;
                for (i18 = 1; i18 < 5; ++i18) {
                    i17 += i18;
                    lArrFld[i18] += (long)f1;
                    s1 += (short)Test.instanceCount;
                    i17 &= i5;
                    try {
                        i17 = (Test.iArrFld[i18 - 1] % 1529898117);
                        i19 = (i16 % -114);
                        i5 = (131 % i18);
                    } catch (ArithmeticException a_e) {}
                    switch (((i16 >>> 1) % 2) + 11) {
                    case 11:
                        for (i20 = 1; i20 < 2; i20++) {
                            i21 |= (int)-7232386968372572203L;
                            try {
                                Test.iArrFld[i20 - 1] = (i20 % 211);
                                i19 = (-56039 % i21);
                                iArr1[i16 - 1] = (-3741 % i21);
                            } catch (ArithmeticException a_e) {}
                        }
                    case 12:
                        Test.dFld += i5;
                        break;
                    default:
                        i19 -= i20;
                    }
                }
                break;
            case 30:
                if (b) break;
                break;
            }
        }
        long meth_res = (b ? 1 : 0) + i5 + Float.floatToIntBits(f1) + i16 + i17 + i18 + i19 + s1 + i20 + i21 +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=105.115567;
        int i=-39624, i1=7, i2=-83, i3=-17470, i4=-49360, i22=-2;
        short s2=23404;
        byte by=-95;

        Test.byArrFld = (Test.byArrFld = (Test.byArrFld = (Test.byArrFld = Test.byArrFld)));
        d = (55 - Test.instanceCount);
        for (i = 381; 1 < i; --i) {
            switch ((i % 2) + 25) {
            case 25:
                i1 *= (int)((Test.instanceCount >>= (i1 + -114)) + (--i1));
                for (i2 = i; i2 < 66; ++i2) {
                    i3 *= (int)Test.instanceCount;
                    i4 = 1;
                    while (++i4 < 1) {
                        i3 *= i4;
                        i1 += (int)lArrFld[i4];
                        d += lArrFld[i4];
                    }
                    i3 = (int)(((207 * lMeth()) + i) / (i2 | 1));
                    i22 = 1;
                    while (++i22 < 1) {
                        Test.instanceCount += (long)fFld;
                        if (Test.bFld) {
                            i3 &= (int)Test.instanceCount;
                            i3 <<= s2;
                            i1 += (int)fFld;
                            Test.iFld = -9;
                        } else {
                            Test.iFld += Test.iFld;
                            i3 = Test.iFld;
                            Test.iArrFld = Test.iArrFld;
                            i3 = by;
                        }
                        d = d;
                        Test.instanceCount *= -3125546083L;
                    }
                    Test.instanceCount += (i2 + Test.instanceCount);
                    sArrFld[i2 + 1] += (short)122;
                    if (Test.bFld) break;
                    by += (byte)(i2 * i2);
                    Test.iArrFld = Test.iArrFld;
                }
            case 26:
                Test.iFld -= -26744;
                break;
            default:
                i1 -= -209;
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i22 s2 by = " + i22 + "," + s2 + "," + by);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iFld Test.bFld Test.byArrFld = " + Test.iFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("lArrFld Test.iArrFld fArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
