// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-7727999226614090187L;
    public static byte byFld=-113;
    public static volatile short sFld=-26995;
    public static double dFld=57.63859;
    public static byte byFld1=-63;
    public float fArrFld[]=new float[N];

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9, int i10) {

        int i11=1325, i12=1, i13=-4, i14=-44765, i15=54779, i16=-11, i17=5, iArr1[]=new int[N];
        double d2=-110.38397;
        boolean b=false;

        FuzzerUtils.init(iArr1, -7);

        iArr1[(i10 >>> 1) % N] = i10;
        for (i11 = 6; i11 < 315; ++i11) {
            i13 = 1;
            while (++i13 < 5) {
                d2 -= Test.byFld;
                if (b) {
                    for (i14 = 1; 1 > i14; i14++) {
                        i15 += i14;
                    }
                    i9 = i9;
                    for (i16 = i13; i16 < 1; ++i16) {
                        switch ((i11 % 7) + 36) {
                        case 36:
                            i17 -= i17;
                        case 37:
                            i15 >>= 8831;
                            i9 -= (int)Test.instanceCount;
                        case 38:
                            i12 = i10;
                            Test.instanceCount += (i16 * i16);
                            break;
                        case 39:
                        case 40:
                            i10 *= 3;
                            break;
                        case 41:
                            Test.sFld += (short)i16;
                            break;
                        case 42:
                            try {
                                i10 = (36689 / i9);
                                i15 = (170 % i14);
                                i12 = (i16 / -21764);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            i17 *= i10;
                        }
                    }
                } else {
                    Test.instanceCount -= -243;
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 + (b ? 1 : 0)
            + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l, int i6, double d1) {

        int i7=27066, i8=9, i18=736, i19=0, iArr2[]=new int[N];
        float f1=0.660F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -51L);
        FuzzerUtils.init(iArr2, -3233);

        for (i7 = 361; i7 > 18; i7--) {
            i6 *= (int)(iMeth1(i8, 123) * l);
            l = Test.byFld;
            i8 *= i6;
            i6 = i6;
            i6 -= i7;
        }
        i8 += i7;
        switch (((i8 >>> 1) % 2) + 76) {
        case 76:
            for (long l1 : lArr) {
                iArr2[(i8 >>> 1) % N] = i8;
                for (i18 = 1; 4 > i18; i18++) {
                    i19 += (((i18 * f1) + l) - i6);
                    l1 >>>= i8;
                    iArr2[i18 + 1] += i19;
                    i19 += i19;
                }
            }
            break;
        case 77:
            i19 *= -12;
            break;
        }
        long meth_res = l + i6 + Double.doubleToLongBits(d1) + i7 + i8 + i18 + i19 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i5) {

        int i20=1, i21=-67, i22=139, i23=12, i24=-14;
        boolean b1=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);

        i5 *= (++i5);
        lMeth(-25L, i5, Test.dFld);
        for (i20 = 8; i20 < 172; i20++) {
            if (false) {
                Test.byFld = (byte)i20;
                i21 -= (int)Test.dFld;
            } else if (b1) {
                i5 = i21;
                Test.instanceCount = 0;
                i5 += i20;
            } else if (b1) {
                i21 += (int)Test.instanceCount;
                i21 = (int)Test.instanceCount;
                for (i22 = 1; i22 < 10; i22++) {
                    i24 = 1;
                    do {
                        Test.instanceCount += (-13 + (i24 * i24));
                        bArr[i20][i22] = b1;
                    } while (++i24 < 2);
                }
            } else {
                i21 -= Test.byFld;
            }
        }
        long meth_res = i5 + i20 + i21 + i22 + i23 + i24 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=54818, i1=-188, i2=41, i3=-13057, i4=-67, i25=-156, i26=-223, i27=33629, i28=14, iArr[]=new int[N],
            iArr3[][]=new int[N][N];
        float f=2.748F, f2=108.889F;
        double d=-97.34481;
        boolean b3=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(lArr1, -8L);
        FuzzerUtils.init(iArr3, -38610);

        for (i = 9; i < 288; i++) {
            boolean b2=true;
            for (i2 = i; i2 < 90; i2++) {
                for (f = 1; f < 1; f++) {
                    iArr[i - 1] += (iArr[i2 - 1] + (Test.byFld + i4));
                    i4 = (int)Test.instanceCount;
                    if ((((f - i3) * Math.min(i4, i3)) - (++iArr[i])) != (((-201 + Float.intBitsToFloat(i2)) +
                        (-62.1730 - (i1 + i1))) - (Test.sFld *= (short)(d--)))) {
                        i1 = (int)(d++);
                        try {
                            i3 = (i1 / i2);
                            i3 = (i / 61);
                            i4 = (-36 / i4);
                        } catch (ArithmeticException a_e) {}
                    } else {
                        i4 = iMeth(i);
                        Test.byFld += (byte)(f + Test.instanceCount);
                        f2 = i4;
                    }
                    lArr1 = lArr1;
                }
                i4 = i1;
                i4 = (int)f2;
                iArr[i + 1] += 25063;
            }
            b2 = b2;
        }
        iArr[(216 >>> 1) % N] <<= Test.byFld1;
        switch ((((i3 >>> 1) % 10) * 5) + 97) {
        case 120:
            iArr[(i >>> 1) % N] = i3;
            i3 += i2;
            Test.instanceCount += i;
            for (i25 = 6; i25 < 177; ++i25) {
                fArrFld[i25 - 1] *= i1;
                b3 = b3;
                d += i3;
                for (i27 = 8; i27 < 147; i27++) {
                    i1 = i2;
                    Test.instanceCount += (long)d;
                    i3 <<= (int)Test.instanceCount;
                }
                Test.instanceCount = 128;
            }
            break;
        case 103:
            Test.instanceCount = i25;
            break;
        case 136:
            iArr3 = iArr3;
        case 125:
            i28 = (int)Test.dFld;
            break;
        case 145:
            i4 ^= Test.sFld;
            break;
        case 142:
            Test.instanceCount = i25;
        case 137:
            i26 = i27;
            break;
        case 141:
            i28 = (int)Test.instanceCount;
            break;
        case 112:
            iArr3[(i27 >>> 1) % N][(i26 >>> 1) % N] = i2;
            break;
        case 131:
            i26 >>= Test.sFld;
            break;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f i4 = " + i3 + "," + Float.floatToIntBits(f) + "," + i4);
        FuzzerUtils.out.println("d f2 i25 = " + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f2) + "," +
            i25);
        FuzzerUtils.out.println("i26 b3 i27 = " + i26 + "," + (b3 ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("i28 iArr lArr1 = " + i28 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.byFld1 fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Test.byFld1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
