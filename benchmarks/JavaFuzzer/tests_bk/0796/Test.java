// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=27867L;
    public static volatile int iFld=-5;
    public boolean bFld=true;
    public static float fFld=-49.163F;
    public static byte byFld=-28;
    public volatile int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i7=-8, i8=-5372, i9=-210, i10=-59109, i11=5, i12=-1, iArr1[]=new int[N];
        boolean b=false;
        double d1=0.49480, dArr[]=new double[N];
        short s1=9384;

        FuzzerUtils.init(dArr, -2.66864);
        FuzzerUtils.init(iArr1, -7);

        dArr[(Test.iFld >>> 1) % N] = 2;
        if (b) {
            for (i7 = 5; i7 < 148; ++i7) {
                Test.instanceCount = Test.instanceCount;
                i9 = 11;
                while (--i9 > 0) {
                    dArr[i9 - 1] -= Test.iFld;
                }
                Test.instanceCount = -22939;
            }
            Test.fFld += i7;
        }
        Test.instanceCount += (long)d1;
        for (i10 = 13; i10 < 299; i10++) {
            i12 = 1;
            while (++i12 < 6) {
                iArr1[i10 - 1] += 2100;
                Test.instanceCount += (i12 | i9);
                i8 += (i12 + s1);
                i8 -= -120;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i10 + i11 + i12 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static boolean bMeth(long l) {

        double d=0.78579;
        int i6=18378, i13=43084;
        float f=-80.365F, fArr[]=new float[N];
        byte by=-35;
        short s2=-19674;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 650352454L);
        FuzzerUtils.init(fArr, 1.977F);

        for (d = 1; d < 123; ++d) {
            vMeth();
            for (f = 1; f < 13; ++f) {
                i6 *= i6;
                i13 -= -23057;
                l += (long)(((f * f) + i6) - l);
                i6 += (int)f;
                i6 >>= Test.iFld;
                i13 /= (int)(Test.iFld | 1);
                switch (((Test.iFld >>> 1) % 4) + 58) {
                case 58:
                    Test.instanceCount += (-104 + (f * f));
                    lArr[(int)(f)] -= i6;
                    break;
                case 59:
                    lArr[(i13 >>> 1) % N] <<= Test.iFld;
                    i13 = (int)Test.fFld;
                    i6 -= i13;
                    break;
                case 60:
                    by += (byte)((long)f | s2);
                case 61:
                    fArr[(int)(d)] *= s2;
                    break;
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f) + i13 + by + s2 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public int iMeth(int i) {

        int i1=218, i2=2876, i3=-162, i4=31485, i5=-79, i14=2, i15=-7;
        short s=4540;

        for (i1 = 13; i1 < 286; ++i1) {
            for (i3 = i1; 6 > i3; i3++) {
                i += (i3 * i3);
                i5 = 1;
                do {
                    i2 += (int)(0.170F * s);
                    i4 >>= (((i1 + i2) + (--i2)) - ((i++) << -3));
                    i += (((i5 * i3) + Test.instanceCount) - Test.instanceCount);
                    iArrFld[i3 + 1] >>= (s--);
                    bFld = bMeth(Test.instanceCount);
                    Test.instanceCount >>>= Test.instanceCount;
                } while (++i5 < 1);
                for (i14 = 1; 1 > i14; i14 += 2) {
                    Test.instanceCount >>>= i;
                    Test.iFld += i;
                    i4 = 11186;
                    Test.instanceCount += i14;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + s + i14 + i15;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s3=26661, sArr[]=new short[N];
        double d2=67.94432, d3=-54.54380;
        int i17=5, i18=18, i19=-97, i20=-38302, i21=-13, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 18087);
        FuzzerUtils.init(sArr, (short)30343);

        iArr[(Test.iFld >>> 1) % N] *= (int)(((Test.iFld + Test.instanceCount) - (-iMeth(Test.iFld))) - Test.iFld);
        s3 -= (short)Test.iFld;
        Test.iFld = Test.iFld;
        Test.iFld *= (int)-6L;
        try {
            if (bFld) {
                for (short s4 : sArr) {
                    int i16=-40106;
                    Test.instanceCount = s3;
                    Test.iFld += Test.iFld;
                    Test.instanceCount *= Test.iFld;
                    i16 = 35828;
                    Test.iFld -= (int)Test.instanceCount;
                    Test.instanceCount -= Test.iFld;
                    i16 ^= (int)-1894673911L;
                }
                Test.fFld -= Test.instanceCount;
                Test.instanceCount += Test.iFld;
                for (d2 = 7 - 400; d2 < 140; d2 += 3) {
                    Test.iFld = Test.iFld;
                    Test.byFld -= (byte)Test.instanceCount;
                    d3 = Test.iFld;
                    i17 *= 36;
                }
            } else if (bFld) {
                i17 += -76;
                Test.iFld += (int)Test.instanceCount;
            }
            i17 += Test.iFld;
            Test.iFld = (int)Test.instanceCount;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (i18 = 22; i18 < 354; i18++) {
                i17 += (int)(-245L + (i18 * i18));
                for (i20 = 2; 76 > i20; i20++) {
                    Test.instanceCount |= i20;
                }
                i17 *= -39295;
            }
        }

        FuzzerUtils.out.println("s3 d2 i17 = " + s3 + "," + Double.doubleToLongBits(d2) + "," + i17);
        FuzzerUtils.out.println("d3 i18 i19 = " + Double.doubleToLongBits(d3) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 iArr = " + i20 + "," + i21 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld bFld = " + Test.instanceCount + "," + Test.iFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.byFld iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.byFld
            + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
