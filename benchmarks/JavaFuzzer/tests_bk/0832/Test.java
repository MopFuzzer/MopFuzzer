// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=13L;
    public static int iFld=75;
    public static short sFld=5355;
    public static float fFld=-91.965F;
    public static byte byFld=-46;

    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;

    public static double dMeth1(float f) {

        int i2=15133, i3=170, i4=2, i5=-62, i6=-119, iArr1[]=new int[N];
        boolean b=true, bArr[]=new boolean[N];
        float f1=-58.601F, fArr[][]=new float[N][N];
        double d2=0.54213;
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -11.646F);
        FuzzerUtils.init(lArr1, 3199244303L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 47520);

        fArr[(Test.iFld >>> 1) % N][(6505 >>> 1) % N] *= Test.iFld;
        for (i2 = 8; i2 < 248; ++i2) {
            if (b) continue;
            i3 *= -19467;
            Test.instanceCount += (((i2 * Test.iFld) + i3) - f);
            bArr[i2 - 1] = b;
            Test.iFld += (i2 * i2);
            Test.sFld -= (short)Test.instanceCount;
            for (f1 = 7; f1 > 1; f1 -= 2) {
                Test.iFld <<= (int)Test.instanceCount;
                for (i5 = 1; i5 < 3; i5++) {
                    iArr1[i5] = 36;
                    Test.fFld *= (float)d2;
                }
                lArr1[(int)(f1)] >>>= Test.sFld;
            }
            if (b) break;
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i4 + i5 + i6 +
            Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        dMeth1_check_sum += meth_res;
        return (double)meth_res;
    }

    public static double dMeth() {

        double d1=-19.98142;
        int i7=235, i8=-6, i9=-17772, i10=-26747, i11=4, iArr2[]=new int[N];
        byte by=-118;
        long l1=0L;

        FuzzerUtils.init(iArr2, -86);

        Test.iFld *= ((Test.iFld++) - Test.iFld);
        d1 = dMeth1(Test.fFld);
        Test.fFld -= Test.instanceCount;
        Test.iFld *= (int)Test.instanceCount;
        for (i7 = 16; 378 > i7; ++i7) {
            Test.iFld += (i7 ^ by);
            Test.iFld = i7;
            Test.instanceCount &= i8;
            for (i9 = 1; i9 < 5; ++i9) {
                i10 >>= -8;
                try {
                    Test.iFld = (i10 / -18);
                    i11 = (iArr2[i9 - 1] / Test.iFld);
                    iArr2[i9 + 1] = (0 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                i10 |= -4;
                Test.instanceCount += (((i9 * i10) + i10) - Test.sFld);
                i8 = by;
                Test.instanceCount += (((i9 * i8) + Test.fFld) - l1);
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i7 + i8 + by + i9 + i10 + i11 + l1 + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i, int i1) {

        int i12=-12, i13=-44, i14=-137, i15=-57925, iArr3[]=new int[N];
        long l2=3290393086L, lArr[]=new long[N], lArr2[][]=new long[N][N];
        float f2=-2.774F;
        boolean b1=true, bArr1[]=new boolean[N];

        FuzzerUtils.init(lArr, 3301101080L);
        FuzzerUtils.init(iArr3, 180);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(lArr2, 40623L);

        lArr[(i >>> 1) % N] *= (long)(-dMeth());
        for (i12 = 396; i12 > 13; i12 -= 3) {
            l2 += i12;
            i *= Test.sFld;
            f2 = 1;
            while (++f2 < 12) {
                i14 = 1;
                do {
                    i13 -= (int)Test.fFld;
                    l2 -= (long)-2.3332;
                    iArr3[i12 + 1] >>= (int)Test.instanceCount;
                    l2 += (i14 * i13);
                    switch ((int)(((f2 % 8) * 5) + 114)) {
                    case 150:
                        Test.iFld = i12;
                        i15 += (i14 * i14);
                        l2 -= (long)Test.fFld;
                        break;
                    case 120:
                        l2 += (((i14 * l2) + Test.instanceCount) - i12);
                        break;
                    case 117:
                        bArr1[i14 + 1] = b1;
                        break;
                    case 121:
                        iArr3[(int)(f2)] -= (int)Test.instanceCount;
                        break;
                    case 126:
                        bArr1[(int)(f2)] = b1;
                        break;
                    case 145:
                        i15 <<= i;
                    case 119:
                        lArr2 = FuzzerUtils.long2array(N, (long)14L);
                        break;
                    case 141:
                        Test.iFld &= i14;
                        break;
                    }
                } while (++i14 < 1);
            }
        }
        long meth_res = i + i1 + i12 + i13 + l2 + Float.floatToIntBits(f2) + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr1) +
            FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=42.121090, dArr[]=new double[N];
        int i16=13, i17=5, i18=142, i19=14, i20=-106, i21=196, i22=19296, i23=6, i24=3, iArr[]=new int[N];
        long l3=-3506940388L;

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(dArr, 0.54535);

        d += (Test.iFld * (61.93958 - (Test.instanceCount++)));
        Test.iFld *= iArr[(Test.iFld >>> 1) % N];
        Test.iFld <<= (int)lMeth(-154, Test.iFld);
        Test.instanceCount -= Test.iFld;
        Test.iFld = Test.iFld;
        Test.fFld -= Test.iFld;
        iArr[(Test.iFld >>> 1) % N] -= Test.byFld;
        Test.iFld = (int)Test.instanceCount;
        i16 = 357;
        while ((i16 -= 3) > 0) {
            iArr = iArr;
        }
        for (i17 = 12; 197 > i17; ++i17) {
            Test.iFld += i17;
            Test.iFld &= i16;
            i19 = 1;
            do {
                Test.iFld = (int)l3;
                for (i20 = 1; i20 < 2; i20++) {
                    switch ((i17 % 1) + 117) {
                    case 117:
                    default:
                        Test.instanceCount += (((i20 * i18) + Test.iFld) - Test.sFld);
                        iArr[i20] *= -60527;
                    }
                    d = Test.iFld;
                    i18 = (int)l3;
                }
                i18 += (0 + (i19 * i19));
            } while ((i19 += 2) < 136);
            i22 = 1;
            do {
                Test.iFld = i16;
                for (i23 = 1; i23 < 1; i23++) {
                    i24 = i19;
                    l3 = i22;
                    i18 += i23;
                    Test.iFld |= i18;
                    dArr = dArr;
                }
            } while (++i22 < 136);
        }

        FuzzerUtils.out.println("d i16 i17 = " + Double.doubleToLongBits(d) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 l3 = " + i18 + "," + i19 + "," + l3);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 iArr = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.byFld);

        FuzzerUtils.out.println("dMeth1_check_sum: " + dMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
