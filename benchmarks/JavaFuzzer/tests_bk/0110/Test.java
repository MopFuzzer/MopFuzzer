// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1134266479L;
    public static volatile int iFld=11;
    public static short sFld=11741;
    public static boolean bFld=false;
    public float fFld=-52.814F;
    public static long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1602625373L);
        FuzzerUtils.init(Test.iArrFld, -32409);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l2) {

        int i14=222, i15=16274, i16=-14, i17=-28874, iArr1[]=new int[N];
        short s=-16172;
        float f1=127.338F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(iArr1, -234);
        FuzzerUtils.init(byArr, (byte)61);

        Test.instanceCount -= l2;
        iArr1[(Test.iFld >>> 1) % N] = Test.iFld;
        l2 -= l2;
        i14 = 1;
        while (++i14 < 303) {
            byArr[i14 + 1] = (byte)s;
        }
        for (i15 = 14; i15 < 376; i15++) {
            l2 += l2;
            f1 += i15;
            i17 = 1;
            while (++i17 < 5) {
                i16 += (int)8439646050592488738L;
                l2 = Test.iFld;
                switch (((i15 % 1) * 5) + 81) {
                case 84:
                    i16 = i17;
                    Test.iFld = i15;
                    l2 = 40157;
                    break;
                default:
                    i16 *= i16;
                }
            }
        }
        long meth_res = l2 + i14 + s + i15 + i16 + Float.floatToIntBits(f1) + i17 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i8, int i9, int i10) {

        float f=0.370F, fArr[]=new float[N];
        double d=0.11937;
        long l1=23L;
        int i11=5, i12=-190, i13=9, iArr[]=new int[N];
        byte by=36;
        boolean b=false;

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, 16.439F);

        i9 |= (int)((f--) + ((Test.iFld + d) - (Test.iFld + i10)));
        for (l1 = 4; 140 > l1; l1++) {
            for (i12 = 1; i12 < 12; ++i12) {
                i9 = (int)((d - Float.intBitsToFloat(i12)) * Math.max(91L, i10 * l1));
                iArr[i12] /= (int)(lMeth(Test.instanceCount) | 1);
                i8 += (-1 + (i12 * i12));
                Test.iFld = i12;
                Test.iFld += i12;
                Test.instanceCount = Test.iFld;
                by <<= (byte)i8;
                fArr[(int)(l1 - 1)] = l1;
                if (b) break;
                f += (((i12 * i8) + f) - i13);
            }
            i13 += (int)(l1 * l1);
            Test.lArrFld[(int)(l1)] |= i12;
        }
        long meth_res = i8 + i9 + i10 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + l1 + i11 + i12 + i13 +
            by + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3) {

        int i4=-1717, i5=-59, i6=4, i7=6, i18=-36583;
        float f2=-116.639F;

        for (i4 = 14; i4 < 385; i4++) {
            for (i6 = 1; 5 > i6; i6++) {
                switch ((i6 % 8) + 72) {
                case 72:
                    Test.iFld -= iMeth(-2, i3, Test.iFld);
                    Test.sFld = (short)i4;
                    i7 += -137;
                    break;
                case 73:
                    if (i2 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i18 + Float.floatToIntBits(f2);
                        return;
                    }
                    i5 += (i6 - i5);
                case 74:
                    i18 = 2;
                    do {
                        i3 = Test.iFld;
                        Test.instanceCount += -1;
                        i2 = (int)Test.instanceCount;
                        Test.bFld = Test.bFld;
                        Test.sFld = (short)i6;
                        Test.instanceCount -= 2;
                    } while (--i18 > 0);
                case 75:
                    try {
                        i5 = (-20 % i4);
                        i3 = (i6 % -82);
                        i2 = (i2 / i3);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 76:
                    i5 = Test.iFld;
                    break;
                case 77:
                    Test.instanceCount -= i18;
                    break;
                case 78:
                    Test.instanceCount += (long)f2;
                    break;
                case 79:
                    Test.instanceCount -= i5;
                    break;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i18 + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        int i=23, i1=-57708, i19=-72, i20=219;
        long l=-58L;
        double d1=-29.81559;
        byte by1=5;

        i = 1;
        while (++i < 309) {
            for (l = 4; l < 81; l++) {
                vMeth(i1, i);
                if (true) {
                    Test.iArrFld[i] = 22047;
                    d1 -= Test.iFld;
                    fFld *= i;
                } else {
                    Test.iArrFld[i] = Test.sFld;
                    for (i19 = 1; i19 < 2; i19++) {
                        switch ((i19 % 5) + 49) {
                        case 49:
                            i1 -= i19;
                            fFld += i19;
                            i20 += i1;
                            i20 += i20;
                            break;
                        case 50:
                            Test.lArrFld[(int)(l - 1)] %= 171;
                            i20 = i19;
                            break;
                        case 51:
                            i20 >>>= i1;
                            Test.lArrFld[i19] += i;
                            break;
                        case 52:
                            Test.lArrFld[(int)(l + 1)] += i19;
                            Test.instanceCount = Test.instanceCount;
                            Test.instanceCount = l;
                            i20 >>= Test.sFld;
                            break;
                        case 53:
                            Test.instanceCount = l;
                            i1 = i;
                        }
                        fFld = (float)d1;
                        i20 -= i19;
                        Test.iFld += (((i19 * i1) + by1) - i1);
                        Test.iArrFld[i + 1] <<= i;
                        i20 = i19;
                        if (false) break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i l i1 = " + i + "," + l + "," + i1);
        FuzzerUtils.out.println("d1 i19 i20 = " + Double.doubleToLongBits(d1) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("by1 = " + by1);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld fFld Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
