// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=12L;
    public int iFld=31567;
    public static double dFld=2.19511;
    public static float fFld=-2.954F;
    public static byte byFld=78;
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -40048L);
        FuzzerUtils.init(Test.dArrFld, 0.55499);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, short s1, byte by) {

        int i12=-6398, i13=-4, i14=11, i15=80, i16=30818, i17=34901, iArr2[]=new int[N];
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, 24260);
        FuzzerUtils.init(fArr, -94.1003F);

        i12 = 1;
        while (++i12 < 320) {
            i13 += (i12 * i12);
            Test.fFld += (((i12 * Test.fFld) + i12) - Test.instanceCount);
            Test.fFld -= i12;
            switch ((i12 % 10) + 17) {
            case 17:
                for (i14 = i12; i14 < 5; ++i14) {
                    switch (((i14 % 1) * 5) + 78) {
                    case 80:
                        for (i16 = 1; i16 < 1; ++i16) {
                            iArr2 = iArr2;
                            Test.instanceCount = -202;
                            l -= i17;
                            i13 <<= 108;
                            Test.lArrFld[i16] ^= i17;
                            Test.dArrFld[i14 - 1] = -19277;
                            i17 += i16;
                        }
                        break;
                    }
                }
            case 18:
                i15 <<= i15;
                break;
            case 19:
                i15 += (int)120.169F;
                break;
            case 20:
                i17 *= i14;
            case 21:
                Test.fFld += i12;
                break;
            case 22:
                if (b) continue;
                break;
            case 23:
                Test.fFld += i13;
                break;
            case 24:
                i13 *= (int)1.635F;
                break;
            case 25:
                Test.instanceCount += i12;
                break;
            case 26:
                i15 -= i17;
                break;
            default:
                i17 += i16;
            }
        }
        long meth_res = l + s1 + by + i12 + i13 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i5=-11, i6=3841, i7=100, i8=-174, i9=-5, i10=11, i11=57674, i18=-9, iArr1[]=new int[N];
        float f=0.883F;
        short s2=-10087;
        byte by1=-6;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 25681);
        FuzzerUtils.init(lArr, 35071L);

        i5 >>= (int)Test.instanceCount;
        for (i6 = 4; i6 < 140; ++i6) {
            for (i8 = 12; i8 > 1; --i8) {
                iArr1[i8 + 1] -= (int)(--lArr[i8 + 1][i8 + 1]);
                for (i10 = i8; i10 < 2; ++i10) {
                    i11 += (i10 * i10);
                    iArr1[i8 + 1] += (int)(((Test.instanceCount++) * (i7 * f)) - (--lArr[i10 + 1][i6 - 1]));
                    Test.instanceCount <<= (lMeth(Test.instanceCount, s2, by1) * by1);
                    Test.dArrFld[i8 - 1] *= 171;
                }
                Test.instanceCount += i11;
                i5 -= by1;
            }
        }
        i18 = 1;
        while (++i18 < 324) {
            i11 = (int)Test.instanceCount;
            f += -9;
            i7 &= i9;
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + s2 + by1 + i18 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=52660, i4=120, i19=11376, i20=-57021, i21=-87, iArr[]=new int[N];
        short s=22403;

        FuzzerUtils.init(iArr, 11);

        for (i3 = 10; i3 < 244; i3++) {
            if (iArr[i3] < ((9188 * s) * ((Test.fFld--) * (Test.fFld - 0.710F)))) continue;
            Test.instanceCount += iMeth();
            for (i19 = 1; i19 < 7; ++i19) {
                i4 >>= (int)Test.instanceCount;
                Test.instanceCount = -27825;
                iArr[i19 - 1] = (int)Test.instanceCount;
                Test.instanceCount -= i4;
                i20 *= i19;
                i21 = 1;
                while (++i21 < 2) {
                    i4 += (i21 | i19);
                    Test.lArrFld[i19] -= Test.instanceCount;
                    Test.fFld *= Test.instanceCount;
                }
                Test.instanceCount <<= i3;
                s >>>= (short)10;
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + s + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-53611, i1=-10, i23=-44, i24=-58045, i25=-11, i26=203, i27=3;
        short s3=9524;
        boolean b1=true;
        long l1=-40031L;

        Test.instanceCount *= (Integer.reverseBytes(iFld) - Long.reverseBytes((long)(Test.instanceCount *=
            (long)Test.dFld)));
        for (i = 11; i < 292; i++) {
            vMeth(98);
            Test.instanceCount = (long)Test.dFld;
            i1 >>= 3;
            iFld += (((i * s3) + i) - Test.instanceCount);
            for (i23 = 3; i23 < 89; ++i23) {
                iFld ^= i;
                if (b1) break;
                i25 = 1;
                while (++i25 < 2) {
                    i1 = (int)Test.fFld;
                    bArrFld[i - 1] = b1;
                    if (false) {
                        i24 = (int)Test.instanceCount;
                    } else if (b1) {
                    } else if (b1) {
                        iFld = Test.byFld;
                        i24 >>= i24;
                        Test.fFld = Test.instanceCount;
                    }
                    Test.instanceCount -= i25;
                    iFld |= i24;
                }
                iFld += (((i23 * i25) + i24) - Test.instanceCount);
                i24 += i23;
                for (i26 = 1; i26 < 2; i26++) {
                    iArrFld = iArrFld;
                    i27 <<= 20469;
                    i27 += (int)Test.dFld;
                    i1 -= i23;
                    Test.fFld -= -1828888505236511285L;
                    iFld += i24;
                    l1 = i25;
                    Test.instanceCount -= (long)Test.fFld;
                }
            }
        }

        FuzzerUtils.out.println("i i1 s3 = " + i + "," + i1 + "," + s3);
        FuzzerUtils.out.println("i23 i24 b1 = " + i23 + "," + i24 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("l1 = " + l1);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.dArrFld iArrFld bArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
