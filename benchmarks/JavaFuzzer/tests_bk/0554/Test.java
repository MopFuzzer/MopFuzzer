// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-11L;
    public static float fFld=0.134F;
    public volatile double dFld=29.112368;
    public static int iFld=149;
    public byte byArrFld[]=new byte[N];
    public static int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -10);
        FuzzerUtils.init(Test.iArrFld1, -29662);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=99, i5=240, i6=-32860, i7=26, i8=7, i9=-50485, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 76);

        Test.instanceCount = i4;
        for (i5 = 8; i5 < 297; i5++) {
            i6 += i5;
            i6 >>= i5;
            Test.instanceCount -= i6;
        }
        i4 = (int)Test.fFld;
        for (i7 = 10; i7 < 314; ++i7) {
            i6 += (((i7 * i8) + i7) - i4);
            i6 *= (int)Test.instanceCount;
            i6 -= i7;
            i6 *= i6;
        }
        i9 = 1;
        do {
            i4 = i7;
            try {
                i8 = (152 / i6);
                i6 = (iArr1[i9] % i4);
                i6 = (i9 / i9);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount += i9;
        } while (++i9 < 127);
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i3=225, i11=-203, i12=-3, i13=61509, i14=14807, i15=-6157, i16=7159;
        byte by=109;
        double d=-2.13707;
        long lArr[][]=new long[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, 1380778818L);
        FuzzerUtils.init(fArr, 40.576F);

        i3 *= by;
        vMeth1();
        for (i11 = 9; i11 < 251; i11++) {
            switch (((i11 % 5) * 5) + 68) {
            case 90:
                i3 -= i3;
                for (i13 = 1; i13 < 7; i13++) {
                    d += 3825725595L;
                    i14 |= (int)Test.instanceCount;
                    try {
                        i14 = (-1458801465 % i11);
                        i12 = (i12 % i3);
                        i14 = (i11 / 25725);
                    } catch (ArithmeticException a_e) {}
                    for (i15 = 1; i15 < 2; ++i15) {
                        lArr[i13][i15 - 1] *= i11;
                    }
                    i3 |= i15;
                    Test.fFld += i13;
                    i14 = i16;
                    Test.iArrFld[i11] = (int)Test.instanceCount;
                }
                break;
            case 93:
                lArr[i11 - 1][i11 - 1] = i15;
                break;
            case 78:
                fArr[i11 + 1] = i16;
                break;
            case 88:
                Test.fFld -= Test.fFld;
            case 91:
                lArr[i11][(i16 >>> 1) % N] -= i14;
                break;
            default:
                i14 -= i16;
            }
        }
        vMeth_check_sum += i3 + by + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d) + i15 + i16 +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i2) {

        boolean b=true, bArr[]=new boolean[N];
        int i17=58510, i18=0, i19=-5, i20=-237, i21=-30013, i22=-189;
        byte by1=13;
        float fArr1[][]=new float[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 73.406F);

        b = (bArr[(140 >>> 1) % N] = b);
        vMeth();
        i2 >>>= 37;
        for (i17 = 6; i17 < 268; ++i17) {
            i2 = i18;
            i18 *= (int)Test.instanceCount;
            fArr1[i17 + 1][i17] -= i17;
            for (i19 = i17; i19 < 6; i19++) {
                i20 *= by1;
                for (i21 = 1; i21 < 1; i21++) {
                    i18 += (int)-34.577F;
                    Test.instanceCount *= i2;
                    Test.fFld = -206L;
                    i20 = -204;
                    if (b) continue;
                }
            }
        }
        long meth_res = i2 + (b ? 1 : 0) + i17 + i18 + i19 + i20 + by1 + i21 + i22 + FuzzerUtils.checkSum(bArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=75, i1=202, i23=-60179, i24=-50484, i25=-218, i26=0, i27=0, i28=-4, i29=-33, i30=-8882, i31=2722,
            iArr[]=new int[N];
        float f=-118.526F, f1=-90.39F;
        long l=-14234L;
        byte by2=-106;
        boolean b1=true;

        FuzzerUtils.init(iArr, -43);

        for (i = 15; i < 372; i++) {
            iArr[i] = iArr[i + 1];
            byArrFld[i + 1] += (byte)iMeth(i);
            try {
                i1 = (i / 27707);
                i1 = (60 % i1);
                i1 = (i / i1);
            } catch (ArithmeticException a_e) {}
            dFld += i1;
        }
        i1 %= (int)((long)(dFld) | 1);
        i1 += 48605;
        Test.iFld += -58757;
        Test.iFld *= (int)f;
        i23 = 1;
        while ((i23 += 2) < 251) {
            for (l = 12; l < 201; l++) {
                Test.fFld = i23;
                iArr[(int)(l + 1)] += by2;
            }
            for (f1 = 9; 201 > f1; ++f1) {
                i24 /= (int)(i | 1);
            }
            i24 = i24;
            i25 >>= Test.iFld;
            try {
                i1 = (i / i23);
                Test.iArrFld1[i23 + 1] = (1395293331 / i24);
                Test.iFld = (Test.iArrFld1[i23 - 1] / Test.iArrFld[i23]);
            } catch (ArithmeticException a_e) {}
            for (i26 = 10; i26 < 201; i26++) {
                if (true) continue;
                Test.iFld *= -13;
                if (b1) break;
                if (b1) continue;
            }
            i24 = i25;
        }
        try {
            for (i28 = 349; i28 > 12; --i28) {
                for (i30 = 75; i30 > 4; i30--) {
                    i27 = i25;
                    Test.iFld = 43;
                    i31 >>>= i25;
                }
            }
        }
        catch (NegativeArraySizeException exc1) {
            by2 += (byte)35504L;
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i23 l i24 = " + i23 + "," + l + "," + i24);
        FuzzerUtils.out.println("by2 f1 i25 = " + by2 + "," + Float.floatToIntBits(f1) + "," + i25);
        FuzzerUtils.out.println("i26 i27 b1 = " + i26 + "," + i27 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 iArr = " + i31 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld byArrFld Test.iArrFld = " + Test.iFld + "," + FuzzerUtils.checkSum(byArrFld)
            + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
