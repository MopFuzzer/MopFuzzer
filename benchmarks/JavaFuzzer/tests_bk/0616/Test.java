// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=403697674L;
    public static byte byFld=101;
    public static volatile int iFld=61;
    public static double dFld=-2.28103;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -127.46937);
        FuzzerUtils.init(Test.iArrFld, 38753);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i5, int i6) {

        int i7=-56484, i8=-10, i9=63, i10=-11, i11=49, i12=-197, i13=-172, iArr[]=new int[N];
        long l3=2019391812L;

        FuzzerUtils.init(iArr, -57563);

        for (i7 = 5; i7 < 153; ++i7) {
            i6 += i7;
        }
        i5 = 250;
        for (i9 = 18; i9 < 327; i9 += 2) {
            i11 -= i5;
            try {
                i10 = (iArr[i9 - 1] / iArr[i9]);
                iArr[i9] = (iArr[i9] / -151);
                iArr[i9 - 1] = (1439315578 % i8);
            } catch (ArithmeticException a_e) {}
            iArr[i9 + 1] ^= -103;
            i8 -= i9;
            iArr[i9 + 1] ^= i11;
            iArr[i9 + 1] = (int)Test.instanceCount;
            Test.dArrFld = FuzzerUtils.double1array(N, (double)108.120320);
            i12 = 1;
            do {
                for (l3 = 1; l3 < 1; l3++) {
                    f1 -= i6;
                    i10 >>= i10;
                }
            } while (++i12 < 10);
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + l3 + i13 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l1, double d, long l2) {

        int i4=-67, i14=38187, i15=-176, i16=16717, iArr1[]=new int[N];
        float f2=78.228F;

        FuzzerUtils.init(iArr1, -159);

        i4 = 1;
        do {
            vMeth1(f2, i4, i4);
            Test.iFld <<= i4;
            iArr1[i4] = -33724;
            for (i14 = 1; i14 < 4; i14++) {
                i16 = 1;
                do {
                    Test.instanceCount += (i16 * i16);
                    Test.iFld = (int)f2;
                    Test.instanceCount = i4;
                } while ((i16 += 2) < 2);
                Test.instanceCount = Test.byFld;
                if (i16 != 0) {
                    vMeth_check_sum += l1 + Double.doubleToLongBits(d) + l2 + i4 + Float.floatToIntBits(f2) + i14 + i15
                        + i16 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test.iFld <<= i4;
                i15 = 31928;
                f2 -= Test.instanceCount;
                Test.iFld &= (int)l2;
            }
        } while (++i4 < 381);
        vMeth_check_sum += l1 + Double.doubleToLongBits(d) + l2 + i4 + Float.floatToIntBits(f2) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(float f) {

        long l=5284101568530372986L, lArr[]=new long[N];
        int i1=-11, i2=-4153, i3=191, i17=101;
        double d1=0.64679;

        FuzzerUtils.init(lArr, 3781710805L);

        for (l = 6; l < 268; l++) {
            for (i2 = 1; 6 > i2; i2++) {
                Test.instanceCount >>= (--i3);
                Test.byFld += (byte)(i2 * i2);
                if (Test.bFld) {
                    vMeth(Test.instanceCount, Test.dFld, -2169632165080894366L);
                    Test.instanceCount ^= 65085;
                    i1 += (i2 * i2);
                    Test.instanceCount *= i1;
                } else {
                    for (d1 = 1; d1 < 2; ++d1) {
                        Test.instanceCount *= Test.instanceCount;
                        i17 = i3;
                        Test.instanceCount = i17;
                        try {
                            Test.iArrFld[(int)(d1 - 1)] = (i17 % Test.iArrFld[(int)(l - 1)]);
                            i17 = (216 % i17);
                            i3 = (i3 / -147);
                        } catch (ArithmeticException a_e) {}
                        lArr[(int)(d1)] += i1;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + l + i1 + i2 + i3 + Double.doubleToLongBits(d1) + i17 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3897, i18=8, i19=-6942;
        float f3=-55.385F;

        i = (((i - i) & i) * (iMeth(f3) * i));
        i >>>= Test.iFld;
        for (i18 = 398; i18 > 21; --i18) {
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-5153);
            Test.iFld -= Test.iFld;
            Test.iFld += (int)f3;
        }

        FuzzerUtils.out.println("i f3 i18 = " + i + "," + Float.floatToIntBits(f3) + "," + i18);
        FuzzerUtils.out.println("i19 = " + i19);

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld Test.dArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
