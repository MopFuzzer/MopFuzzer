// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1929676876L;
    public static short sFld=19626;
    public static double dFld=-1.122415;
    public static float fFld=2.874F;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i5, int i6) {

        int i7=-3, i8=92, i9=-3690, i10=-37789, i11=208, i12=-6, i13=-109, iArr[]=new int[N];
        float f=-1.138F;

        FuzzerUtils.init(iArr, 0);

        i6 >>= i5;
        i7 = 1;
        do {
            i6 -= i5;
        } while (++i7 < 140);
        for (i8 = 377; i8 > 20; i8--) {
            iArr[i8] *= i5;
            Test.instanceCount += (-147 + (i8 * i8));
            f = i5;
            for (i10 = 5; i10 > 1; i10 -= 3) {
                i5 = i9;
                for (i12 = 1; i12 < 5; ++i12) {
                    i11 -= i11;
                    iArr[i12 + 1] = i13;
                    Test.instanceCount = i6;
                    Test.sFld = (short)i13;
                    i5 = (int)33.643F;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l) {

        int i4=1, i14=-43535, i15=6011, i16=6889, i17=-8182, iArr1[][]=new int[N][N];
        boolean b=false;
        double d=44.1009;
        byte by=38;
        float f1=2.463F;

        FuzzerUtils.init(iArr1, -1);

        i4 = 309;
        while ((i4 -= 3) > 0) {
            if ((Math.abs(i4) - (i4 + iMeth2(i4, i4))) > i4) break;
        }
        Test.instanceCount -= -29;
        for (i14 = 12; i14 < 265; ++i14) {
            for (i16 = 1; 6 > i16; i16++) {
                b = b;
                switch ((((7 >>> 1) % 7) * 5) + 39) {
                case 65:
                    d = 2;
                    do {
                        i15 += (int)(d * i16);
                        by += (byte)d;
                    } while ((d -= 2) > 0);
                    i17 += (i16 * i16);
                    iArr1 = iArr1;
                    iArr1[i14][i16 - 1] += i17;
                    break;
                case 58:
                    i17 |= (int)Test.instanceCount;
                    i15 += i17;
                case 43:
                    Test.dFld = -1.21914;
                    break;
                case 70:
                case 71:
                    Test.instanceCount = l;
                    break;
                case 64:
                    i15 += (i16 ^ i16);
                case 57:
                    f1 += (3L + (i16 * i16));
                default:
                    Test.fFld += i16;
                }
            }
        }
        long meth_res = l + i4 + i14 + i15 + i16 + i17 + (b ? 1 : 0) + Double.doubleToLongBits(d) + by +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i2) {

        int i3=-40090, i18=-18104, i19=-236, i20=-172, iArr2[]=new int[N];
        byte by1=-91;

        FuzzerUtils.init(iArr2, -85);

        i3 = 1;
        do {
            Test.sFld -= (short)iMeth1(Test.instanceCount);
            i2 = i2;
            i2 = i2;
            for (i18 = 1; i18 < 7; ++i18) {
                if (true) continue;
                iArr2[i3 + 1] >>>= i19;
            }
            if (i2 != 0) {
            }
            i19 *= i18;
            i20 = 1;
            while (++i20 < 7) {
                i19 *= i20;
                switch ((i3 % 4) + 93) {
                case 93:
                    i19 += (31315 + (i20 * i20));
                    i19 += i20;
                    break;
                case 94:
                    try {
                        i2 = (-10773 / i2);
                        iArr2[i3] = (i3 / i2);
                        i19 = (1197342536 % i19);
                    } catch (ArithmeticException a_e) {}
                case 95:
                    by1 = (byte)i19;
                case 96:
                    if (i19 != 0) {
                    }
                    break;
                }
            }
        } while (++i3 < 237);
        long meth_res = i2 + i3 + i18 + i19 + i20 + by1 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-34125, i1=228, i21=2, i22=-216, i23=14, i24=35, i25=2, iArr3[][]=new int[N][N];
        byte by2=-35;
        boolean b1=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -126.767F);
        FuzzerUtils.init(iArr3, -208);

        for (i = 207; i > 3; i -= 3) {
            i1 *= (int)((Test.instanceCount--) - (iMeth(i) * i));
            for (i21 = 11; i21 < 368; ++i21) {
                Test.instanceCount += (i21 | Test.instanceCount);
                for (i23 = 1; i23 < 2; i23++) {
                    Test.instanceCount += i24;
                    i1 <<= (int)Test.instanceCount;
                    Test.instanceCount >>= i22;
                    Test.instanceCount *= by2;
                    i22 = (int)Test.instanceCount;
                    if (true) {
                        Test.fFld += i23;
                        b1 = b1;
                        Test.bArrFld[i] = true;
                    } else {
                        i24 += i23;
                    }
                    b1 = b1;
                    fArr[i21] = -8;
                    iArr3[i23] = iArr3[i21];
                }
                Test.instanceCount += (2101154215L + (i21 * i21));
                i22 += i21;
                i25 = 1;
                while (++i25 < 2) {
                    i22 *= by2;
                    Test.fFld += (-23010 + (i25 * i25));
                    iArr3[i21][i] += i;
                    i22 = (int)Test.fFld;
                    iArr3[i25 + 1][i25 - 1] = -51949;
                    iArr3[i25][i25 - 1] += i24;
                    i22 = (int)Test.fFld;
                    by2 += (byte)(i25 - i25);
                    Test.sFld += (short)i25;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("by2 b1 i25 = " + by2 + "," + (b1 ? 1 : 0) + "," + i25);
        FuzzerUtils.out.println("fArr iArr3 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld Test.bArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
