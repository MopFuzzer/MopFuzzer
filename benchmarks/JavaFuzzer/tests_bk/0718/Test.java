// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=15384L;
    public static byte byFld=-10;
    public short sFld=-15181;
    public float fFld=-5.445F;
    public int iFld=136;
    public static int iArrFld[][]=new int[N][N];
    public float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 21047);
        FuzzerUtils.init(Test.lArrFld, 4072958544L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static void vMeth1(int i2) {


        i2 *= (Test.iArrFld[(3774 >>> 1) % N][(i2 >>> 1) % N] - Test.byFld);
        vMeth1_check_sum += i2;
    }

    public static byte byMeth(int i4, int i5, int i6) {

        short s=-32132;
        int i7=-1, i8=-40, i9=-47973, i10=-57816, i11=47;
        float f1=58.790F;

        Test.instanceCount = s;
        i6 >>>= (int)Test.instanceCount;
        for (i7 = 12; i7 < 236; ++i7) {
            Test.byFld -= (byte)Test.instanceCount;
            Test.byFld <<= (byte)Test.instanceCount;
            Test.instanceCount = (long)f1;
            i4 -= i4;
            Test.instanceCount >>>= s;
            f1 -= i5;
            for (i9 = 1; i9 < 7; ++i9) {
                f1 += i9;
                i11 = 1;
                do {
                    Test.iArrFld[i11][i9 + 1] >>= Test.byFld;
                    i8 = -126;
                    i8 >>>= i11;
                } while (++i11 < 2);
            }
        }
        long meth_res = i4 + i5 + i6 + s + i7 + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11;
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static int iMeth(int i3, long l) {

        float f=20.793F;
        int i12=-13, i13=-206, i14=80, i15=-39, i16=5;
        double d=38.123377;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5909233121083397268L);

        l += (long)(-f);
        Test.instanceCount >>= 43712;
        i3 = ((-byMeth(43627, 31301, i3)) + i3);
        l = (long)2.173F;
        for (i12 = 1; i12 < 337; i12++) {
            for (d = 5; 1 < d; --d) {
                i13 <<= (int)l;
                lArr[(int)(d + 1)] *= Test.instanceCount;
                for (i15 = (int)(d); i15 < 2; i15++) {
                    i3 += i12;
                    i14 = (int)f;
                    if (i15 != 0) {
                    }
                    try {
                        i13 = (i12 % 59047);
                        Test.iArrFld[(int)(d - 1)][(int)(d + 1)] = (2404 % i13);
                        i16 = (i3 % i16);
                    } catch (ArithmeticException a_e) {}
                    Test.iArrFld[i15 + 1] = Test.iArrFld[i15];
                    i3 += (33071 + (i15 * i15));
                }
            }
        }
        long meth_res = i3 + l + Float.floatToIntBits(f) + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + i16 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1) {

        int i17=-2, i18=-245, i19=13, i20=-195, i21=-157, i22=0, i23=-9;
        double d1=-49.55915;
        float f2=-1.342F;

        vMeth1((int)(-1290736860L / (iMeth(i, Test.instanceCount) | 1)));
        i1 += i;
        Test.instanceCount += Test.instanceCount;
        for (i17 = 10; i17 < 188; ++i17) {
            i19 = 9;
            while ((i19 -= 2) > 0) {
                i -= (int)d1;
                Test.instanceCount = i17;
                Test.byFld = (byte)f2;
                for (i20 = 1; i20 < 2; i20++) {
                    i += i20;
                    if (true) break;
                }
                for (i22 = 2; i22 > 1; i22--) {
                    i23 += (int)115L;
                    i -= i23;
                    Test.instanceCount += (i22 ^ sFld);
                }
            }
        }
        vMeth_check_sum += i + i1 + i17 + i18 + i19 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i20 +
            i21 + i22 + i23;
    }

    public void mainTest(String[] strArr1) {

        int i24=118, i25=155, i26=-11, i27=20330, i28=0, i29=14, i30=26940, i31=22841, i32=30359;
        double d2=-2.121716, dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.46716);

        vMeth(i24, i24);
        i24 -= i24;
        for (i25 = 14; i25 < 228; ++i25) {
            try {
                i24 = (Test.iArrFld[i25][i25] / Test.iArrFld[i25 + 1][i25 + 1]);
                i24 = (i26 / -238);
                i27 = (i25 / 25472);
            } catch (ArithmeticException a_e) {}
            for (i28 = 7; i28 < 117; ++i28) {
                for (i30 = 1; 2 > i30; i30++) {
                    boolean b=true;
                    fFld += 8;
                    fFld = Test.instanceCount;
                    fArrFld[i28 - 1] = i31;
                    Test.iArrFld[i30 + 1][i25] <<= i24;
                    switch (((-5 >>> 1) % 8) + 33) {
                    case 33:
                        dArr[i30] *= i32;
                        Test.iArrFld[i28 - 1][i28 - 1] ^= 8;
                    case 34:
                        i24 = (int)-44293L;
                        fFld = i31;
                        i27 -= i25;
                        Test.instanceCount += i30;
                    case 35:
                        Test.instanceCount += (long)fFld;
                        if (b) break;
                        i29 += (((i30 * fFld) + Test.byFld) - i28);
                        Test.instanceCount += (i30 * i30);
                        break;
                    case 36:
                        Test.iArrFld[i28 + 1][i30] = (int)fFld;
                        i27 += (((i30 * i24) + iFld) - i31);
                        iFld += i26;
                        i26 += (i30 + i31);
                    case 37:
                        Test.iArrFld[i25][i30 - 1] = i27;
                        i31 = 14;
                        iFld = -6;
                        iFld >>= i27;
                        break;
                    case 38:
                        d2 = i29;
                        break;
                    case 39:
                        i31 = 161;
                        break;
                    case 40:
                        i32 -= i24;
                        break;
                    default:
                        Test.lArrFld = FuzzerUtils.long1array(N, (long)50229L);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("d2 dArr = " + Double.doubleToLongBits(d2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld sFld = " + Test.instanceCount + "," + Test.byFld + "," +
            sFld);
        FuzzerUtils.out.println("fFld iFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," + iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("fArrFld Test.lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
