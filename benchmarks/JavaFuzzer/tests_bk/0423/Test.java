// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2669155813L;
    public static double dFld=-94.130095;
    public static int iFld=18337;
    public static byte byFld=-120;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -183);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i3) {

        int i4=3370, i5=241, i6=-4, i7=2, i8=-19556, i9=-24781;

        for (i4 = 5; i4 < 123; ++i4) {
            Test.instanceCount += Test.instanceCount;
            for (i6 = 1; i6 < 13; ++i6) {
                switch (((i4 % 4) * 5) + 55) {
                case 66:
                    for (i8 = 2; 1 < i8; --i8) {
                        i5 -= i3;
                        i9 >>>= i8;
                    }
                case 61:
                    Test.instanceCount += i6;
                    i9 += i6;
                    i3 |= (int)Test.instanceCount;
                    break;
                case 65:
                    i3 ^= (int)Test.instanceCount;
                    i9 -= i5;
                    i3 &= (int)Test.instanceCount;
                    i9 += i6;
                    break;
                case 59:
                    Test.dFld -= i7;
                    break;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1(long l1) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8L);

        for (long l2 : lArr) {
            dMeth(Test.iFld);
        }
        Test.instanceCount = Test.instanceCount;
        vMeth1_check_sum += l1 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, int i) {

        int i1=7, i2=-26, i10=13, i11=38189, i12=-181;
        boolean b=true;
        double d=0.82389;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)40);

        l = -6878;
        for (i1 = 208; i1 > 12; --i1) {
            b = ((b = (Test.instanceCount > i1)) && (d <= (++Test.iArrFld[i1])));
            if (b) break;
            vMeth1(49119L);
            i2 = (int)Test.instanceCount;
            Test.instanceCount = i2;
            i10 = 1;
            while ((i10 += 3) < 8) {
                for (i11 = 1; i11 < 4; ++i11) {
                    Test.iFld ^= i11;
                    Test.iArrFld[i11] *= i2;
                    Test.instanceCount = Test.byFld;
                    byArr = byArr;
                    i12 += (int)d;
                    Test.instanceCount *= i11;
                }
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i10 + i11 + i12 +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {


        vMeth(Test.instanceCount, Test.iFld);
        Test.iFld = (int)Test.instanceCount;
        Test.iFld = (int)Test.dFld;


        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.iArrFld = " + Test.byFld + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
