// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=210L;
    public static volatile double dFld=-53.56471;
    public static boolean bFld=true;
    public static float fFld=27.873F;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
        FuzzerUtils.init(Test.sArrFld, (short)-28075);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, int i11, int i12) {

        int i13=-11, i14=0, i15=52354, i16=-90, i17=11, i18=167, i19=-38668, i20=18;
        byte by=28;
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(dArr, -1.107543);
        FuzzerUtils.init(lArr, 10L);

        dArr[(i10 >>> 1) % N] -= i10;
        for (i13 = 8; i13 < 233; i13++) {
            Test.bFld = Test.bFld;
            Test.fFld -= Test.fFld;
            i11 = -3;
            for (i15 = 1; i15 < 7; i15++) {
                Test.dFld *= Test.fFld;
                Test.iArrFld[i15 - 1] *= i11;
                for (i17 = 1; i17 < 2; ++i17) {
                    lArr[i13 + 1] = i15;
                    i12 = -49;
                    lArr = lArr;
                }
                for (i19 = i13; i19 < 2; ++i19) {
                    by <<= (byte)i13;
                    Test.fFld += (i19 - i13);
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, int i6, int i7) {

        int i8=-8194, i9=55163, i21=-116, i22=6, i23=12, i24=-6;
        short s=24347;

        switch (((((i6 * -24650) >>> 1) % 5) * 5) + 42) {
        case 56:
            for (i8 = 4; i8 < 336; i8++) {
                i9 *= s;
            }
            Test.instanceCount += (long)Test.dFld;
            break;
        case 57:
            i6 += (int)(Test.instanceCount - Math.min(iMeth(-14, 28589, i9), 9));
            for (i21 = 3; 356 > i21; i21++) {
                for (i23 = i21; i23 < 5; ++i23) {
                    switch (((i23 % 7) * 5) + 50) {
                    case 79:
                        Test.instanceCount *= i24;
                        break;
                    case 62:
                        i6 += (i23 + i22);
                        Test.instanceCount = (long)55.577F;
                    case 65:
                        Test.instanceCount <<= i21;
                    case 73:
                        if (Test.bFld) continue;
                        Test.fFld += Test.instanceCount;
                        Test.instanceCount <<= i6;
                        break;
                    case 74:
                        i7 += i9;
                    case 59:
                        i22 = i23;
                    case 70:
                        Test.bFld = Test.bFld;
                        break;
                    }
                }
            }
            break;
        case 46:
            Test.fFld *= -82L;
            break;
        case 67:
            i9 += (int)Test.fFld;
            break;
        case 45:
            Test.iArrFld[(-231 >>> 1) % N] *= (int)Test.instanceCount;
            break;
        default:
            Test.sArrFld = Test.sArrFld;
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + s + i21 + i22 + i23 + i24;
    }

    public float fMeth(int i2, int i3, int i4) {

        int i25=15259, i26=3, i27=25190, i28=-11;
        short s1=-27448;
        double dArr1[]=new double[N];

        FuzzerUtils.init(dArr1, 1.128143);

        vMeth(i2, i2, -14);
        Test.fFld *= i25;
        for (double d : dArr1) {
            i26 = 1;
            while (++i26 < 4) {
                if (Test.bFld) break;
                i4 += (i26 - i2);
                switch (((i26 % 2) * 5) + 35) {
                case 40:
                    Test.fFld = -1176331582L;
                    for (i27 = 1; i27 < 1; i27++) {
                        Test.fFld = i28;
                        switch ((i26 % 2) + 33) {
                        case 33:
                            if (Test.bFld) {
                                Test.instanceCount = -1472;
                                Test.instanceCount *= i25;
                                i25 = 49;
                            } else {
                                if (true) break;
                            }
                            break;
                        case 34:
                            Test.fFld = s1;
                            break;
                        }
                    }
                    break;
                case 36:
                    if (Test.bFld) break;
                default:
                    i25 -= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + i25 + i26 + i27 + i28 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-43521, i1=42070, i29=45, i30=-133, i31=3435, i32=-63480, i33=-58281, i34=-56827;
        short s2=18843;
        byte by1=76;
        double dArr2[]=new double[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(dArr2, 5.72883);
        FuzzerUtils.init(lArr1, 2070645801L);

        i = (int)(i + ((-8L - i) * Math.max(i, i)));
        i1 = 132;
        do {
            Test.instanceCount %= (i1 | 1);
        } while ((i1 -= 2) > 0);
        i = (int)fMeth(i1, i, i);
        for (i29 = 8; 164 > i29; ++i29) {
            i30 = i1;
            if (Test.bFld) {
                Test.instanceCount %= 16273L;
                Test.iArrFld[i29] = i;
            } else if (Test.bFld) {
                i = i;
                dArr2[i29 - 1] += i1;
            }
            i = (int)Test.instanceCount;
            i = i1;
            i <<= (int)Test.instanceCount;
            i30 -= i29;
            i30 += (((i29 * i30) + i) - i1);
            for (i31 = 7; 161 > i31; ++i31) {
                Test.fFld *= i32;
                for (i33 = 1; 2 > i33; i33++) {
                    Test.instanceCount += Test.instanceCount;
                    Test.iArrFld[i33 - 1] *= (int)Test.fFld;
                    if (Test.bFld) continue;
                    s2 = by1;
                    Test.bFld = Test.bFld;
                    Test.dFld = Test.fFld;
                    lArr1[i31 - 1] = i1;
                    Test.instanceCount = by1;
                    i34 -= s2;
                    i = (int)2.56043;
                }
                if (Test.bFld) break;
            }
        }

        FuzzerUtils.out.println("i i1 i29 = " + i + "," + i1 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 s2 = " + i33 + "," + i34 + "," + s2);
        FuzzerUtils.out.println("by1 dArr2 lArr1 = " + by1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2))
            + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iArrFld Test.sArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
