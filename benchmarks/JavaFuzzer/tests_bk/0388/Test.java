// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static double dFld=1.79327;
    public static float fFld=-1.898F;
    public static volatile short sFld=-30574;
    public static int iFld=8;
    public static byte byFld=-59;
    public long lFld=6277642933080132387L;
    public int iFld1=53479;
    public static volatile float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -110.255F);
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i8=23927, i9=-189, i10=10, i11=-12, i12=62593, i13=-35407, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 13);

        for (i8 = 18; i8 < 317; i8++) {
            boolean b=false;
            i9 ^= i8;
            if (b) break;
            i9 = (int)Test.dFld;
            for (i10 = 1; i10 < 6; i10++) {
                switch (((i8 % 1) * 5) + 23) {
                case 27:
                    Test.fFld += i8;
                    i9 = (int)Test.instanceCount;
                    iArr1[i8 - 1] -= Test.sFld;
                    for (i12 = i8; i12 < 2; ++i12) {
                        Test.fArrFld[i12] = 0L;
                        try {
                            i11 = (i8 / i13);
                            iArr1[i10 - 1] = (i12 / 92);
                            i13 = (i8 % -1943744428);
                        } catch (ArithmeticException a_e) {}
                        i11 = i11;
                        Test.sFld *= (short)Test.fFld;
                        i11 *= i9;
                    }
                    break;
                default:
                    b = b;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth() {

        int i=-128, i1=35622, i2=-27178, i3=-142, i4=-212, i5=4180, i6=14, i7=-11, iArr[]=new int[N];
        short s=-14551;
        float f=0.638F;

        FuzzerUtils.init(iArr, 63756);

        i = 1;
        while (++i < 232) {
            i1 = i;
            for (i2 = 1; i2 < 7; i2++) {
                for (i4 = 1; 2 > i4; ++i4) {
                    Test.instanceCount <<= i;
                    i5 = (-(i1++));
                    i5 += (int)(Math.min(i1, Math.abs(i2)) - (i + (s + Test.dFld)));
                }
                iArr[i2 + 1] *= (int)Math.max(i4 + Math.max(Test.instanceCount, Test.instanceCount), (long)(Test.dFld -
                    (s + i5)));
                for (i6 = i2; 2 > i6; ++i6) {
                    s ^= (short)-177;
                    s += (short)(-1529885852518979482L + (i6 * i6));
                    try {
                        i1 = (i3 / -43);
                        i3 = (i4 % i2);
                        iArr[i6 - 1] = (i3 % -22727);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = iArr[i];
                    Test.instanceCount = i;
                    f *= (((i2 - -12) + iMeth()) + i2);
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + s + i6 + i7 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i14=13;

        Test.fArrFld[(-10398 >>> 1) % N] *= (float)(dMeth() + i14);
        vMeth_check_sum += i14;
    }

    public void mainTest(String[] strArr1) {

        int i15=-180, i16=42, i17=12, i18=9, i19=-16308, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 122);

        vMeth();
        Test.iArrFld[(Test.iFld >>> 1) % N] >>= Test.iFld;
        for (i15 = 6; i15 < 153; ++i15) {
            Test.fFld = 158;
            Test.byFld = (byte)i15;
            for (i17 = 10; i17 < 171; ++i17) {
                switch (((i15 >>> 1) % 3) + 2) {
                case 2:
                    switch (((i15 % 1) * 5) + 125) {
                    case 128:
                    }
                    Test.iFld += (901 + (i17 * i17));
                    i16 = Test.iFld;
                    break;
                case 3:
                    Test.instanceCount = -11;
                    i16 = i16;
                    i19 = 1;
                    do {
                        iArr2[i17 + 1] = Test.iFld;
                        iArr2[i15 - 1] = 41155;
                    } while (++i19 < 2);
                    break;
                case 4:
                    switch (((i15 % 6) * 5) + 72) {
                    case 99:
                        i16 = (int)Test.instanceCount;
                        Test.fFld = 44;
                        switch ((i17 % 2) + 94) {
                        case 94:
                            Test.iFld *= (int)lFld;
                            i16 <<= Test.iFld;
                            break;
                        case 95:
                            Test.sFld |= (short)-9;
                            lFld += iFld1;
                            Test.sFld = Test.byFld;
                            iFld1 -= (int)Test.instanceCount;
                            break;
                        }
                        break;
                    case 76:
                        iFld1 -= Test.iFld;
                        lFld >>= lFld;
                    case 85:
                        Test.iFld /= (int)(i16 | 1);
                        Test.instanceCount = lFld;
                        break;
                    case 87:
                        Test.iFld += (((i17 * Test.fFld) + Test.iFld) - i19);
                        break;
                    case 79:
                        iArr2[i17 - 1] <<= (int)Test.instanceCount;
                        break;
                    case 89:
                        i16 = iFld1;
                        break;
                    }
                default:
                    iArr2[i15 - 1] *= (int)Test.dFld;
                }
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 iArr2 = " + i18 + "," + i19 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.iFld Test.byFld = " + Test.sFld + "," + Test.iFld + "," + Test.byFld);
        FuzzerUtils.out.println("lFld iFld1 Test.fArrFld = " + lFld + "," + iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
