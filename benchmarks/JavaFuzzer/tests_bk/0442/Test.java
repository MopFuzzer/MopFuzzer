// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-10L;
    public static int iFld=-9206;
    public static double dFld=-1.96047;
    public static float fFld=3.403F;
    public short sFld=-20564;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 16457);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=-34, i4=-9, i5=-32224, i6=45352, i7=-63, i8=215;
        double d=23.33360;
        boolean b=false;
        short s2=1383;
        byte by=14;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.853F);

        Test.instanceCount -= Test.iFld;
        for (i3 = 11; i3 < 375; i3++) {
            Test.instanceCount -= i4;
            for (d = 1; 5 > d; ++d) {
                if (b) continue;
                Test.iFld = (int)Test.instanceCount;
                switch ((((i3 >>> 1) % 9) * 5) + 114) {
                case 128:
                    s2 <<= (short)i5;
                    for (i6 = (int)(d); i6 < 2; ++i6) {
                        Test.instanceCount = (long)Test.fFld;
                    }
                    Test.fFld -= Test.iFld;
                    i8 = 1;
                    while (++i8 < 2) {
                        s2 += (short)i8;
                        Test.instanceCount += i8;
                        by >>= (byte)i3;
                    }
                case 133:
                    i5 -= (int)Test.instanceCount;
                    break;
                case 125:
                    Test.iFld += (int)(d * d);
                case 155:
                    fArr[i3 - 1] += Test.fFld;
                    break;
                case 119:
                    i5 &= i7;
                    break;
                case 118:
                    Test.fFld += (float)(d * d);
                    break;
                case 134:
                    i7 -= i7;
                    break;
                case 136:
                    i4 -= i4;
                case 157:
                    s2 = (short)i4;
                    break;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + Double.doubleToLongBits(d) + i5 + (b ? 1 : 0) + s2 + i6 + i7 + i8 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(short s1) {

        float f=-1.846F;
        int i9=33013, i10=92, i11=173, i12=114;
        boolean b1=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -6.65091);

        vMeth1();
        for (f = 244; f > 11; f -= 3) {
            Test.instanceCount += (long)(f * f);
            for (i10 = 1; i10 < 20; i10++) {
                i9 = i10;
                if (b1) continue;
                i12 = 1;
                while ((i12 += 2) < 2) {
                    Test.dFld = Test.instanceCount;
                    Test.instanceCount = (long)Test.dFld;
                    dArr[i12 - 1] -= -3584000733L;
                    Test.iArrFld[(int)(f)] = (int)Test.instanceCount;
                    if (b1) continue;
                    Test.iArrFld[(int)(f + 1)] *= Test.iFld;
                    i11 = (int)Test.dFld;
                }
                i9 += s1;
            }
        }
        vMeth_check_sum += s1 + Float.floatToIntBits(f) + i9 + i10 + i11 + (b1 ? 1 : 0) + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i2, short s) {


        Test.iFld = 49657;
        vMeth(s);
        vSmallMeth_check_sum += i2 + s;
    }

    public void mainTest(String[] strArr1) {

        int i=27446, i1=-33256, i13=-245, i14=7, i15=-6, i16=19484, i17=-1, i18=0, i19=11, i20=-4, i21=-14, i22=11,
            iArr[]=new int[N];
        double d1=-1.13877;
        long l=-7465145821033184780L, lArr[]=new long[N];
        byte by1=3;
        float f1=97.236F;
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr, -173L);
        FuzzerUtils.init(iArr, -16591);
        FuzzerUtils.init(sArr, (short)-18253);

        lArr[(Test.iFld >>> 1) % N] *= (long)((iArr[(Test.iFld >>> 1) % N]++) - (Test.dFld * (Test.iFld + 11)));
        for (i = 9; i < 252; ++i) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.iFld, sFld);
            Test.iFld += (int)Test.instanceCount;
            Test.iFld = (int)Test.instanceCount;
            i1 += Test.iFld;
        }
        Test.iFld -= sFld;
        for (d1 = 293; 14 < d1; d1 -= 2) {
            for (i14 = 8; 180 > i14; ++i14) {
                Test.iFld >>= i14;
                l += (((i14 * Test.iFld) + by1) - i);
                for (i16 = 1; i16 < 2; i16++) {
                    Test.instanceCount += i15;
                    i15 += i16;
                    Test.dFld /= (l | 1);
                    i13 = i13;
                    Test.fFld += (((i16 * i17) + i1) - i15);
                    Test.dFld = l;
                }
            }
            for (i18 = 7; i18 < 180; ++i18) {
                Test.iFld = sFld;
                i1 += (i18 * i18);
                by1 = (byte)l;
                i17 ^= i14;
                l |= Test.instanceCount;
                Test.iArrFld[(int)(d1 - 1)] = sFld;
            }
            for (i20 = (int)(d1); 180 > i20; i20 += 3) {
                l = i19;
                for (f1 = 1; f1 < 1; f1++) {
                    i17 += i15;
                    Test.instanceCount = i16;
                }
            }
        }

        FuzzerUtils.out.println("i i1 d1 = " + i + "," + i1 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("l by1 i16 = " + l + "," + by1 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 f1 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i22 lArr iArr = " + i22 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld sFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
