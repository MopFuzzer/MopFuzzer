// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3213L;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];
    public static byte byArrFld[][]=new byte[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 174);
        FuzzerUtils.init(Test.lArrFld, -1L);
        FuzzerUtils.init(Test.byArrFld, (byte)-113);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9) {

        float f1=0.687F, fArr[]=new float[N];
        double d1=-1.122247;
        int i10=-4, i11=50766, i12=198;
        boolean b=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(fArr, 86.388F);
        FuzzerUtils.init(bArr, true);

        i8 = i9;
        f1 += i8;
        if (b) {
            d1 = 1;
            do {
                Test.iArrFld[(int)(d1)] = i9;
                i10 = 1;
                do {
                    Test.lArrFld[(int)(d1 - 1)][(int)(d1)] = i8;
                    Test.byArrFld[(int)(d1 - 1)][(int)(d1 - 1)] += (byte)i10;
                    switch (((i10 % 6) * 5) + 118) {
                    case 140:
                        for (i11 = 1; 1 > i11; i11++) {
                            fArr[(int)(d1 + 1)] += i8;
                            i12 += (-2 + (i11 * i11));
                            f1 *= i9;
                            try {
                                Test.iArrFld[i11] = (i8 / -132);
                                i9 = (-20275517 / i9);
                                Test.iArrFld[i11] = (i11 / i12);
                            } catch (ArithmeticException a_e) {}
                            i8 <<= (int)Test.instanceCount;
                        }
                        break;
                    case 124:
                        i12 += i10;
                    case 136:
                        if (false) continue;
                        break;
                    case 121:
                        i9 += (int)d1;
                    case 120:
                        Test.iArrFld[(int)(d1 - 1)] = -37618;
                    case 145:
                        bArr[(int)(d1)][(int)(d1)] = b;
                        break;
                    }
                } while (++i10 < 5);
            } while (++d1 < 306);
        } else {
            Test.instanceCount += Test.instanceCount;
        }
        vMeth2_check_sum += i8 + i9 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i10 + i11 + i12 + (b ? 1
            : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i4, double d) {

        int i5=5, i6=4, i7=0, i13=64572, i14=40086;
        float f=-47.801F;
        boolean b1=true;

        for (i5 = 188; i5 > 4; --i5) {
            i6 %= (int)((long)(f) | 1);
            i7 = 1;
            do {
                vMeth2(i4, i5);
                f += i7;
            } while (++i7 < 9);
            for (i13 = 9; i13 > 1; i13--) {
                i6 >>= i6;
                i6 += (i13 - Test.instanceCount);
                switch ((i13 % 3) + 43) {
                case 43:
                    f = 2018;
                    break;
                case 44:
                    i4 >>= (int)3908815135L;
                    i6 += (int)115L;
                    Test.instanceCount -= (long)f;
                    if (i4 != 0) {
                        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + Float.floatToIntBits(f) + i7 +
                            i13 + i14 + (b1 ? 1 : 0);
                        return;
                    }
                    break;
                case 45:
                default:
                    if (b1) break;
                }
            }
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + Float.floatToIntBits(f) + i7 + i13 + i14 + (b1
            ? 1 : 0);
    }

    public static void vMeth(int i, int i1) {

        int i2=14, i3=13, i15=1, i16=-21727, i17=59285;
        double d2=74.118561;
        boolean b2=true;
        float f2=-20.71F;

        for (i2 = 5; i2 < 123; i2++) {
            Test.iArrFld[i2] >>= (Test.iArrFld[i2]++);
            vMeth1(i1, d2);
            if (b2) break;
            i15 = 1;
            do {
                i += (i15 * i2);
                i -= (int)f2;
                Test.iArrFld[(i2 >>> 1) % N] <<= i15;
                i1 -= 231;
                Test.instanceCount = i3;
            } while (++i15 < 13);
            Test.iArrFld[i2] = i3;
            for (i16 = 1; i16 < 13; ++i16) {
                i3 += (((i16 * f2) + Test.instanceCount) - f2);
                if (b2) break;
                i3 += (i16 - Test.instanceCount);
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d2) + (b2 ? 1 : 0) + i15 +
            Float.floatToIntBits(f2) + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i18=59857, i19=-34496, i20=18483, i21=-21773, i22=-17903, i23=-39, i24=-11, i25=-245, i26=34070, i27=31;
        double d3=-6.93549;
        float f3=-98.428F, fArr1[]=new float[N];
        byte by=-23;

        FuzzerUtils.init(fArr1, -58.704F);

        vMeth(i18, i18);
        i19 = 1;
        do {
            if (bFld) {
                d3 += Test.instanceCount;
            } else if (true) {
                for (f3 = 2; f3 < 70; f3++) {
                    i18 <<= -169;
                    Test.iArrFld[(int)(f3 - 1)] = i18;
                    Test.instanceCount -= i19;
                    for (i21 = 1; i21 < 2; i21 += 2) {
                        Test.instanceCount += i21;
                        i20 = (int)Test.instanceCount;
                        fArr1[i21 - 1] = by;
                    }
                    if (bFld) continue;
                    Test.instanceCount += (-11922 + (f3 * f3));
                }
                for (i23 = 1; i23 < 70; ++i23) {
                    i18 += (i23 * i23);
                }
            }
            Test.iArrFld[i19] *= (int)d3;
            Test.lArrFld[i19 - 1][i19 - 1] += i21;
            i22 = i22;
            i25 = 1;
            do {
                for (i26 = 1; i26 < 1; i26++) {
                    i20 >>= -2;
                    if (bFld) break;
                    Test.instanceCount += i26;
                    Test.lArrFld[i19 + 1] = Test.lArrFld[i25 - 1];
                    i27 *= i18;
                    i18 += i26;
                    i24 += i20;
                    bFld = bFld;
                    Test.byArrFld[i19 - 1] = FuzzerUtils.byte1array(N, (byte)-36);
                }
            } while (++i25 < 70);
        } while (++i19 < 361);

        FuzzerUtils.out.println("i18 i19 d3 = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("f3 i20 i21 = " + Float.floatToIntBits(f3) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 by i23 = " + i22 + "," + by + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 fArr1 = " + i27 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount bFld Test.iArrFld = " + Test.instanceCount + "," + (bFld ? 1 : 0) +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
