// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static float fFld=86.327F;
    public static int iFld=21284;
    public static byte byFld=-47;
    public static double dFld=62.109875;
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-29);
        FuzzerUtils.init(Test.lArrFld, -226L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(float f1, int i5, float f2) {

        int i6=-9741, i7=-238, i8=-3, i9=53995, i10=35551, i11=202;
        double d=-101.69969;
        short s=31038;
        float f3=-2.12F;

        i5 = i5;
        i6 = 1;
        while (++i6 < 341) {
            i5 /= -208;
        }
        Test.lArrFld[(i6 >>> 1) % N] = i5;
        for (i7 = 11; i7 < 184; ++i7) {
            Test.fFld += i7;
            for (i9 = 1; i9 < 9; i9++) {
                d += Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
            }
            i10 = i6;
            i5 += 60817;
            i8 = s;
            for (f3 = i7; f3 < 9; f3++) {
                Test.fFld += f3;
                Test.instanceCount += (long)(((f3 * Test.instanceCount) + f2) - i11);
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d) + s + Float.floatToIntBits(f3) + i11;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i3, long l1) {

        int i4=7, i13=221, i14=-33807, i15=36952, i16=109, i17=12255, iArr1[]=new int[N];
        double d1=-57.50781;

        FuzzerUtils.init(iArr1, 0);

        iArr1[(109 >>> 1) % N] = (int)((Math.abs(i3) + (i3 - 215)) - Double.longBitsToDouble(Test.instanceCount));
        i4 = 1;
        while (++i4 < 285) {
            int i12=-153;
            byte by1=67;
            i3 = (int)((sMeth(Test.fFld, 8, -91.438F) + -16953) - d1);
            i12 += (((i4 * Test.fFld) + Test.fFld) - i4);
            i12 = (int)Test.instanceCount;
            by1 += (byte)i4;
            for (i13 = 1; i13 < 6; ++i13) {
                i3 = i3;
                i15 = 1;
                while (++i15 < 2) {
                    i12 >>= (int)l1;
                    iArr1[i4] >>= i4;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    i12 *= i16;
                    Test.instanceCount -= i13;
                    i3 *= i15;
                }
            }
        }
        long meth_res = i3 + l1 + i4 + Double.doubleToLongBits(d1) + i13 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, long l, int i1) {

        float f=49.84F;
        int i2=-17727, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -64757);

        for (byte by : Test.byArrFld) {
            iArr[(i >>> 1) % N][(i1 >>> 1) % N] -= (int)2.77F;
        }
        for (f = 3; f < 147; ++f) {
            Test.fFld = (iMeth(i1, 7486359680035795147L) * i1);
            i1 += i2;
        }
        i2 *= i;
        i += i1;
        vMeth_check_sum += i + l + i1 + Float.floatToIntBits(f) + i2 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=13, i19=4, i20=-36991, i21=-7, i22=-74, i23=-129, i24=1, i25=6, iArr2[]=new int[N];
        boolean b=false;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.686F);
        FuzzerUtils.init(iArr2, -124);

        vMeth(Test.iFld, Test.instanceCount, -4);
        Test.iFld += (int)91.843F;
        Test.iFld &= (int)Test.instanceCount;
        if (b) {
            for (i18 = 6; 225 > i18; i18++) {
                b = b;
                for (i20 = 7; i20 < 115; ++i20) {
                    Test.fFld *= Test.byFld;
                    Test.fFld += i21;
                }
            }
            i22 = 1;
            do {
                i23 = 1;
                while (++i23 < 78) {
                    switch (((i19 >>> 1) % 1) + 22) {
                    case 22:
                        fArr[i22] *= i19;
                        switch ((i23 % 9) + 26) {
                        case 26:
                            if (false) continue;
                            i19 >>= i23;
                            Test.dFld -= i18;
                        case 27:
                            Test.instanceCount *= i20;
                            i19 = Test.byFld;
                            Test.instanceCount += (-147 + (i23 * i23));
                            break;
                        case 28:
                            switch ((((i21 >>> 1) % 1) * 5) + 59) {
                            case 60:
                                for (i24 = i22; i24 < 1; i24++) {
                                    Test.instanceCount -= i18;
                                    i21 += i24;
                                    iArr2[i22 + 1] &= i21;
                                    Test.instanceCount %= (i21 | 1);
                                    i21 += (i24 * i24);
                                    fArr[i23] -= Test.iFld;
                                }
                                Test.dFld += i25;
                                Test.fFld *= i23;
                                break;
                            }
                        case 29:
                            i19 += (((i23 * Test.iFld) + i21) - i21);
                            break;
                        case 30:
                            iArr2[i22 - 1] = i25;
                        case 31:
                        case 32:
                            Test.iFld += i24;
                            break;
                        case 33:
                            Test.iFld <<= i23;
                            break;
                        case 34:
                            i25 += (int)Test.dFld;
                            break;
                        }
                        break;
                    }
                }
            } while (++i22 < 321);
        } else if (b) {
            Test.instanceCount -= Test.instanceCount;
        } else {
            Test.instanceCount = (long)Test.fFld;
        }

        FuzzerUtils.out.println("i18 i19 b = " + i18 + "," + i19 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("fArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.byArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
