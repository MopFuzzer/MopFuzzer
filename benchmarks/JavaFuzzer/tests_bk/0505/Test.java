// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=20012L;
    public double dFld=0.113042;
    public static int iFld=44346;
    public static float fFld=103.857F;
    public static short sFld=-28878;
    public static byte byFld=68;
    public static double dFld1=2.104777;
    public volatile short sFld1=-32125;
    public static volatile int iArrFld[]=new int[N];
    public static volatile float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, 12);
        FuzzerUtils.init(Test.fArrFld, -1.244F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l2, int i8) {

        int i10=172, i11=-242, i12=-225, i13=-13;
        boolean b=false;

        for (int i9 : Test.iArrFld) {
            Test.fArrFld[(15039 >>> 1) % N][(25070 >>> 1) % N] = i9;
            for (i10 = 1; 4 > i10; i10++) {
                switch ((((-66 >>> 1) % 9) * 5) + 81) {
                case 97:
                    for (i12 = 2; i12 > 1; --i12) {
                        if (b) continue;
                        l2 -= i8;
                        l2 *= i13;
                        Test.iFld += i8;
                        l2 += i12;
                        Test.iFld += (((i12 * i9) + i9) - Test.fFld);
                        i11 <<= Test.iFld;
                        Test.iArrFld[i10] *= Test.iFld;
                        i9 = Test.sFld;
                        Test.iArrFld = Test.iArrFld;
                    }
                    break;
                case 99:
                    Test.byFld += (byte)Test.dFld1;
                    break;
                case 105:
                    i13 = 125;
                    break;
                case 120:
                    l2 = -142;
                    break;
                case 119:
                    l2 = (long)Test.fFld;
                case 96:
                    i13 <<= (int)l2;
                    break;
                case 93:
                    Test.iArrFld = Test.iArrFld;
                    break;
                case 118:
                case 116:
                    Test.fFld *= i9;
                    break;
                }
            }
        }
        vMeth1_check_sum += l2 + i8 + i10 + i11 + i12 + i13 + (b ? 1 : 0);
    }

    public static int iMeth() {

        float f1=-57.586F;
        int i14=-190, i15=0, i16=-107, i17=-42345, i18=-10, i19=-50086;
        long l3=745661546L;

        Test.iFld = (int)((Test.iFld * (Test.iFld + Test.instanceCount)) * (Test.iFld += (int)f1));
        vMeth1(Test.instanceCount, Test.iFld);
        Test.instanceCount = Test.iFld;
        for (i14 = 7; i14 < 298; ++i14) {
            Test.iFld += i14;
            for (i16 = 1; i16 < 6; i16 += 3) {
                Test.dFld1 *= i17;
                Test.iFld += (i16 * i14);
                Test.iFld = (int)l3;
            }
            i17 = (int)Test.dFld1;
            l3 -= l3;
            Test.instanceCount *= i15;
            for (i18 = 1; i18 < 6; i18 += 3) {
                i17 += (i18 * Test.byFld);
                Test.instanceCount *= i16;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i14 + i15 + i16 + i17 + l3 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4, long l, int i5) {

        long l1=7L;
        int i6=-12, i7=24204, i20=-11, i21=-11904;
        float f=-1.553F;
        byte by=27;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 2.34081);

        for (l1 = 6; l1 < 392; l1++) {
            for (f = l1; f < 4; ++f) {
                i6 += (int)(0.829F + (f * f));
                i5 = ((i4--) - Test.iArrFld[(int)(f)]);
                by += (byte)iMeth();
                for (i20 = 1; i20 < 1; i20++) {
                    Test.iFld = 65458;
                    Test.dFld1 = Test.dFld1;
                    i6 += (-1 + (i20 * i20));
                    Test.iFld += (i20 - l);
                    Test.iArrFld[(int)(f - 1)] = i7;
                    Test.fFld = i21;
                    Test.instanceCount += (((i20 * i4) + Test.iFld) - i20);
                    Test.iArrFld[(int)(f + 1)] -= (int)-3095021420198084068L;
                    dArr[i20] += 27847;
                }
            }
        }
        vMeth_check_sum += i4 + l + i5 + l1 + i6 + Float.floatToIntBits(f) + i7 + by + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-229, i1=35829, i2=26153, i3=20, i22=-12, i23=-2, i24=-10, i25=-165, i26=-45896, i27=28385;
        long l4=1882050436254492211L;

        for (i = 11; i < 351; ++i) {
            dFld = (i1 + i);
            for (i2 = 2; i2 < 74; ++i2) {
                vMeth(106, l4, 2);
                for (i22 = 1; i22 < 2; i22++) {
                    Test.fFld *= -8;
                    l4 = 64801;
                    i1 >>= (int)l4;
                    Test.iFld = -4;
                    i3 += (i22 + i2);
                    i1 = 48391;
                    i3 -= (int)Test.instanceCount;
                    i3 += Test.iFld;
                }
            }
            for (i24 = 74; i24 > 3; i24 -= 3) {
                for (i26 = 1; 4 > i26; ++i26) {
                    switch ((i24 % 3) + 63) {
                    case 63:
                        try {
                            Test.iFld = (i22 / i26);
                            i27 = (Test.iArrFld[i24] / i25);
                            i23 = (-41318 / i23);
                        } catch (ArithmeticException a_e) {}
                        sFld1 = (short)-8813;
                        break;
                    case 64:
                        l4 *= Test.instanceCount;
                    case 65:
                        Test.iArrFld[i24] = (int)dFld;
                        i23 += (i26 * i24);
                        break;
                    }
                    Test.iFld ^= Test.byFld;
                    l4 = Test.instanceCount;
                    i27 -= i22;
                    i3 += (i26 + l4);
                    Test.instanceCount += (long)(0.548F + (i26 * i26));
                    Test.iArrFld[i26 - 1] += i25;
                    i27 = i;
                }
                Test.iArrFld[i] -= i23;
                Test.iFld *= (int)l4;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l4 i22 = " + i3 + "," + l4 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 = " + i26 + "," + i27);

        FuzzerUtils.out.println("Test.instanceCount dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.sFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.sFld
            + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld1 sFld1 Test.iArrFld = " + Double.doubleToLongBits(Test.dFld1) + "," + sFld1
            + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
