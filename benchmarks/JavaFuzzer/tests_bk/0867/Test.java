// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7498449922261300926L;
    public static int iFld=-7;
    public static volatile double dFld=-59.46694;
    public static boolean bFld=false;
    public volatile short sFld=-1659;
    public static volatile double dArrFld[]=new double[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.125066);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9) {

        int i10=225, i11=7250, i12=43032, i13=35961, i14=-166, i15=-9, iArr[]=new int[N];
        float f1=108.330F, fArr[]=new float[N];
        long l1=-6L;

        FuzzerUtils.init(fArr, 37.517F);
        FuzzerUtils.init(iArr, -194);

        fArr[(i9 >>> 1) % N] = Test.iFld;
        for (i10 = 2; i10 < 147; ++i10) {
            Test.instanceCount += i10;
            if (Test.bFld) {
                for (i12 = 1; 11 > i12; ++i12) {
                    for (i14 = 1; i14 < 2; i14 += 2) {
                        Test.iFld += (i14 * i14);
                        Test.bFld = Test.bFld;
                        Test.dFld += i9;
                        if (Test.bFld) {
                            Test.dArrFld[i10] = i15;
                        }
                        Test.iFld &= Test.iFld;
                    }
                    f1 += i15;
                    iArr[i10 + 1] = i9;
                    Test.instanceCount *= i13;
                }
            } else {
                Test.iFld <<= (int)l1;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) + l1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i5, long l) {

        int i6=1, i7=-192, i16=14, i17=197, i18=132;
        float f2=0.797F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2685339032238998237L);

        l >>= Test.iFld;
        for (i6 = 15; 299 > i6; ++i6) {
            vMeth1(i6, i5);
            i5 *= i5;
            lArr[i6 - 1] -= -26372;
            for (i16 = i6; 6 > i16; ++i16) {
                i7 = (int)l;
            }
            if (true) continue;
            i18 = 1;
            do {
                i17 -= i7;
                switch (((i6 % 6) * 5) + 12) {
                case 28:
                    Test.bFld = Test.bFld;
                    l += i18;
                    i5 += i18;
                    break;
                case 14:
                    Test.iFld = (int)Test.instanceCount;
                    break;
                case 39:
                    f2 -= -1.349F;
                    break;
                case 24:
                    if (true) continue;
                    break;
                case 29:
                    if (Test.bFld) break;
                    break;
                case 32:
                    i5 *= (int)Test.instanceCount;
                    break;
                }
            } while (++i18 < 6);
        }
        vMeth_check_sum += i5 + l + i6 + i7 + i16 + i17 + i18 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(int i, int i1, int i2) {

        int i3=62, i4=3943, i19=76, i20=-55592, i21=13, i22=-5, iArr1[]=new int[N];
        byte by1=92;
        float f3=-64.796F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 2.275F);
        FuzzerUtils.init(iArr1, -5271);

        for (i3 = 10; 320 > i3; ++i3) {
            vMeth(i2, Test.instanceCount);
            i = -64;
            i4 >>= 23502;
            fArr1[i3 + 1] = 37.839F;
            for (i19 = 1; i19 < 5; i19++) {
                iArr1[i3 - 1] -= (int)Test.instanceCount;
                for (i21 = i19; i21 < 2; ++i21) {
                    iArr1[i21 + 1] <<= i20;
                    Test.iFld += (i21 * i21);
                    Test.iFld += by1;
                }
                if (Test.bFld) {
                    if (i1 != 0) {
                    }
                } else if (false) {
                    i20 = i20;
                    f3 -= i19;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i19 + i20 + i21 + i22 + by1 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=2.969F, fArr2[]=new float[N];
        byte by=12;
        int i23=-53122, i24=10, i25=14, i26=14, i27=-12120, i28=-94, i29=-11, iArr2[]=new int[N];
        long l2=7667L;

        FuzzerUtils.init(fArr2, 1.781F);
        FuzzerUtils.init(iArr2, 65);

        f = (-7704L * ((9411 - (by++)) + Test.iFld));
        Test.iFld = (int)(((Test.iFld + Test.dFld) - lMeth(Test.iFld, Test.iFld, Test.iFld)) - by);
        for (i23 = 18; i23 < 309; i23++) {
            fArr2[i23 - 1] -= i23;
            if (Test.bFld) break;
            l2 = 86;
            while (--l2 > 0) {
                Test.dFld -= i23;
                f %= 230;
                Test.instanceCount += Test.iFld;
                Test.instanceCount <<= i23;
                f = l2;
                f = sFld;
                for (i25 = 1; i25 < 1; i25++) {
                    i26 = (int)l2;
                    i24 += (int)Test.instanceCount;
                }
                Test.iFld = (int)Test.instanceCount;
                if (Test.bFld) {
                    if (Test.bFld) break;
                } else if (Test.bFld) {
                    i27 = 1;
                    do {
                        Test.dFld += 12;
                        Test.iFld += i27;
                        i26 <<= i26;
                        i26 >>= i26;
                        lArrFld[i27 + 1] >>= -5281853435421407204L;
                    } while (++i27 < 1);
                    switch (((i23 % 1) * 5) + 68) {
                    case 73:
                    }
                    switch (((i27 >>> 1) % 1) + 121) {
                    case 121:
                        for (i28 = 1; 1 > i28; i28++) {
                            i29 -= (int)23.982F;
                        }
                        Test.instanceCount -= i24;
                    default:
                        Test.instanceCount += l2;
                    }
                } else if (Test.bFld) {
                    iArr2[i23] = i29;
                }
            }
        }

        FuzzerUtils.out.println("f by i23 = " + Float.floatToIntBits(f) + "," + by + "," + i23);
        FuzzerUtils.out.println("i24 l2 i25 = " + i24 + "," + l2 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 fArr2 iArr2 = " + i29 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2))
            + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld sFld Test.dArrFld = " + (Test.bFld ? 1 : 0) + "," + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
