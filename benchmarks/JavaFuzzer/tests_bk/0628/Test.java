// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=11L;
    public static byte byFld=47;
    public static short sFld=29258;
    public static volatile float fFld=2.789F;
    public static int iFld=-1;
    public long lFld=-10643L;
    public static int iFld1=-15;
    public static int iFld2=10878;
    public static int iFld3=13;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, short s1) {

        int i4=-17241, i5=17695, i6=-52017, i7=-39653, i8=0;
        double d1=1.119480;
        float f=-120.766F;
        boolean b1=true;

        i4 = 1;
        do {
            d1 *= i4;
            switch ((i4 % 2) + 68) {
            case 68:
            case 69:
                Test.instanceCount |= i4;
            default:
                for (i5 = 1; i5 < 8; i5++) {
                    for (i7 = 2; i7 > i5; i7--) {
                        if (true) {
                            switch (((i4 >>> 1) % 5) + 126) {
                            case 126:
                                d1 -= i4;
                                s1 += (short)f;
                                break;
                            case 127:
                                s1 += (short)i7;
                                i8 <<= i6;
                                b1 = b1;
                                d1 *= -10;
                            case 128:
                                i8 = (int)f;
                            case 129:
                                Test.byFld -= (byte)i6;
                                break;
                            case 130:
                                i6 ^= i6;
                                break;
                            }
                        } else if (b1) {
                            i6 = i6;
                        } else {
                            i8 += (((i7 * i8) + i6) - i6);
                        }
                    }
                }
            }
        } while (++i4 < 195);
        vMeth1_check_sum += l1 + s1 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) +
            (b1 ? 1 : 0);
    }

    public static long lMeth(boolean b, short s, long l) {

        int i9=-14, i10=-242, i11=85, i12=19969, i13=37221, i14=563, i15=7, i16=-10;
        float f1=-7.436F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.996F);

        vMeth1(Test.instanceCount, (short)(25487));
        i9 = 1;
        while (++i9 < 396) {
            Test.instanceCount = i9;
            if (i10 != 0) {
            }
            for (i11 = i9; i11 < 4; i11 += 2) {
                l = i12;
                for (i13 = 1; i13 < 1; i13++) {
                    fArr = fArr;
                    i12 += i13;
                    f1 = 5751105435318117667L;
                }
                i10 = i10;
                for (i15 = 1; i15 < 1; i15++) {
                    i14 *= i14;
                    f1 += i10;
                    fArr[i15 + 1] += i16;
                }
            }
        }
        long meth_res = (b ? 1 : 0) + s + l + i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, double d) {

        int i2=199, i3=4;
        boolean b2=true;
        float f2=45.305F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 24.71451);

        for (i2 = 6; i2 < 189; ++i2) {
            dArr[i2] = (i2 & (i3 -= (int)lMeth(b2, Test.sFld, Test.instanceCount)));
        }
        i1 += (int)Test.instanceCount;
        i3 += (int)Test.instanceCount;
        f2 = -125.284F;
        i3 *= i3;
        Test.instanceCount += -41921L;
        if (true) {
            Test.fFld = i1;
        }
        Test.byFld = (byte)Test.instanceCount;
        i3 ^= i3;
        Test.fFld *= Test.instanceCount;
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i2 + i3 + (b2 ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=48824, i17=-238, i18=-111, i19=12, i20=7, i21=-42733, iArr[]=new int[N];
        double d2=127.90287, dArr1[]=new double[N];
        boolean b3=false, b4=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 42);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr1, -2.121183);

        i = 1;
        while (++i < 240) {
            vMeth(i, d2);
            i17 = 1;
            do {
                Test.iFld += Test.iFld;
                i18 = 1;
                do {
                    iArr[i18 + 1] *= i18;
                    Test.iFld = -2;
                    Test.iFld -= (int)lFld;
                    Test.iFld += (((i18 * Test.iFld) + Test.fFld) - i18);
                    lFld += (i18 - Test.iFld);
                    Test.iFld += i18;
                    lFld >>= 39464;
                    Test.iFld = Test.iFld;
                } while (++i18 < 1);
                bArr[i17] = true;
                Test.instanceCount += (i17 * i17);
                Test.iFld = (int)Test.instanceCount;
            } while (++i17 < 105);
            Test.byFld -= (byte)Test.iFld;
            b3 = b3;
            Test.iFld = (int)-58322L;
        }
        b3 = b3;
        i19 = 1;
        do {
            dArr1[i19 + 1] += Test.iFld1;
            dArr1[i19 - 1] = Test.iFld1;
            Test.iFld2 += Test.iFld3;
            try {
                Test.iFld3 = (i18 / -56);
                Test.iFld = (61 % i17);
                Test.iFld2 = (i17 % iArr[(Test.iFld2 >>> 1) % N]);
            } catch (ArithmeticException a_e) {}
            for (i20 = i19; i20 < 104; i20 += 2) {
                b3 = b4;
                try {
                    i21 = (20642 % i19);
                    Test.iFld3 = (iArr[i19] % Test.iFld3);
                    iArr[i19 - 1] = (149 / iArr[i19 + 1]);
                } catch (ArithmeticException a_e) {}
                d2 -= Test.byFld;
                i21 *= i;
            }
        } while (++i19 < 242);

        FuzzerUtils.out.println("i d2 i17 = " + i + "," + Double.doubleToLongBits(d2) + "," + i17);
        FuzzerUtils.out.println("i18 b3 i19 = " + i18 + "," + (b3 ? 1 : 0) + "," + i19);
        FuzzerUtils.out.println("i20 i21 b4 = " + i20 + "," + i21 + "," + (b4 ? 1 : 0));
        FuzzerUtils.out.println("iArr bArr dArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.sFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld lFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld + ","
            + lFld);
        FuzzerUtils.out.println("Test.iFld1 Test.iFld2 Test.iFld3 = " + Test.iFld1 + "," + Test.iFld2 + "," +
            Test.iFld3);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
