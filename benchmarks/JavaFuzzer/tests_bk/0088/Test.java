// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=170L;
    public static float fFld=67.875F;
    public static boolean bFld=false;
    public double dFld=120.20711;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 69.71309);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d2, double d3, int i5) {

        int i6=-9, i7=-96, i8=214, i9=-15, i10=9, iArr[]=new int[N];
        byte by1=106;
        short s=30415;

        FuzzerUtils.init(iArr, -35);

        i5 -= i5;
        i6 = 1;
        do {
            i5 += (i6 * i6);
            Test.instanceCount = Test.instanceCount;
        } while (++i6 < 262);
        for (i7 = 16; i7 < 325; ++i7) {
            Test.instanceCount += (i7 * Test.instanceCount);
            i8 = 60444;
            by1 = (byte)i5;
            i5 -= i5;
            for (i9 = 1; i9 < 5; ++i9) {
                Test.instanceCount += (i9 ^ i5);
                switch ((i9 % 8) + 54) {
                case 54:
                    i5 *= i8;
                    i5 = i9;
                    i8 = -39030;
                    break;
                case 55:
                    s <<= (short)i7;
                    break;
                case 56:
                    Test.instanceCount = i10;
                    break;
                case 57:
                    i8 >>= i9;
                case 58:
                    s -= (short)i5;
                    break;
                case 59:
                    iArr[i7] += i10;
                    break;
                case 60:
                    d2 += by1;
                    break;
                case 61:
                    i5 = i6;
                default:
                    iArr[i9] -= i5;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i5 + i6 + i7 + i8 + by1 + i9 +
            i10 + s + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        int i3=9, i4=-226, i11=71, i12=-149;
        double d4=-97.129360;
        short s1=-10267;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -34.634F);

        for (i3 = 153; 1 < i3; --i3) {
            fArr[i3 - 1] -= i3;
            vMeth1(d4, d4, 89);
            s1 += (short)(((i3 * i4) + i2) - i2);
            i2 -= -240;
            i2 += (i3 * i3);
            i11 += (int)(0.145F + (i3 * i3));
            i4 = i2;
        }
        d4 += i3;
        d4 -= i2;
        i12 = 1;
        do {
            if (b) {
                i2 -= (int)Test.instanceCount;
            } else {
                Test.dArrFld[i12 - 1] += -1044966572L;
                Test.dArrFld[i12] += i4;
            }
        } while (++i12 < 248);
        vMeth_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d4) + s1 + i11 + i12 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(double d, double d1, int i1) {

        byte by=103;
        double d5=0.115356;
        int i13=9, i14=56179, i15=-68, i16=-14, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -2);

        Test.fFld = (--i1);
        by = (byte)(d++);
        vMeth(108);
        i1 += (int)d;
        i1 &= i1;
        d5 = 1;
        while (++d5 < 393) {
            for (i13 = 4; i13 > 1; i13--) {
                i14 = (int)Test.fFld;
                i1 = i1;
                for (i15 = 1; i15 < 2; i15++) {
                    switch (((i15 % 2) * 5) + 103) {
                    case 105:
                        iArr1[i15] >>= i16;
                    case 113:
                        i14 = 39016;
                        if (Test.bFld) continue;
                        i16 -= (int)d5;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i1 + by +
            Double.doubleToLongBits(d5) + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=81, i17=50, i18=14701, i19=14, i20=2, iArr2[]=new int[N];
        float f=35.353F;
        long l=-28135L, lArr[]=new long[N];

        FuzzerUtils.init(iArr2, -203);
        FuzzerUtils.init(lArr, -17L);

        i *= iMeth(dFld, dFld, i);
        for (i17 = 7; i17 < 200; ++i17) {
            for (f = i17; f < 130; f++) {
                for (l = 1; l > 1; l -= 2) {
                    switch (((i >>> 1) % 6) + 79) {
                    case 79:
                        i20 >>>= -18021;
                        iArr2[(int)(f)] >>= i19;
                    case 80:
                        i19 = i20;
                        i *= i20;
                        Test.instanceCount = i17;
                        break;
                    case 81:
                        i19 -= (int)l;
                        Test.instanceCount += i17;
                        Test.fFld += (((l * f) + f) - i17);
                        break;
                    case 82:
                        dFld = l;
                    case 83:
                        dFld -= Test.fFld;
                        i18 = (int)2.664F;
                        Test.instanceCount = (long)Test.fFld;
                        break;
                    case 84:
                        lArr = lArr;
                        Test.fFld += (l * l);
                        i18 = -19208;
                        Test.instanceCount = i18;
                        break;
                    default:
                        Test.fFld += l;
                        Test.instanceCount += (((l * i18) + i19) - i19);
                        i20 = (int)94.100776;
                    }
                    i18 = (int)l;
                    i19 -= i17;
                    i19 -= i18;
                    i18 *= i17;
                    lArr[(int)(l)] = Test.instanceCount;
                    i18 *= -89;
                }
            }
        }

        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f i19 l = " + Float.floatToIntBits(f) + "," + i19 + "," + l);
        FuzzerUtils.out.println("i20 iArr2 lArr = " + i20 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test.dArrFld = " + Double.doubleToLongBits(dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
