// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1946074960749639658L;
    public int iFld=2;
    public static byte byFld=40;
    public static float fFld=-1.853F;
    public static short sFld=-15416;
    public static int iArrFld[]=new int[N];
    public static volatile boolean bArrFld[][]=new boolean[N][N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 4484);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.dArrFld, -65.98628);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i7) {

        float f3=-4.669F, f4=0.578F;
        int i8=-100, i9=-6;
        double d=-46.130928, d1=-86.120664;
        long l2=1507334646L;
        boolean b=false;

        for (f3 = 5; f3 < 387; f3++) {
            f4 = (float)d;
            i7 *= -23122;
            switch ((int)(((f3 % 2) * 5) + 25)) {
            case 35:
                i7 += (int)(f3 + i8);
                Test.fFld *= i7;
            case 32:
                i7 = (int)l2;
                Test.fFld *= -65009;
                l2 = i7;
                for (d1 = f3; 4 > d1; d1++) {
                    if (b) {
                        i9 -= i7;
                        i8 = (int)l2;
                        Test.bArrFld[(i8 >>> 1) % N][(int)(d1 + 1)] = b;
                    } else if (b) {
                        i7 -= (int)Test.instanceCount;
                    } else {
                        Test.fFld -= -5664988587748805330L;
                    }
                }
                break;
            default:
                l2 = -131;
            }
        }
        vMeth2_check_sum += i7 + Float.floatToIntBits(f3) + i8 + Float.floatToIntBits(f4) + Double.doubleToLongBits(d)
            + l2 + Double.doubleToLongBits(d1) + i9 + (b ? 1 : 0);
    }

    public static void vMeth1(long l1, float f2, short s) {

        int i4=-1, i5=-48148, i6=8;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2921305714L);

        i4 >>= Test.iArrFld[(235 >>> 1) % N];
        i5 = 1;
        while (++i5 < 256) {
            Test.byFld <<= (byte)i5;
            Test.iArrFld = (Test.iArrFld = FuzzerUtils.int1array(N, (int)39));
            i6 = 1;
            do {
                vMeth2(i4);
                try {
                    i4 = (51049 / i4);
                    i4 = (i6 % -31896);
                    i4 = (-227 / Test.iArrFld[i6 + 1]);
                } catch (ArithmeticException a_e) {}
                if (b1) break;
                i4 = i6;
                f2 += i4;
            } while (++i6 < 6);
            switch ((i5 % 2) + 121) {
            case 121:
                i4 = s;
                Test.dArrFld[i5 + 1] = -2524687681L;
                break;
            case 122:
                lArr[i5] += i5;
                i4 = i5;
                break;
            default:
                i4 >>>= 241;
            }
        }
        vMeth1_check_sum += l1 + Float.floatToIntBits(f2) + s + i4 + i5 + i6 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(long l, float f1) {

        int i2=87, i3=2, i10=-3, i11=70;
        short s1=19843;
        boolean b2=true;

        for (i2 = 253; i2 > 9; --i2) {
            vMeth1(l, -1.257F, s1);
            i3 = 79;
            i3 <<= i2;
            Test.instanceCount += i2;
            i3 += 2;
            if (i3 != 0) {
                vMeth_check_sum += l + Float.floatToIntBits(f1) + i2 + i3 + s1 + (b2 ? 1 : 0) + i10 + i11;
                return;
            }
            if (b2) {
                i3 <<= (int)-2018701687L;
                i3 = (int)Test.instanceCount;
            }
            for (i10 = 1; i10 < 7; i10++) {
                s1 = (short)i11;
                i11 += (int)Test.instanceCount;
                i3 = i2;
                s1 &= (short)Test.instanceCount;
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i2 + i3 + s1 + (b2 ? 1 : 0) + i10 + i11;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=-26617, i13=-49, i14=6, i15=4, i16=25173, i17=-112, i18=10, i19=1, i20=39741, i21=-60, i22=0,
            iArr[]=new int[N];
        float f=-110.553F;
        byte by=48;
        double d2=1.39661;

        FuzzerUtils.init(iArr, -1);

        iFld <<= iFld;
        for (i = 1; i < 386; i++) {
            Test.instanceCount = (long)(((i1 - 37794) + f) + ((-(i1 + i)) - f));
            iFld = ((iFld--) * (Math.min(i1, iFld) - by));
        }
        vMeth(Test.instanceCount, f);
        for (int i12 : Test.iArrFld) {
            for (i13 = 1; i13 < 63; i13++) {
                i15 = 1;
                do {
                    Test.sFld += (short)(((i15 * Test.instanceCount) + i14) - Test.instanceCount);
                    Test.fFld += (123 + (i15 * i15));
                } while (++i15 < 2);
                i12 *= iFld;
                i14 *= i16;
                f = i16;
                i16 += iFld;
                i14 += (-43843 + (i13 * i13));
                d2 -= Test.instanceCount;
                i1 *= -47;
                try {
                    iArr[i13 + 1] = (iArr[i13 - 1] / 136);
                    i14 = (i1 % i1);
                    iFld = (i15 / -10);
                } catch (ArithmeticException a_e) {}
                i12 = 102;
            }
            f = 58128;
            Test.instanceCount /= (i14 | 1);
        }
        for (i17 = 21; 392 > i17; ++i17) {
            if (true) break;
            switch (((i14 >>> 1) % 5) + 104) {
            case 104:
            case 105:
                for (i19 = 3; i19 < 68; ++i19) {
                    iArr[i17 - 1] = (int)Test.fFld;
                    i21 = 1;
                    while (++i21 < 2) {
                        i20 += (((i21 * i) + Test.fFld) - Test.fFld);
                        Test.instanceCount = 4269;
                        iFld *= i21;
                    }
                }
                break;
            case 106:
                i20 += iFld;
                break;
            case 107:
                i1 -= i16;
                break;
            case 108:
                i22 *= (int)d2;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("by i13 i14 = " + by + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 d2 = " + i15 + "," + i16 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.sFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.sFld + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
