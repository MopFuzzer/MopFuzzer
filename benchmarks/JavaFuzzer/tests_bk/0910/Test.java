// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=38841L;
    public static int iFld=224;
    public static double dFld=120.15701;
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, boolean b, int i5) {

        int i6=13, i7=-4206, i8=-7, i9=-7, i10=-38590, i11=-64, iArr1[]=new int[N];
        float f1=-54.471F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4013624166L);
        FuzzerUtils.init(iArr1, 92);

        Test.instanceCount -= Test.instanceCount;
        if (b) {
            for (i6 = 361; 1 < i6; --i6) {
                for (i8 = 1; i8 < 5; i8++) {
                    Test.iFld >>= i7;
                    f1 += i8;
                    f1 = i5;
                    for (i10 = 1; 2 > i10; ++i10) {
                        Test.iFld = -33051;
                        Test.iFld *= i4;
                        Test.iFld += (i10 * i10);
                    }
                    lArr[i6] = i8;
                    iArr1[i6] -= i7;
                }
                Test.iFld += -62;
                Test.instanceCount = i7;
            }
        } else if (b) {
            i7 = i7;
        } else if (b) {
            i11 |= (int)Test.instanceCount;
        } else {
            f1 += 7;
        }
        vMeth_check_sum += i4 + (b ? 1 : 0) + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static short sMeth(int i2) {

        double d=2.87538, d1=-73.86934;
        byte by=-39;
        int i3=42732, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 18);

        d += (((--Test.iFld) + 2247) + (Math.abs(Test.iFld) << (i2 * i2)));
        by = (byte)(((-13 << Test.iFld) + (68 - i2)) + iArr[(Test.iFld >>> 1) % N]);
        for (d1 = 18; d1 < 397; d1++) {
            vMeth(13, false, -124);
        }
        i2 = i3;
        long meth_res = i2 + Double.doubleToLongBits(d) + by + Double.doubleToLongBits(d1) + i3 +
            FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public int iMeth() {

        int i12=-51385, i13=43829, i14=21, i15=-194, i16=-60508;
        float f2=2.354F;
        double d2=-4.16110;
        byte by1=76;

        Test.iFld = Test.iFld;
        Test.iFld ^= (sMeth(Test.iFld) >> -33098);
        for (i12 = 1; i12 < 146; ++i12) {
            i14 = 1;
            do {
                for (i15 = 1; i15 < 1; i15++) {
                    f2 = i16;
                    d2 += i16;
                    f2 = (float)d2;
                    Test.instanceCount = i16;
                    i16 -= i12;
                    i13 *= -4026;
                    Test.instanceCount <<= by1;
                }
                i13 = i16;
                Test.instanceCount = (long)d2;
                if (i15 != 0) {
                }
            } while (++i14 < 11);
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d2) + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-65, i1=39178, i17=2, i18=161, i19=-92, i20=-39201, i21=88, i22=19573, i23=-70, i24=62;
        float f=-1.507F;
        short s=17948;
        byte by2=-29;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -11L);

        iArrFld[(i >>> 1) % N] <<= (--i);
        i1 = 1;
        do {
            f *= iMeth();
            Test.iFld = i1;
            i += (i1 * i1);
            i17 = 1;
            do {
                Test.iFld += i1;
                i18 = 1;
                do {
                    Test.instanceCount += (i18 - f);
                    Test.iFld += (i18 ^ i1);
                    iArrFld[i18 - 1] ^= i;
                    Test.dFld *= Test.iFld;
                    Test.instanceCount *= (long)Test.dFld;
                    i >>= Test.iFld;
                    Test.instanceCount >>= i17;
                } while (++i18 < 1);
            } while (++i17 < 72);
            i &= i1;
            for (i19 = 4; i19 < 72; i19++) {
                f += (((i19 * Test.instanceCount) + Test.iFld) - s);
                for (i21 = 1; i21 < 2; i21++) {
                    i22 = i21;
                    by2 -= (byte)i17;
                    i22 -= i21;
                    i = i22;
                    lArr1[i1 - 1] = (long)f;
                    i = Test.iFld;
                    i22 -= (int)Test.instanceCount;
                    if (b1) break;
                }
                for (i23 = 1; 2 > i23; i23 += 2) {
                    lArr1 = lArr1;
                    s = (short)i23;
                }
            }
        } while (++i1 < 348);

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 s i21 = " + i20 + "," + s + "," + i21);
        FuzzerUtils.out.println("i22 by2 b1 = " + i22 + "," + by2 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i23 i24 lArr1 = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
