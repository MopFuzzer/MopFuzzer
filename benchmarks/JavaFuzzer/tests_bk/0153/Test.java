// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2510528751L;
    public static int iFld=-14;
    public static volatile short sFld=10267;
    public static float fFld=-117.26F;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -89);
        FuzzerUtils.init(Test.lArrFld, 54762L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i=8, i1=38063, i2=-109, i3=-4835, i4=171, i5=38662, i6=55315, i7=46, iArr[]=new int[N];
        boolean b=false;
        double d1=47.82505;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(fArr, 105.665F);

        for (i = 8; i < 151; i++) {
            for (i2 = 1; i2 < 11; i2++) {
                Test.iFld = i1;
                for (i4 = 1; i4 < 2; i4++) {
                    Test.instanceCount -= Test.iFld;
                    if (b) break;
                    Test.instanceCount = i3;
                    try {
                        i5 = (i5 % i5);
                        i3 = (-66 % i);
                        i1 = (iArr[i + 1] / iArr[i2 - 1]);
                    } catch (ArithmeticException a_e) {}
                }
                for (i6 = 1; i6 < 2; ++i6) {
                    i7 -= (int)d1;
                    switch ((((i1 >>> 1) % 3) * 5) + 17) {
                    case 24:
                        fArr[i6][i - 1] = Test.iFld;
                        break;
                    case 31:
                        i7 += (((i6 * i2) + Test.sFld) - i1);
                        break;
                    case 25:
                        iArr[(i4 >>> 1) % N] &= i6;
                        i1 += (i6 * i6);
                        break;
                    default:
                        if (i2 != 0) {
                        }
                    }
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + (b ? 1 : 0) + i6 + i7 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l) {

        double d2=28.55154;
        int i8=-3, i9=-241, i10=-4;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 165L);

        l >>= iMeth();
        d2 = 1;
        do {
            Test.iArrFld[(int)(d2)] *= (int)Test.instanceCount;
            Test.iFld -= Test.iFld;
        } while (++d2 < 293);
        Test.iFld = 34310;
        i8 = 1;
        while (++i8 < 175) {
            for (i9 = i8; i9 < 9; i9++) {
                Test.sFld = (short)Test.instanceCount;
                l = l;
                try {
                    Test.iFld = (Test.iFld % Test.iFld);
                    Test.iFld = (Test.iArrFld[i8 + 1] % i10);
                    Test.iFld = (i10 % 157);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (((i9 * Test.instanceCount) + l) - Test.sFld);
                lArr[i8 + 1] = i8;
                Test.instanceCount += i9;
                Test.instanceCount += (i9 | (long)Test.fFld);
                Test.iFld += i10;
            }
        }
        vMeth1_check_sum += l + Double.doubleToLongBits(d2) + i8 + i9 + i10 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth() {

        double d=114.39782;
        byte by=-94;
        int i11=-197, i12=1, i13=-57223, i14=-63;
        boolean b1=false;

        Test.iFld -= (int)(((Test.instanceCount + d) - (Test.instanceCount * d)) + ((Test.iFld * Test.iFld) + (by--)));
        vMeth1(Test.instanceCount);
        i11 = 1;
        do {
            i12 = 1;
            do {
                try {
                    Test.iFld = (i12 / Test.iFld);
                    Test.iFld = (i11 / Test.iFld);
                    Test.iArrFld[i11] = (i12 % i11);
                } catch (ArithmeticException a_e) {}
                Test.iFld = -27342;
                for (i13 = 1; 1 > i13; ++i13) {
                    Test.iFld += (int)Test.fFld;
                    Test.iFld -= (int)Test.instanceCount;
                    Test.iFld -= (int)d;
                    b1 = b1;
                    Test.instanceCount *= Test.sFld;
                    Test.sFld <<= (short)138;
                }
                Test.iFld *= Test.sFld;
                Test.instanceCount += (i12 * i12);
            } while (++i12 < 12);
        } while (++i11 < 132);
        vMeth_check_sum += Double.doubleToLongBits(d) + by + i11 + i12 + i13 + i14 + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i15=-196, i16=50952, i17=198, i18=-9840, i19=-12, i20=24, i21=13, i22=117, i23=-23196;
        double d3=-40.62917, dArr[]=new double[N];
        boolean b2=false;
        byte by1=-113;
        float fArr1[]=new float[N];

        FuzzerUtils.init(dArr, -1.50935);
        FuzzerUtils.init(fArr1, 1.584F);

        vMeth();
        Test.iFld = -8;
        for (i15 = 9; i15 < 284; i15++) {
            Test.iArrFld[i15] *= i15;
            Test.iFld += 120;
            dArr = dArr;
            Test.iFld *= (int)d3;
            if (b2) break;
            i17 = 1;
            do {
                for (i18 = i15; 1 > i18; i18++) {
                    Test.lArrFld[i18 - 1] = Test.iFld;
                    Test.iArrFld[i18 + 1] = (int)Test.instanceCount;
                    i19 = i15;
                }
                try {
                    Test.iArrFld[i15 - 1] = (-5 % i15);
                    i16 = (1145110729 / i17);
                    i16 = (159 / i17);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount -= i16;
                for (i20 = 1; i20 < 1; ++i20) {
                    Test.iFld += (i20 * Test.iFld);
                    try {
                        i19 = (i19 / i17);
                        Test.iFld = (i15 % i19);
                        Test.iArrFld[i20 + 1] = (i21 % Test.iArrFld[i20 - 1]);
                    } catch (ArithmeticException a_e) {}
                    fArr1[i15] = i20;
                    Test.iArrFld[i20 + 1] = i17;
                    i19 -= 11;
                    switch ((i15 % 1) + 71) {
                    case 71:
                        Test.iArrFld[i17 + 1] &= (int)Test.instanceCount;
                        i21 += by1;
                        Test.fFld = i15;
                        break;
                    }
                }
            } while (++i17 < 91);
        }
        i16 = i17;
        i21 += i16;
        for (i22 = 1; i22 < 276; i22 += 2) {
            if (b2) break;
            Test.instanceCount -= i23;
        }

        FuzzerUtils.out.println("i15 i16 d3 = " + i15 + "," + i16 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("b2 i17 i18 = " + (b2 ? 1 : 0) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("by1 i22 i23 = " + by1 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("dArr fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.iArrFld Test.lArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
