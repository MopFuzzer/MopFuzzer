// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static short sFld=28563;
    public static double dFld=1.20477;
    public static float fFld=-1.45F;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 172);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        double d=125.80913, dArr[]=new double[N];
        int i2=0, i3=186, i4=33073;
        boolean b=false, bArr[]=new boolean[N];
        byte by=-91;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 0.61122);

        for (d = 13; d < 340; ++d) {
            i2 -= 84;
            i2 = i2;
            if (b) continue;
            by = (byte)i2;
            for (i3 = 1; i3 < 5; i3++) {
                float f=2.931F;
                i4 >>>= i4;
                Test.iArrFld = Test.iArrFld;
                l = i2;
                by <<= (byte)i2;
                switch ((i3 % 8) + 72) {
                case 72:
                    if (b) continue;
                    bArr = bArr;
                    break;
                case 73:
                    i2 -= i2;
                    Test.sFld += (short)(i3 | (long)f);
                    break;
                case 74:
                    i4 -= i3;
                    break;
                case 75:
                    Test.iArrFld[(int)(d + 1)] -= (int)88.255F;
                    break;
                case 76:
                    by += (byte)(((i3 * by) + i4) - Test.sFld);
                    break;
                case 77:
                    if (b) break;
                case 78:
                    i4 = i3;
                    break;
                case 79:
                    dArr[i3 + 1] = i3;
                    break;
                default:
                    i4 += i4;
                }
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i2 + (b ? 1 : 0) + by + i3 + i4 +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth() {

        int i5=-56497, i6=28308;
        float f1=-95.875F;
        double d1=2.5975;

        vMeth(1509032719L);
        Test.dFld /= (Test.instanceCount | 1);
        i5 = 1;
        do {
            i6 = (int)Test.instanceCount;
            Test.dFld = Test.sFld;
            i6 = (int)Test.dFld;
            f1 -= Test.sFld;
            i6 = (int)Test.instanceCount;
            i6 = (int)Test.instanceCount;
            Test.instanceCount += (long)1.15833;
            if (true) {
                Test.iArrFld[i5 - 1] *= -228;
            }
        } while (++i5 < 279);
        d1 -= f1;
        i6 ^= (int)Test.instanceCount;
        i6 &= i6;
        long meth_res = i5 + i6 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i1=2, i7=4, i8=8, i9=60470, i10=39764, i11=-3;
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -3L);

        lArr[(i1 >>> 1) % N] >>= lMeth();
        for (i7 = 10; 208 > i7; i7++) {
            i1 = i1;
            for (i9 = 1; i9 < 8; i9++) {
                Test.fFld -= Test.instanceCount;
                i8 -= 63380;
                if (b1) {
                    i11 = 1;
                    do {
                        if (b1) continue;
                        i8 <<= 168;
                        Test.iArrFld[i11] *= -159;
                        Test.iArrFld[i11 + 1] = i8;
                        i1 = -234;
                    } while (++i11 < 2);
                    if (b1) break;
                } else {
                    i10 <<= -7;
                }
            }
        }
        long meth_res = i1 + i7 + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-29053, i12=138, i13=-58785, i14=-13, i15=-166;
        double d2=107.69150;
        byte by1=5;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.851F);

        i += ((++i) - iMeth());
        i %= (int)(i | 1);
        d2 = 144;
        do {
            for (i12 = 7; i12 < 174; ++i12) {
                i13 <<= i12;
                bFld = bFld;
                i14 = 1;
                do {
                    i13 += (((i14 * i13) + Test.instanceCount) - Test.fFld);
                    i = i12;
                    i13 = (int)12L;
                    i13 += (((i14 * Test.instanceCount) + i) - Test.sFld);
                    if (bFld) break;
                    Test.fFld = i12;
                } while (++i14 < 2);
                i15 = 1;
                while ((i15 += 3) < 2) {
                    i = (int)d2;
                    Test.iArrFld[i15 + 1] >>= i12;
                    i13 += (i15 | i13);
                    fArr[i15] += 8L;
                    Test.dFld = i14;
                    if (bFld) {
                        Test.instanceCount += i15;
                    } else if (true) {
                        by1 = by1;
                        i += (i15 * i15);
                        try {
                            i = (1942428292 % Test.iArrFld[i12 + 1]);
                            i13 = (-15999 / i);
                            i13 = (i12 / 1342243173);
                        } catch (ArithmeticException a_e) {}
                        Test.fFld -= -142;
                    } else {
                        i += (i15 ^ i);
                        i = by1;
                    }
                    i13 += (i15 ^ i);
                }
                by1 += (byte)(i12 - i15);
                i13 += Test.sFld;
            }
        } while (--d2 > 0);

        FuzzerUtils.out.println("i d2 i12 = " + i + "," + Double.doubleToLongBits(d2) + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("by1 fArr = " + by1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld bFld Test.iArrFld = " + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 :
            0) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
