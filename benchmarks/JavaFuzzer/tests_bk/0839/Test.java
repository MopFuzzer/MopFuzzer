// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-64932L;
    public static double dFld=-1.2251;
    public static int iFld=51404;
    public float fFld=2.206F;
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -76);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-99, i3=10, i4=7, i5=-169, i6=-73, iArr[]=new int[N];
        float f=-38.898F, f1=-2.708F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(lArr, -92L);

        i2 ^= (int)Test.instanceCount;
        i2 = i2;
        i2 <<= (int)-55795L;
        i2 <<= i2;
        switch (((58800 >>> 1) % 6) + 67) {
        case 67:
            i2 = (int)Test.dFld;
            break;
        case 68:
            i2 = i2;
            for (i3 = 12; i3 < 363; i3++) {
                i2 *= -126;
                i4 += i4;
                for (f = 1; f < 5; ++f) {
                    i6 = 1;
                    do {
                        if (i6 != 0) {
                            vMeth1_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 +
                                Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                        f1 -= i2;
                        Test.iFld = i6;
                    } while (++i6 < 2);
                }
            }
        case 69:
            Test.iFld *= (int)f1;
            break;
        case 70:
            iArr = iArr;
            break;
        case 71:
            iArr[(3 >>> 1) % N] = i4;
            break;
        case 72:
            iArr[(i4 >>> 1) % N] += 7;
            break;
        }
        vMeth1_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        float f2=0.688F, fArr[]=new float[N];
        int i7=3, i8=-43582, i9=-8, iArr1[]=new int[N];
        byte by=24;
        short s=-6213, sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr1, 41532);
        FuzzerUtils.init(fArr, -11.688F);
        FuzzerUtils.init(sArr, (short)-18818);

        vMeth1();
        Test.instanceCount *= 65494;
        iArr1[(Test.iFld >>> 1) % N] -= (int)f2;
        f2 += Test.iFld;
        i7 = 1;
        while (++i7 < 322) {
            Test.iFld = by;
            s += (short)(i7 * i7);
            Test.iFld = i7;
            if (false) {
                fArr[i7 + 1] += Test.instanceCount;
            } else {
                for (i8 = 1; 5 > i8; ++i8) {
                    int i10=155;
                    i10 = Test.iFld;
                    sArr[i8 - 1][i8] = (short)Test.iFld;
                    i10 += i8;
                    i10 += i8;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i7 + by + s + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=-23611, i1=-9967, i11=3;
        long l1=10038L;
        short s1=20674;

        for (i = 19; 354 > i; i++) {
            i1 >>= ((Math.abs(i) - iMeth()) + i1);
            i1 -= (int)Test.instanceCount;
            Test.iFld += (i ^ i1);
            Test.iFld = Test.iFld;
            if (false) break;
        }
        for (l1 = 13; 256 > l1; l1++) {
            Test.iFld = (int)l1;
            i11 *= i11;
            i1 |= (int)Test.instanceCount;
            Test.iArrFld[(int)(l1)] *= Test.iFld;
            Test.instanceCount /= (i | 1);
        }
        Test.instanceCount = 7;
        s1 &= (short)i1;
        i1 >>= i;
        vMeth_check_sum += i + i1 + l1 + i11 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i12=-1, i13=-4, i14=36, i15=23137, i16=30711, i17=203, i18=103, i19=157;
        short s2=2586, sArr1[][]=new short[N][N];
        byte by1=-9;
        boolean b=true;
        long lArr1[]=new long[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(lArr1, -36L);
        FuzzerUtils.init(dArr, 0.49643);
        FuzzerUtils.init(sArr1, (short)-9186);

        vMeth();
        for (i12 = 4; i12 < 125; ++i12) {
            Test.instanceCount += (i12 | s2);
            for (i14 = i12; i14 < 207; i14 += 2) {
                int i20=-26745;
                for (i16 = 1; i16 > 1; i16--) {
                    float f3=2.184F;
                    s2 = (short)Test.instanceCount;
                    i17 -= i13;
                    f3 += (float)Test.dFld;
                    by1 = (byte)i12;
                }
                fArrFld[i14 - 1] = Test.iFld;
                Test.instanceCount += (6 + (i14 * i14));
                switch (((i14 % 10) * 5) + 40) {
                case 87:
                    try {
                        Test.iArrFld[i14] = (71 % Test.iArrFld[i12]);
                        Test.iArrFld[i12] = (43182 / i15);
                        Test.iArrFld[i14 - 1] = (i17 / -42933);
                    } catch (ArithmeticException a_e) {}
                    fFld += (i14 * i14);
                    Test.instanceCount -= i16;
                    break;
                case 66:
                    lArr1[i14] += i14;
                    fFld = (float)Test.dFld;
                    break;
                case 55:
                    i17 += Test.iFld;
                    break;
                case 73:
                    Test.instanceCount += i14;
                    i17 *= -2;
                    break;
                case 59:
                    dArr[i12 + 1] *= Test.iFld;
                    i15 += (i14 * i14);
                    for (i18 = 1; i18 < 1; i18++) {
                        Test.iArrFld[i12 - 1] >>= -10;
                    }
                    break;
                case 47:
                    i13 = i19;
                    lArr1[i12] -= Test.iFld;
                    switch (((i12 % 3) * 5) + 95) {
                    case 105:
                        i15 = 14;
                        fFld += i13;
                        fFld = i15;
                    case 98:
                        i20 -= i15;
                        break;
                    case 102:
                        if (b) continue;
                        break;
                    }
                    break;
                case 50:
                    Test.iFld += (((i14 * i18) + i12) - i16);
                    break;
                case 81:
                    Test.instanceCount = i20;
                    break;
                case 79:
                    sArr1[i12 + 1][i14] >>= (short)i15;
                    break;
                case 69:
                default:
                    Test.instanceCount = 43693;
                }
            }
        }

        FuzzerUtils.out.println("i12 i13 s2 = " + i12 + "," + i13 + "," + s2);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 by1 i18 = " + i17 + "," + by1 + "," + i18);
        FuzzerUtils.out.println("i19 b lArr1 = " + i19 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr1));
        FuzzerUtils.out.println("dArr sArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("fFld Test.iArrFld fArrFld = " + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
