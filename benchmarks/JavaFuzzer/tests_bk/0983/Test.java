// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3780362206L;
    public static int iFld=-3;
    public static short sFld=-30402;
    public static float fFld=0.754F;
    public long lFld=2L;
    public long lArrFld[]=new long[N];
    public short sArrFld[]=new short[N];
    public static double dArrFld[][]=new double[N][N];
    public static long lArrFld1[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 96.12015);
        FuzzerUtils.init(Test.lArrFld1, -46904L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by1, int i6, int i7) {

        int i8=-58476, i9=-19651, i10=10249, i11=-51736, i12=1, i13=-11, i14=253, iArr1[]=new int[N];
        boolean b=true;
        byte by2=-60;
        float f1=105.684F, fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, -1.612F);
        FuzzerUtils.init(iArr1, -9);

        fArr1 = FuzzerUtils.float1array(N, (float)83.308F);
        for (i8 = 299; i8 > 9; i8--) {
            switch ((i8 % 10) + 38) {
            case 38:
                b = b;
                if (true) break;
                Test.dArrFld[i8][i8 - 1] = i6;
                break;
            case 39:
                for (i10 = 6; i10 > 1; --i10) {
                    for (i12 = i8; i12 < 2; ++i12) {
                        Test.iFld >>= i10;
                        iArr1[i10] = i12;
                    }
                    i13 *= i10;
                    i14 = 1;
                    while (++i14 < 2) {
                        b = b;
                        Test.sFld += (short)(i14 | Test.sFld);
                        iArr1[i8 - 1] -= i10;
                    }
                }
                break;
            case 40:
                i7 <<= (int)Test.instanceCount;
                break;
            case 41:
                i6 += i8;
                break;
            case 42:
                Test.instanceCount += (-24180 + (i8 * i8));
                break;
            case 43:
                i9 *= i8;
            case 44:
                Test.sFld *= by2;
            case 45:
                Test.instanceCount <<= Test.sFld;
                break;
            case 46:
                i13 = i6;
                break;
            case 47:
                Test.lArrFld1[i8] -= (long)f1;
                break;
            }
        }
        vMeth1_check_sum += by1 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + by2 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(byte by, int i3) {

        int i4=-218, i5=125, i15=-1, i16=39913, i17=-23029, i18=-252, i19=-10394, i20=45, i21=-37592;
        float f2=0.461F;

        for (i4 = 2; i4 < 156; i4++) {
            vMeth1(by, i4, i3);
            i5 += (((i4 * Test.instanceCount) + by) - i5);
            for (i15 = 1; i15 < 10; i15 += 3) {
                Test.instanceCount &= i4;
            }
        }
        f2 = -84;
        for (i17 = 3; 207 > i17; ++i17) {
            i19 = 1;
            do {
                for (i20 = 1; i20 < 1; ++i20) {
                    i18 += (i20 * i20);
                    i5 += (i20 - i19);
                    f2 = i18;
                    i16 = by;
                    i5 = i15;
                    i3 -= i18;
                }
            } while (++i19 < 8);
        }
        vMeth_check_sum += by + i3 + i4 + i5 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 + i19 + i20 + i21;
    }

    public int iMeth(long l, long l1) {

        byte by3=-65;
        int i22=1, i23=137, i24=7, i25=-176, i26=-49532, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 56368);

        vMeth(by3, Test.iFld);
        i22 = 1;
        do {
            try {
                Test.iFld = (44276 / i22);
                Test.iFld = (iArr2[(55732 >>> 1) % N] / i22);
                Test.iFld = (Test.iFld / i22);
            } catch (ArithmeticException a_e) {}
            l1 += (long)2.964F;
            l *= 2L;
            for (i23 = 1; i23 < 4; i23++) {
                Test.fFld += (((i23 * i24) + l) - l1);
                for (i25 = 1; i25 < 2; i25++) {
                    l1 |= Test.instanceCount;
                    i26 *= Test.iFld;
                    l1 = i26;
                    Test.iFld >>>= 240;
                    i26 -= i25;
                }
                Test.iFld *= (int)l;
                if (i24 != 0) {
                }
            }
        } while (++i22 < 389);
        long meth_res = l + l1 + by3 + i22 + i23 + i24 + i25 + i26 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-39018, i1=14988, i2=58484, i27=-7, i28=-10, i29=-54353, i30=-207, i31=1, i32=15470, i33=50594, i34=159,
            i35=76, i36=3, iArr[]=new int[N];
        float f=2.623F, fArr[]=new float[N];
        double d=0.96035, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 0.119006);
        FuzzerUtils.init(byArr, (byte)-27);
        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(fArr, 0.91F);

        i = 1;
        while (++i < 381) {
            for (i1 = i; i1 < 66; ++i1) {
                Test.instanceCount >>= i1;
                dArr[i1 - 1] = (f += Test.instanceCount);
                d += (i2 += (byArr[i] - (i2 - -7)));
                Test.instanceCount += (i1 + Test.instanceCount);
                lArrFld[i] -= -6082;
                iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-48040))));
                fArr[i1 - 1] *= (sArrFld[i + 1] - iMeth(lFld, lFld));
                for (i27 = i1; 1 > i27; ++i27) {
                    Test.iFld *= i28;
                    i28 = Test.sFld;
                    i28 += (int)2.989F;
                }
                for (i29 = 1; 1 < i29; i29 -= 3) {
                    iArr[i] -= i28;
                    i28 += (((i29 * i1) + i1) - i2);
                    i2 -= (int)Test.instanceCount;
                    i2 -= 19203;
                }
                d -= Test.instanceCount;
            }
            i30 = i29;
            for (i31 = i; i31 < 66; ++i31) {
                Test.instanceCount += (((i31 * i1) + i29) - Test.iFld);
                Test.iFld += (int)(179L + (i31 * i31));
                i30 += Test.iFld;
            }
            for (i33 = 4; i33 < 66; i33++) {
                iArr = iArr;
                for (i35 = 1; i35 < 2; ++i35) {
                    d = i30;
                    Test.sFld *= (short)lFld;
                    Test.instanceCount += Test.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f d i27 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("dArr byArr iArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld lFld lArrFld = " + Float.floatToIntBits(Test.fFld) + "," + lFld + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("sArrFld Test.dArrFld Test.lArrFld1 = " + FuzzerUtils.checkSum(sArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
