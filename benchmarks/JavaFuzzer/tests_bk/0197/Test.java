// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6275914305989032218L;
    public static int iFld=-8815;
    public static float fFld=-2.3F;
    public volatile boolean bFld=true;
    public static double dFld=1.42477;
    public static double dArrFld[]=new double[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -2.76613);
        FuzzerUtils.init(Test.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        int i2=214, i3=-24, i4=-4, i5=104;
        float f=-54.258F;

        for (i2 = 16; i2 < 349; ++i2) {
            if (i2 != 0) {
            }
            f -= i2;
            i3 += (i2 ^ i3);
            for (i4 = i2; i4 < 5; i4++) {
                i5 += (i4 + i2);
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f) + i4 + i5;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i1=-10;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(byArr, (byte)90);

        byArr[(i1 >>> 1) % N][(53630 >>> 1) % N] -= (byte)dMeth();
        vMeth1_check_sum += i1 + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        short s=-23674;
        int i6=4, i7=33, i8=-9, i9=-7721, i10=14, iArr1[]=new int[N];
        double d=-1.112423, dArr[]=new double[N];
        float fArr[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, -69.583F);
        FuzzerUtils.init(dArr, 7.84841);
        FuzzerUtils.init(iArr1, 39);
        FuzzerUtils.init(lArr, -2458651639L);

        vMeth1();
        fArr[(0 >>> 1) % N] = Test.iFld;
        s = (short)Test.iFld;
        for (i6 = 217; i6 > 13; i6 -= 2) {
            i8 = 1;
            while (++i8 < 15) {
                dArr[i6 - 1] = Test.fFld;
                iArr1[i8] = (int)Test.fFld;
                for (i9 = 1; 1 > i9; i9++) {
                    s += (short)(-14809 + (i9 * i9));
                    d += i9;
                    Test.instanceCount = i6;
                    Test.iFld = (int)Test.instanceCount;
                    lArr[i6] ^= Test.instanceCount;
                    d = i6;
                    i10 -= (int)Test.fFld;
                }
            }
        }
        vMeth_check_sum += s + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        byte by=29;
        int i=-121, i11=13380, i12=46, i13=1, i14=-56, i15=-25405, i16=-38228, i17=244, i18=-4, i19=14, iArr[]=new
            int[N];
        float f1=-118.367F;
        short s1=24674;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, -154);
        FuzzerUtils.init(lArr1, 5650407611982517612L);

        by = (byte)((iArr[(i >>> 1) % N]--) + (--i));
        vMeth();
        if (bFld) {
            for (f1 = 1; f1 < 169; f1++) {
                i += (int)f1;
                switch ((int)(((f1 % 7) * 5) + 14)) {
                case 20:
                    i11 += (int)f1;
                    break;
                case 28:
                    i += (int)(f1 * f1);
                    break;
                case 34:
                    iArr[(int)(f1)] *= (int)Test.instanceCount;
                    for (i12 = 149; i12 > 5; i12 -= 3) {
                        i13 = Test.iFld;
                        Test.iFld >>= i12;
                        Test.fFld = i13;
                    }
                    Test.instanceCount += (long)(((f1 * i13) + Test.iFld) - s1);
                    break;
                case 18:
                    Test.dArrFld[(int)(f1 - 1)] -= 65267;
                    try {
                        i11 = (i13 / -120);
                        Test.iFld = (i12 % i13);
                        iArr[(int)(f1 - 1)] = (iArr[(int)(f1)] % i13);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 31:
                    i14 -= Test.iFld;
                    i13 += (int)f1;
                    Test.bArrFld[(int)(f1 + 1)] = bFld;
                    break;
                case 15:
                case 26:
                    i += i12;
                    try {
                        iArr[(int)(f1 - 1)] = (53518 / i11);
                        i13 = (3 / i);
                        i13 = (i12 / i);
                    } catch (ArithmeticException a_e) {}
                    for (i15 = 2; i15 < 149; i15++) {
                        Test.iFld += -60624;
                        bFld = bFld;
                        for (i17 = 1; i17 < 2; i17++) {
                            Test.dFld = Test.instanceCount;
                            iArr = FuzzerUtils.int1array(N, (int)-13);
                            i16 += (i17 * i15);
                            i19 |= i13;
                            i11 = (int)Test.instanceCount;
                        }
                    }
                    break;
                default:
                    iArr[(int)(f1 + 1)] <<= Test.iFld;
                }
            }
        } else {
            Test.dFld *= i11;
        }

        FuzzerUtils.out.println("by i f1 = " + by + "," + i + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("s1 i14 i15 = " + s1 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 iArr lArr1 = " + i19 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld Test.dFld Test.dArrFld = " + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
