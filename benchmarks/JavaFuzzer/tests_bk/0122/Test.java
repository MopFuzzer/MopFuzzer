// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=52539L;
    public static byte byFld=10;
    public static double dFld=-2.1294;
    public static float fFld=-2.999F;
    public volatile boolean bFld=false;
    public static double dFld1=118.93552;
    public long lFld=-2918L;
    public long lArrFld[][]=new long[N][N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(boolean b, int i9, int i10) {

        long l2=5375630927217568453L, lArr1[]=new long[N];
        int i11=22971, i12=17261, i13=214, i14=163, iArr1[]=new int[N];

        FuzzerUtils.init(lArr1, -43702L);
        FuzzerUtils.init(iArr1, 23133);

        i10 += -13;
        for (l2 = 5; l2 < 262; ++l2) {
            lArr1[(int)(l2 + 1)] <<= i10;
            i11 *= 28531;
            i10 += (int)l2;
            Test.instanceCount += i9;
            Test.byFld -= (byte)i9;
            i9 += (int)Test.dFld;
        }
        i12 = i11;
        b = b;
        for (i13 = 9; i13 < 175; i13++) {
            Test.instanceCount = i12;
            i10 -= i12;
            i9 += (i13 * i14);
            iArr1[i13 - 1] += i14;
        }
        vMeth1_check_sum += (b ? 1 : 0) + i9 + i10 + l2 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i3=-157, i4=-29629, i5=-74, i6=-19184, i7=-20167, i8=-232, iArr[]=new int[N];
        short s1=-5551;

        FuzzerUtils.init(iArr, 21911);

        for (i3 = 8; i3 < 284; ++i3) {
            for (i5 = i3; i5 < 6; ++i5) {
                for (i7 = 1; i7 < 1; i7++) {
                    s1 >>= (short)(i6 *= Math.min(iArr[i7 - 1], i6++));
                    Test.instanceCount = (((++Test.instanceCount) + (Test.instanceCount - i6)) + (--i6));
                }
                vMeth1(false, i7, 0);
            }
            iArr[i3 - 1] -= Test.byFld;
        }
        i8 = 15014;
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + s1 + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(int i2, long l) {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5045360223859740125L);

        Test.instanceCount >>= (i2--);
        vMeth();
        vSmallMeth_check_sum += i2 + l + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-14, i1=22133, i15=-7, i16=-160, i17=-4, i18=17, i19=239, i20=57649, i21=-119, i22=6, i23=166, i24=2,
            iArr2[]=new int[N];
        short s=-1938;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr2, 61694);
        FuzzerUtils.init(dArr, 1.111126);

        i = (int)((long)((i + Test.byFld) + (s + Test.dFld)) & -12913);
        i1 = 1;
        do {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(199, Test.instanceCount);
            for (i15 = 3; i15 < 201; i15++) {
                for (i17 = i1; i17 < 2; ++i17) {
                    lArrFld[i15 + 1][i1 + 1] *= i15;
                    i += (i17 - Test.instanceCount);
                    Test.fFld -= i18;
                    switch (((i15 % 2) * 5) + 2) {
                    case 9:
                        bFld = bFld;
                        break;
                    case 7:
                        iArr2 = iArr2;
                        dArr[i1 - 1] = Test.dFld1;
                        break;
                    default:
                        i18 = i;
                        try {
                            i16 = (i15 % -933955238);
                            i = (i17 / i16);
                            i16 = (iArr2[i15] % 186);
                        } catch (ArithmeticException a_e) {}
                        i18 *= i;
                    }
                }
                if (bFld) continue;
                i16 *= (int)lFld;
            }
        } while ((i1 += 3) < 377);
        for (i19 = 4; i19 < 367; i19 += 3) {
            for (i21 = 10; i21 < 207; i21++) {
                bFld = bFld;
                i16 >>>= i16;
                for (i23 = 1; i23 < 2; i23++) {
                    switch ((i21 % 7) + 102) {
                    case 102:
                        iArr2[i19] *= i18;
                        break;
                    case 103:
                        lArrFld[i21] = lArrFld[i23 + 1];
                        iArr2[i23 - 1] = i24;
                        i22 *= i1;
                        break;
                    case 104:
                        Test.instanceCount = i19;
                        i20 >>= (int)lFld;
                        break;
                    case 105:
                        i24 += (int)Test.dFld;
                    case 106:
                        Test.dFld += Test.byFld;
                        break;
                    case 107:
                        i16 = i22;
                        break;
                    case 108:
                        i += i18;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i s i1 = " + i + "," + s + "," + i1);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 iArr2 dArr = " + i24 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.dFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.fFld bFld Test.dFld1 = " + Float.floatToIntBits(Test.fFld) + "," + (bFld ? 1 : 0)
            + "," + Double.doubleToLongBits(Test.dFld1));
        FuzzerUtils.out.println("lFld lArrFld = " + lFld + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
