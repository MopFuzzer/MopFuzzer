// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7286654175826623051L;
    public static int iFld=-9271;
    public static double dFld=-33.112225;
    public boolean bFld=false;
    public static volatile float fFld=-124.769F;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i2, int i3) {


        Test.iFld = i2;
        long meth_res = i2 + i3;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth1() {

        int i1=-8, i4=-5, iArr[]=new int[N];
        float f=-2.640F, f1=-3.176F;
        long l1=-2494979824244316170L, lArr[][]=new long[N][N];
        double d1=99.40340;

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(lArr, -115L);

        i1 = 1;
        while (++i1 < 210) {
            Test.iFld = i1;
            iArr[i1] <<= (Test.iFld--);
            f = 1;
            while (++f < 8) {
                short s1=-10192;
                Test.instanceCount += (long)(((f * i1) + i1) - Test.iFld);
                f1 *= (float)dMeth(Test.iFld, i1);
                for (l1 = 1; l1 < 1; l1++) {
                    if (i4 != 0) {
                        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + l1 + i4 +
                            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    i4 += (int)(l1 | i4);
                }
                Test.iFld += (int)Test.instanceCount;
                s1 += (short)205;
                i4 += (int)f;
                lArr[(int)(f - 1)][(int)(f + 1)] -= i1;
                lArr[(int)(f - 1)][(int)(f)] *= (long)d1;
                Test.iFld = s1;
            }
        }
        vMeth1_check_sum += i1 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + l1 + i4 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(double d, long l) {

        int i5=38486;

        vMeth1();
        Test.iFld -= Test.iFld;
        i5 *= i5;
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i5;
    }

    public void mainTest(String[] strArr1) {

        short s=7098;
        int i=-194, i6=2, i7=16770, i8=-34, i9=-1, i10=62693, i11=13522, i12=88, i13=-43, iArr1[]=new int[N];
        byte by=122;
        float f2=-116.215F;

        FuzzerUtils.init(iArr1, 79);

        s <<= (short)i;
        vMeth(Test.dFld, Test.instanceCount);
        Test.instanceCount -= Test.iFld;
        i += Test.iFld;
        i6 = 1;
        do {
            bFld = bFld;
            Test.fFld = by;
            Test.iFld <<= Test.iFld;
            iArr1[i6 - 1] += by;
        } while (++i6 < 213);
        for (i7 = 2; i7 < 322; i7++) {
            i8 -= (int)Test.instanceCount;
            switch ((((i8 >>> 1) % 7) * 5) + 44) {
            case 76:
                s %= (short)(i | 1);
                Test.instanceCount -= Test.iFld;
                for (f2 = 2; f2 < 79; f2++) {
                    s += (short)Test.fFld;
                    s = (short)i9;
                    Test.iFld += (int)((long)f2 | i7);
                    i8 = (int)Test.instanceCount;
                    if (bFld) break;
                    i8 += i;
                    switch ((int)((f2 % 4) + 96)) {
                    case 96:
                        Test.iFld += i6;
                        Test.fFld *= -199;
                        break;
                    case 97:
                        Test.iFld *= (int)Test.instanceCount;
                    case 98:
                        i8 = i8;
                        for (i10 = (int)(f2); i10 < 2; i10++) {
                            Test.fFld = i8;
                            Test.iFld = i9;
                            iArr1[i10] = i6;
                        }
                        break;
                    case 99:
                    default:
                        dArrFld[(int)(f2)] *= i8;
                    }
                }
            case 78:
                i = (int)Test.instanceCount;
                break;
            case 47:
                Test.dFld = i12;
                break;
            case 73:
                i13 += (((i7 * Test.instanceCount) + i7) - by);
            case 72:
                i9 &= i9;
                break;
            case 61:
                Test.dFld -= i7;
            case 49:
                dArrFld = dArrFld;
            }
        }

        FuzzerUtils.out.println("s i i6 = " + s + "," + i + "," + i6);
        FuzzerUtils.out.println("by i7 i8 = " + by + "," + i7 + "," + i8);
        FuzzerUtils.out.println("f2 i9 i10 = " + Float.floatToIntBits(f2) + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("bFld Test.fFld dArrFld = " + (bFld ? 1 : 0) + "," + Float.floatToIntBits(Test.fFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
