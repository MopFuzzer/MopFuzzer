// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1903610173L;
    public static int iFld=-11;
    public static volatile float fFld=-101.645F;
    public static volatile boolean bFld=true;
    public int iFld1=26;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -72L);
        FuzzerUtils.init(Test.iArrFld, -209);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth() {

        double d=1.5099;

        d = ((Test.iFld - Test.iFld) + Test.iFld);
        vMeth_check_sum += Double.doubleToLongBits(d);
    }

    public static void vMeth1(int i8) {

        int i9=13, i10=42743;

        vMeth();
        for (i9 = 7; i9 < 151; i9++) {
            Test.iFld += i9;
            Test.instanceCount = (long)Test.fFld;
            switch ((((i8 >>> 1) % 8) * 5) + 102) {
            case 135:
                Test.lArrFld[i9 - 1] <<= 23523;
                break;
            case 110:
                Test.instanceCount *= i9;
                switch ((((Test.iFld >>> 1) % 5) * 5) + 119) {
                case 137:
                    try {
                        Test.iArrFld[i9] = (i10 % -222);
                        Test.iFld = (Test.iFld % 120);
                        i8 = (i10 % Test.iArrFld[i9]);
                    } catch (ArithmeticException a_e) {}
                    Test.fFld = 8;
                    Test.instanceCount += i9;
                    try {
                        Test.iFld = (i8 / -11987);
                        i8 = (i10 % Test.iArrFld[i9 - 1]);
                        i10 = (Test.iArrFld[i9] / Test.iArrFld[i9 - 1]);
                    } catch (ArithmeticException a_e) {}
                case 132:
                    Test.iFld += i9;
                    Test.iArrFld[i9] = Test.iFld;
                    if (true) break;
                case 123:
                    i10 = Test.iFld;
                    break;
                case 120:
                    Test.iFld = Test.iFld;
                    break;
                case 129:
                    Test.iFld -= i10;
                }
            case 142:
                Test.fFld += (float)-2.121208;
            case 103:
                if (Test.bFld) break;
                break;
            case 131:
                i10 += i9;
            case 133:
                i10 += (i9 ^ i9);
                break;
            case 119:
            case 136:
                try {
                    Test.iArrFld[i9] = (i8 % i8);
                    Test.iArrFld[i9] = (Test.iFld % i9);
                    i10 = (i8 / Test.iFld);
                } catch (ArithmeticException a_e) {}
                break;
            default:
                Test.iArrFld[i9 - 1] = i10;
            }
        }
        vMeth1_check_sum += i8 + i9 + i10;
    }

    public static int iMeth(int i) {

        int i1=-162, i2=-197, i3=29991, i4=-214, i5=-43737, i6=43805, i7=24071, i11=15;
        double d1=73.62982, d2=6.14432;
        short s=-15787;

        vMeth();
        vMeth();
        for (i1 = 2; i1 < 218; i1++) {
            for (i3 = 7; i3 > 1; --i3) {
                i5 += i3;
            }
            for (i6 = 1; i6 < 7; ++i6) {
                Test.iFld -= (int)((Integer.reverseBytes(i3) * (--i5)) - (Math.min(Test.instanceCount,
                    Test.instanceCount) - (-(i1 + i4))));
            }
            i4 <<= (int)((Math.abs(d1) + (s * i5)) + Math.abs(Test.instanceCount--));
            vMeth();
            vMeth();
            vMeth1(i);
        }
        for (d2 = 16; d2 < 302; d2++) {
            Test.iFld >>= i7;
            i7 += (int)d2;
            Test.instanceCount += (long)(((d2 * Test.instanceCount) + i3) - Test.iFld);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d1) + s +
            Double.doubleToLongBits(d2) + i11;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=222, i13=52, i14=19977, i15=13, i16=-36929, i17=-35299;
        byte by=23, byArr[][]=new byte[N][N];
        double d3=5.76651, d4=27.33190, dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)34);
        FuzzerUtils.init(dArr, -61.114992);

        byArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] = (byte)((Math.max(Test.instanceCount, Test.instanceCount)
            - Test.iFld) >>> (iMeth(Test.iFld) * 1182626449L));
        Test.iArrFld[(Test.iFld >>> 1) % N] -= Test.iFld;
        i12 = 1;
        while (++i12 < 236) {
            if (Test.bFld) {
                switch ((i12 % 8) + 106) {
                case 106:
                    Test.iArrFld[(i12 >>> 1) % N] <<= (int)-54389L;
                    for (i13 = 2; i13 < 106; i13++) {
                        Test.instanceCount += Test.instanceCount;
                        i14 *= i14;
                        for (i15 = 1; 2 > i15; i15++) {
                            i14 += 2;
                            Test.fFld = i14;
                            Test.lArrFld = FuzzerUtils.long1array(N, (long)-39537L);
                            if (Test.bFld) {
                                Test.lArrFld[i13] += i13;
                                Test.instanceCount = i16;
                                Test.iFld *= iFld1;
                            } else {
                                i16 = by;
                                i14 = i12;
                                iFld1 += (((i15 * i16) + Test.fFld) - Test.fFld);
                            }
                            Test.iFld = (int)Test.instanceCount;
                            switch ((((i13 >>> 1) % 10) * 5) + 37) {
                            case 84:
                                Test.instanceCount += Test.instanceCount;
                                Test.iArrFld[(Test.iFld >>> 1) % N] = 33;
                                if (Test.bFld) {
                                    i14 += i14;
                                    Test.instanceCount += (((i15 * by) + Test.instanceCount) - i15);
                                    i14 >>= -59867;
                                    iFld1 = (int)-99.49868;
                                } else if (false) {
                                    Test.instanceCount *= i16;
                                } else {
                                    Test.instanceCount += 146;
                                }
                                break;
                            case 66:
                                try {
                                    Test.iFld = (i12 % i14);
                                    Test.iArrFld[i13 + 1] = (i15 % i12);
                                    i16 = (i15 / i13);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 59:
                                Test.fFld = i15;
                            case 39:
                                i17 = (int)Test.instanceCount;
                            case 77:
                                i16 += (i15 | Test.instanceCount);
                                break;
                            case 64:
                                Test.iFld += (i15 - i12);
                                break;
                            case 41:
                                d3 = Test.instanceCount;
                                break;
                            case 49:
                                iFld1 += (i15 - i12);
                                break;
                            case 87:
                                Test.iFld += (i15 - i15);
                                break;
                            case 63:
                            default:
                                Test.instanceCount = i15;
                            }
                        }
                    }
                    break;
                case 107:
                    d4 += i17;
                    break;
                case 108:
                    Test.iFld += (((i12 * i12) + Test.instanceCount) - i14);
                    break;
                case 109:
                    Test.fFld = i14;
                    break;
                case 110:
                case 111:
                    i14 >>= i12;
                    break;
                case 112:
                    d4 = Test.instanceCount;
                    break;
                case 113:
                    Test.bFld = Test.bFld;
                    break;
                }
            } else {
                i16 -= iFld1;
            }
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 by = " + i15 + "," + i16 + "," + by);
        FuzzerUtils.out.println("i17 d3 d4 = " + i17 + "," + Double.doubleToLongBits(d3) + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("byArr dArr = " + FuzzerUtils.checkSum(byArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld iFld1 Test.lArrFld = " + (Test.bFld ? 1 : 0) + "," + iFld1 + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest vMeth1
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
