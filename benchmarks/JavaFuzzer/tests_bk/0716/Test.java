// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static double dFld=54.20211;
    public float fFld=-1.635F;
    public int iFld=67;
    public static short sArrFld[]=new short[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-13445);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i=-50, iArr[]=new int[N];
        double d=-21.88891;
        float f=-67.344F;

        FuzzerUtils.init(iArr, -5);

        iArr[(i >>> 1) % N] &= (int)((Math.abs(d) * (-(++f))) * Math.min(-55239, i | 52646));
        i >>= (int)Math.min(-6164223457341942733L, Test.instanceCount);
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i6) {

        int i7=-77, i8=-616, i9=-6, i10=6, i11=14979, iArr2[]=new int[N];
        float f1=-1.216F;
        short s=30679;
        byte by=-67;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 4209617290L);
        FuzzerUtils.init(iArr2, -130);

        for (i7 = 7; 132 > i7; i7++) {
            for (i9 = 1; i9 < 13; i9++) {
                if (i7 != 0) {
                    vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + s + by + (b ? 1 : 0)
                        + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
                    return;
                }
                i8 *= i8;
                switch ((i7 % 9) + 89) {
                case 89:
                    switch ((i9 % 5) + 28) {
                    case 28:
                        Test.sArrFld[i7 + 1] &= (short)9;
                        break;
                    case 29:
                        i8 += (int)f1;
                        i11 = 1;
                        do {
                            i8 *= i6;
                            i10 += i9;
                            f1 *= i11;
                            f1 += (i11 - s);
                        } while (++i11 < 2);
                        i8 = i7;
                        break;
                    case 30:
                        i6 -= i10;
                        break;
                    case 31:
                        Test.sArrFld[i9 - 1] = (short)Test.instanceCount;
                        break;
                    case 32:
                        by += (byte)(i9 * f1);
                        break;
                    default:
                        lArr[i7 - 1] *= 9;
                    }
                case 90:
                    i6 += (int)Test.dFld;
                    break;
                case 91:
                    i8 += (i9 + i10);
                    break;
                case 92:
                    Test.instanceCount = i6;
                    break;
                case 93:
                    if (b) continue;
                    break;
                case 94:
                    iArr2[i7 - 1] += -196;
                    break;
                case 95:
                    if (b) break;
                case 96:
                    Test.instanceCount -= (long)f1;
                case 97:
                    lArr[(i10 >>> 1) % N] = i7;
                    break;
                }
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + s + by + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public int iMeth() {

        int i12=7, i13=-6, i14=12, i15=-45815, i16=-53278, i17=-10, i18=349, iArr3[]=new int[N];
        double d1=63.40604;
        short s1=-17487;

        FuzzerUtils.init(iArr3, -170);

        vMeth1(iFld);
        for (i12 = 7; i12 < 191; i12++) {
            for (i14 = i12; 9 > i14; ++i14) {
                Test.instanceCount += i14;
                switch (((i12 % 10) * 5) + 10) {
                case 21:
                    i15 += (int)fFld;
                    for (d1 = 1; d1 < 1; d1++) {
                        Test.instanceCount += (long)(((d1 * fFld) + i14) - i15);
                    }
                    break;
                case 46:
                    fFld += i14;
                    iFld += i12;
                    break;
                case 41:
                    iFld = (int)Test.instanceCount;
                    break;
                case 26:
                    for (i17 = 1; i17 < 1; i17 += 3) {
                        i13 <<= i13;
                        iArr3[i14] = i16;
                        fFld -= Test.instanceCount;
                    }
                    break;
                case 58:
                    iFld += (((i14 * iFld) + i14) - Test.instanceCount);
                    break;
                case 56:
                    Test.instanceCount *= -12;
                    break;
                case 15:
                    fFld += i12;
                    break;
                case 30:
                case 36:
                    Test.dFld -= -17.51795;
                case 31:
                    i15 += i14;
                    break;
                default:
                    s1 = (short)i16;
                }
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + i18 + s1 +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i2) {

        int i3=-43420, i4=51155, i5=10, i19=1, i20=58788;
        boolean b1=true;

        i3 = 1;
        do {
            for (i4 = 1; i4 < 9; ++i4) {
                vSmallMeth();
                Test.instanceCount += (long)(((i3 + fFld) - (++i2)) - Math.min(iMeth(), -45888));
                if (b1) {
                    iFld -= (int)Test.instanceCount;
                    i5 = (int)Test.instanceCount;
                    vMeth_check_sum += i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + i19 + i20;
                    return;
                } else {
                    if (i3 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + i19 + i20;
                        return;
                    }
                    i5 = (int)Test.instanceCount;
                    for (i19 = i4; i19 < 2; ++i19) {
                        Test.dFld = i2;
                    }
                    i5 >>= 13;
                }
                Test.instanceCount >>>= i20;
                Test.instanceCount -= 38224;
                try {
                    iFld = (159 % iFld);
                    i2 = (-30 / iFld);
                    i20 = (i2 % i3);
                } catch (ArithmeticException a_e) {}
            }
        } while (++i3 < 186);
        vMeth_check_sum += i2 + i3 + i4 + i5 + (b1 ? 1 : 0) + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        int i1=-211, i21=-118, i22=65441, i23=148, i24=-7, i25=58827, i26=138, i27=0, i28=100, i29=-21662, iArr1[]=new
            int[N];
        byte by1=-101;
        double d2=-57.114705;

        FuzzerUtils.init(iArr1, 2);

        for (int smallinvoc=0; smallinvoc<227; smallinvoc++) vSmallMeth();
        Test.dFld = (iArr1[(i1 >>> 1) % N]++);
        vSmallMeth();
        vMeth(29);
        for (i21 = 12; i21 < 309; i21++) {
            Test.instanceCount += (i21 * Test.instanceCount);
            by1 = (byte)1171;
            i1 = -10;
            i22 += (i21 | (long)fFld);
            iFld -= (int)-1.247F;
            iFld += i21;
            fFld /= (i21 | 1);
            fFld = iFld;
            fFld += i22;
        }
        i1 += iFld;
        for (d2 = 7; d2 < 145; ++d2) {
            Test.instanceCount += (13535 + (d2 * d2));
            lArrFld[(int)(d2)] <<= i22;
            i1 += (int)d2;
            for (i24 = (int)(d2); i24 < 182; i24++) {
                for (i26 = 1; i26 < 1; i26++) {
                    i22 = i26;
                }
                for (i28 = 1; 1 > i28; ++i28) {
                    fFld = -1.466F;
                }
                Test.instanceCount += i24;
                lArrFld[(int)(d2 - 1)] *= (long)Test.dFld;
                i27 += (((i24 * iFld) + i26) - Test.instanceCount);
                Test.instanceCount += (i24 * i24);
                try {
                    iFld = (iArr1[i24 - 1] / i24);
                    i25 = (-35445 % i1);
                    i27 = (116 % i28);
                } catch (ArithmeticException a_e) {}
                i25 = (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("i1 i21 i22 = " + i1 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by1 d2 i23 = " + by1 + "," + Double.doubleToLongBits(d2) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("iFld Test.sArrFld lArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
