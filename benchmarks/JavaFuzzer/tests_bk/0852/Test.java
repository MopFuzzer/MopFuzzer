// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static int iFld=9;
    public int iFld1=-6632;
    public static int iFld2=33965;
    public int iFld3=-4;
    public float fArrFld[]=new float[N];
    public static volatile short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)26240);
        FuzzerUtils.init(Test.iArrFld, 189);
        FuzzerUtils.init(Test.lArrFld, -2325401028528683307L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(boolean b, int i4) {

        int iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, -20423);

        iArr1[(i4 >>> 1) % N] -= i4;
        i4 += i4;
        long meth_res = (b ? 1 : 0) + i4 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1() {

        int i=9, i1=-210, i2=-28789, i3=133, i5=10, i6=46, i7=86, iArr[][]=new int[N][N];
        double d=0.35055, dArr[]=new double[N];
        boolean b1=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -135);
        FuzzerUtils.init(dArr, -2.51133);
        FuzzerUtils.init(lArr, 30178L);

        for (i = 10; i < 273; i++) {
            iArr[i + 1][i] += (int)(--dArr[i - 1]);
            for (i2 = 6; i2 > 1; i2 -= 2) {
                d += ((fArrFld[i2]++) - ((++Test.instanceCount) * iMeth(b1, 41589)));
                i1 += (i2 - i2);
                i1 = -7;
                for (i5 = 1; i5 < 3; ++i5) {
                    lArr[i2 + 1] = 19;
                    i3 -= i1;
                    i7 += (196 + (i5 * i5));
                    iArr[i][i5] += i;
                    i6 += i5;
                    iArr[(1 >>> 1) % N][i5] |= i2;
                }
                Test.sArrFld[i - 1] -= (short)14;
            }
            Test.instanceCount = i6;
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i5 + i6 + i7 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {

        int i8=2622, i9=-11, i10=-12, i11=653, i12=49065, i13=1, iArr2[][]=new int[N][N];
        float f=-2.208F;

        FuzzerUtils.init(iArr2, 0);

        vMeth1();
        for (i8 = 18; i8 < 379; ++i8) {
            for (i10 = 1; i10 < 5; ++i10) {
                Test.instanceCount = i9;
                for (f = i10; f < 2; f++) {
                    iArr2[i10 - 1][i8 + 1] >>= i9;
                    Test.instanceCount -= i8;
                }
                Test.instanceCount = 1;
                Test.instanceCount = i10;
                i12 = i11;
                i13 = 1;
                do {
                    iArr2[i8 - 1][i8 + 1] = -59;
                    if (i11 != 0) {
                        vMeth_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + i13 +
                            FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    i11 += i13;
                    i11 = (int)f;
                } while (++i13 < 2);
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + i13 + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i14=12, i15=6850, i16=191, i17=-12, i18=-38845;
        byte by=7, byArr[]=new byte[N];
        double d1=-91.69993;
        float f1=0.864F;
        long l=11L;
        short s=4500;
        boolean b2=false;

        FuzzerUtils.init(byArr, (byte)-10);

        vMeth();
        for (i14 = 9; 290 > i14; ++i14) {
            i15 >>>= (int)Test.instanceCount;
            i15 += i15;
            by *= (byte)i14;
            d1 %= 7;
            switch ((((235 >>> 1) % 3) * 5) + 29) {
            case 40:
                f1 -= i14;
                l = 1;
                while (++l < 89) {
                    i15 = i14;
                    switch (((i14 % 1) * 5) + 23) {
                    case 28:
                        s += (short)l;
                    default:
                        Test.instanceCount *= (long)99.8464;
                    }
                    i15 += (int)l;
                    f1 = Test.iFld;
                    i15 -= (int)Test.instanceCount;
                    for (i16 = 1; 1 > i16; ++i16) {
                        Test.iFld += (((i16 * i16) + Test.iFld) - i17);
                        i15 >>= i15;
                        switch ((int)(((l % 1) * 5) + 90)) {
                        case 92:
                            switch ((i16 % 6) * 5) {
                            case 21:
                                Test.instanceCount = i17;
                                Test.instanceCount += i14;
                                switch ((i16 % 8) + 24) {
                                case 24:
                                    Test.iArrFld[i16 + 1] = (int)d1;
                                    Test.instanceCount = (long)f1;
                                case 25:
                                    byArr[(int)(l + 1)] <<= (byte)l;
                                    Test.instanceCount -= 90;
                                case 26:
                                    iFld1 >>= (int)-11L;
                                    i17 >>= iFld1;
                                case 27:
                                    i18 += i16;
                                    break;
                                case 28:
                                case 29:
                                    i17 += (((i16 * i18) + l) - i17);
                                    break;
                                case 30:
                                    Test.lArrFld[i16 - 1] = i17;
                                case 31:
                                    f1 -= i14;
                                }
                                break;
                            case 8:
                                b2 = b2;
                            case 14:
                                i17 += (((i16 * i15) + Test.iFld2) - l);
                                break;
                            case 1:
                                s += (short)(((i16 * iFld3) + i18) - iFld1);
                                break;
                            case 24:
                                Test.lArrFld[(int)(l)] -= Test.instanceCount;
                                break;
                            case 15:
                            default:
                                Test.iArrFld[i16 + 1] += Test.iFld2;
                            }
                        default:
                            d1 *= i17;
                        }
                    }
                }
                break;
            case 44:
                Test.iArrFld[i14 - 1] ^= s;
                break;
            case 42:
                Test.iArrFld[i14] *= (int)f1;
                break;
            default:
                d1 *= i16;
            }
        }

        FuzzerUtils.out.println("i14 i15 by = " + i14 + "," + i15 + "," + by);
        FuzzerUtils.out.println("d1 f1 l = " + Double.doubleToLongBits(d1) + "," + Float.floatToIntBits(f1) + "," + l);
        FuzzerUtils.out.println("s i16 i17 = " + s + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 b2 byArr = " + i18 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld iFld1 = " + Test.instanceCount + "," + Test.iFld + "," +
            iFld1);
        FuzzerUtils.out.println("Test.iFld2 iFld3 fArrFld = " + Test.iFld2 + "," + iFld3 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test.sArrFld Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
