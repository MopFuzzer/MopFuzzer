// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-381886504L;
    public static boolean bFld=false;
    public byte byFld=-70;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -11);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i12, long l1) {

        double d1=-13.118635;
        int i14=4, i15=-252, i16=-220, i17=32673, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 139);

        iArr[(i12 >>> 1) % N] >>= 0;
        d1 = 341;
        do {
            i12 = (int)l1;
            i12 += (int)l1;
            iArr[(int)(d1)] |= 154;
            for (i14 = 1; 5 > i14; ++i14) {
                l1 = i12;
                for (i16 = 2; i16 > 1; --i16) {
                    iArr[i16] = i16;
                    f1 -= i14;
                    iArr[i14 + 1] >>= i14;
                    i15 += (i16 ^ i17);
                    l1 = Test.instanceCount;
                    i15 >>= i15;
                    Test.instanceCount += i16;
                }
            }
        } while (--d1 > 0);
        long meth_res = Float.floatToIntBits(f1) + i12 + l1 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, int i4, int i5) {

        int i6=26506, i7=4, i8=8542, i9=62527, i10=-133, i11=0;
        boolean b=false;
        double d=-2.18730;
        byte by=29;
        float f2=48.921F;

        for (i6 = 12; i6 < 207; i6++) {
            for (i8 = 1; i8 < 8; ++i8) {
                Test.instanceCount >>= (i4 ^= 1);
                for (i10 = 2; i10 > 1; i10 -= 2) {
                    b = ((--i9) != i9);
                    Test.instanceCount = (long)(((d - i8) - (-(i7 - -3971))) + ((225 + (Test.instanceCount++)) - (d -
                        i9)));
                    i9 += (i10 + Test.instanceCount);
                    i5 += (((i10 * by) + i11) - i4);
                    Test.instanceCount += ((iMeth(f2, i7, Test.instanceCount) - Test.instanceCount) % (i5 | 1));
                    Test.iArrFld[i6] = 3;
                }
                Test.instanceCount += (((i8 * i11) + Test.instanceCount) - i6);
                Test.instanceCount += i8;
                if (i10 != 0) {
                }
                i9 = by;
                i3 += (int)3719027408L;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + Double.doubleToLongBits(d) + by +
            Float.floatToIntBits(f2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(long l, int i2) {

        float f=-1.887F;

        f -= (-((Test.instanceCount - i2) - lMeth(i2, i2, i2)));
        vMeth_check_sum += l + i2 + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=13, i1=35009, i18=7, i19=-12, i20=48476, i21=156, i22=181, i23=63236, i24=2, i25=36850, i26=-19,
            i27=-50987, i28=-52668, i29=-11;
        float f3=-2.398F, fArr[]=new float[N];
        double d2=-64.8193;
        byte byArr[]=new byte[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(byArr, (byte)-84);
        FuzzerUtils.init(sArr, (short)17167);
        FuzzerUtils.init(fArr, 108.603F);

        for (i = 2; i < 224; ++i) {
            vMeth(Test.instanceCount, i);
            for (f3 = 2; f3 < 113; f3++) {
                i18 += (int)(f3 + i1);
                i1 += -65;
                i18 -= i1;
                Test.instanceCount = i;
            }
        }
        for (i19 = 12; i19 < 192; i19++) {
            Test.iArrFld[i19] += i;
            for (i21 = 5; i21 < 139; i21++) {
                if (Test.bFld) continue;
                byArr = byArr;
                for (i23 = 1; i23 < 2; ++i23) {
                    d2 -= 6;
                    Test.instanceCount += (-22 + (i23 * i23));
                }
                Test.iArrFld[i21 + 1] |= 42;
            }
            i25 = 1;
            while (++i25 < 139) {
                Test.instanceCount >>= i23;
                Test.instanceCount += (1 + (i25 * i25));
            }
            for (i26 = 139; 8 < i26; --i26) {
                if (Test.bFld) {
                    i20 += 13;
                }
                for (i28 = 2; 1 < i28; --i28) {
                    sArr[i28] += (short)Test.instanceCount;
                    i27 = i1;
                    Test.instanceCount = i24;
                }
                i22 = i29;
            }
            i20 -= i21;
            fArr[i19 + 1] = i27;
        }
        byFld /= (byte)(i23 | 1);

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 d2 i25 = " + i24 + "," + Double.doubleToLongBits(d2) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 byArr sArr = " + i29 + "," + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld byFld = " + Test.instanceCount + "," + (Test.bFld ? 1 :
            0) + "," + byFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
