// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public int iFld=-23167;
    public float fFld=-2.244F;
    public byte byFld=-41;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 89);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i2) {

        int i3=-161, i4=33539, i5=-7, i6=-30247, i7=197;
        short s=18448;
        long l2=-2839245143511428214L;
        float f=72.582F;

        i3 = 1;
        while (++i3 < 179) {
            i4 = 1;
            while ((i4 += 3) < 9) {
                Test.instanceCount = i4;
                i2 -= -73;
                s = (short)i3;
                Test.instanceCount = 15499;
                i2 = -11;
                Test.iArrFld[i3] &= i4;
            }
            if (i4 != 0) {
            }
        }
        s += (short)28937;
        for (l2 = 7; l2 < 148; l2++) {
            for (i6 = 11; i6 > 1; i6 -= 2) {
                i7 = i4;
            }
            i2 += (int)(((l2 * f) + i4) - f);
            try {
                i7 = (-231 / i4);
                i7 = (Test.iArrFld[(int)(l2 - 1)] / Test.iArrFld[(int)(l2 + 1)]);
                i5 = (-239 / i2);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = i2 + i3 + i4 + s + l2 + i5 + i6 + i7 + Float.floatToIntBits(f);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public int iMeth1(long l1) {

        double d=-47.18299;
        int i8=163, i9=-5;
        long l3=0L;
        boolean b=true;

        d = fMeth(13378);
        i8 = 1;
        do {
            switch ((i8 % 1) + 47) {
            case 47:
                l1 *= (long)-122.881F;
                break;
            }
            iFld *= (int)6L;
            l3 = 1;
            while (++l3 < 12) {
                Test.iArrFld[i8 - 1] >>= i9;
            }
            if (b) continue;
            Test.iArrFld[i8 - 1] >>>= i9;
            i9 = i9;
            fFld += (221 + (i8 * i8));
            if (b) continue;
            l1 >>= byFld;
        } while (++i8 < 134);
        long meth_res = l1 + Double.doubleToLongBits(d) + i8 + l3 + i9 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(byte by, long l, int i1) {

        double d1=0.63412;
        int i10=15940;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -163L);
        FuzzerUtils.init(fArr, -38.638F);

        if (bFld) {
            i1 -= (int)((iMeth1(l) >> l) & iFld);
            for (d1 = 12; 237 > d1; ++d1) {
                Test.instanceCount >>>= i1;
                l -= (long)fFld;
            }
            Test.iArrFld[(iFld >>> 1) % N] = (int)l;
        } else {
            Test.iArrFld[(-118 >>> 1) % N] = i1;
        }
        Test.iArrFld[(i10 >>> 1) % N] += iFld;
        bFld = bFld;
        for (long l4 : lArr) {
            iFld = (int)l4;
            if (i1 != 0) {
            }
            fFld = i1;
            Test.iArrFld[(i10 >>> 1) % N] = i1;
        }
        Test.iArrFld[(i10 >>> 1) % N] = (int)Test.instanceCount;
        long meth_res = by + l + i1 + Double.doubleToLongBits(d1) + i10 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-31866, i11=0, i12=13356, i13=7361, i14=-64, i15=232, i16=70;
        long l5=5715L, lArr1[]=new long[N];
        short s1=32671, sArr[]=new short[N];
        float fArr1[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(sArr, (short)29317);
        FuzzerUtils.init(fArr1, 2.688F);
        FuzzerUtils.init(dArr, -28.56253);
        FuzzerUtils.init(lArr1, 29239L);

        Test.iArrFld[(i >>> 1) % N] &= iMeth(byFld, Test.instanceCount, iFld);
        fFld -= 3L;
        l5 = 1;
        while (++l5 < 374) {
            for (i11 = 2; i11 < 67; ++i11) {
                Test.iArrFld[(int)(l5)] = (int)-105.52277;
                fFld *= i;
                switch (((i11 % 6) * 5) + 120) {
                case 146:
                    switch ((int)(((l5 % 4) * 5) + 100)) {
                    case 119:
                        fFld += i;
                        break;
                    case 114:
                        i <<= i11;
                        i >>= i;
                        for (i13 = i11; i13 < 2; ++i13) {
                            Test.iArrFld[(int)(l5 - 1)] = iFld;
                            Test.iArrFld[i13] = i14;
                            if (bFld) {
                                i *= i14;
                            } else if (bFld) {
                                if (bFld) break;
                            }
                            iFld += (int)l5;
                            i14 += (int)fFld;
                            iFld = i11;
                            Test.iArrFld[(int)(l5 - 1)] >>>= i14;
                            sArr[i11] <<= (short)i14;
                            fArr1[i11] += i12;
                            Test.iArrFld[(int)(l5 - 1)] *= -125;
                        }
                        break;
                    case 116:
                        for (i15 = 1; i15 < 2; i15++) {
                            dArr[i11] -= iFld;
                            Test.instanceCount += (i15 + byFld);
                            if (false) break;
                            if (bFld) continue;
                            s1 *= (short)-4;
                        }
                        break;
                    case 117:
                        Test.instanceCount += (i11 + i11);
                        break;
                    default:
                        lArr1[i11 - 1] |= i;
                    }
                    break;
                case 126:
                    s1 += (short)(((i11 * Test.instanceCount) + Test.instanceCount) - i14);
                case 128:
                    i -= (int)l5;
                    break;
                case 141:
                    i16 &= i15;
                    break;
                case 127:
                    Test.instanceCount += (i11 | i13);
                    break;
                case 124:
                    Test.instanceCount *= i11;
                default:
                    i12 /= -23752;
                }
            }
        }

        FuzzerUtils.out.println("i l5 i11 = " + i + "," + l5 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 s1 = " + i15 + "," + i16 + "," + s1);
        FuzzerUtils.out.println("sArr fArr1 dArr = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("byFld bFld Test.iArrFld = " + byFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
