// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3057275818106974847L;
    public static int iFld=-152;
    public static boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 20);
        FuzzerUtils.init(Test.lArrFld, 1717776140L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9) {

        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-31716);

        sArr[(Test.iFld >>> 1) % N] = (short)Test.iFld;
        vMeth1_check_sum += i9 + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(long l) {

        int i7=-57887, i8=-23729, i10=-4, i11=0;
        float f1=-126.986F;
        double d=-87.128603;
        byte by=70;
        boolean b=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        l = ((Test.iFld++) - Test.lArrFld[(Test.iFld >>> 1) % N]);
        Test.iFld = (int)Math.abs(Math.abs(Test.iFld - Test.instanceCount));
        for (i7 = 14; i7 < 231; i7++) {
            vMeth1(Test.iFld);
            l *= i8;
            f1 -= i8;
            Test.iArrFld[i7] ^= i8;
            d = 1;
            while (++d < 7) {
                Test.iFld %= (int)(i7 | 1);
                by *= (byte)1.68872;
                i8 += (int)(d + Test.iFld);
                for (i10 = 1; i10 < 1; i10++) {
                    double d1=34.75618;
                    d1 += -72.78264;
                    bArr[(int)(d + 1)] = b;
                    Test.iArrFld = FuzzerUtils.int1array(N, (int)38418);
                }
            }
        }
        vMeth_check_sum += l + i7 + i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + by + i10 + i11 + (b ?
            1 : 0) + FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i5) {

        float f=-68.638F, f2=1.707F;
        int i6=12093, i12=7607, i13=30590, i14=-12307, i15=-16;
        double d2=-63.108248;
        byte by1=47;

        for (f = 300; f > 7; f -= 2) {
            vMeth(2656716472L);
            for (d2 = 1; d2 < 11; ++d2) {
                f2 -= i13;
                i6 *= i12;
                Test.bFld = false;
                switch ((int)((f % 1) + 42)) {
                case 42:
                    Test.iArrFld[(int)(d2 + 1)] = (int)28.481F;
                    break;
                }
                Test.lArrFld[(int)(f - 1)] += -1;
                i12 %= (int)((long)(f2) | 1);
                Test.instanceCount += (long)(d2 - i6);
            }
            for (i14 = (int)(f); i14 < 11; ++i14) {
                Test.iArrFld[(int)(f + 1)] = Test.iFld;
            }
            i15 += (int)f;
            i15 += (int)(((f * by1) + i6) - i6);
        }
        long meth_res = i5 + Float.floatToIntBits(f) + i6 + Double.doubleToLongBits(d2) + i12 +
            Float.floatToIntBits(f2) + i13 + i14 + i15 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-43473, i1=111, i2=11016, i3=-56, i4=-107, i16=14, i17=-14, i18=9, i19=-10, i20=-7, i21=16;
        double d3=0.93237, d4=-11.56361;
        short s=-3150;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.881F);

        for (i = 9; i < 146; i++) {
            for (i2 = 3; i2 < 183; i2++) {
                Test.iFld = 131;
                i4 = 1;
                do {
                    Test.iArrFld[i2 - 1] = (int)((Test.iArrFld[i4 - 1] - iMeth(Test.iFld)) & 525619873415198594L);
                } while (++i4 < 2);
                i16 = 1;
                while (++i16 < 2) {
                    d3 = 0.80711;
                }
            }
            Test.instanceCount += (i | Test.iFld);
        }
        i3 >>= i;
        s += (short)i2;
        for (i17 = 14; i17 < 230; i17++) {
            Test.lArrFld[i17 + 1] >>= i16;
            Test.iFld = i3;
            try {
                Test.iArrFld[i17] = (150 % i1);
                Test.iArrFld[i17 + 1] = (Test.iArrFld[i17 + 1] % i18);
                Test.iFld = (i18 % 31610);
            } catch (ArithmeticException a_e) {}
            i1 = (int)d3;
            Test.instanceCount >>= Test.instanceCount;
            Test.iFld -= 4;
            i3 = i2;
            switch ((i17 % 4) + 125) {
            case 125:
                for (d4 = 5; d4 < 116; ++d4) {
                    fArr[(int)(d4 - 1)] = 2;
                    i19 |= (int)Test.instanceCount;
                }
                Test.instanceCount *= i16;
                for (i20 = 2; i20 < 116; i20++) {
                    i19 += 9;
                    fArr = fArr;
                    i19 += i20;
                    i1 += (i20 + i4);
                    i21 -= i21;
                    i18 &= i20;
                }
            case 126:
                Test.iArrFld[i17 + 1] -= i21;
            case 127:
                i1 = (int)Test.instanceCount;
                break;
            case 128:
                Test.iFld += (int)-12L;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i16 = " + i3 + "," + i4 + "," + i16);
        FuzzerUtils.out.println("d3 s i17 = " + Double.doubleToLongBits(d3) + "," + s + "," + i17);
        FuzzerUtils.out.println("i18 d4 i19 = " + i18 + "," + Double.doubleToLongBits(d4) + "," + i19);
        FuzzerUtils.out.println("i20 i21 fArr = " + i20 + "," + i21 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
