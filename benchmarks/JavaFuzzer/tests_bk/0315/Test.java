// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7140077180213050730L;
    public static float fFld=0.805F;
    public static boolean bFld=false;
    public double dFld=-27.63207;
    public static short sFld=-1941;
    public static volatile byte byArrFld[]=new byte[N];
    public volatile double dArrFld[][]=new double[N][N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)-59);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(int i8) {

        boolean b1=true;
        int i9=-236, i10=-42353, i11=222;
        short s=15872;
        byte by=105;
        long l1=-144L;

        i8 |= i8;
        b1 = b1;
        i9 = 1;
        while (++i9 < 373) {
            Test.instanceCount = i8;
            s += (short)(((i9 * i8) + i9) - Test.instanceCount);
            for (i10 = 1; i10 < 5; i10++) {
                i8 >>= i10;
                i11 += (((i10 * Test.fFld) + Test.instanceCount) - Test.instanceCount);
                by += (byte)(i10 * Test.instanceCount);
                if (i8 != 0) {
                }
                i11 += (int)l1;
                Test.instanceCount = i8;
                if (i9 != 0) {
                }
                i8 += 28299;
            }
            Test.instanceCount = i10;
        }
        long meth_res = i8 + (b1 ? 1 : 0) + i9 + s + i10 + i11 + by + l1;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        long l=64L, lArr[]=new long[N];
        int i7=-58279, i12=55612, i13=22716, i14=-221, i15=-2, iArr1[]=new int[N];
        double d=0.77787;
        short s1=1525, sArr[]=new short[N];
        byte by1=-39;

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(lArr, -5782590994070888138L);
        FuzzerUtils.init(sArr, (short)7924);

        for (l = 2; l < 271; ++l) {
            Test.instanceCount = ((iArr1[(int)(l + 1)]++) / (i7 | 1));
            Test.instanceCount = i7;
            i7 |= iMeth2(i7);
            switch ((int)((l % 10) + 39)) {
            case 39:
                switch ((int)(((l % 5) * 5) + 106)) {
                case 112:
                    for (i12 = 1; i12 < 6; ++i12) {
                        iArr1 = FuzzerUtils.int1array(N, (int)3);
                        iArr1[(int)(l + 1)] = i7;
                        d += i7;
                        for (i14 = 1; i14 < 2; ++i14) {
                            i13 >>= s1;
                        }
                    }
                    if (Test.bFld) {
                        Test.fFld = -2831564986433657231L;
                        by1 *= (byte)i13;
                    } else if (Test.bFld) {
                        i15 += (int)(((l * Test.instanceCount) + by1) - Test.fFld);
                    } else {
                        Test.fFld += Test.fFld;
                    }
                case 131:
                    iArr1[(-19069 >>> 1) % N] = 194;
                case 109:
                    lArr[(int)(l - 1)] = (long)Test.fFld;
                case 118:
                case 119:
                    Test.fFld += (((l * i13) + i14) - i15);
                    break;
                default:
                    i7 = 8645;
                }
                break;
            case 40:
                sArr[(int)(l)] = (short)d;
                break;
            case 41:
                Test.instanceCount += (l + i15);
            case 42:
                sArr[(int)(l + 1)] = (short)Test.instanceCount;
                break;
            case 43:
                i13 ^= i14;
                break;
            case 44:
                Test.instanceCount += i13;
                break;
            case 45:
                Test.fFld *= Test.fFld;
                break;
            case 46:
            case 47:
                iArr1[(int)(l + 1)] = i12;
                break;
            case 48:
                i13 += s1;
            }
        }
        long meth_res = l + i7 + i12 + i13 + Double.doubleToLongBits(d) + i14 + i15 + s1 + by1 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(boolean b) {

        int i1=-92, i2=-166, i3=117, i4=78, i5=13, i6=23674, iArr[]=new int[N];
        byte by2=32;
        short s2=-14333;

        FuzzerUtils.init(iArr, 49679);

        for (i1 = 3; i1 < 192; ++i1) {
            iArr[i1 + 1] >>= (--iArr[i1 + 1]);
            for (i3 = 8; i3 > 1; i3 -= 2) {
                for (i5 = 1; i5 < 3; ++i5) {
                    switch ((i5 % 9) + 21) {
                    case 21:
                        Test.fFld = i3;
                        i2 -= (int)(iMeth1() + Test.fFld);
                        iArr[i3 - 1] = i1;
                        Test.instanceCount *= i6;
                        break;
                    case 22:
                        Test.fFld += i6;
                        break;
                    case 23:
                        by2 += (byte)(i5 * i5);
                        try {
                            i2 = (i4 / i3);
                            i6 = (i1 / iArr[i1 - 1]);
                            i4 = (i1 % i3);
                        } catch (ArithmeticException a_e) {}
                        i6 += (((i5 * i2) + s2) - i1);
                        i6 += (i5 * i5);
                        break;
                    case 24:
                        i6 -= (int)Test.instanceCount;
                        break;
                    case 25:
                        i2 -= i5;
                    case 26:
                        Test.bFld = true;
                        break;
                    case 27:
                        iArr[i1] >>= i5;
                        break;
                    case 28:
                        i4 += i6;
                    case 29:
                        Test.fFld += (i5 * i5);
                        break;
                    }
                }
            }
        }
        long meth_res = (b ? 1 : 0) + i1 + i2 + i3 + i4 + i5 + i6 + by2 + s2 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=367, i16=-21498, i17=3, i18=-35, i19=59154, iArr2[]=new int[N];
        float f=73.872F;

        FuzzerUtils.init(iArr2, 1101);

        i = 1;
        while (++i < 213) {
            iMeth(Test.bFld);
            switch ((((i >>> 1) % 1) * 5) + 79) {
            case 81:
                Test.byArrFld[i - 1] = (byte)i;
                f = 1;
                do {
                    dArrFld[(int)(f + 1)] = dArrFld[i - 1];
                } while (++f < 118);
                for (i16 = 1; i16 < 118; ++i16) {
                    dFld = i;
                    iArr2[i + 1] = i;
                    lArrFld = lArrFld;
                    i17 -= i16;
                    iArr2[i] = i;
                    for (i18 = 1; 2 > i18; ++i18) {
                        Test.fFld -= 8;
                        i19 += (int)f;
                        iArr2[i18 + 1] += i19;
                        lArrFld[i] &= i16;
                        Test.instanceCount -= -6357L;
                        switch (((i % 2) * 5) + 27) {
                        case 29:
                            Test.sFld = (short)Test.instanceCount;
                            Test.sFld = (short)i19;
                            Test.instanceCount -= 59081;
                            i19 = i16;
                            break;
                        case 37:
                            Test.bFld = Test.bFld;
                            break;
                        }
                        try {
                            i17 = (63157 / iArr2[i + 1]);
                            iArr2[i + 1] = (55 % i);
                            iArr2[i16 - 1] = (i / 44863);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount <<= -10;
                        try {
                            i17 = (i16 % i18);
                            i17 = (i16 / iArr2[i16 + 1]);
                            i17 = (i18 / -32358);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.instanceCount >>>= i19;
                }
                i19 += (i * i);
                break;
            default:
                iArr2 = iArr2;
            }
        }

        FuzzerUtils.out.println("i f i16 = " + i + "," + Float.floatToIntBits(f) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test.sFld Test.byArrFld = " + Double.doubleToLongBits(dFld) + "," + Test.sFld +
            "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("dArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
