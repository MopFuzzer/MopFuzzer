// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=767592497L;
    public static byte byFld=-10;
    public float fFld=0.23F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, long l2, int i5) {

        float f1=0.655F;
        double d=-1.115581;
        int i7=-14, iArr[]=new int[N];
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 161);
        FuzzerUtils.init(lArr, 7391804227242721331L);

        i5 = -6;
        try {
            iArr[(i5 >>> 1) % N] -= (int)f1;
            i4 /= (int)-20.113761;
            i4 -= i4;
            i4 = i5;
            lArr = lArr;
            iArr[(i4 >>> 1) % N] *= (int)d;
        }
        catch (NegativeArraySizeException exc2) {
            i5 <<= i4;
            for (int i6 : iArr) {
                i7 = 1;
                do {
                    if (b) break;
                    i4 = i5;
                    lArr = lArr;
                    l2 *= i4;
                } while ((i7 += 2) < 4);
            }
        }
        finally {
            i4 = i5;
        }
        vMeth2_check_sum += i4 + l2 + i5 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l, long l1, int i3) {

        float f2=-22.779F;
        int i8=0, i9=-106, i10=9634, iArr1[]=new int[N];
        long l3=-14L;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr1, -189);
        FuzzerUtils.init(sArr, (short)-11726);

        vMeth2(i3, Test.instanceCount, i3);
        iArr1[(i3 >>> 1) % N] -= i3;
        sArr[(i3 >>> 1) % N] += (short)f2;
        i3 += i3;
        try {
            i3 = -10;
            iArr1 = new int[i3];
            Test.byFld = (byte)f2;
            for (i8 = 10; i8 < 210; i8++) {
                i9 += (-8197 + (i8 * i8));
                i3 &= (int)Test.instanceCount;
                l1 = i3;
                switch ((i8 % 4) + 70) {
                case 70:
                    for (l3 = 1; l3 < 8; ++l3) {
                        f2 += i10;
                    }
                    Test.instanceCount += (i8 ^ i10);
                    break;
                case 71:
                    i9 = i8;
                    break;
                case 72:
                    if (false) continue;
                    break;
                case 73:
                    l += (((i8 * l1) + i8) - i10);
                    break;
                default:
                    iArr1[i8] += i3;
                }
            }
        }
        catch (NegativeArraySizeException exc3) {
            iArr1[(i9 >>> 1) % N] -= 41318;
        }
        finally {
            i3 -= i3;
        }
        vMeth1_check_sum += l + l1 + i3 + Float.floatToIntBits(f2) + i8 + i9 + l3 + i10 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i, short s, int i1) {

        float f=71.105F;
        int i2=21588, i11=47445, i12=-36373, i13=-3, i14=145;
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 225L);

        for (f = 15; f < 386; ++f) {
            vMeth1(Test.instanceCount, Test.instanceCount, i2);
            i1 -= 2225;
            b1 = b1;
            lArr1[(int)(f)] = i1;
            for (i11 = (int)(f); i11 < 5; i11++) {
                i1 += (((i11 * i1) + f) - i2);
                i12 = i;
                for (i13 = i11; i13 < 1; i13++) {
                    i -= i12;
                    i12 = i13;
                    i14 = -40833;
                }
                Test.iArrFld = Test.iArrFld;
                i2 += (((i11 * i) + f) - i14);
                i1 -= i13;
            }
        }
        vMeth_check_sum += i + s + i1 + Float.floatToIntBits(f) + i2 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        short s1=-23566;
        int i15=7, i16=0, i17=-20551, i18=16341, i19=-4, i20=216, i21=204;
        double d1=0.94448;
        boolean b2=false;
        long lArr2[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr2, 108L);
        FuzzerUtils.init(fArr, -2.20F);

        vMeth(-1, s1, i15);
        i15 |= -52;
        Test.iArrFld = Test.iArrFld;
        if (true) {
            switch (((i15 >>> 1) % 2) + 4) {
            case 4:
                lArr2[(i15 >>> 1) % N] = i15;
                for (i16 = 2; i16 < 167; i16++) {
                    i18 *= (int)Test.instanceCount;
                    i15 = s1;
                    Test.iArrFld[i16] <<= (int)Test.instanceCount;
                    i18 = i15;
                    i19 = 1;
                    while (++i19 < 152) {
                        i18 = i17;
                        fArr[(i17 >>> 1) % N] += Test.byFld;
                        i18 = Test.byFld;
                    }
                    fFld += Test.instanceCount;
                    lArr2[i16 + 1] = Test.byFld;
                }
                for (d1 = 4; d1 < 167; d1++) {
                    i17 += (int)((long)d1 | i17);
                    i20 -= i20;
                    i18 += (int)(((d1 * Test.byFld) + fFld) - Test.byFld);
                }
                i21 = 207;
                do {
                    i20 = -5;
                    Test.instanceCount = i21;
                    i20 -= s1;
                    Test.byFld >>>= (byte)i18;
                    Test.iArrFld[i21] <<= (int)Test.instanceCount;
                    Test.iArrFld[i21 - 1] = (int)fFld;
                    i18 -= (int)Test.instanceCount;
                    fFld += (((i21 * i16) + i15) - Test.instanceCount);
                } while ((i21 -= 3) > 0);
            case 5:
                i17 = i15;
                break;
            }
        } else if (b2) {
            i20 = 43251;
        } else if (b2) {
            Test.iArrFld[(i19 >>> 1) % N] <<= i20;
        }

        FuzzerUtils.out.println("s1 i15 i16 = " + s1 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("d1 i20 i21 = " + Double.doubleToLongBits(d1) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("b2 lArr2 fArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld fFld = " + Test.instanceCount + "," + Test.byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
