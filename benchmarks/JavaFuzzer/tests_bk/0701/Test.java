// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2L;
    public static double dFld=-73.34281;
    public static boolean bFld=true;
    public static volatile float fFld=0.29F;
    public short sFld=22938;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 92.425F);
        FuzzerUtils.init(Test.iArrFld, -3);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(byte by) {

        int i5=-33411, i6=-5, i7=-235, i8=36, i9=122, i10=56385, i11=-3, i12=-14, i13=147, iArr[][]=new int[N][N];
        float f1=-48.899F;
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, 239);
        FuzzerUtils.init(sArr, (short)-8804);

        i5 -= (int)Test.instanceCount;
        for (i6 = 8; i6 < 149; ++i6) {
            for (i8 = 1; i8 < 11; i8++) {
                i7 += i8;
                i7 = i5;
                i5 += (((i8 * Test.instanceCount) + i6) - Test.instanceCount);
            }
            f1 -= i5;
            switch ((((i5 >>> 1) % 9) * 5) + 69) {
            case 74:
                for (i10 = 1; i10 < 11; ++i10) {
                    i9 += (i10 * i10);
                    for (i12 = 1; i12 < 2; ++i12) {
                        i9 >>>= i7;
                        Test.dFld = i12;
                        Test.instanceCount ^= i10;
                        if (Test.bFld) continue;
                    }
                }
                break;
            case 108:
                Test.instanceCount -= (long)116.614F;
                break;
            case 101:
                iArr[i6][i6] = i9;
                break;
            case 89:
                Test.instanceCount += (i6 - i9);
                break;
            case 90:
                if (i11 != 0) {
                    vMeth_check_sum += by + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
                    return;
                }
            case 99:
                i9 -= i13;
                break;
            case 84:
                sArr[i6] = (short)i5;
                break;
            case 72:
                i7 += (int)-22232L;
            case 96:
            }
        }
        vMeth_check_sum += by + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static short sMeth(float f) {

        byte by1=28, byArr[]=new byte[N];
        int i14=-59, i15=176, i16=77, i17=23129, i18=-12, i19=13, i20=62858, iArr1[][]=new int[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr1, -5);
        FuzzerUtils.init(dArr, -2.11940);
        FuzzerUtils.init(byArr, (byte)125);

        vMeth(by1);
        i14 = (int)Test.instanceCount;
        i14 += (int)Test.instanceCount;
        for (i15 = 8; i15 < 383; i15++) {
            f = i14;
        }
        switch (((i16 >>> 1) % 5) + 8) {
        case 8:
            for (i17 = 7; i17 < 213; i17++) {
                i18 += 41284;
                for (i19 = 1; i19 < 8; i19++) {
                    i20 <<= i17;
                }
                i18 += (((i17 * i18) + i20) - i14);
                iArr1[i17 + 1][i17 - 1] -= i14;
                i14 *= i16;
            }
            Test.instanceCount -= i19;
            Test.instanceCount -= (long)Test.dFld;
            break;
        case 9:
            Test.fArrFld[(i19 >>> 1) % N] += i14;
        case 10:
            i20 -= (int)Test.dFld;
            break;
        case 11:
            byArr[(36 >>> 1) % N] += (byte)i17;
            break;
        case 12:
            Test.instanceCount *= i17;
        }
        long meth_res = Float.floatToIntBits(f) + by1 + i14 + i15 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(byArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i1, long l) {

        int i2=-7, i3=-30397, i4=-51829, i21=-10, i22=33071, i23=0, i24=-57889;

        for (i2 = 8; 302 > i2; i2++) {
            i4 = 1;
            do {
                Test.dFld += sMeth(Test.fFld);
                Test.iArrFld = Test.iArrFld;
                i3 += i4;
            } while (++i4 < 6);
        }
        for (i21 = 12; i21 < 335; i21++) {
            if (Test.bFld) {
                i23 = 1;
                while (++i23 < 5) {
                    Test.iArrFld[i21 - 1] <<= i22;
                    if (Test.bFld) continue;
                    i24 = 1;
                    do {
                        i22 = -28472;
                        Test.iArrFld[i24 + 1] <<= i3;
                        try {
                            i22 = (-40317 / i1);
                            i3 = (-27 / i4);
                            i1 = (50752 % Test.iArrFld[i23]);
                        } catch (ArithmeticException a_e) {}
                        i1 += i21;
                    } while (--i24 > 0);
                }
            } else if (true) {
                l += i23;
            } else {
                if (true) break;
            }
        }
        long meth_res = i1 + l + i2 + i3 + i4 + i21 + i22 + i23 + i24;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=11, i25=8706, i26=-126, i27=-55, i28=-3, i29=-46884, i30=-8, i31=176, i32=247;
        byte by2=-79;

        i -= (iMeth(i, -35L) % (by2 | 1));
        for (i25 = 3; i25 < 135; ++i25) {
            switch ((i25 % 7) + 55) {
            case 55:
            case 56:
                i26 <<= i26;
                Test.instanceCount -= Test.instanceCount;
                Test.fArrFld[i25 + 1] = i26;
                break;
            case 57:
                Test.instanceCount += i26;
                try {
                    i = (i / Test.iArrFld[i25]);
                    i26 = (i % Test.iArrFld[i25 - 1]);
                    i26 = (i % 39510);
                } catch (ArithmeticException a_e) {}
                sFld ^= by2;
                i >>>= i25;
                break;
            case 58:
                i27 = 1;
                do {
                    i &= i25;
                } while (++i27 < 190);
                Test.dFld = Test.instanceCount;
                if (Test.bFld) {
                    Test.instanceCount += i27;
                    i26 = -5;
                    for (i28 = 3; i28 < 190; i28++) {
                        for (i30 = i25; i30 < 2; i30++) {
                            i29 = i29;
                            switch ((i25 % 1) + 107) {
                            case 107:
                                i29 += (i30 * i30);
                                Test.iArrFld[i30 + 1] <<= i31;
                                i += i30;
                            default:
                                Test.instanceCount = i28;
                                Test.dFld = Test.instanceCount;
                                switch (((i30 % 3) * 5) + 78) {
                                case 86:
                                    Test.iArrFld[i30 - 1] -= (int)-92.117591;
                                    i31 += (i30 * i30);
                                    break;
                                case 82:
                                    i29 += (int)Test.instanceCount;
                                    Test.iArrFld[i30] = 14;
                                case 80:
                                    Test.iArrFld[i25 - 1] = i32;
                                default:
                                    i = (int)-2.112348;
                                }
                            }
                        }
                    }
                } else {
                    i32 = (int)Test.instanceCount;
                }
                break;
            case 59:
                i26 += -1;
                break;
            case 60:
                i29 += (int)Test.fFld;
                break;
            case 61:
                i >>= i32;
            }
        }

        FuzzerUtils.out.println("i by2 i25 = " + i + "," + by2 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 = " + i32);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld sFld Test.fArrFld = " + Float.floatToIntBits(Test.fFld) + "," + sFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
