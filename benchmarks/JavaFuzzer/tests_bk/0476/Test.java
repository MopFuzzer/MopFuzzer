// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-62491L;
    public static float fFld=-2.666F;
    public static byte byFld=77;
    public static boolean bFld=false;
    public int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i14, int i15, double d1) {

        boolean b=true;
        long l=-9162L;
        int i16=-204, i17=22391, i18=-57264, i19=35355;

        if (b) {
            d1 *= -221L;
        }
        Test.instanceCount >>= -21422;
        for (l = 185; l > 10; l--) {
            Test.fFld += (l - i15);
            i15 >>= -62792;
            Test.instanceCount += (l * l);
            if (b) {
                i14 = (int)Test.instanceCount;
                Test.instanceCount &= i14;
                for (i17 = 1; i17 < 9; ++i17) {
                    i16 = (int)Test.instanceCount;
                    i19 = 1;
                    while (++i19 < 2) {
                        Test.instanceCount = i16;
                        if (true) break;
                    }
                }
            } else {
                Test.instanceCount = i14;
            }
        }
        long meth_res = i14 + i15 + Double.doubleToLongBits(d1) + (b ? 1 : 0) + l + i16 + i17 + i18 + i19;
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i8, double d) {

        int i9=8, i10=-7, i11=-213, i12=12, i13=150, iArr1[]=new int[N];
        short s=31996;

        FuzzerUtils.init(iArr1, -37277);

        i9 = 153;
        while (--i9 > 0) {
            i8 += (i9 ^ s);
            for (i10 = 1; i10 < 10; i10 += 2) {
                for (i12 = i9; i12 < 3; ++i12) {
                    Test.instanceCount = (((i9 + Test.instanceCount) >> lMeth1(-38147, i11, d)) + i11);
                    i13 |= (int)Test.instanceCount;
                    i11 += i12;
                    Test.fFld -= i12;
                    i11 = 11740;
                    i11 = i13;
                }
                i8 += Test.byFld;
                try {
                    i11 = (iArr1[i10] / i11);
                    i8 = (i13 % -149);
                    i11 = (i9 % 15202);
                } catch (ArithmeticException a_e) {}
                i11 += i13;
                s += (short)d;
                i8 += (((i10 * Test.instanceCount) + Test.instanceCount) - i9);
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d) + i9 + s + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public byte byMeth(float f) {

        int i1=-122, i2=-29, i4=-63673, i5=-3, i6=5168, i7=23, i20=-3, i21=0, iArr[]=new int[N];
        byte by=-117;
        double d2=-2.89682;

        FuzzerUtils.init(iArr, -5);

        for (i1 = 12; i1 < 388; i1++) {
            i2 += i1;
            for (i4 = 1; i4 < 4; i4++) {
                i2 = 215;
                for (i6 = i1; i6 < 2; i6++) {
                    by += (byte)i6;
                    iArr[i4] -= i5;
                }
                Test.instanceCount -= lMeth(i7, d2);
                for (i20 = 2; i20 > i4; --i20) {
                    short s1=25251;
                    iArr[i20] -= (int)d2;
                    if (Test.bFld) {
                        iArr[i20 - 1] -= s1;
                    } else {
                        by -= (byte)i6;
                        try {
                            iArr[i20 - 1] = (i5 / iArr[i4]);
                            i7 = (iArr[i20 + 1] / i20);
                            i21 = (i7 / iArr[i4 + 1]);
                        } catch (ArithmeticException a_e) {}
                        if (Test.bFld) continue;
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i2 + i4 + i5 + i6 + i7 + by + Double.doubleToLongBits(d2) + i20
            + i21 + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=28860, i22=49175, i23=-3, i24=-10, i25=-9, i26=-178, i27=-26, i28=-6, i29=127, i30=-38941;
        short s2=5358;
        double d3=-1.10080;

        i <<= byMeth(Test.fFld);
        if (Test.bFld) {
            i = (int)Test.instanceCount;
            for (i22 = 6; i22 < 122; ++i22) {
                for (i24 = 2; 216 > i24; i24++) {
                    i25 += i22;
                    if (Test.bFld) {
                        iArrFld[i24] -= -249;
                        switch (((i22 % 1) * 5) + 30) {
                        case 31:
                            i23 *= i24;
                            for (i26 = 1; 2 > i26; ++i26) {
                                iArrFld[i26 + 1] = 23396;
                                iArrFld[i22 + 1] += 252;
                                i27 *= i27;
                                if (Test.bFld) break;
                                i23 = (int)Test.instanceCount;
                                switch ((i24 % 1) + 125) {
                                case 125:
                                    iArrFld[i24] += i24;
                                    iArrFld[i22 + 1] += s2;
                                    i -= (int)Test.fFld;
                                    Test.instanceCount = 1;
                                default:
                                    i27 += (-40510 + (i26 * i26));
                                    d3 *= i25;
                                }
                            }
                            for (i28 = 1; i28 < 2; i28++) {
                                Test.fFld -= i28;
                                switch ((i22 % 4) + 2) {
                                case 2:
                                    i29 -= i29;
                                    i23 = i30;
                                    break;
                                case 3:
                                    i27 >>= (int)Test.instanceCount;
                                    break;
                                case 4:
                                    Test.instanceCount -= i30;
                                    break;
                                case 5:
                                    Test.instanceCount += (i28 * i28);
                                    break;
                                default:
                                    fArrFld[i28 - 1] = i;
                                }
                            }
                            break;
                        }
                    } else {
                        Test.instanceCount >>= i24;
                    }
                }
            }
        } else {
            i29 += i23;
        }

        FuzzerUtils.out.println("i i22 i23 = " + i + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 s2 d3 = " + i27 + "," + s2 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld iArrFld fArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
