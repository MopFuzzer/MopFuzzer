// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:06 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2410280122L;
    public static int iFld=59391;
    public static float fFld=-85.126F;
    public static volatile boolean bFld=true;
    public static int iFld1=-18679;
    public long lArrFld[]=new long[N];
    public static volatile int iArrFld[]=new int[N];
    public static float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.iArrFld, -47082);
        FuzzerUtils.init(Test.fArrFld, -93.547F);
    }

    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, int i3) {

        double d1=0.98068, d2=0.18728;
        int i5=-62787, iArr[][]=new int[N][N];
        byte by=-12;
        long l2=-10L;

        FuzzerUtils.init(iArr, 55);

        switch ((((Test.iFld >>> 1) % 2) * 5) + 111) {
        case 114:
            Test.fFld -= Test.iFld;
            for (int i4 : Test.iArrFld) {
                if (Test.bFld) continue;
                for (d1 = 4; d1 > 1; d1--) {
                    Test.instanceCount += (long)d1;
                    by = (byte)l2;
                    d2 %= ((long)(Test.fFld) | 1);
                }
                Test.iArrFld[(i4 >>> 1) % N] /= (int)(l2 | 1);
                Test.iFld -= i3;
                l2 += Test.iFld;
            }
            i3 >>= -2106;
        case 113:
            i2 -= i2;
            break;
        }
        iArr = iArr;
        Test.iArrFld[(i3 >>> 1) % N] += i2;
        vMeth_check_sum += i2 + i3 + Double.doubleToLongBits(d1) + i5 + by + l2 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(iArr);
    }

    public static byte byMeth(long l, long l1, int i1) {

        int i7=6, i8=-13, i9=7, i10=-6, i11=56972, iArr1[]=new int[N];
        long lArr[]=new long[N];
        double dArr1[][]=new double[N][N];

        FuzzerUtils.init(iArr1, 247);
        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(dArr1, -2.34250);

        if (false) {
            vMeth(i1, i1);
            iArr1[(Test.iFld >>> 1) % N] -= (int)Test.fFld;
            for (i7 = 12; i7 < 238; i7++) {
                lArr[i7 - 1] -= -2;
                lArr[i7 + 1] += -3082252949L;
                i9 = 1;
                do {
                    Test.fFld -= i8;
                    Test.iFld -= (int)Test.fFld;
                    if (Test.bFld) continue;
                    if (Test.bFld) continue;
                    for (i10 = 1; i10 < 1; i10++) {
                        i11 += (i10 | i11);
                        if (Test.bFld) break;
                        Test.iArrFld = FuzzerUtils.int1array(N, (int)-33773);
                    }
                } while (++i9 < 7);
            }
        } else {
            dArr1[(i7 >>> 1) % N][(Test.iFld >>> 1) % N] -= Test.fFld;
        }
        long meth_res = l + l1 + i1 + i7 + i8 + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(int i, float f) {

        double d3=0.54276, dArr[]=new double[N];
        int i12=-48403, i13=35795, i14=-12, i15=-12, i16=-87, i17=-170;

        FuzzerUtils.init(dArr, 18.2621);

        try {
            dArr[(0 >>> 1) % N] += (byMeth(Test.instanceCount, Test.instanceCount, Test.iFld) - d3);
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test.iArrFld[(i >>> 1) % N] = 2;
            Test.iFld -= -11;
            Test.fFld *= 5;
            for (i12 = 1; i12 < 368; ++i12) {
                i += (i12 * i12);
                for (i14 = 1; i14 < 5; ++i14) {
                    i15 = i13;
                    Test.fFld = i14;
                    Test.iFld += i14;
                    for (i16 = i12; i16 < 2; ++i16) {
                        i13 = (int)Test.instanceCount;
                        Test.iArrFld[i14] = -59542;
                        f += i16;
                    }
                }
            }
        }
        finally {
            Test.bFld = Test.bFld;
        }
        long meth_res = i + Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i12 + i13 + i14 + i15 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=-2.118876;
        short s=7132;
        int i18=24125, i19=25352, i20=9, i21=13;
        long l3=1L;

        lArrFld[(Test.iFld >>> 1) % N] = Math.max((int)((Test.instanceCount * d) - (Test.iFld * -81)), Test.iFld--);
        Test.iFld += (int)((Test.instanceCount--) - ((Test.iFld++) >> (long)(Test.fFld - Test.instanceCount)));
        s += (short)Long.reverseBytes((-lMeth(Test.iFld, Test.fFld)) - Test.instanceCount);
        Test.bFld = false;
        Test.iArrFld[(Test.iFld >>> 1) % N] = Test.iFld;
        for (i18 = 5; i18 < 272; i18++) {
            Test.iArrFld[i18 - 1] = i18;
            Test.iFld = (int)Test.instanceCount;
            l3 *= i18;
            switch (((i18 % 9) * 5) + 58) {
            case 86:
                if (Test.bFld) break;
                break;
            case 96:
                Test.fArrFld[i18 - 1][i18] -= i18;
                i19 = Test.iFld;
                break;
            case 80:
                Test.iFld += i18;
                switch ((i18 % 6) + 50) {
                case 50:
                    Test.fFld = (float)d;
                    Test.iArrFld[i18] *= (int)Test.instanceCount;
                    break;
                case 51:
                    Test.fFld = -14;
                    break;
                case 52:
                    Test.iFld += Test.iFld;
                    for (i20 = 2; i20 < 94; ++i20) {
                        Test.iArrFld[i18] += (int)l3;
                        Test.instanceCount += (long)Test.fFld;
                    }
                case 53:
                case 54:
                    Test.iFld1 = i21;
                    try {
                        Test.iFld = (Test.iArrFld[i18 + 1] / i20);
                        Test.iFld1 = (Test.iFld / i18);
                        i19 = (-45005 % i21);
                    } catch (ArithmeticException a_e) {}
                    if (true) continue;
                    break;
                case 55:
                    switch (((i18 % 1) * 5) + 85) {
                    case 88:
                        Test.fFld = Test.iFld;
                        Test.iFld += (i18 * i18);
                        i21 = (int)l3;
                        Test.fFld *= i18;
                        break;
                    }
                    break;
                }
            case 60:
                Test.bFld = Test.bFld;
                break;
            case 69:
                d = -8;
                break;
            case 65:
                lArrFld[i18 + 1] += Test.iFld1;
                break;
            case 101:
                Test.iFld = (int)Test.instanceCount;
                break;
            case 90:
                Test.iFld1 = (int)l3;
                break;
            case 78:
                Test.iArrFld[i18 - 1] += (int)Test.instanceCount;
                break;
            default:
                Test.iArrFld[i18 + 1] ^= i18;
            }
        }

        FuzzerUtils.out.println("d s i18 = " + Double.doubleToLongBits(d) + "," + s + "," + i18);
        FuzzerUtils.out.println("i19 l3 i20 = " + i19 + "," + l3 + "," + i20);
        FuzzerUtils.out.println("i21 = " + i21);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.iFld1 lArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld1 + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
