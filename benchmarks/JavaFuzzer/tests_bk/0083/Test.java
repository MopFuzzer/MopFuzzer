// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=49307L;
    public static double dFld=73.69914;
    public boolean bFld=false;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -3L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7, int i8) {

        int i9=-48, i10=28674, i11=-10, i12=330, i13=-3, iArr1[]=new int[N];
        float f1=106.509F;
        short s1=-19685;
        byte by=110;

        FuzzerUtils.init(iArr1, -117);

        for (i9 = 13; i9 < 384; i9++) {
            i10 += (int)f1;
            i11 = 1;
            do {
                boolean b=false;
                switch (((i9 % 2) * 5) + 15) {
                case 25:
                    for (i12 = 1; 1 > i12; i12++) {
                        iArr1[i9] -= (int)f1;
                        i13 -= i10;
                        Test.instanceCount *= i9;
                        s1 *= (short)i11;
                        i10 >>>= -57690;
                        i7 = 28;
                        by %= (byte)((long)(Test.dFld) | 1);
                        try {
                            iArr1[i12] = (-85 % iArr1[i11]);
                            i10 = (i13 / i13);
                            iArr1[i11] = (i13 / 191);
                        } catch (ArithmeticException a_e) {}
                        i7 = (int)Test.dFld;
                    }
                    if (b) break;
                    break;
                case 20:
                default:
                    i13 = i12;
                }
            } while (++i11 < 5);
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 + s1 + by +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i5, int i6) {

        int i14=-229, i15=-2, i16=-26260, i17=251;
        short s2=18003;
        byte by1=-18;
        boolean b1=false;
        double d1=1.94580;

        i6 -= (int)(Test.instanceCount++);
        Test.instanceCount -= (long)(((2.149F + (-22847 + (53.476F + (209 * (Test.instanceCount -=
            Test.instanceCount))))) * (i6 - i5)) + Test.instanceCount);
        vMeth1(i6, i6);
        i14 = 1;
        do {
            s2 = by1;
            for (i15 = 1; 8 > i15; ++i15) {
                i6 += -12;
                i16 -= (int)Test.instanceCount;
                if (b1) break;
                i6 += (((i15 * i15) + i6) - i15);
                i5 += (120 + (i15 * i15));
                for (d1 = 2; d1 > 1; d1--) {
                    i17 += (int)(((d1 * i5) + s2) - Test.instanceCount);
                }
            }
            by1 += (byte)i16;
        } while (++i14 < 211);
        vMeth_check_sum += i5 + i6 + i14 + s2 + by1 + i15 + i16 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1) + i17;
    }

    public int iMeth(int i2, int i3, int i4) {

        float f=1.970F;
        short s=19937, sArr[]=new short[N];
        int i18=11263, i19=1, iArr[][]=new int[N][N];
        boolean b2=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(sArr, (short)11793);
        FuzzerUtils.init(iArr, 245);
        FuzzerUtils.init(bArr, false);

        i3 = (int)(((sArr[(i4 >>> 1) % N] <<= (short)6) * (Test.instanceCount += i3)) - ((-(--i2)) % ((long)(f) | 1)));
        i2 >>>= (iArr[(i4 >>> 1) % N][(i3 >>> 1) % N]--);
        for (long l : Test.lArrFld) {
            i2 = (int)((++Test.lArrFld[(232 >>> 1) % N]) / ((-(-141 - (s = (short)i4))) | 1));
            vMeth(i2, i2);
            for (i18 = 1; i18 < 4; i18++) {
                switch ((((i19 >>> 1) % 9) * 5) + 84) {
                case 107:
                    i4 = i18;
                    Test.lArrFld = FuzzerUtils.long1array(N, (long)-14L);
                    iArr[(i19 >>> 1) % N][i18 + 1] = (int)Test.dFld;
                    break;
                case 114:
                    s = (short)Test.instanceCount;
                    i2 = (int)f;
                case 127:
                    iArr[i18][i18 + 1] += i4;
                    Test.instanceCount = Test.instanceCount;
                    bArr[i18][i18 - 1] = b2;
                    break;
                case 94:
                    i2 += (((i18 * Test.instanceCount) + i19) - i4);
                    break;
                case 121:
                    i4 = i2;
                    break;
                case 96:
                    Test.instanceCount = i3;
                    break;
                case 99:
                    i3 = i19;
                    break;
                case 104:
                    s <<= (short)i18;
                    break;
                case 95:
                    b2 = true;
                }
            }
        }
        long meth_res = i2 + i3 + i4 + Float.floatToIntBits(f) + s + i18 + i19 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=18077, i1=2, i20=23703, i21=-12711, i22=-46845, i23=-146, i24=9, i25=-120, iArr2[][]=new int[N][N];
        double d=-116.112336;
        long l1=-253L;
        byte by2=-81;
        float f2=-17.586F;

        FuzzerUtils.init(iArr2, 29);

        for (i = 7; i < 126; ++i) {
            d = ((iMeth(i1, i, i1) * -1650557587L) + i1);
            for (i20 = 7; i20 < 211; i20++) {
                i1 = -12;
                for (i22 = 2; i22 > 1; i22 -= 2) {
                    Test.instanceCount += 79;
                    iArr2[i22 - 1][i - 1] += i21;
                    l1 = (long)d;
                    i1 = i;
                    by2 += (byte)i22;
                }
                Test.dFld -= l1;
                Test.lArrFld = Test.lArrFld;
                i21 = i22;
                switch ((i % 1) + 14) {
                case 14:
                    Test.instanceCount -= i20;
                    i23 = i23;
                    iArr2[i20 - 1][i + 1] = (int)f2;
                    i21 += (int)Test.instanceCount;
                    break;
                default:
                    for (i24 = 1; 2 > i24; ++i24) {
                        i23 += (i24 * i24);
                        Test.lArrFld[i20 - 1] >>= i22;
                        i23 += (i24 - f2);
                        i23 -= (int)Test.instanceCount;
                        i1 <<= -3;
                        i23 <<= i25;
                        if (bFld) break;
                        i23 *= (int)Test.instanceCount;
                    }
                    l1 -= i22;
                    i23 -= 10;
                }
                i23 += (i20 ^ i20);
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 l1 by2 = " + i23 + "," + l1 + "," + by2);
        FuzzerUtils.out.println("f2 i24 i25 = " + Float.floatToIntBits(f2) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
