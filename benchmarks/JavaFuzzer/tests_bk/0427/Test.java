// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=151L;
    public static int iFld=29974;
    public static double dFld=2.91630;
    public static double dFld1=-2.126037;
    public static volatile float fFld=1.924F;
    public static byte byFld=-84;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, int i2) {

        long l1=12L;
        int i3=79, i4=-3, i5=-32867, i6=-246, i7=2;

        Test.dFld *= Test.iFld;
        Test.iFld -= (int)Test.dFld1;
        Test.dFld1 -= Test.iFld;
        Test.instanceCount -= i2;
        for (l1 = 9; l1 < 211; l1++) {
            switch ((int)(((l1 % 1) * 5) + 81)) {
            case 85:
                i3 = Test.iFld;
                Test.iFld *= i3;
                Test.iFld <<= (int)102L;
                break;
            default:
                for (i4 = 1; 8 > i4; i4++) {
                    i2 = i2;
                    if (i4 != 0) {
                        vMeth1_check_sum += l + i2 + l1 + i3 + i4 + i5 + i6 + i7;
                        return;
                    }
                    for (i6 = 1; i6 < 2; ++i6) {
                        i7 -= i7;
                        Test.instanceCount += (i6 * i6);
                    }
                }
            }
        }
        vMeth1_check_sum += l + i2 + l1 + i3 + i4 + i5 + i6 + i7;
    }

    public static void vMeth() {

        double d=-1.80472;
        int i8=7996, i9=-1388, i10=-192, i11=-26749, i12=0, i13=5;
        byte by=50;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 91L);

        vMeth1(Test.instanceCount, Test.iFld);
        for (d = 4; d < 359; ++d) {
            by -= (byte)Test.iFld;
        }
        Test.instanceCount = i8;
        for (i9 = 7; i9 < 320; ++i9) {
            for (i11 = 5; 1 < i11; i11--) {
                i12 >>= 96;
                Test.iFld += (int)Test.instanceCount;
                i13 = 1;
                do {
                    switch ((((-54580 >>> 1) % 1) * 5) + 22) {
                    case 23:
                        Test.fFld *= i12;
                        Test.instanceCount += (((i13 * i11) + Test.fFld) - i8);
                        i10 *= i12;
                        lArr[i13 - 1] -= Test.instanceCount;
                        break;
                    default:
                        Test.fFld += (9 + (i13 * i13));
                    }
                } while (++i13 < 2);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i8 + by + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(lArr);
    }

    public int iMeth() {

        int i14=84, i16=6, i17=-14095, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -4);

        Test.iFld -= Test.iFld;
        vMeth();
        Test.fFld = 80;
        Test.dFld1 -= Test.iFld;
        i14 = 1;
        do {
            iArr[i14 - 1] = (int)Test.instanceCount;
            Test.fFld = (float)Test.dFld1;
        } while ((i14 += 2) < 135);
        Test.iFld = i14;
        Test.iFld >>= i14;
        for (int i15 : iArr) {
            Test.iFld >>= i15;
            for (i16 = 1; i16 < 4; ++i16) {
                Test.byFld += (byte)i16;
            }
            i15 = i17;
            iArr[(i15 >>> 1) % N] += -2;
        }
        long meth_res = i14 + i16 + i17 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=5, i18=62339, i19=-44, i20=233, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        long l2=0L;
        boolean b=true;
        short s=4963;
        byte byArr[]=new byte[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(byArr, (byte)101);
        FuzzerUtils.init(iArr1, 92);
        FuzzerUtils.init(iArr2, -3);
        FuzzerUtils.init(dArr, 0.92299);

        for (i = 1; 253 > i; ++i) {
            switch ((i % 7) + 84) {
            case 84:
                if (iMeth() != Test.iFld) continue;
                for (i18 = 3; i18 < 100; i18++) {
                    switch ((i % 2) + 23) {
                    case 23:
                        Test.iFld += (i18 ^ i19);
                        for (l2 = 2; l2 > 1; l2--) {
                            Test.iFld += i20;
                            if (true) continue;
                            Test.dFld1 = Test.instanceCount;
                            Test.dFld -= Test.iFld;
                            byArr[i18 - 1] = (byte)Test.iFld;
                            iArr1[i18 + 1] -= 227;
                            if (true) {
                                byArr = byArr;
                                switch ((int)(((l2 % 6) * 5) + 55)) {
                                case 84:
                                    switch ((int)(((l2 % 2) * 5) + 4)) {
                                    case 13:
                                        if (b) continue;
                                        iArr1[i18 - 1] += (int)Test.instanceCount;
                                        Test.fFld = i;
                                        iArr1[i - 1] += i20;
                                    case 8:
                                        i19 -= -14;
                                        switch (((i1 >>> 1) % 8) + 16) {
                                        case 16:
                                        case 17:
                                            s += (short)i1;
                                            Test.dFld1 *= Test.byFld;
                                            i20 = i;
                                            break;
                                        case 18:
                                            i19 = s;
                                            Test.dFld *= Test.instanceCount;
                                            s = (short)4192920146L;
                                        case 19:
                                            iArr1[(int)(l2)] -= (int)Test.instanceCount;
                                            break;
                                        case 20:
                                            i1 <<= (int)Test.instanceCount;
                                        case 21:
                                            i19 -= (int)Test.dFld1;
                                            break;
                                        case 22:
                                            i20 |= (int)Test.instanceCount;
                                        case 23:
                                            Test.fFld += Test.instanceCount;
                                            break;
                                        default:
                                            iArr2 = iArr2;
                                        }
                                        break;
                                    default:
                                        i19 = (int)Test.fFld;
                                    }
                                case 63:
                                case 70:
                                    i20 += i;
                                    break;
                                case 80:
                                    Test.byFld ^= (byte)i1;
                                    break;
                                case 66:
                                    i1 = (int)l2;
                                    break;
                                case 74:
                                    i19 -= i1;
                                    break;
                                default:
                                    Test.instanceCount += (l2 * i);
                                }
                            } else {
                                try {
                                    Test.iFld = (i20 % -47852);
                                    i20 = (iArr1[i] / i1);
                                    i1 = (i20 / i19);
                                } catch (ArithmeticException a_e) {}
                            }
                        }
                        break;
                    case 24:
                        dArr[i + 1] = i20;
                        break;
                    default:
                        i19 += (i18 * i18);
                    }
                }
                break;
            case 85:
                Test.instanceCount = i1;
                break;
            case 86:
                Test.iFld += (int)Test.dFld1;
                break;
            case 87:
                iArr1[i] = i19;
                break;
            case 88:
                Test.instanceCount >>>= i;
            case 89:
                Test.byFld *= (byte)Test.instanceCount;
                break;
            case 90:
                Test.fFld = 89;
                break;
            default:
                byArr[i + 1] = (byte)Test.iFld;
            }
        }

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("i19 l2 i20 = " + i19 + "," + l2 + "," + i20);
        FuzzerUtils.out.println("b s byArr = " + (b ? 1 : 0) + "," + s + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("iArr1 iArr2 dArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(iArr2)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.dFld1 Test.fFld Test.byFld = " + Double.doubleToLongBits(Test.dFld1) + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
