// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-39166L;
    public static float fFld=1.208F;
    public static short sFld=729;

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(boolean b1, int i10) {

        int i12=11, i13=3, i14=25291, i15=-4, iArr[]=new int[N];
        byte by=112;
        float f=-113.766F;
        double d=-100.84951;

        FuzzerUtils.init(iArr, 230);

        for (int i11 : iArr) {
            i12 = 1;
            do {
                by = (byte)i10;
                Test.instanceCount = i10;
                iArr[i12 + 1] = i12;
                for (i13 = i12; i13 < 1; ++i13) {
                    if (b1) break;
                    i14 <<= Test.sFld;
                    Test.instanceCount = i12;
                    Test.instanceCount = -19;
                }
                for (f = 1; 1 < f; f -= 2) {
                    switch ((((-58995 >>> 1) % 10) * 5) + 93) {
                    case 94:
                        by += (byte)i13;
                        break;
                    case 100:
                        b1 = b1;
                        i14 = (int)Test.instanceCount;
                        break;
                    case 96:
                        if (b1) continue;
                        break;
                    case 138:
                    case 142:
                        by *= (byte)f;
                        break;
                    case 119:
                        d *= i10;
                        break;
                    case 139:
                        iArr[i12 + 1] -= i15;
                    case 140:
                        Test.fFld -= i14;
                    case 115:
                        iArr[(int)(f)] += i14;
                    case 111:
                        i15 = i14;
                    }
                }
            } while (++i12 < 4);
        }
        vMeth_check_sum += (b1 ? 1 : 0) + i10 + i12 + by + i13 + i14 + Float.floatToIntBits(f) + i15 +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i5, int i6, short s) {

        int i7=-153, i8=1, i9=-2, i16=2, i17=-2, i18=3120, i19=-12, iArr1[]=new int[N];
        boolean b2=false;

        FuzzerUtils.init(iArr1, 183);

        i6 += (int)(~((i5 + Test.instanceCount) - (Test.instanceCount - Test.instanceCount)));
        i7 = 1;
        do {
            for (i8 = 4; i8 > i7; --i8) {
                i5 -= ((i6--) + (--i9));
                if (i6 != 0) {
                }
            }
            vMeth(b2, i8);
            try {
                i5 = (iArr1[i7 + 1] / iArr1[i7]);
                i9 = (50801 % iArr1[i7 + 1]);
                i6 = (4524 / iArr1[i7]);
            } catch (ArithmeticException a_e) {}
            for (i16 = 1; i16 < 4; i16++) {
                iArr1 = iArr1;
                Test.instanceCount += -29;
                i6 += (((i16 * i8) + Test.fFld) - Test.instanceCount);
                i5 = i7;
                for (i18 = 1; i18 < 2; i18++) {
                    i6 -= (int)-52.542F;
                    i19 <<= i6;
                }
            }
        } while (++i7 < 380);
        long meth_res = i5 + i6 + s + i7 + i8 + i9 + (b2 ? 1 : 0) + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth() {

        boolean b=true;
        int i20=7161;

        b = b;
        Test.fFld = ((Test.fFld++) * lMeth(i20, i20, (short)(5921)));
        vSmallMeth_check_sum += (b ? 1 : 0) + i20;
    }

    public void mainTest(String[] strArr1) {

        int i=9657, i1=-8, i2=168, i3=-249, i4=-124, i21=-16565, i22=-44848, i23=-54644, i24=-10065, i25=11, i26=-12,
            iArr2[]=new int[N];
        boolean b3=false;
        double d1=115.36410;
        long lArr[]=new long[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr2, -20257);
        FuzzerUtils.init(lArr, 3964789007L);
        FuzzerUtils.init(fArr, -91.995F);

        if (b3) {
            i <<= i;
            for (i1 = 5; i1 < 275; i1++) {
                for (i3 = 3; 93 > i3; ++i3) {
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                    i2 >>= i3;
                    iArr2[i3] *= i1;
                    i2 *= (int)31.696F;
                }
            }
        } else if (b3) {
            for (long l : lArr) {
                iArr2[(i2 >>> 1) % N] = (int)l;
                i4 <<= 34403;
            }
            iArr2[(i >>> 1) % N] /= -22100;
        } else {
            iArr2[(i2 >>> 1) % N] <<= i;
            for (d1 = 346; d1 > 6; --d1) {
                i21 = Test.sFld;
            }
        }
        fArr[(-2 >>> 1) % N] -= Test.sFld;
        for (i22 = 11; i22 < 180; i22++) {
            Test.instanceCount *= (long)d1;
            switch (((i4 >>> 1) % 2) + 105) {
            case 105:
                i21 *= 162;
                lArr[i22 - 1] = i1;
                switch (((43981 >>> 1) % 6) + 76) {
                case 76:
                    i21 *= i2;
                    i24 = 1;
                    do {
                        switch ((i22 % 1) + 105) {
                        case 105:
                            for (i25 = 1; i25 < 1; i25++) {
                                lArr = lArr;
                                i = i2;
                                i2 *= i2;
                                Test.fFld = Test.sFld;
                            }
                        default:
                            i += (i24 - Test.instanceCount);
                        }
                    } while (++i24 < 148);
                    break;
                case 77:
                    i26 >>= i21;
                    break;
                case 78:
                    Test.instanceCount += (-1 + (i22 * i22));
                    break;
                case 79:
                    iArr2[i22] >>= (int)Test.instanceCount;
                case 80:
                    i2 *= -106;
                    break;
                case 81:
                    Test.instanceCount ^= i25;
                    break;
                default:
                    Test.instanceCount -= i;
                }
                break;
            case 106:
                i21 = i24;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 b3 = " + i3 + "," + i4 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("d1 i21 i22 = " + Double.doubleToLongBits(d1) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr2 lArr = " + i26 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
