// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=9L;
    public static float fFld=22.428F;
    public static boolean bFld=false;
    public static int iFld=-45033;
    public static double dFld=0.126351;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -164);
        FuzzerUtils.init(Test.lArrFld, -29L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        int i3=-18755;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)13);

        i3 *= i3;
        byArr = (byArr = (byArr = (byArr = byArr)));
        vSmallMeth_check_sum += i3 + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(long l, int i15, long l1) {


        Test.iArrFld = Test.iArrFld;
        i15 = -10753;
        Test.fFld += i15;
        l &= i15;
        vMeth1_check_sum += l + i15 + l1;
    }

    public static void vMeth(int i12) {

        int i13=7, i14=-14, i16=148, i17=104, i18=-12;
        byte by=122;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.245F);

        for (i13 = 21; i13 < 389; ++i13) {
            vMeth1(Test.instanceCount, i14, Test.instanceCount);
            Test.fFld += i14;
            Test.fFld += (((i13 * i14) + i13) - Test.instanceCount);
        }
        for (float f : fArr) {
            if (Test.bFld) {
                by = (byte)Test.instanceCount;
                i14 = i12;
            } else if (Test.bFld) {
                switch (((-37913 >>> 1) % 4) + 43) {
                case 43:
                    i16 = 1;
                    while (++i16 < 4) {
                        Test.instanceCount += (i16 ^ i14);
                        for (i17 = 1; 1 > i17; i17++) {
                            i12 += (i17 ^ i14);
                            Test.fFld -= 2L;
                            i14 = i12;
                        }
                    }
                    break;
                case 44:
                    Test.instanceCount *= i13;
                    break;
                case 45:
                    i14 = i14;
                    break;
                case 46:
                    Test.iArrFld[(i18 >>> 1) % N] -= i13;
                    break;
                }
            } else {
                if (i17 != 0) {
                    vMeth_check_sum += i12 + i13 + i14 + by + i16 + i17 + i18 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            }
        }
        vMeth_check_sum += i12 + i13 + i14 + by + i16 + i17 + i18 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {

        int i6=57067, i7=4, i8=-4, i9=14, i10=79, i11=3, i19=-4, i20=38338, i21=-64166;
        byte by1=-67;

        for (i6 = 3; 286 > i6; i6++) {
            for (i8 = 1; i8 < 6; i8++) {
                for (i10 = 2; i10 > 1; --i10) {
                    double d2=-41.89126;
                    i9 = (i11 * Integer.reverseBytes((int)(-(i10 * d2))));
                    Test.iArrFld[i8 + 1] = (-((i8 - i8) - (96 - i6)));
                }
                i9 = (int)(-((i10 ^ 111) + Math.max(29L, Test.instanceCount)));
            }
            vSmallMeth();
        }
        vMeth(i19);
        i11 = Test.iFld;
        i11 -= (int)Test.instanceCount;
        for (i20 = 9; i20 < 357; ++i20) {
            Test.iFld ^= by1;
            Test.instanceCount += (i20 | (long)Test.fFld);
            Test.dFld *= 10;
            if (true) break;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i19 + i20 + i21 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=42, i1=44972, i2=-2, i4=237, i5=36832, i22=-13, i23=-182, i24=-135, i25=-6;
        double d=21.121638, d1=0.12803;
        byte by2=-74, byArr1[][]=new byte[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)21126);
        FuzzerUtils.init(byArr1, (byte)9);

        for (i = 10; i < 247; ++i) {
            i1 += (((i * i) + i1) - Test.instanceCount);
            Test.iArrFld[i] += Test.iArrFld[i - 1];
            Test.fFld += Math.min(Math.max((int)(-23939 + (Test.instanceCount * i)), 226), (int)(d + Test.lArrFld[i +
                1]));
            for (d1 = 6; d1 < 106; ++d1) {
                for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth();
                i1 -= (int)((i2 = (int)(Test.instanceCount + i2)) + Math.abs(++Test.fFld));
                vSmallMeth();
                i2 += (int)((-i2) * (--Test.instanceCount));
            }
            for (i4 = 1; i4 < 106; i4 += 3) {
                if (Test.bFld) {
                    Test.instanceCount = iMeth();
                    sArr[i4 - 1] >>= (short)Test.iFld;
                    for (i22 = 1; i22 < 4; ++i22) {
                        i1 += i23;
                        i1 = i1;
                        fArrFld[i - 1] = Test.instanceCount;
                    }
                } else if (Test.bFld) {
                    Test.iArrFld = Test.iArrFld;
                    Test.iArrFld[i + 1] = i4;
                    i5 -= (int)Test.instanceCount;
                    i23 *= i2;
                } else if (Test.bFld) {
                    Test.instanceCount += (((i4 * Test.instanceCount) + i4) - i23);
                    Test.iFld += i4;
                    for (i24 = i; i24 < 4; ++i24) {
                        if (Test.bFld) continue;
                        i5 >>= 230;
                        Test.dFld -= by2;
                        i5 += (8 + (i24 * i24));
                    }
                }
                Test.lArrFld[i] *= (long)Test.fFld;
                byArr1 = FuzzerUtils.byte2array(N, (byte)-113);
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("d1 i2 i4 = " + Double.doubleToLongBits(d1) + "," + i2 + "," + i4);
        FuzzerUtils.out.println("i5 i22 i23 = " + i5 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 by2 = " + i24 + "," + i25 + "," + by2);
        FuzzerUtils.out.println("sArr byArr1 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld Test.dFld Test.iArrFld = " + Test.iFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
