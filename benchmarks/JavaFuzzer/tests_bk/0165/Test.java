// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static double dFld=1.78243;
    public static volatile boolean bFld=false;
    public static short sFld=26524;
    public float fFld=112.150F;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i3=17656, i4=243, i5=-206, i6=-157;
        float f=-55.427F;
        long l=2L;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(sArr, (short)-3925);

        Test.iArrFld[(20397 >>> 1) % N] += (int)Test.instanceCount;
        i3 = 1;
        do {
            Test.instanceCount += (i3 - Test.instanceCount);
            i4 <<= (int)Test.instanceCount;
            i5 = 1;
            do {
                i4 += (((i5 * i4) + Test.instanceCount) - f);
                for (l = 1; l > 1; l--) {
                    Test.instanceCount &= l;
                    Test.iArrFld[(int)(l)] -= (int)Test.instanceCount;
                    Test.instanceCount += (l ^ Test.instanceCount);
                    i4 <<= i6;
                    i4 += i5;
                    i4 += (int)l;
                }
                sArr[i5 + 1][i5] += (short)Test.dFld;
                i4 += (int)l;
            } while (++i5 < 24);
        } while ((i3 += 2) < 131);
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f) + l + i6 + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i1=-184, i2=-52455, i7=-5, i8=20499, i9=41159, i10=206;
        float f1=-19.587F;
        double d=0.104238;
        byte by1=-8;

        for (i1 = 5; i1 < 153; i1++) {
            i2 *= -202;
            Test.instanceCount >>= lMeth();
            f1 /= ((long)(d) | 1);
            if (Test.bFld) {
                for (i7 = 11; i1 < i7; i7--) {
                    try {
                        i2 = (Test.iArrFld[i7 + 1] / 174);
                        i8 = (i2 % i8);
                        i2 = (i2 / -1458192091);
                    } catch (ArithmeticException a_e) {}
                    i8 -= (int)f1;
                    i2 &= i7;
                    Test.dFld += i8;
                }
                Test.iArrFld[i1] = i8;
                i8 += (((i1 * by1) + Test.instanceCount) - i7);
            } else {
                for (i9 = 1; i9 < 11; i9 += 3) {
                    if (Test.bFld) continue;
                }
            }
            f1 = i2;
        }
        vMeth1_check_sum += i1 + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i7 + i8 + by1 + i9 + i10;
    }

    public void vMeth() {

        int i11=8, i12=-20847, i13=-90, iArr[]=new int[N];
        float f2=0.29F;
        byte by2=-67;

        FuzzerUtils.init(iArr, -2368);

        vMeth1();
        for (i11 = 15; i11 < 330; ++i11) {
            f2 += i11;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)-25718);
            Test.instanceCount >>>= by2;
            i12 += Test.sFld;
            switch (((i11 % 10) * 5) + 15) {
            case 34:
                switch (((i11 % 2) * 5) + 116) {
                case 123:
                    Test.instanceCount &= i12;
                    i12 += (i11 | i11);
                    i12 = 238;
                    f2 += i12;
                    break;
                case 118:
                    i13 = 1;
                    while (++i13 < 5) {
                        dArrFld[i13 + 1] += Test.instanceCount;
                    }
                    i12 += (-238 + (i11 * i11));
                    break;
                default:
                    i12 = (int)Test.instanceCount;
                }
                break;
            case 16:
                Test.instanceCount = 27953;
                break;
            case 55:
                if (i12 != 0) {
                    vMeth_check_sum += i11 + i12 + Float.floatToIntBits(f2) + by2 + i13 + FuzzerUtils.checkSum(iArr);
                    return;
                }
                break;
            case 51:
                i12 = 36485;
                break;
            case 53:
                i12 *= (int)f2;
                break;
            case 30:
                Test.iArrFld = iArr;
                break;
            case 47:
                Test.iArrFld[i11] = i12;
            case 41:
                i12 += i11;
                break;
            case 52:
                i12 -= i12;
                break;
            case 32:
                iArr[i11] >>= Test.sFld;
            default:
                Test.instanceCount = i13;
            }
        }
        vMeth_check_sum += i11 + i12 + Float.floatToIntBits(f2) + by2 + i13 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-4112, i14=-11, i15=209, i16=240, i17=21342, i18=13, i19=17068, i20=-134, i21=0, i22=12021, i23=-21272;
        byte by=13;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test.instanceCount += (lArrFld[(i >>> 1) % N] - (i++));
        Test.instanceCount = (long)(((by - i) + (by + Test.dFld)) + ((--Test.dFld) - (++Test.iArrFld[(-8 >>> 1) % N])));
        vMeth();
        for (i14 = 13; i14 < 358; ++i14) {
            if (false) {
                fFld -= i14;
            } else if (Test.bFld) {
                i15 <<= (int)-33293L;
                for (i16 = i14; i16 < 73; ++i16) {
                    Test.dFld *= 2008761986L;
                    i15 -= i14;
                    i += (120 + (i16 * i16));
                    Test.iArrFld[i14] >>= i;
                    for (i18 = 1; 1 > i18; ++i18) {
                        try {
                            i17 = (i15 / -196);
                            i15 = (i14 % Test.iArrFld[i14 + 1]);
                            Test.iArrFld[i18] = (i16 % -79);
                        } catch (ArithmeticException a_e) {}
                        lArrFld[i14 + 1] += Test.instanceCount;
                        i *= (int)11L;
                        if (Test.bFld) break;
                        i17 |= (int)Test.instanceCount;
                        i15 += i18;
                    }
                    i17 = (int)fFld;
                    for (i20 = 1; 1 < i20; i20--) {
                        Test.instanceCount *= i18;
                        i19 += -50;
                    }
                }
                Test.instanceCount -= i14;
                for (i22 = 73; 3 < i22; i22--) {
                    by += (byte)1.117717;
                    Test.iArrFld[i14] *= i18;
                    i &= i22;
                }
            } else if (Test.bFld) {
                bArr[i14] = Test.bFld;
                fFld *= i22;
            } else {
                i15 += i19;
            }
        }

        FuzzerUtils.out.println("i by i14 = " + i + "," + by + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld fFld lArrFld = " + Test.sFld + "," + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
