// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-50L;
    public float fFld=-2.113F;
    public static short sFld=-31036;
    public static double dFld=-73.108424;
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.596F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f3, int i7, long l) {

        int i8=-47158, i9=229, i10=-154, i11=17, iArr1[]=new int[N], iArr2[]=new int[N];
        double d3=-106.24466;
        byte by=15;
        boolean b=false;
        float f4=-2.799F;
        short s1=-20628;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 45635);
        FuzzerUtils.init(lArr, 5L);
        FuzzerUtils.init(iArr2, -29);

        i8 = 1;
        do {
            d3 -= by;
            i7 += (i8 * i7);
            iArr1 = iArr1;
            i9 += -8;
            i9 <<= i7;
            switch ((i8 % 6) + 17) {
            case 17:
                i7 >>= (int)58L;
                i10 = 1;
                do {
                    l >>= -18882;
                    Test.bArrFld[i8 - 1] = b;
                    i9 += i8;
                    for (f4 = 1; f4 < 1; f4++) {
                        s1 = (short)6;
                        i11 *= (int)13L;
                    }
                } while (++i10 < 7);
                break;
            case 18:
                lArr[i8 - 1] = lArr[i8 - 1];
                break;
            case 19:
                iArr2[i8 - 1] = (int)253L;
                break;
            case 20:
                i11 = i10;
                break;
            case 21:
                i7 = (int)l;
                break;
            case 22:
                i7 += (i8 * i10);
            default:
                Test.fArrFld[i8 + 1] -= i7;
            }
        } while (++i8 < 249);
        long meth_res = Float.floatToIntBits(f3) + i7 + l + i8 + Double.doubleToLongBits(d3) + by + i9 + i10 + (b ? 1 :
            0) + Float.floatToIntBits(f4) + i11 + s1 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(double d, int i2, double d1) {

        int i3=118, i4=-31477, i5=-10, i6=-73, i12=0, i13=183, i14=31188, i15=1, iArr[]=new int[N];
        double d2=111.85243;
        short s=17246;
        float f2=-37.224F;
        boolean b1=false;

        FuzzerUtils.init(iArr, -5);

        for (i3 = 3; i3 < 237; ++i3) {
            for (d2 = 1; d2 < 7; d2++) {
                iArr[i3 + 1] = i5;
            }
            s += (short)(((i3 * i4) + i5) - i3);
            i6 += i3;
            Test.instanceCount = (long)(((f2 + i4) * fMeth(f2, i2, -10L)) - i5);
            iArr[i3] <<= i2;
        }
        iArr[(i2 >>> 1) % N] &= i5;
        for (i12 = 18; 344 > i12; i12++) {
            if (b1) {
                for (i14 = 1; i14 < 5; ++i14) {
                    i6 += (((i14 * f2) + f2) - Test.instanceCount);
                    i13 += (int)d1;
                }
                i13 -= -253;
            } else if (b1) {
                i13 = (int)d2;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + Double.doubleToLongBits(d1) + i3 + i4 +
            Double.doubleToLongBits(d2) + i5 + s + i6 + Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + (b1 ? 1 : 0)
            + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(float f, float f1) {

        int i=-153, i1=26, i16=-129, i17=52188, iArr3[]=new int[N];
        double d4=0.47239, dArr[][]=new double[N][N];

        FuzzerUtils.init(iArr3, -24446);
        FuzzerUtils.init(dArr, -2.19883);

        for (i = 8; i < 235; ++i) {
            Test.fArrFld[i + 1] += (((++i1) + (-(i1 * 28.55F))) / ((iMeth(d4, i1, 24.79978) + i1) | 1));
            i16 = 1;
            do {
                i1 += (int)f1;
                f -= f;
                iArr3[i + 1] -= i16;
                iArr3[i16 + 1] -= i;
                dArr[i + 1][i16] = 3;
                iArr3[i - 1] = i1;
            } while (++i16 < 7);
            f1 += (0 + (i * i));
            i17 = 7;
            while (--i17 > 0) {
                i1 += i17;
                i1 *= i;
                try {
                    iArr3[i17] = (-278782164 % i16);
                    i1 = (iArr3[i + 1] % i1);
                    i1 = (17 / i);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (i17 | Test.instanceCount);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i + i1 + Double.doubleToLongBits(d4) +
            i16 + i17 + FuzzerUtils.checkSum(iArr3) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=-24362, i19=-31590, i20=-13, i21=8, i23=-53580, i24=-21141, iArr4[]=new int[N], iArr5[][]=new int[N][N];
        double d5=-2.5987, d6=-18.111831;
        byte by1=59;
        boolean b2=true;

        FuzzerUtils.init(iArr4, -64);
        FuzzerUtils.init(iArr5, 29957);

        vMeth(fFld, 28.668F);
        i18 = 1;
        do {
            Test.instanceCount += i18;
            for (d5 = 4; d5 < 91; ++d5) {
                for (d6 = 1; d6 < 2; d6++) {
                    i19 += (int)(d6 + fFld);
                    i20 += (int)d6;
                    i20 = i19;
                    i20 *= i19;
                    Test.sFld += (short)(64 + (d6 * d6));
                    i20 += i20;
                    Test.dFld += i19;
                    i20 *= i19;
                    i21 += (int)d6;
                    i21 += (int)d6;
                }
                fFld = Test.sFld;
                fFld -= i19;
                try {
                    i19 = (-14 / i19);
                    i20 = (i19 / 199);
                    iArr4[i18 + 1] = (i18 % i19);
                } catch (ArithmeticException a_e) {}
            }
            if (b2) {
                iArr5 = iArr5;
                for (i23 = 91; i23 > 1; i23--) {
                    i21 = -26261;
                    Test.instanceCount *= Test.instanceCount;
                    switch (((i19 >>> 1) % 1) + 106) {
                    case 106:
                        i19 *= (int)fFld;
                    default:
                        i20 -= (int)Test.instanceCount;
                        by1 *= (byte)i20;
                        fFld = 2824034042L;
                    }
                    i24 = i19;
                    i24 = by1;
                }
            }
        } while (++i18 < 275);

        FuzzerUtils.out.println("i18 d5 i19 = " + i18 + "," + Double.doubleToLongBits(d5) + "," + i19);
        FuzzerUtils.out.println("d6 i20 i21 = " + Double.doubleToLongBits(d6) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i23 i24 by1 = " + i23 + "," + i24 + "," + by1);
        FuzzerUtils.out.println("b2 iArr4 iArr5 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr4) + "," +
            FuzzerUtils.checkSum(iArr5));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.dFld Test.fArrFld Test.bArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
