// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=26L;
    public static int iFld=17;
    public static float fFld=106.314F;
    public static boolean bFld1=true;
    public static short sFld=19891;
    public int iArrFld[]=new int[N];
    public static short sArrFld[][]=new short[N][N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-17058);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(long l2) {

        int i15=-42977, i16=19806, i17=10, i18=-64339, i19=2222, i20=1, i21=-197, iArr1[]=new int[N];
        boolean b1=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr1, -214);
        FuzzerUtils.init(lArr1, 5431199354765574854L);

        for (int i14 : iArr1) {
            for (i15 = 1; i15 < 4; i15++) {
                for (i17 = 1; 2 > i17; i17++) {
                    lArr1[i17] = i15;
                    i16 <<= (int)l2;
                    Test.iFld >>= i16;
                    i14 <<= i14;
                    if (b1) continue;
                    Test.iFld -= 170;
                    Test.instanceCount = i18;
                    i18 += (i17 * i14);
                }
            }
            for (i19 = 1; i19 < 4; ++i19) {
                i21 = 1;
                while (++i21 < 2) {
                    Test.fFld += (i21 + l2);
                    i18 >>= i20;
                }
            }
        }
        long meth_res = l2 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i11) {

        long l=330219728L, l1=3344911029L, l3=-1373763091L, lArr[]=new long[N];
        int i12=-19, i13=4, i22=2, iArr2[]=new int[N];
        float f=-1.70F;
        boolean b2=false, bArr1[]=new boolean[N];
        double d1=12.43111;

        FuzzerUtils.init(lArr, -2409881016L);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr2, -252);

        Test.iFld -= (int)(((Test.instanceCount - Test.iFld) * (0 + (lArr[(-1 >>> 1) % N] = 17921))) * Test.iFld);
        for (l = 244; l > 11; --l) {
            for (l1 = 1; l1 < 7; ++l1) {
                i11 <<= (int)((Math.abs(i11) + (i13 - f)) + iMeth2(l1));
                Test.sArrFld[(int)(l + 1)][(int)(l - 1)] -= (short)41533L;
                Test.instanceCount /= (i13 | 1);
                bArr1[(int)(l1 + 1)] = b2;
                i13 += (int)l1;
                i11 += (int)(((l1 * Test.iFld) + l1) - i13);
                i11 -= -158;
                f = (float)d1;
            }
            try {
                i13 = (i11 % i12);
                i11 = (-450942949 / Test.iFld);
                iArr2[(int)(l)] = (i13 % -18990);
            } catch (ArithmeticException a_e) {}
            for (l3 = 1; l3 < 7; l3++) {
                if (b2) break;
            }
            lArr[(int)(l)] >>= l;
        }
        long meth_res = i11 + l + i12 + l1 + i13 + Float.floatToIntBits(f) + (b2 ? 1 : 0) + Double.doubleToLongBits(d1)
            + l3 + i22 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        int i7=10, i8=-19208, i9=42583, i10=-4, i23=4, i24=2;
        double d=-121.56266;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i7 = 134; i7 > 6; i7--) {
            for (i9 = 12; 1 < i9; i9--) {
                bArr[i9 + 1] = (((--Test.iFld) * (i6 * d)) >= iMeth1(i6));
                Test.fFld *= 210L;
                i23 = 1;
                while ((i23 += 3) < 2) {
                    i8 += (int)-1.473F;
                    i5 = i5;
                    Test.instanceCount = i6;
                    Test.instanceCount |= Test.instanceCount;
                    i4 += i23;
                    d *= Test.fFld;
                    Test.fFld += i5;
                    i8 += i24;
                    if (Test.bFld1) continue;
                    i24 >>>= i23;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i23 + i24 +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i3=253, i25=13, i26=2, i27=59277, i28=56241;
        byte by=123;
        boolean b=false;
        float f1=64.979F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.758F);

        i3 = 291;
        do {
            switch ((i3 % 4) + 95) {
            case 95:
                Test.iFld *= (++iArrFld[i3 - 1]);
                Test.iFld = (by++);
                if (false) {
                    Test.iFld -= iArrFld[i3 + 1];
                    b = (Test.iFld != Test.fFld);
                    Test.sArrFld[i3][i3 - 1] *= (short)((-Math.abs(-2)) + (iMeth(-41, Test.iFld, Test.iFld) - i3));
                    if (false) {
                        Test.iFld += (i3 + by);
                        if (false) continue;
                    } else if (b) {
                        Test.iFld >>= Test.iFld;
                        if (Test.bFld1) continue;
                        for (i25 = 172; i25 > 10; i25--) {
                            i26 += (int)(2L + (i25 * i25));
                        }
                    } else {
                        Test.fFld += i26;
                        iArrFld[i3 - 1] = (int)-87.801F;
                        f1 = 1;
                        while (++f1 < 172) {
                            Test.instanceCount *= -6669;
                            Test.iFld *= i3;
                            i26 = i26;
                        }
                        switch (((i3 % 5) * 5) + 95) {
                        case 101:
                            i26 = (int)Test.instanceCount;
                            for (i27 = 10; 172 > i27; i27++) {
                                iArrFld[i3 - 1] += (int)Test.fFld;
                                i28 += (44 + (i27 * i27));
                                Test.instanceCount -= 4;
                                if (b) {
                                    fArr[i27 - 1] -= Test.iFld;
                                } else if (b) {
                                    i28 += (((i27 * i25) + Test.instanceCount) - by);
                                } else {
                                    i26 |= i27;
                                }
                            }
                            break;
                        case 117:
                            i26 *= i26;
                            break;
                        case 103:
                            Test.instanceCount += (((i3 * i25) + Test.iFld) - Test.fFld);
                        case 96:
                            Test.iFld += (((i3 * i26) + Test.sFld) - Test.instanceCount);
                            break;
                        case 108:
                            i28 >>= Test.sFld;
                            break;
                        }
                    }
                } else {
                    Test.instanceCount += (((i3 * i25) + Test.instanceCount) - Test.iFld);
                }
                break;
            case 96:
                i28 += (i3 * i3);
                break;
            case 97:
                i28 = i27;
                break;
            case 98:
                Test.instanceCount = Test.iFld;
            }
        } while ((i3 -= 2) > 0);

        FuzzerUtils.out.println("i3 by b = " + i3 + "," + by + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 f1 = " + i25 + "," + i26 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i27 i28 fArr = " + i27 + "," + i28 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld1 Test.sFld iArrFld = " + (Test.bFld1 ? 1 : 0) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
