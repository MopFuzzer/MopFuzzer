// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static boolean bFld=true;
    public short sFld=28823;
    public static byte byFld=4;
    public static volatile float fFld=0.355F;
    public static volatile long lArrFld[][]=new long[N][N];
    public static volatile float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -1665353477L);
        FuzzerUtils.init(Test.fArrFld, -2.411F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f1, long l) {

        int i7=-4, i8=-12, i9=7, i10=0, i11=-158, i12=5, iArr[]=new int[N];
        double d=23.80680;

        FuzzerUtils.init(iArr, 8);

        for (i7 = 127; i7 > 4; --i7) {
            for (i9 = 1; i9 < 13; i9++) {
                switch ((i7 % 5) + 69) {
                case 69:
                    i11 = 1;
                    while (++i11 < 2) {
                        l <<= i10;
                        i10 += i10;
                    }
                    break;
                case 70:
                    iArr[i9] -= (int)-55490L;
                    iArr[i7 - 1] = (int)l;
                    break;
                case 71:
                    d = f1;
                case 72:
                    i12 = 1;
                    do {
                        i8 *= i12;
                        d -= f1;
                        f1 = l;
                        if (i8 != 0) {
                            vMeth2_check_sum += Float.floatToIntBits(f1) + l + i7 + i8 + i9 + i10 + i11 +
                                Double.doubleToLongBits(d) + i12 + FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        Test.instanceCount += i11;
                    } while (++i12 < 2);
                    break;
                case 73:
                    l = Test.instanceCount;
                default:
                    l += (long)f1;
                }
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f1) + l + i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12
            + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i4, int i5, int i6) {

        int i13=-62643, i14=-78, i15=62619, i16=250, i17=-1, i18=-52673, iArr1[]=new int[N];
        short s=-26376;
        long l1=-1183570121110057864L;
        float f2=2.484F;
        byte by=-72;
        boolean b=false;

        FuzzerUtils.init(iArr1, -152);

        vMeth2(0.843F, Test.instanceCount);
        for (i13 = 8; i13 < 201; ++i13) {
            s += (short)i14;
            i14 *= (int)1.97022;
            i6 = i6;
            l1 = 8;
            while (--l1 > 0) {
                f2 = by;
            }
            i14 = i6;
        }
        s -= (short)Test.instanceCount;
        iArr1[(i4 >>> 1) % N] = 57777;
        b = b;
        for (i15 = 4; 168 > i15; ++i15) {
            for (i17 = 1; i17 < 10; ++i17) {
                iArr1[i15 - 1] -= i15;
                if (b) break;
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i13 + i14 + s + l1 + Float.floatToIntBits(f2) + by + (b ? 1 : 0) + i15 + i16
            + i17 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i, int i1, int i2) {

        float f=0.936F;
        int i3=12, i19=-5, i20=-17184, i21=122, iArr2[]=new int[N];
        double d1=-2.81768, d2=0.11537;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-95);
        FuzzerUtils.init(iArr2, -31832);

        for (f = 6; 179 > f; f++) {
            vMeth1(-12, 214, i2);
            byArr[(int)(f)] += (byte)93;
            Test.instanceCount += (long)f;
            if (Test.bFld) break;
        }
        for (i19 = 9; i19 < 152; ++i19) {
            i3 = i20;
            iArr2[i19] = i20;
            for (d1 = 1; 11 > d1; d1++) {
                switch ((((i >>> 1) % 9) * 5) + 24) {
                case 30:
                    Test.instanceCount *= 10L;
                    Test.lArrFld[(int)(d1)][i19] &= 9499;
                    Test.lArrFld[i19 - 1][i19 - 1] = -17183;
                case 48:
                case 25:
                    Test.lArrFld[(int)(d1)] = FuzzerUtils.long1array(N, (long)83L);
                    sFld = (short)d1;
                case 35:
                    d2 *= f;
                    break;
                case 33:
                    i >>= i3;
                case 44:
                    d2 = i3;
                    break;
                case 37:
                    if (i2 != 0) {
                        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i19 + i20 +
                            Double.doubleToLongBits(d1) + i21 + Double.doubleToLongBits(d2) +
                            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                    break;
                case 61:
                    Test.fArrFld[i19 - 1] = f;
                    break;
                case 57:
                    iArr2 = FuzzerUtils.int1array(N, (int)-127);
                    break;
                default:
                    i2 *= (int)d2;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i19 + i20 + Double.doubleToLongBits(d1) + i21 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=-10, i23=19, i24=-12, i25=-150, i26=-26641, i27=-19509;
        double d3=-2.104962;

        vMeth(56198, i22, -190);
        i22 = i22;
        Test.byFld -= (byte)Test.instanceCount;
        i22 = (int)Test.fFld;
        for (i23 = 6; 226 > i23; ++i23) {
            i24 *= sFld;
            try {
                i22 = (-50572 % i22);
                i22 = (i22 / i23);
                iArrFld[i23 - 1] = (iArrFld[i23] % i24);
            } catch (ArithmeticException a_e) {}
            i22 ^= i23;
            switch (((i23 % 4) * 5) + 23) {
            case 41:
                i24 = i22;
                i22 += i22;
                Test.fFld += (((i23 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                Test.fFld += (((i23 * i22) + i22) - sFld);
                break;
            case 42:
            case 32:
                i24 *= -210;
                i25 = 1;
                while (++i25 < 114) {
                    i22 += (((i25 * Test.instanceCount) + i22) - Test.instanceCount);
                    i24 = i23;
                    try {
                        iArrFld[i23 - 1] = (-175 % i24);
                        i22 = (iArrFld[i25] / -40);
                        i22 = (22137 / i22);
                    } catch (ArithmeticException a_e) {}
                    i24 = i23;
                }
                iArrFld[i23] = i25;
            case 38:
                Test.fFld += i25;
                i26 = 1;
                do {
                    for (d3 = 1; d3 < 1; d3++) {
                        Test.instanceCount = (long)d3;
                        Test.instanceCount *= i27;
                    }
                } while (++i26 < 114);
            default:
                i22 = i25;
            }
            i27 = i24;
            i24 = (int)Test.instanceCount;
            iArrFld[i23 + 1] >>= i22;
            i24 += (int)-213L;
        }

        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 d3 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i27 = " + i27);

        FuzzerUtils.out.println("Test.instanceCount Test.bFld sFld = " + Test.instanceCount + "," + (Test.bFld ? 1 : 0)
            + "," + sFld);
        FuzzerUtils.out.println("Test.byFld Test.fFld Test.lArrFld = " + Test.byFld + "," +
            Float.floatToIntBits(Test.fFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))
            + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
