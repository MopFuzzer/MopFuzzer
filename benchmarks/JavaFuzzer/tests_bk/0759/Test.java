// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=6993248391099101216L;
    public static volatile short sFld=27251;
    public static volatile boolean bFld=false;
    public static byte byFld=-64;
    public int iFld=234;
    public static volatile long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 208L);
        FuzzerUtils.init(Test.fArrFld, 23.714F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, int i9) {

        int i11=184, i12=0, i13=-14191, i14=44389, iArr[]=new int[N];
        float f3=85.641F;

        FuzzerUtils.init(iArr, 162);

        Test.instanceCount += Test.instanceCount;
        for (int i10 : iArr) {
            byte by=4;
            i10 += i9;
            iArr[(i10 >>> 1) % N] = 21315;
            Test.fArrFld[(i9 >>> 1) % N] = Test.instanceCount;
            Test.instanceCount = Test.sFld;
            Test.lArrFld[(i10 >>> 1) % N] >>= by;
            for (i11 = 1; i11 < 4; i11++) {
                i12 += -8803;
                if (Test.bFld) continue;
                f3 = i8;
                for (i13 = 2; i13 > i11; i13 -= 3) {
                    if (Test.bFld) continue;
                    i10 = i9;
                    Test.instanceCount -= i8;
                }
            }
        }
        long meth_res = i8 + i9 + i11 + i12 + Float.floatToIntBits(f3) + i13 + i14 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5) {

        int i6=-141, i7=254, i15=-23094;
        float f2=0.587F;
        double d=34.21262;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)1142);

        for (i6 = 5; i6 < 174; i6 += 2) {
            i5 *= (int)(-((i7 - i7) + (Test.instanceCount - f2)));
            Test.sFld ^= (short)(((++f2) + (i5 + -3)) + (++Test.instanceCount));
            d += (Test.lArrFld[i6]++);
            Test.instanceCount >>= iMeth(i5, 67);
            Test.lArrFld[i6 - 1] &= Test.instanceCount;
            Test.bFld = Test.bFld;
            i5 -= i5;
            Test.instanceCount *= Test.byFld;
            f2 = i7;
            i7 *= (int)Test.instanceCount;
        }
        i15 = 1;
        while (++i15 < 379) {
            i7 += (((i15 * i5) + f2) - i15);
            if (Test.bFld) break;
            i5 += i7;
        }
        vMeth1_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i15 +
            FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(int i2, float f1) {

        int i3=116, i4=-108, i16=-119, i17=-235, i18=4, i19=-212, iArr1[]=new int[N];
        float f4=0.304F;
        double d1=-2.58285;

        FuzzerUtils.init(iArr1, 8);

        for (i3 = 8; 332 > i3; ++i3) {
            vMeth1(i2);
            if (i2 != 0) {
                vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i3 + i4 + Float.floatToIntBits(f4) + i16 + i17 + i18
                    + i19 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
                return;
            }
            i2 += (int)(1871591473L + (i3 * i3));
            Test.byFld += (byte)(-197 + (i3 * i3));
            try {
                i2 = (i3 / i4);
                i4 = (iArr1[i3] % i2);
                i4 = (-47 % i3);
            } catch (ArithmeticException a_e) {}
            i2 -= i3;
            for (f4 = 1; 5 > f4; ++f4) {
                Test.instanceCount -= i2;
            }
        }
        i17 = 1;
        do {
            Test.instanceCount = i3;
            for (i18 = 10; 1 < i18; i18 -= 3) {
                i19 += (int)d1;
            }
            iArr1[i17 + 1] += (int)d1;
            if (false) break;
        } while (++i17 < 153);
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i3 + i4 + Float.floatToIntBits(f4) + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-146, i1=-12, i20=45308, i21=-27693, i22=-2, i23=9, i24=176, i25=-40627;
        float f=0.712F;
        double d2=-16.55528;

        for (i = 7; i < 154; i++) {
            i1 = i;
            i1 >>= (int)(((i1 += (int)2805861002L) - (f - i1)) - (i1 += (int)(Test.instanceCount + i)));
            vMeth(i1, f);
            switch (((i >>> 1) % 3) + 11) {
            case 11:
                for (i20 = 6; i20 < 171; ++i20) {
                    for (i22 = 2; i22 > i; i22 -= 3) {
                        Test.fArrFld[i20 - 1] *= Test.byFld;
                        f *= Test.sFld;
                        if (true) continue;
                        Test.instanceCount = i21;
                        f += (float)d2;
                        i23 += i22;
                        i23 += (i22 ^ i21);
                        i23 *= iFld;
                    }
                    f += Test.instanceCount;
                    Test.lArrFld = Test.lArrFld;
                    for (i24 = 1; i24 < 2; i24++) {
                        Test.bFld = false;
                        iArrFld[i20 + 1] += i22;
                        i23 = i22;
                        iFld = (int)f;
                        i21 *= (int)1.800F;
                        Test.instanceCount += (i24 * i24);
                        d2 = i1;
                        Test.bFld = Test.bFld;
                        Test.instanceCount -= i23;
                    }
                    d2 *= i20;
                    iArrFld[i + 1] = Test.byFld;
                    Test.byFld += (byte)Test.instanceCount;
                }
            case 12:
                try {
                    iFld = (-100 / iArrFld[i + 1]);
                    i1 = (i23 / iArrFld[i - 1]);
                    i1 = (i20 % -61541);
                } catch (ArithmeticException a_e) {}
            case 13:
                Test.instanceCount += (i | i23);
                break;
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 d2 i24 = " + i23 + "," + Double.doubleToLongBits(d2) + "," + i24);
        FuzzerUtils.out.println("i25 = " + i25);

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.byFld iFld Test.lArrFld = " + Test.byFld + "," + iFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))
            + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
