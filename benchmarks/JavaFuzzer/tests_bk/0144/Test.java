// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=231L;
    public static float fFld=0.322F;
    public static double dFld=59.94438;
    public static volatile boolean bFld=true;
    public static volatile short sFld=-1238;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -145);
        FuzzerUtils.init(Test.sArrFld, (short)8177);
        FuzzerUtils.init(Test.lArrFld, -14L);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=-4, i5=-207, i6=188, i7=13, i8=3, iArr[]=new int[N];
        double d1=0.49360;
        short s=3412;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4L);
        FuzzerUtils.init(iArr, 12);

        i4 += (int)d1;
        for (i5 = 14; 383 > i5; i5++) {
            s |= (short)59;
            i4 += (((i5 * i4) + i6) - Test.instanceCount);
            i7 = 5;
            while (--i7 > 0) {
                Test.instanceCount *= i4;
            }
            Test.fFld += (((i5 * i7) + Test.fFld) - i4);
            lArr[i5 + 1] += i7;
            i8 = 5;
            while ((i8 -= 2) > 0) {
                iArr = iArr;
                i6 += (i8 ^ (long)Test.fFld);
            }
            Test.fFld += i5;
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d1) + i5 + i6 + s + i7 + i8 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l) {

        int i2=-80, i3=46758, i9=-29791, i10=133, i11=-62038, iArr1[]=new int[N];
        short s1=3768;
        boolean b=false;

        FuzzerUtils.init(iArr1, -11);

        for (i2 = 18; i2 < 314; ++i2) {
            switch ((i2 % 2) + 106) {
            case 106:
                vMeth1();
                break;
            case 107:
                i3 += (((i2 * i3) + s1) - Test.fFld);
                Test.dFld += i2;
                break;
            default:
                if (b) continue;
                i3 += i2;
                for (i9 = 6; i9 > 1; i9--) {
                    byte by1=49;
                    Test.fFld = by1;
                    i11 = 1;
                    while (++i11 < 2) {
                        i10 += i2;
                        iArr1[i9 - 1] = -13954;
                        i10 += (-44444 + (i11 * i11));
                        i10 *= i11;
                    }
                    Test.fFld = -49;
                }
            }
        }
        long meth_res = l + i2 + i3 + s1 + (b ? 1 : 0) + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        double d=45.20435;
        int i1=-10816, i13=-109, i14=0, i15=-1, i16=-10660;
        byte by=-58;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.642F);

        for (d = 4; d < 176; d++) {
            float f=-2.980F;
            f *= ((by = (byte)(12457 + Test.instanceCount)) + Math.abs(i + i));
        }
        i1 >>= iMeth(Test.instanceCount);
        for (int i12 : Test.iArrFld) {
            for (i13 = 1; i13 < 4; i13++) {
                Test.sArrFld[i13] -= (short)Test.instanceCount;
                Test.dFld += i;
            }
            Test.instanceCount = 51312;
            for (i15 = 4; 1 < i15; i15 -= 2) {
                i14 >>= -59;
                fArr[i15 - 1] = i;
                Test.dFld *= -4480;
                Test.bFld = Test.bFld;
                i12 >>>= i16;
                Test.sArrFld[i15 - 1] = (short)i15;
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d) + i1 + by + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i17=40, i18=252, i19=9, i20=-54284, i21=47223, i22=-41525, i23=173, i24=-3, i25=163, i26=-36527;
        long l1=4321747066972737949L, lArr1[][]=new long[N][N];
        double dArr[][]=new double[N][N];
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(dArr, -125.27834);
        FuzzerUtils.init(sArr, (short)17923);
        FuzzerUtils.init(lArr1, -7L);

        vMeth(i17);
        Test.lArrFld[(i17 >>> 1) % N] = (long)Test.dFld;
        Test.dFld = -174;
        for (l1 = 3; 134 > l1; ++l1) {
            switch ((((i17 >>> 1) % 6) * 5) + 19) {
            case 32:
                i17 -= (int)-201L;
                switch ((int)(((l1 % 1) * 5) + 6)) {
                case 7:
                    for (i19 = 1; i19 < 191; i19++) {
                        i20 += (int)Test.instanceCount;
                        i20 += i20;
                        i18 *= i20;
                        dArr[(int)(l1)][(int)(l1 + 1)] *= Test.instanceCount;
                        i20 >>= i19;
                        for (i21 = 1; i21 < 2; i21++) {
                            Test.dFld = Test.instanceCount;
                            Test.bArrFld[i19] = false;
                            i20 += i18;
                        }
                    }
                    Test.iArrFld[(int)(l1 - 1)] -= i20;
                }
                break;
            case 35:
                for (i23 = (int)(l1); i23 < 191; ++i23) {
                    Test.sFld <<= (short)i22;
                    Test.iArrFld[(int)(l1 + 1)] >>= (int)Test.instanceCount;
                    for (i25 = 1; i25 < 1; i25++) {
                        sArr = FuzzerUtils.short2array(N, (short)-10132);
                        i24 += (((i25 * i18) + i26) - i18);
                        i24 = i23;
                        if (Test.bFld) {
                            i24 = -3;
                        } else {
                            i17 += 60245;
                            lArr1 = FuzzerUtils.long2array(N, (long)-525028367L);
                            i17 += i22;
                        }
                    }
                }
                break;
            case 30:
                Test.instanceCount += i25;
                break;
            case 40:
            case 43:
                lArr1[(int)(l1)][(int)(l1 + 1)] = i17;
            case 28:
                i24 <<= -101;
            default:
            }
        }

        FuzzerUtils.out.println("i17 l1 i18 = " + i17 + "," + l1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 dArr = " + i25 + "," + i26 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("sArr lArr1 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld Test.lArrFld Test.bArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
