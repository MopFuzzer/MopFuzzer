// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2072631669L;
    public volatile int iFld=-14;
    public static float fFld=34.45F;
    public static boolean bFld=true;
    public static short sFld=-24392;
    public static int iFld1=-149;
    public static double dFld=-1.77133;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -1.701F);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i5, byte by) {

        int i6=134, i7=-3, i8=-8372, i9=-58379, i10=-121, i11=2008, i12=12, i13=-5545, iArr[]=new int[N];
        double d=2.66564;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(lArr, 41376L);

        Test.instanceCount -= i5;
        i5 += i5;
        for (i6 = 6; i6 < 208; i6++) {
            i7 = 0;
            for (i8 = 1; i8 < 8; ++i8) {
                i5 += (int)d;
            }
            if (false) {
                i5 += (((i6 * Test.fFld) + by) - i9);
                for (i10 = i6; i10 < 8; i10++) {
                    Test.instanceCount += i10;
                    i11 += -8;
                    b = b;
                }
            } else if (b) {
                for (i12 = i6; i12 < 8; ++i12) {
                    iArr[i6 + 1] |= i8;
                }
                lArr[i6 - 1] *= i11;
            } else {
                if (b) continue;
            }
        }
        long meth_res = i5 + by + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 + (b ? 1 : 0) + i12 + i13
            + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(float f1) {

        int i1=12, i2=-2, i3=-178, i4=34223, i14=7, i15=192, i16=0, i17=-58604, i18=8;
        byte by1=-21;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -27581L);

        for (i1 = 9; i1 < 171; i1++) {
            for (i3 = 1; 10 > i3; ++i3) {
                i2 = (int)(i2 + ((-(Test.instanceCount - i1)) * (Test.instanceCount + i4)));
                if (byMeth(i4, by1) != i3) break;
                if (Test.bFld) continue;
            }
            i14 = (int)Test.instanceCount;
            for (i15 = 1; i15 < 10; i15 += 2) {
                for (i17 = 1; i17 < 3; i17 += 2) {
                    Test.sFld -= (short)1846205450915224076L;
                    Test.iFld1 <<= i2;
                    lArr1[i1 - 1] = 6;
                    if (Test.bFld) {
                        i14 = i14;
                    } else {
                        Test.instanceCount += i17;
                        i16 += Test.iFld1;
                    }
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i2 + i3 + i4 + by1 + i14 + i15 + i16 + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
    }

    public static float fMeth() {

        int i=-220, i19=-59, i20=-34, i21=105, i22=-205, i23=44, iArr1[][]=new int[N][N];
        long l=8571282584460180873L;

        FuzzerUtils.init(iArr1, 893);

        i = 1;
        while (++i < 227) {
            vMeth(Test.fFld);
            Test.fFld = Test.iFld1;
            for (i19 = 1; i19 < 7; i19++) {
                Test.fFld += (0.765F + (i19 * i19));
                for (l = 1; l < 2; l += 3) {
                    i20 += (int)l;
                    i20 += Test.iFld1;
                    Test.fFld += (l + i20);
                    i20 = i;
                }
                Test.bFld = Test.bFld;
                for (i22 = i; i22 < 2; i22++) {
                    if (i22 != 0) {
                    }
                    iArr1[i] = iArr1[i22 - 1];
                    i21 |= (int)l;
                }
            }
        }
        long meth_res = i + i19 + i20 + l + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-19.477F;
        int i24=-21204, i25=-185, i26=108, i27=-116, iArr2[][]=new int[N][N];
        short sArr[]=new short[N];
        long lArr2[][]=new long[N][N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(sArr, (short)19413);
        FuzzerUtils.init(iArr2, 18376);
        FuzzerUtils.init(lArr2, 4430024821581838531L);
        FuzzerUtils.init(byArr, (byte)95);

        Test.instanceCount -= (long)Math.abs(Math.abs(--f));
        for (short s : sArr) {
            iFld += (int)(fMeth() + Test.dFld);
            iArr2[(iFld >>> 1) % N] = FuzzerUtils.int1array(N, (int)13);
            switch (((iFld >>> 1) % 2) + 54) {
            case 54:
                iFld += (int)Test.instanceCount;
                iFld -= (int)Test.instanceCount;
                for (i24 = 2; i24 < 63; i24++) {
                    iArr2[i24 + 1][i24 + 1] ^= i24;
                    lArr2 = lArr2;
                    i25 <<= 1;
                    if (Test.bFld) {
                        iFld += (((i24 * iFld) + Test.instanceCount) - Test.fFld);
                    } else if (Test.bFld) {
                        Test.iFld1 <<= i24;
                        iFld += -13625;
                    } else {
                        byArr[(i24 >>> 1) % N] *= (byte)iFld;
                        i25 -= -34495;
                        for (i26 = 1; i26 < 2; ++i26) {
                            if (false) continue;
                            f += Test.instanceCount;
                            f *= i27;
                            try {
                                Test.iFld1 = (i26 % 216);
                                Test.iFld1 = (-29372 % iArr2[i26][i26]);
                                i27 = (i24 / i25);
                            } catch (ArithmeticException a_e) {}
                            Test.iFld1 -= i24;
                            switch ((((-38199 >>> 1) % 9) * 5) + 71) {
                            case 77:
                                iFld = (int)2875969242041626187L;
                                Test.bFld = Test.bFld;
                                i27 += (((i26 * Test.instanceCount) + i26) - i27);
                            case 101:
                                Test.instanceCount = Test.instanceCount;
                                break;
                            case 74:
                                Test.instanceCount = Test.sFld;
                                Test.fArrFld[i26] = i24;
                                break;
                            case 78:
                                Test.instanceCount <<= Test.instanceCount;
                                break;
                            case 113:
                                Test.bFld = Test.bFld;
                                break;
                            case 81:
                                i25 = iFld;
                                break;
                            case 115:
                                Test.iFld1 += (((i26 * Test.instanceCount) + Test.fFld) - Test.iFld1);
                                break;
                            case 98:
                                Test.fFld += iFld;
                            case 106:
                                i27 >>>= iFld;
                                break;
                            }
                        }
                    }
                }
                break;
            case 55:
                iFld >>= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("f i24 i25 = " + Float.floatToIntBits(f) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 sArr = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("iArr2 lArr2 byArr = " + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.bFld Test.sFld Test.iFld1 = " + (Test.bFld ? 1 : 0) + "," + Test.sFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("Test.dFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
