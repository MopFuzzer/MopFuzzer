// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=576832144L;
    public static float fFld=115.63F;
    public static byte byFld=-105;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, int i6, int i7) {

        short s2=15562;

        i6 = i6;
        i7 = s2;
        vMeth1_check_sum += l1 + i6 + i7 + s2;
    }

    public static void vMeth(int i3, short s1, double d) {

        int i4=-9, i5=-2, iArr[]=new int[N];
        float f=2.96F;
        boolean b=false;
        long lArr[]=new long[N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(lArr, -16L);
        FuzzerUtils.init(iArr, -94);
        FuzzerUtils.init(dArr, 30.31186);

        i4 = 1;
        while (++i4 < 292) {
            for (f = 1; f < 6; f++) {
                i3 = 204;
                vMeth1(Test.instanceCount, i4, i3);
                i5 += (int)(((f * i5) + Test.instanceCount) - i3);
                lArr[i4] += i4;
                Test.fFld -= i4;
                try {
                    iArr[i4 - 1] = (i4 % i3);
                    i5 = (i4 % i4);
                    i3 = (iArr[(int)(f)] % i5);
                } catch (ArithmeticException a_e) {}
            }
            i3 *= (int)-2.669F;
            if (b) {
                i3 = i5;
                try {
                    iArr[i4 + 1] = (iArr[i4 - 1] % -21650);
                    i5 = (i5 / 469319651);
                    i5 = (10433 % i4);
                } catch (ArithmeticException a_e) {}
                vMeth_check_sum += i3 + s1 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f) + i5 + (b ? 1 :
                    0) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            } else {
                Test.instanceCount += i3;
                dArr[i4 - 1][i4 + 1] *= 167;
                i3 <<= (int)Test.instanceCount;
            }
        }
        vMeth_check_sum += i3 + s1 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f) + i5 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(long l) {

        int i2=22794, i8=5, i9=253, i10=181, iArr1[]=new int[N];
        short s3=14218;
        double d1=-43.96297, dArr1[]=new double[N];
        float f1=28.95F;
        boolean b1=true;

        FuzzerUtils.init(dArr1, -45.66224);
        FuzzerUtils.init(iArr1, 126);

        i2 = -124;
        vMeth(i2, s3, d1);
        d1 = i2;
        i8 = 1;
        while (++i8 < 299) {
            i2 -= i8;
            i2 = -31162;
            i2 += (int)(-2781891296L + (i8 * i8));
            dArr1 = FuzzerUtils.double1array(N, (double)50.85290);
            iArr1[i8 - 1] >>>= (int)17585L;
            for (i9 = 1; i9 < 6; ++i9) {
                if (b1) {
                    f1 = 1;
                    do {
                        i2 = -8;
                        i2 += (int)(((f1 * i10) + i8) - f1);
                        Test.fFld *= i8;
                    } while (++f1 < 2);
                }
            }
        }
        long meth_res = l + i2 + s3 + Double.doubleToLongBits(d1) + i8 + i9 + i10 + Float.floatToIntBits(f1) + (b1 ? 1
            : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=50743, i1=6, i11=251, i12=-50718, i13=-248, i14=9, i15=17749, i16=3, iArr2[]=new int[N];
        short s=10297;
        boolean b2=false;
        double d2=56.62043;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.345F);
        FuzzerUtils.init(iArr2, -48627);

        for (i = 124; i > 3; i -= 2) {
            i1 = -14;
            Test.instanceCount <<= (s * Math.min(-119 + (7 + iMeth(-91L)), -10));
            for (i11 = i; 192 > i11; ++i11) {
                for (i13 = 1; i13 < 2; ++i13) {
                    fArr[i11 - 1] -= 159;
                    i12 += (int)Test.instanceCount;
                    i12 += (i13 | Test.instanceCount);
                }
                i14 += (i11 - i12);
                iArr2[i] ^= i14;
                iArr2[i11 + 1] = 38533;
                Test.byFld -= (byte)i;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test.instanceCount -= i;
                    switch ((((i13 >>> 1) % 2) * 5) + 89) {
                    case 91:
                        switch (((i11 >>> 1) % 10) + 97) {
                        case 97:
                            i1 %= (int)(i16 | 1);
                            Test.instanceCount <<= Test.byFld;
                            break;
                        case 98:
                            b2 = b2;
                            i12 += i15;
                            break;
                        case 99:
                            i16 = (int)-8281918695611822988L;
                            d2 -= s;
                            iArr2[i - 1] = i12;
                        case 100:
                            Test.fFld = i15;
                            iArr2[i + 1] &= (int)Test.instanceCount;
                            Test.instanceCount = Test.instanceCount;
                            i1 = i1;
                            break;
                        case 101:
                            i14 += (i15 - i14);
                            d2 += i1;
                            if (b2) continue;
                        case 102:
                            iArr2[i11] = i14;
                            break;
                        case 103:
                            i1 >>= i16;
                            break;
                        case 104:
                            d2 -= i;
                            break;
                        case 105:
                            Test.instanceCount >>= i15;
                            break;
                        case 106:
                            Test.instanceCount += i14;
                            break;
                        default:
                            iArr2[i11 - 1] *= i12;
                        }
                    case 95:
                        iArr2[i15 + 1] |= (int)-178L;
                        break;
                    default:
                        i16 += (((i15 * i) + i1) - Test.instanceCount);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 s = " + i + "," + i1 + "," + s);
        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("b2 d2 fArr = " + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
