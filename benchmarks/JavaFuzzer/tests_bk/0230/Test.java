// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=29L;
    public static volatile int iFld=32744;
    public static volatile short sFld=12616;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 13705);
        FuzzerUtils.init(Test.dArrFld, 45.74850);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {

        long l2=0L;
        int i1=219, i2=12, i3=-47398, i4=-6, i5=-52599, i6=194, i7=2;
        boolean b=true, bArr[]=new boolean[N];
        float f1=-2.862F;

        FuzzerUtils.init(bArr, true);

        for (l2 = 3; l2 < 397; l2++) {
            bArr[(int)(l2)] = b;
            Test.instanceCount = (long)f1;
            i1 = i1;
            i1 <<= i1;
        }
        for (i2 = 2; i2 < 341; i2++) {
            Test.sFld = (short)-19507;
            Test.iFld >>= i2;
            for (i4 = 1; 5 > i4; ++i4) {
                for (i6 = i4; i6 < 2; ++i6) {
                    f1 -= Test.instanceCount;
                    if (b) break;
                    Test.instanceCount += (i6 ^ Test.instanceCount);
                    Test.instanceCount *= Test.instanceCount;
                    Test.sFld += (short)(7 + (i6 * i6));
                }
            }
        }
        vMeth_check_sum += l1 + l2 + i1 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i2 + i3 + i4 + i5 + i6 + i7 +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(int i) {

        int i8=65094, i9=61711, i10=-2, i11=-14917;
        double d=0.24464;
        byte by1=0;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 6831460306302408900L);

        vMeth(-7225308399248179806L);
        for (i8 = 15; i8 < 352; ++i8) {
            boolean b1=true;
            for (i10 = 1; i10 < 5; ++i10) {
                i11 += (33472 + (i10 * i10));
                Test.instanceCount >>= i10;
                lArr[i10 - 1] -= i11;
                Test.instanceCount += i10;
                Test.iFld -= 51;
                i11 -= i10;
                Test.dArrFld[i10] = i11;
                i += (int)Test.instanceCount;
                if (i11 != 0) {
                }
            }
            if (b1) {
                lArr[i8 - 1] = (long)d;
                Test.iArrFld[i8 - 1] -= by1;
            } else if (false) {
                Test.instanceCount = Test.iFld;
            } else {
                Test.dArrFld[i8] = d;
            }
        }
        long meth_res = i + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + by1 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l, float f) {

        byte by=-73;

        Test.iFld = (int)((-(l - by)) >> Math.abs(Math.max(Test.iFld, -148)));
        Test.iArrFld[(-11 >>> 1) % N] -= (int)(((Test.iFld * Test.iFld) - (f + f)) - (Test.iFld >>= iMeth(Test.iFld)));
        vSmallMeth_check_sum += l + Float.floatToIntBits(f) + by;
    }

    public void mainTest(String[] strArr1) {

        float f2=2.503F, fArr[]=new float[N];
        int i12=36495, i13=26546, i14=4025, i15=230, i16=17;
        double d1=1.33591;
        byte by2=52, byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)52);
        FuzzerUtils.init(fArr, 104.207F);
        FuzzerUtils.init(lArr1, -278165346L);

        Test.iFld = (-14 - ((Test.iFld + Test.iFld) + Test.iFld));
        for (int smallinvoc=0; smallinvoc<382; smallinvoc++) vSmallMeth(Test.instanceCount, f2);
        i12 = 1;
        while (++i12 < 248) {
            Test.instanceCount = Test.iFld;
            switch (((i12 % 1) * 5) + 50) {
            case 52:
                bFld = bFld;
                for (i13 = i12; i13 < 101; i13++) {
                    d1 /= ((long)(d1) | 1);
                    if (bFld) {
                        for (i15 = 1; i15 > 1; i15--) {
                            if (bFld) {
                                i16 = 6661;
                                i16 <<= i14;
                            } else if (false) {
                                byArr = FuzzerUtils.byte1array(N, (byte)80);
                            } else if (bFld) {
                                switch (((i16 >>> 1) % 6) + 120) {
                                case 120:
                                    f2 -= by2;
                                    break;
                                case 121:
                                    i14 += i15;
                                    break;
                                case 122:
                                    i14 += (i15 * i12);
                                    fArr[i15 - 1] += i16;
                                    break;
                                case 123:
                                    Test.iArrFld[i13] = i12;
                                    Test.instanceCount += Test.iFld;
                                    i16 = i14;
                                    Test.instanceCount -= (long)d1;
                                case 124:
                                    i16 *= i12;
                                    break;
                                case 125:
                                    lArr1[i12] -= by2;
                                    switch (((i13 % 6) * 5) + 16) {
                                    case 35:
                                        i16 += (int)d1;
                                        Test.iFld |= -4;
                                        if (bFld) continue;
                                        break;
                                    case 36:
                                        byArr[i13 + 1] = (byte)i16;
                                        break;
                                    case 40:
                                        bFld = true;
                                        break;
                                    case 30:
                                        Test.instanceCount -= Test.sFld;
                                        break;
                                    case 21:
                                        lArr1[i15 + 1] += i12;
                                        break;
                                    case 42:
                                        lArr1[i12 - 1] <<= i16;
                                    }
                                }
                            } else {
                                Test.iArrFld[i13 + 1] += i15;
                            }
                        }
                    } else {
                        by2 = (byte)i16;
                    }
                }
            default:
                i16 += (i12 * i16);
            }
        }

        FuzzerUtils.out.println("f2 i12 i13 = " + Float.floatToIntBits(f2) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 d1 i15 = " + i14 + "," + Double.doubleToLongBits(d1) + "," + i15);
        FuzzerUtils.out.println("i16 by2 byArr = " + i16 + "," + by2 + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("fArr lArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("bFld Test.iArrFld Test.dArrFld = " + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
