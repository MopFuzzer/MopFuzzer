// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-52866L;
    public static short sFld=-25728;
    public static double dFld=99.18281;
    public static volatile boolean bFld=true;
    public static short sArrFld[]=new short[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)-23675);
        FuzzerUtils.init(Test.iArrFld, -218);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        int i4=171, i5=-3, i6=12313, iArr[]=new int[N];
        float f2=-62.652F, fArr[]=new float[N];
        double d1=-79.70344;
        boolean b=false;
        long l=4573869219163803319L, lArr[]=new long[N];
        byte by=-7;

        FuzzerUtils.init(iArr, 813);
        FuzzerUtils.init(lArr, -45891L);
        FuzzerUtils.init(fArr, -13.247F);

        for (i4 = 302; 8 < i4; i4--) {
            iArr[i4] <<= 1494;
            f2 = i3;
            lArr[i4 + 1] = 161;
            Test.sFld = (short)Test.dFld;
            d1 = 1;
            do {
                b = b;
                try {
                    iArr[(int)(d1 - 1)] = (i4 / -224);
                    i3 = (-8822 % i4);
                    iArr[(int)(d1 - 1)] = (-3990 / iArr[i4 + 1]);
                } catch (ArithmeticException a_e) {}
                switch ((i4 % 2) + 10) {
                case 10:
                    i6 = 1;
                    do {
                        iArr[(int)(d1)] = (int)Test.instanceCount;
                        Test.dFld += Test.instanceCount;
                        i3 <<= (int)l;
                        fArr[(int)(d1)] *= l;
                    } while (++i6 < 1);
                    break;
                case 11:
                    by = (byte)i4;
                    break;
                }
            } while (++d1 < 6);
        }
        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + (b ? 1 : 0) + i6 +
            l + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(double d, int i2, float f1) {

        double d2=0.44756;
        int i7=-159, i8=63606, i9=-9, i10=2, i11=11, i12=-58677, i13=10528, i14=131;
        byte by1=-113;

        vMeth2(i2);
        for (d2 = 24; d2 < 392; ++d2) {
            Test.dFld = -9L;
            for (i8 = 1; i8 < 5; i8++) {
                for (i10 = 1; i10 < 2; ++i10) {
                    i2 -= 11;
                    i11 = (int)f1;
                }
                i7 = (int)-2.994F;
                Test.sArrFld = Test.sArrFld;
                by1 += (byte)(i8 | i12);
                Test.iArrFld[(int)(d2 - 1)] = i8;
                for (i13 = 1; i13 < 2; i13++) {
                    if (Test.bFld) break;
                    Test.instanceCount += i13;
                }
                f1 += (-7 + (i8 * i8));
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) +
            i7 + i8 + i9 + i10 + i11 + by1 + i12 + i13 + i14;
    }

    public static void vMeth(int i, float f, int i1) {

        long l1=232L, lArr1[]=new long[N];
        byte by2=-75, byArr[][]=new byte[N][N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 1.53872);
        FuzzerUtils.init(lArr1, 4036164940150903112L);
        FuzzerUtils.init(byArr, (byte)-35);

        vMeth1(Test.dFld, i1, f);
        dArr = dArr;
        Test.bFld = Test.bFld;
        l1 = 1;
        do {
            lArr1[(int)(l1)] = i1;
            i1 = i1;
            Test.instanceCount += (60 + (l1 * l1));
            by2 -= (byte)Test.instanceCount;
            Test.iArrFld = FuzzerUtils.int1array(N, (int)27736);
            i1 -= i1;
            if (Test.bFld) break;
        } while (++l1 < 198);
        byArr[(i1 >>> 1) % N][(-228 >>> 1) % N] <<= (byte)i1;
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + l1 + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        float f3=-101.898F, fArr1[]=new float[N];
        int i15=-170;
        long lArr2[]=new long[N];

        FuzzerUtils.init(fArr1, 96.163F);
        FuzzerUtils.init(lArr2, -35L);

        vMeth(13, f3, i15);
        Test.sFld += (short)Test.dFld;
        fArr1[(i15 >>> 1) % N] = Test.instanceCount;
        lArr2 = lArr2;
        Test.iArrFld[(-62 >>> 1) % N] = i15;
        i15 = i15;
        Test.instanceCount /= (i15 | 1);
        f3 = -1;
        Test.instanceCount |= i15;
        lArr2[(8 >>> 1) % N] = i15;
        Test.instanceCount += (long)Test.dFld;
        i15 = (int)Test.instanceCount;

        FuzzerUtils.out.println("f3 i15 fArr1 = " + Float.floatToIntBits(f3) + "," + i15 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.dFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.bFld Test.sArrFld Test.iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
