// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1829196877L;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 9);
        FuzzerUtils.init(Test.fArrFld, 1.174F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, int i5, double d1) {

        int i6=181, i7=-5, i8=-32840, i9=-47356, i10=21859, i11=1;
        short s=-2048;
        float f2=-59.946F;
        byte by=-91;

        for (i6 = 1; i6 < 249; ++i6) {
            for (i8 = i6; 7 > i8; i8++) {
                s *= (short)69;
                f2 *= -27.1021F;
                f2 += (((i8 * by) + Test.instanceCount) - i8);
                if (i7 != 0) {
                    vMeth1_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + s +
                        Float.floatToIntBits(f2) + by + i10 + i11;
                    return;
                }
                switch (((17168 >>> 1) % 1) + 52) {
                case 52:
                    i4 += (int)Test.instanceCount;
                    i7 = (int)1.339F;
                    break;
                }
                Test.iArrFld[(i8 >>> 1) % N] >>= (int)Test.instanceCount;
            }
            for (i10 = 1; i10 < 7; ++i10) {
                i9 += (i10 ^ i9);
                i7 = i5;
                i5 += i10;
                Test.iArrFld[i10] |= (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 + s + Float.floatToIntBits(f2) +
            by + i10 + i11;
    }

    public static long lMeth(long l) {

        int i12=-19912;
        double d2=0.91999;

        vMeth1(i12, i12, d2);
        long meth_res = l + i12 + Double.doubleToLongBits(d2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f1, int i3) {

        short s1=17541;
        int i13=-63, i14=-2, i15=-7;
        byte by1=105;
        double d3=-1.97752;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3063047101650449862L);

        i3 = (int)((lMeth(Test.instanceCount) * s1) - i3);
        Test.instanceCount = -21219;
        for (i13 = 383; i13 > 20; i13 -= 3) {
            i3 += i13;
            i15 = 1;
            do {
                Test.fArrFld[i13 + 1] -= 39693;
                i3 *= i14;
                i14 += (i15 * i14);
                i3 += i15;
                by1 += (byte)(((i15 * f1) + f1) - i13);
                switch (((i13 % 4) * 5) + 109) {
                case 114:
                    i14 = i3;
                    i14 = -13;
                    i14 >>= (int)Test.instanceCount;
                    lArr[i13] += i15;
                    break;
                case 124:
                    i14 += (i15 * i15);
                    break;
                case 110:
                    i14 += (23 + (i15 * i15));
                    break;
                case 125:
                    f1 -= (float)d3;
                    break;
                }
            } while (++i15 < 13);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i3 + s1 + i13 + i14 + i15 + by1 + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=18101, i2=7, i16=-63760, i17=-20, i18=-13, i19=-165, i20=-21637, i21=-3;
        float f=120.212F;
        double d=0.106799;
        byte by2=112;
        long l1=2943917740L, lArr1[]=new long[N];
        boolean b=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr1, -1375965598L);

        for (i = 1; 188 > i; i += 3) {
            f += i;
            Test.instanceCount += i;
            Test.iArrFld[i - 1] = (int)Test.instanceCount;
            for (d = i; 308 > d; ++d) {
                vMeth(-1.974F, 250);
                i2 -= i2;
                bArr = bArr;
                f = Test.instanceCount;
            }
            by2 -= (byte)i;
            Test.instanceCount -= -6;
            Test.iArrFld[i + 1] -= i;
        }
        for (i16 = 13; i16 < 367; i16 += 2) {
            i17 += i16;
            Test.instanceCount = 51;
            l1 = 1;
            do {
                lArr1 = lArr1;
                for (i18 = 1; 4 > i18; ++i18) {
                    i19 -= -5897;
                }
                i19 = i19;
                for (i20 = 4; i20 > 1; --i20) {
                    i19 |= i20;
                    i1 += (((i20 * Test.instanceCount) + i16) - by2);
                    i2 += (i20 + l1);
                    b = b;
                    if (b) continue;
                    i2 >>= i20;
                    i19 += (int)f;
                }
                Test.instanceCount = i20;
                Test.iArrFld[i16 + 1] *= 2;
            } while ((l1 += 3) < 142);
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("d i2 by2 = " + Double.doubleToLongBits(d) + "," + i2 + "," + by2);
        FuzzerUtils.out.println("i16 i17 l1 = " + i16 + "," + i17 + "," + l1);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 b bArr = " + i21 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iArrFld Test.fArrFld = " + Test.instanceCount + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
