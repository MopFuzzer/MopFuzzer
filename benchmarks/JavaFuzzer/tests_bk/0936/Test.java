// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public static int iFld=168;
    public static double dFld=-99.12029;
    public float fFld=-2.319F;
    public static byte byFld=-4;
    public static short sFld=-28219;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-213, i3=213, i4=10, i5=147, i6=29552, i7=0, iArr1[]=new int[N];
        float f=-76.939F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 24);
        FuzzerUtils.init(bArr, false);

        iArr1[(Test.iFld >>> 1) % N] += Test.iFld;
        for (i2 = 6; i2 < 162; i2++) {
            i3 = (int)Test.dFld;
        }
        Test.iFld = i3;
        for (f = 2; f < 175; f++) {
            i5 = 9;
            do {
                bArr[(int)(f - 1)] = true;
                Test.instanceCount = -7;
                Test.dFld = i2;
                for (i6 = (int)(f); i6 < 1; i6 += 3) {
                    iArr1[i5] >>= i6;
                    Test.iFld = i2;
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 +
                            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
                        return;
                    }
                }
            } while (--i5 > 0);
            i7 += (int)(f - i7);
            i7 -= i2;
        }
        vMeth1_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth() {

        int i=76, i1=-84, i8=10, i9=79, i10=50373, i11=-14733, i12=11;
        short s=20677;
        float f1=-1.424F;

        for (i = 10; i < 397; ++i) {
            vMeth1();
            s += (short)-6;
            Test.iFld = 69;
            i1 += (i * i1);
            i8 = 1;
            while (++i8 < 4) {
                Test.iArrFld[i8 + 1] >>= i9;
                i1 *= i8;
                f1 *= i10;
                i10 += i8;
                Test.iArrFld[i8 - 1] |= i9;
                for (i11 = 1; 1 < i11; --i11) {
                    Test.instanceCount += i1;
                    i1 += i9;
                    i10 >>= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i + i1 + s + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d) {

        int i13=151, i14=-13919, i15=-69, i16=59249, i17=-4, i18=112, iArr[]=new int[N];
        float f2=101.889F;
        byte by=-108;
        short s1=-1989;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -126);
        FuzzerUtils.init(lArr, -1109216309274379570L);

        iArr[(Test.iFld >>> 1) % N] += (int)(((-lMeth()) * Test.iFld) + Test.instanceCount);
        for (i13 = 292; 4 < i13; i13 -= 2) {
            Test.iFld >>= i13;
            Test.instanceCount *= i14;
            for (i15 = i13; i15 < 11; ++i15) {
                d = f2;
                Test.instanceCount *= i13;
                lArr[i13 - 1] += by;
                Test.instanceCount >>= 41468;
                s1 <<= (short)i14;
                for (i17 = 1; i17 < 1; i17++) {
                    i18 -= (int)d;
                    i14 >>= -8;
                    Test.iFld = i17;
                    Test.iFld >>= -4;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i13 + i14 + i15 + i16 + Float.floatToIntBits(f2) + by + s1 +
            i17 + i18 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-113, i20=3, i21=10, i22=-212;
        boolean b=false;
        float f3=-101.766F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 2.609F);

        vMeth(Test.dFld);
        Test.instanceCount += (long)fFld;
        for (i19 = 7; i19 < 217; i19++) {
            Test.dFld += i19;
            b = b;
            for (f3 = i19; f3 < 120; f3++) {
                fArr[i19] -= 0.12F;
                i22 = 1;
                do {
                    Test.byFld += (byte)i22;
                    i20 -= i22;
                    Test.sFld += (short)(i22 ^ i21);
                    Test.iFld += i22;
                    Test.iFld += (int)Test.dFld;
                    i20 = i20;
                    try {
                        i20 = (i21 % -1958891753);
                        Test.iFld = (i19 / Test.iFld);
                        Test.iFld = (-36828 % Test.iArrFld[i19 - 1]);
                    } catch (ArithmeticException a_e) {}
                    switch ((int)((f3 % 7) + 62)) {
                    case 62:
                        i21 = (int)Test.dFld;
                        fArr[i22] = 1115923611519178057L;
                        fFld = Test.instanceCount;
                        break;
                    case 63:
                        Test.iArrFld[i19] = i19;
                        break;
                    case 64:
                        i21 -= (int)f3;
                        Test.instanceCount ^= Test.iFld;
                        break;
                    case 65:
                        i20 += (((i22 * f3) + Test.instanceCount) - Test.instanceCount);
                        i20 *= (int)Test.instanceCount;
                        Test.instanceCount += (i22 * i22);
                        fArr[i19 + 1] -= i21;
                        break;
                    case 66:
                        i20 = i22;
                        i21 = i21;
                    case 67:
                        i21 -= (int)Test.instanceCount;
                        b = b;
                    case 68:
                        i20 = (int)Test.instanceCount;
                        break;
                    default:
                        i21 = i19;
                    }
                } while (++i22 < 1);
            }
        }

        FuzzerUtils.out.println("i19 i20 b = " + i19 + "," + i20 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("f3 i21 i22 = " + Float.floatToIntBits(f3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("fFld Test.byFld Test.sFld = " + Float.floatToIntBits(fFld) + "," + Test.byFld + "," +
            Test.sFld);
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
