// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:07 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=4L;
    public static short sFld=-26014;
    public static boolean bFld=true;
    public volatile byte byFld=-87;
    public static int iFld=192;
    public static float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];
    public volatile int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -124.525F);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static short sMeth(long l1) {

        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 92.641F);

        fArr = (fArr = fArr);
        long meth_res = l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static double dMeth() {

        float f=-69.829F;
        int i3=-156, i4=4, i5=-41605, iArr[]=new int[N];
        long l2=2581381403L, l3=14L;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-30593);
        FuzzerUtils.init(iArr, 2);

        for (f = 1; f < 138; f++) {
            for (l2 = 1; 11 > l2; ++l2) {
                i4 = i4;
                Test.fArrFld[(int)(l2 + 1)] *= i4;
                for (l3 = l2; l3 < 2; ++l3) {
                    sArr[(int)(l3)] = (short)l3;
                    i5 >>>= i3;
                    i5 += (int)l3;
                    i3 += (int)l3;
                    i4 = (int)l3;
                }
                iArr[(int)(l2 - 1)] = i3;
                if (true) break;
                i4 += (int)(((l2 * i3) + l3) - i4);
                i5 += (int)l2;
            }
            Test.sFld += (short)(f * f);
        }
        long meth_res = Float.floatToIntBits(f) + i3 + l2 + i4 + l3 + i5 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public float fMeth(int i2) {

        int i6=3, i7=86, i8=-158, i9=1, i10=57120, iArr1[]=new int[N];
        double d2=80.70405, d3=0.58924;
        float f1=-1.409F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 12);

        Test.instanceCount += (long)((dMeth() - -169) - Test.instanceCount);
        for (i6 = 7; i6 < 199; ++i6) {
            if (Test.bFld) {
                Test.instanceCount = Test.instanceCount;
            } else if (Test.bFld) {
                i7 += (int)d2;
                f1 = 23172;
                Test.instanceCount += Test.instanceCount;
            } else if (Test.bFld) {
                for (i8 = 1; i8 < 8; ++i8) {
                    Test.instanceCount = i9;
                    Test.instanceCount = i8;
                    for (d3 = i8; d3 < 2; d3++) {
                        switch (((i6 >>> 1) % 5) + 67) {
                        case 67:
                            d2 = Test.instanceCount;
                            i2 = i6;
                            bArr[i8 + 1] = Test.bFld;
                            break;
                        case 68:
                            i9 *= i6;
                            break;
                        case 69:
                            lArrFld[i6 + 1] = -3371225114620058666L;
                            break;
                        case 70:
                            byFld = (byte)5;
                            break;
                        case 71:
                            Test.instanceCount += (long)(((d3 * i2) + i2) - i8);
                        }
                    }
                }
            } else {
                iArr1[i6 + 1] *= (int)Test.instanceCount;
            }
        }
        long meth_res = i2 + i6 + i7 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f1) + i8 + i9 +
            Double.doubleToLongBits(d3) + i10 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth() {

        double d4=2.110474;
        float f2=85.296F;

        fMeth(Test.iFld);
        Test.iFld >>= Test.iFld;
        d4 *= f2;
        iArrFld[(Test.iFld >>> 1) % N] >>>= (int)Test.instanceCount;
        d4 -= Test.iFld;
        vMeth_check_sum += Double.doubleToLongBits(d4) + Float.floatToIntBits(f2);
    }

    public void mainTest(String[] strArr1) {

        long l=12L;
        int i=-34481, i1=-186, i11=41359, i12=-198, i13=-59, i14=224, i15=5;
        double d=1.91980, d1=2.93876, dArr[][]=new double[N][N];
        float f3=-7.800F, f4=-1.286F;
        boolean bArr1[]=new boolean[N];

        FuzzerUtils.init(dArr, -109.45547);
        FuzzerUtils.init(bArr1, true);

        for (l = 5; l < 366; ++l) {
            for (d = 3; d < 70; d++) {
                i1 <<= (int)(((-3 + (d1 = i)) + (i1 * Test.instanceCount)) * ((i - -13L) * sMeth(Test.instanceCount)));
                i1 = (i1++);
                vMeth();
                Test.instanceCount -= i1;
                Test.iFld = 7129;
            }
            i1 = Test.iFld;
            dArr = FuzzerUtils.double2array(N, (double)19.36659);
            if (Test.bFld) {
                i11 = 1;
                while (++i11 < 70) {
                    Test.iFld = (int)6L;
                    i1 &= i1;
                    for (i12 = 1; i12 < 1; i12++) {
                        f3 += (((i12 * i13) + i12) - i1);
                        Test.instanceCount = i13;
                        d1 += 39;
                        i1 += Test.iFld;
                        Test.iFld += Test.iFld;
                        i += (int)l;
                        Test.instanceCount += i12;
                    }
                    Test.iFld = Test.sFld;
                    for (i14 = 1; i14 < 1; i14++) {
                        Test.iFld += (i14 | Test.iFld);
                        i13 += i13;
                        d1 = i13;
                        i13 <<= (int)11L;
                    }
                    f4 = 1;
                    do {
                        i13 += (int)d;
                        bArr1[(int)(l - 1)] = Test.bFld;
                    } while (++f4 < 1);
                }
            }
        }

        FuzzerUtils.out.println("l i d = " + l + "," + i + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i1 d1 i11 = " + i1 + "," + Double.doubleToLongBits(d1) + "," + i11);
        FuzzerUtils.out.println("i12 i13 f3 = " + i12 + "," + i13 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i14 i15 f4 = " + i14 + "," + i15 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("dArr bArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.bFld = " + Test.instanceCount + "," + Test.sFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld Test.iFld Test.fArrFld = " + byFld + "," + Test.iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("lArrFld iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
