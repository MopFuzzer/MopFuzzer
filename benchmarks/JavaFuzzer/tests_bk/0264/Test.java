// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-292621331427255748L;
    public static volatile double dFld=-105.75621;
    public static byte byFld=120;
    public static short sFld=14480;
    public static volatile float fFld=40.42F;
    public int iFld=225;
    public long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 14542);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i5=-55321, i6=3, i7=-11625, i8=63556, i9=-214, i10=-13, i11=24;
        long l2=61886L;
        float f1=91.615F;

        for (i5 = 2; i5 < 270; ++i5) {
            i6 = Test.byFld;
        }
        i6 <<= i5;
        for (i7 = 13; i7 < 224; ++i7) {
            for (i9 = 1; i9 < 8; i9++) {
                for (l2 = 1; l2 < 2; ++l2) {
                    i6 = (int)l2;
                    f1 = i5;
                    Test.instanceCount ^= 3;
                    Test.sFld += (short)l2;
                    i8 = 5;
                    i10 += (int)(l2 * l2);
                    Test.sFld = (short)i9;
                    i10 = (int)f1;
                }
                i8 *= (int)5069142565306442942L;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + i10 + l2 + i11 + Float.floatToIntBits(f1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d, int i4) {

        double d1=2.56238;
        int i12=0, i13=39025, i14=-10, i15=-14;
        float f2=15.544F;
        boolean b=true;

        Test.instanceCount ^= (((-(4 + iMeth1())) * i4) * -8L);
        for (d1 = 7; d1 < 321; ++d1) {
            i4 += (int)(d1 * d1);
            i13 = 1;
            do {
                for (i14 = 1; i14 < 1; i14++) {
                    i12 -= (int)-46.104914;
                    i4 -= (int)Test.instanceCount;
                    Test.iArrFld[(int)(d1 - 1)] >>>= i15;
                    f2 = -2;
                    if (b) break;
                    i12 += (-6 + (i14 * i14));
                }
                Test.instanceCount <<= i13;
                i15 %= (int)(Test.instanceCount | 1);
            } while (++i13 < 5);
            i4 /= (int)(Test.instanceCount | 1);
            i15 = -8;
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i4 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 +
            Float.floatToIntBits(f2) + (b ? 1 : 0);
    }

    public static int iMeth(long l, float f, long l1) {

        int i2=5, i3=-12, i16=-60982, i17=-3, i18=7, i19=-48920, i20=-63568, i21=203;

        for (i2 = 12; 330 > i2; ++i2) {
            i3 += Math.min((int)((Test.dFld + Test.dFld) * (l1 + l1)), Math.abs((int)(1389 - f)));
            vMeth(Test.dFld, i3);
            l1 += (long)f;
            Test.byFld += (byte)i3;
            i3 += (i2 ^ i2);
            l1 += (i2 * i2);
            i16 = 5;
            do {
                i3 += (((i16 * i16) + i17) - i17);
            } while ((i16 -= 3) > 0);
            for (i18 = 1; 5 > i18; i18++) {
                i17 = i18;
                for (i20 = 1; i20 < 2; i20++) {
                    i3 += (int)Test.dFld;
                    i19 = i16;
                    i21 *= (int)l1;
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + l1 + i2 + i3 + i16 + i17 + i18 + i19 + i20 + i21;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=82, i1=43476, i22=-7, i23=64223, i24=-65475, i25=0, i26=-117, i27=-45535, i28=-125, i29=-6;
        boolean b1=false;

        if (b1) {
            for (i = 10; i < 267; i++) {
                i1 += i;
                i1 *= (int)Math.max(lArrFld[i + 1], (i + -7L) + iMeth(Test.instanceCount, -62.248F,
                    Test.instanceCount));
                Test.sFld = (short)-107;
                i1 += (i * i);
                for (i22 = 4; i22 < 98; ++i22) {
                    Test.byFld = (byte)i1;
                    i23 -= Test.byFld;
                    i23 /= (int)(Test.sFld | 1);
                    i1 += (((i22 * Test.sFld) + Test.fFld) - i);
                    try {
                        i23 = (iFld / i23);
                        Test.iArrFld[i22 - 1] = (i23 % Test.iArrFld[i - 1]);
                        iFld = (Test.iArrFld[i] / -87);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += (i22 + i22);
                    if (b1) continue;
                }
                i23 = i1;
                iFld *= i23;
                iFld += (i * Test.sFld);
                Test.instanceCount = Test.instanceCount;
            }
        }
        for (i24 = 174; i24 > 9; i24--) {
            for (i26 = 8; i26 < 152; ++i26) {
                iFld >>= Test.byFld;
                for (i28 = 1; 2 > i28; i28++) {
                    Test.iArrFld[i26 + 1] += i29;
                    i29 += (int)(207L + (i28 * i28));
                    Test.sFld = (short)14;
                    Test.instanceCount += 4;
                }
                if (true) break;
                Test.dFld -= i26;
            }
            i27 -= (int)Test.instanceCount;
            if (b1) break;
        }

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("i23 b1 i24 = " + i23 + "," + (b1 ? 1 : 0) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 = " + i28 + "," + i29);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.fFld iFld = " + Test.sFld + "," + Float.floatToIntBits(Test.fFld) + ","
            + iFld);
        FuzzerUtils.out.println("lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
