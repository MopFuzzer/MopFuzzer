// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static byte byFld=-32;
    public static volatile float fFld=16.727F;
    public static volatile short sFld=-7303;
    public int iFld=-23821;
    public volatile int iFld1=53723;
    public static double dFld=0.66843;
    public int iFld2=-45474;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f2=-60.862F;
        int i3=-201, i4=-196, i5=-81, i6=-12, i7=183, iArr[]=new int[N];
        short s=27010;
        double d1=0.26385, d2=-2.100962;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 53977L);
        FuzzerUtils.init(iArr, 66);

        for (f2 = 13; f2 < 333; f2++) {
            i3 |= s;
            for (i4 = 5; 1 < i4; --i4) {
                d1 = 1;
                do {
                    s *= (short)-6618636118738017692L;
                    i3 *= (int)f2;
                    lArr[i4] |= Test.instanceCount;
                } while (++d1 < 2);
                for (i6 = 2; i6 > f2; i6 -= 3) {
                    Test.fFld += (((i6 * Test.instanceCount) + f2) - i7);
                    i5 -= i5;
                    d2 = i7;
                    switch ((((i4 >>> 1) % 4) * 5) + 81) {
                    case 93:
                        iArr = iArr;
                        Test.fFld -= 28563;
                        break;
                    case 88:
                        Test.instanceCount = (long)Test.fFld;
                        break;
                    case 99:
                        Test.fFld -= 237;
                    case 86:
                        i5 -= (int)Test.instanceCount;
                    default:
                        i7 += (i6 ^ i5);
                    }
                }
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i3 + s + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f1, int i2) {

        int i8=-76, i9=-1, i10=11564, i11=32809, i12=5, i13=-26463, i14=-240, i15=-14;
        double d3=-69.38359;
        long l=4132417925L;

        i2 = (Integer.reverseBytes(iMeth()) + i2);
        for (i8 = 357; 3 < i8; i8--) {
            d3 += Test.fFld;
            for (i10 = 1; 5 > i10; ++i10) {
                d3 += l;
                i11 += i10;
                for (i12 = 1; 2 > i12; i12++) {
                    Test.instanceCount = i8;
                    i9 += (((i12 * i2) + l) - Test.fFld);
                }
                for (i14 = 1; i14 < 2; ++i14) {
                    i9 += i15;
                    Test.sFld += (short)i14;
                    i9 -= i9;
                    Test.fFld += (((i14 * i9) + Test.instanceCount) - i2);
                    i11 += (i14 - f1);
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i2 + i8 + i9 + Double.doubleToLongBits(d3) + i10 + i11 + l + i12
            + i13 + i14 + i15;
    }

    public static void vMeth() {

        int i=-105, i1=9, i16=-11, i17=-4;
        float f=-111.340F;
        double d=0.88037;
        boolean b=false;
        short s1=-17984;

        for (i = 8; i < 200; i++) {
            i1 += (int)(-35.480F + (i * i));
            f -= Math.min((int)(i1 <<= (int)(i + f)), i1--);
            i1 = (int)(((Test.byFld * Test.instanceCount) * (-(i1 + -9))) * ((i - 1573556045L) | (long)(Test.byFld -=
                (byte)d)));
            vMeth1(-1.527F, -4121);
            for (i16 = 1; i16 < 8; i16++) {
                Test.instanceCount += (i16 * i16);
                switch ((((i16 >>> 1) % 4) * 5) + 29) {
                case 32:
                    if (b) break;
                    i17 = (int)Test.instanceCount;
                case 34:
                    i1 -= (int)Test.fFld;
                    i1 += (((i16 * i16) + s1) - i);
                    i17 = 197;
                    break;
                case 47:
                    Test.instanceCount += (long)Test.fFld;
                    Test.instanceCount = -9;
                case 40:
                default:
                    i1 *= (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i16 + i17 + (b ? 1 : 0) + s1;
    }

    public void mainTest(String[] strArr1) {

        int i18=-191, i19=10, i20=0, i21=6, i22=196, i23=-1, i24=251, iArr1[]=new int[N];
        float f3=-2.999F;
        boolean b1=true;
        short sArr[][]=new short[N][N];
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(sArr, (short)-23915);
        FuzzerUtils.init(dArr, 13.39580);
        FuzzerUtils.init(iArr1, 236);

        vMeth();
        i18 = 1;
        do {
            iFld <<= iFld;
            for (i19 = 3; i19 < 86; ++i19) {
                sArr[i19][i19 - 1] = (short)i20;
                i20 = (int)Test.fFld;
                iArrFld[i19 - 1] *= i19;
                iFld1 += iFld;
                Test.dFld = 56612L;
                i20 += i19;
                Test.dFld *= iFld;
            }
            dArr = FuzzerUtils.double2array(N, (double)66.64801);
            iFld1 = (int)-2.383F;
            iFld1 += (i18 - Test.fFld);
            try {
                iFld = (-216 % i19);
                i20 = (-414484119 % i19);
                i20 = (i20 / -102);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount -= i19;
            Test.instanceCount += i18;
        } while (++i18 < 293);
        Test.byFld += (byte)61887;
        iArrFld[(iFld1 >>> 1) % N] = iFld1;
        if (b1) {
            if (b1) {
                for (i21 = 328; i21 > 18; --i21) {
                    for (i23 = 2; i23 < 81; i23++) {
                        i20 = iFld2;
                    }
                    iFld1 = i22;
                    f3 = 1;
                    do {
                        Test.instanceCount += (long)(f3 + iFld2);
                        Test.instanceCount <<= i24;
                        dArr[i21] = dArr[(int)(f3 + 1)];
                        iArrFld[(2605 >>> 1) % N] >>= i20;
                    } while (++f3 < 81);
                }
            } else {
                iFld1 -= 3;
            }
        } else {
            iArr1[(i23 >>> 1) % N] = Test.sFld;
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 f3 b1 = " + i24 + "," + Float.floatToIntBits(f3) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("sArr dArr iArr1 = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.fFld = " + Test.instanceCount + "," + Test.byFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld iFld iFld1 = " + Test.sFld + "," + iFld + "," + iFld1);
        FuzzerUtils.out.println("Test.dFld iFld2 iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld2 + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
