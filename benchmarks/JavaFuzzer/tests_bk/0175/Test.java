// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=28280L;
    public int iFld=-47250;
    public byte byFld=-83;
    public static float fFld=25.462F;
    public static int iFld1=-1;
    public static boolean bFld=false;
    public static short sFld=27015;
    public int iFld2=227;

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        short s1=25911;
        int i10=-218, i11=-60835, i12=-12, i13=-70, i14=5, iArr1[]=new int[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 116.69810);
        FuzzerUtils.init(iArr1, -4);

        Test.iFld1 = Test.iFld1;
        for (double d1 : dArr) {
            iArr1[(Test.iFld1 >>> 1) % N] -= Test.iFld1;
            iArr1[(Test.iFld1 >>> 1) % N] -= Test.iFld1;
            Test.instanceCount -= s1;
            Test.iFld1 = (int)-1.87111;
        }
        for (i10 = 16; 305 > i10; i10++) {
            i12 = 1;
            do {
                Test.iFld1 += (i12 - i12);
                Test.iFld1 *= Test.iFld1;
                Test.iFld1 = 45;
                iArr1[i10 + 1] += i10;
                for (i13 = 1; 1 > i13; ++i13) {
                    Test.bFld = Test.bFld;
                    iArr1[i12] = i10;
                }
            } while (++i12 < 6);
        }
        long meth_res = s1 + i10 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i8, boolean b, int i9) {


        iMeth();
        long meth_res = i8 + (b ? 1 : 0) + i9;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i1, short s, long l1) {

        double d=71.102206;
        int i2=-92, i3=17, i4=-57527, i5=5, i6=-93, i7=13, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 100);

        d = ((d + (1.4508 - (d - Test.instanceCount))) + (-(i1 - iFld)));
        for (i2 = 18; 344 > i2; i2++) {
            if (Test.bFld) {
                try {
                    i1 = (1083307249 % Test.iFld1);
                    iFld = (24042 % i1);
                    iArr[i2 + 1] = (50804 % iArr[i2 - 1]);
                } catch (ArithmeticException a_e) {}
                for (i4 = i2; i4 < 5; ++i4) {
                    i5 += (((i4 * Test.instanceCount) + i1) - i2);
                    if ((Test.bFld = false) | (Test.bFld = (!(i5 < Test.iFld1)))) break;
                    switch ((i2 % 1) + 63) {
                    case 63:
                        for (i6 = 1; i6 > 1; i6--) {
                            i7 += (((i6 * s) + i6) - i7);
                            switch ((i4 % 5) + 54) {
                            case 54:
                            case 55:
                                i5 += i6;
                                i1 -= (int)fMeth(i4, Test.bFld, iFld);
                            case 56:
                                iFld = (int)-3675565741L;
                                break;
                            case 57:
                                Test.iFld1 += (((i6 * i2) + i5) - i6);
                                break;
                            case 58:
                                i3 = (int)Test.instanceCount;
                                break;
                            default:
                                s += (short)7044;
                            }
                        }
                        break;
                    }
                }
            } else if (true) {
                Test.instanceCount += s;
            } else {
                i7 -= i7;
            }
        }
        vMeth_check_sum += i1 + s + l1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + i7 +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=8, i15=-230, i16=2, i17=-6, i18=245, i19=159, i20=43, iArr2[]=new int[N];
        long l=21744L, lArr[]=new long[N];
        double d2=1.101652;
        float fArr[]=new float[N];

        FuzzerUtils.init(lArr, -58480L);
        FuzzerUtils.init(iArr2, 7069);
        FuzzerUtils.init(fArr, 71.171F);

        lArr[(i >>> 1) % N] = ((iFld - (Test.instanceCount + byFld)) + (Test.instanceCount ^ (Test.instanceCount +
            iFld)));
        l = 1;
        while (++l < 156) {
            Test.fFld -= (--iFld);
            vMeth(55628, Test.sFld, l);
            i += (int)(22325L + (l * l));
            switch ((((iFld >>> 1) % 2) * 5) + 47) {
            case 57:
            case 49:
                i += (int)(l ^ iFld);
                switch (((103 >>> 1) % 9) + 103) {
                case 103:
                    for (i15 = 2; 161 > i15; ++i15) {
                        try {
                            i16 = (iFld % 159);
                            i = (-54888 % iArr2[i15 - 1]);
                            iFld2 = (Test.iFld1 % iArr2[(int)(l)]);
                        } catch (ArithmeticException a_e) {}
                    }
                case 104:
                    i16 += (int)(((l * iFld) + Test.iFld1) - Test.fFld);
                    break;
                case 105:
                    if (Test.bFld) break;
                    d2 = 71L;
                    d2 = Test.instanceCount;
                    break;
                case 106:
                    Test.iFld1 *= 38397;
                    for (i17 = (int)(l); i17 < 161; i17++) {
                        i = byFld;
                    }
                    for (i19 = (int)(l); i19 < 161; ++i19) {
                        iArr2[i19 - 1] = i17;
                        Test.instanceCount = Test.iFld1;
                        if (Test.bFld) continue;
                        Test.sFld -= byFld;
                        lArr[i19] <<= iFld2;
                        i >>= -103;
                        fArr[i19 + 1] += i17;
                        iFld += (int)l;
                    }
                    Test.fFld /= (i16 | 1);
                case 107:
                case 108:
                    Test.sFld += (short)(l ^ i18);
                    d2 /= (iFld | 1);
                    Test.instanceCount = iFld2;
                    break;
                case 109:
                    i20 += (int)(((l * iFld) + Test.instanceCount) - i16);
                case 110:
                    Test.instanceCount <<= iFld2;
                    break;
                case 111:
                    byFld %= (byte)(iFld2 | 1);
                    break;
                }
                break;
            default:
                Test.iFld1 += (int)(((l * Test.fFld) + Test.iFld1) - Test.fFld);
            }
        }

        FuzzerUtils.out.println("i l i15 = " + i + "," + l + "," + i15);
        FuzzerUtils.out.println("i16 d2 i17 = " + i16 + "," + Double.doubleToLongBits(d2) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("lArr iArr2 fArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(iArr2) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount iFld byFld = " + Test.instanceCount + "," + iFld + "," + byFld);
        FuzzerUtils.out.println("Test.fFld Test.iFld1 Test.bFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.iFld1 + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld iFld2 = " + Test.sFld + "," + iFld2);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
