// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6420470324916577778L;
    public static double dFld=-1.63362;
    public int iFld=79;
    public static volatile short sFld=13286;
    public float fFld=-32.690F;
    public static byte byFld=93;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 5.454F);
        FuzzerUtils.init(Test.lArrFld, 46L);
        FuzzerUtils.init(Test.dArrFld, 1.35526);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l) {

        int i8=-10508, i9=11, i10=24834, iArr1[]=new int[N];
        float f1=2.8F, f2=18.583F;
        short s=-10836;

        FuzzerUtils.init(iArr1, -30071);

        iArr1 = iArr1;
        for (i8 = 16; i8 < 333; i8++) {
            i9 ^= i8;
            Test.instanceCount = i9;
            f1 = 1;
            do {
                iArr1[(int)(f1 + 1)] = (int)Test.dFld;
                switch (((-165 >>> 1) % 1) + 16) {
                case 16:
                    i9 += (int)((long)f1 ^ i9);
                    break;
                }
                for (f2 = 1; f2 > 1; f2--) {
                    Test.lArrFld = Test.lArrFld;
                    i9 *= (int)Test.dFld;
                    i9 += (int)f2;
                    s >>>= (short)i9;
                }
                Test.dFld = -6902;
                Test.instanceCount += i8;
            } while (++f1 < 5);
        }
        long meth_res = l + i8 + i9 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i10 + s +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=-30, i2=1, i3=4, i4=-11223, i5=17868, i6=-3, i7=6;
        boolean b=false, bArr[][]=new boolean[N][N];
        float f=-2.953F;
        byte by=57;

        FuzzerUtils.init(bArr, true);

        i1 >>= i1;
        for (i2 = 10; i2 < 376; i2++) {
            Test.fArrFld[i2 - 1] += (float)(Math.sqrt(-101.58721) - (-97.49785 - i3));
        }
        i4 = 1;
        while (++i4 < 294) {
            i5 = 1;
            while (++i5 < 6) {
                for (i6 = 1; 1 > i6; ++i6) {
                    switch (((i6 % 5) * 5) + 92) {
                    case 116:
                    case 115:
                        if (bArr[i6][i4 + 1] = (b && (bArr[i4][i5 - 1] = (b & b)))) break;
                        Test.dFld = Test.instanceCount;
                        i3 += (25238 + (i6 * i6));
                        Test.dFld *= ((f * iMeth1(Test.instanceCount)) - i4);
                        break;
                    case 111:
                        Test.dArrFld[i5 - 1] *= by;
                        break;
                    case 97:
                        Test.lArrFld = Test.lArrFld;
                        i7 -= (int)f;
                        i3 += (i6 * i6);
                    case 113:
                    default:
                        f -= i4;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f) + by +
            FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        double d=-91.90756;
        int iArr[]=new int[N];

        FuzzerUtils.init(iArr, -7);

        iArr[(i >>> 1) % N] -= (int)d;
        iMeth();
        i *= i;
        Test.instanceCount = i;
        vMeth_check_sum += i + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i12=12, i13=-8573, i14=14, i15=-69, i16=3327, i17=132, i18=17340, i19=64170;
        boolean b1=false;
        float f3=2.281F;

        vMeth(iFld);
        Test.sFld -= (short)Test.instanceCount;
        for (int i11 : iArrFld) {
            try {
                iFld = (209 / iFld);
                i11 = (-38 / iFld);
                i11 = (i11 % 20413);
            } catch (ArithmeticException a_e) {}
        }
        fFld *= Test.instanceCount;
        iFld = -15498;
        iFld >>= iFld;
        for (i12 = 8; 208 > i12; ++i12) {
            for (i14 = i12; i14 < 126; i14++) {
                for (i16 = 1; i16 < 1; i16++) {
                    b1 = false;
                    if (b1) {
                        Test.lArrFld[i12 + 1] = i12;
                        Test.instanceCount += Test.byFld;
                    } else {
                        b1 = b1;
                    }
                    i17 += (i16 * Test.instanceCount);
                    i15 += (i16 * iFld);
                    i17 -= (int)Test.instanceCount;
                    iArrFld[i16 - 1] += i12;
                }
                fFld += i16;
                if (b1) break;
                iArrFld[i12 - 1] <<= (int)Test.instanceCount;
                Test.instanceCount -= i14;
                Test.dFld = Test.instanceCount;
                Test.sFld += Test.byFld;
                for (i18 = 1; i18 < 1; i18++) {
                    if (b1) break;
                }
                f3 -= i13;
                f3 *= iFld;
            }
            iArrFld[i12 - 1] <<= (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("b1 i18 i19 = " + (b1 ? 1 : 0) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f3 = " + Float.floatToIntBits(f3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + iFld);
        FuzzerUtils.out.println("Test.sFld fFld Test.byFld = " + Test.sFld + "," + Float.floatToIntBits(fFld) + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld Test.dArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
