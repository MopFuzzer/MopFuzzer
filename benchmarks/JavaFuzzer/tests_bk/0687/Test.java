// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=7458L;
    public double dFld=114.33388;
    public static short sFld=-10429;
    public boolean bFld=true;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5509);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i4) {


        i4 *= (-(i4 + (i4 - -12)));
        vSmallMeth_check_sum += i4;
    }

    public static void vMeth(int i13) {

        int i14=12;
        boolean b=false;
        float f1=0.299F;
        double d1=84.119331;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)48);

        i14 = 1;
        do {
            if (b) break;
            if (false) {
                Test.iArrFld = Test.iArrFld;
                i13 = i13;
            } else if (false) {
                f1 -= Test.instanceCount;
                byArr = byArr;
            } else {
                i13 += i14;
            }
            if (b) {
                Test.sFld = (short)Test.instanceCount;
                switch (((i14 % 4) * 5) + 40) {
                case 53:
                    i13 += (int)Test.instanceCount;
                    b = b;
                    break;
                case 46:
                    d1 -= Test.instanceCount;
                    break;
                case 49:
                    if (i13 != 0) {
                        vMeth_check_sum += i13 + i14 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
                            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(byArr);
                        return;
                    }
                    break;
                case 52:
                    i13 -= i14;
                    break;
                default:
                    i13 += (-5 + (i14 * i14));
                }
            } else if (b) {
                f1 += 117.538F;
            }
        } while (++i14 < 268);
        vMeth_check_sum += i13 + i14 + (b ? 1 : 0) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(byArr);
    }

    public static int iMeth(int i11, int i12) {

        int i15=0, i16=18660, i17=8, i18=-29, i19=7, i20=8, i21=25958;
        float f2=104.220F;
        double d2=-1.109069;
        byte by=61;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-27160);

        vMeth(-6);
        for (i15 = 7; i15 < 289; ++i15) {
            i12 *= i15;
            i11 = (int)Test.instanceCount;
            f2 -= i12;
            sArr[i15 + 1] = (short)f2;
        }
        for (i17 = 4; i17 < 291; i17++) {
            d2 *= i11;
            for (i19 = 1; 6 > i19; i19++) {
                i11 -= (int)Test.instanceCount;
                f2 = 3L;
                i21 = 1;
                while (++i21 < 2) {
                    i12 = i18;
                    i11 *= by;
                    by -= (byte)f2;
                }
            }
        }
        long meth_res = i11 + i12 + i15 + i16 + Float.floatToIntBits(f2) + i17 + i18 + Double.doubleToLongBits(d2) +
            i19 + i20 + i21 + by + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5, long l) {

        float f=-23.168F, f3=0.521F;
        int i6=-11, i7=179, i8=135, i9=0, i10=-6734, i22=45702;
        double d=1.94584;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -235L);

        for (f = 280; f > 4; f--) {
            for (i7 = 1; i7 < 6; i7++) {
                Test.iArrFld[i7] -= (int)lArr[(int)(f + 1)];
                i8 = i6;
                for (i9 = i7; i9 < 2; ++i9) {
                    Test.sFld += (short)(((i9 * i9) + i5) - i9);
                    d = iMeth(i10, i7);
                    i10 += i7;
                    Test.instanceCount -= l;
                    if (i9 != 0) {
                    }
                    l = (long)56.522F;
                    switch (((i7 % 8) * 5) + 19) {
                    case 56:
                        l *= -109;
                        Test.instanceCount = i7;
                        f3 += i9;
                    case 53:
                        Test.instanceCount *= 0;
                        break;
                    case 46:
                        i22 = i9;
                    case 29:
                        Test.iArrFld[(int)(f)] -= (int)l;
                    case 27:
                        i6 += (i9 + i6);
                        break;
                    case 51:
                        i5 += i7;
                        break;
                    case 50:
                        f3 -= i5;
                        break;
                    case 33:
                        if (false) break;
                    }
                }
            }
        }
        long meth_res = i5 + l + Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Float.floatToIntBits(f3) + i22 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7244, i1=59, i2=30184, i3=11, i23=-205, i24=-1, i25=-37648, i26=-217;
        float f4=0.400F, f5=1.173F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.428F);

        try {
            Test.instanceCount -= -3;
            try {
                for (i = 4; i < (276 + 400); i++) {
                    switch (((i % 6) * 5) + 47) {
                    case 49:
                        for (i2 = 2 - 400; i2 < 63; ++i2) {
                            for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth((int)(dFld - (lMeth(i2,
                                3911849215168766385L) * f4)));
                        }
                        Test.iArrFld[i] = i1;
                        i3 += i;
                        break;
                    case 57:
                        i1 += i;
                        Test.instanceCount += Test.instanceCount;
                    case 65:
                        Test.instanceCount = i3;
                        dFld = i1;
                        Test.instanceCount *= (long)f4;
                        for (i23 = i; i23 < (63 + 400); i23++) {
                            Test.iArrFld[i23 + 1] >>= i24;
                            i24 += (i23 * i23);
                            i1 += (i23 + i2);
                            i3 &= i23;
                            if (bFld) break;
                        }
                    case 64:
                        for (i25 = 63; i25 > i; --i25) {
                            i26 += i1;
                            i26 += (((i25 * Test.instanceCount) + Test.instanceCount) - Test.instanceCount);
                            i1 = i3;
                            i3 += i1;
                        }
                        break;
                    case 71:
                    case 77:
                        switch ((i % 6) + 8) {
                        case 8:
                            fArr[i] += 37386;
                            i26 = (int)-7L;
                            lArrFld[i] |= i2;
                            break;
                        case 9:
                            Test.instanceCount = (long)1.96739;
                            break;
                        case 10:
                            bFld = bFld;
                        case 11:
                            i3 -= (int)f5;
                        case 12:
                            Test.iArrFld[i] *= 2477;
                        case 13:
                            Test.instanceCount = Test.instanceCount;
                            break;
                        }
                        break;
                    default:
                        i26 = (int)Test.instanceCount;
                    }
                }
            }
            catch (ArrayIndexOutOfBoundsException exc4) {
                i26 |= i1;
            }
        }
        catch (ArithmeticException exc5) {
            i1 += i23;
        }
        catch (NullPointerException exc6) {
            dFld += f4;
        }
        finally {
            fArr[(i3 >>> 1) % N] = 61920;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f4 i23 = " + i3 + "," + Float.floatToIntBits(f4) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("f5 fArr = " + Float.floatToIntBits(f5) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.sFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.sFld);
        FuzzerUtils.out.println("bFld Test.iArrFld lArrFld = " + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
