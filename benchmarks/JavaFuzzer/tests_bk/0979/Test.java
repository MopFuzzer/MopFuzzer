// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=57L;
    public static float fFld=43.202F;
    public short sFld=14727;
    public double dFld=-1.35373;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i2=-49, i3=84, i4=37816, i5=14, i6=15413;
        float f=-1.805F;
        byte by=-113;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.20988);

        for (i2 = 1; i2 < 144; ++i2) {
            i3 -= i3;
            i3 += (int)f;
            Test.instanceCount = (long)59.504F;
            i4 = 1;
            do {
                i3 += 174;
                i3 -= i4;
                by += (byte)i4;
                i3 <<= i4;
                for (i5 = 1; i5 < 1; ++i5) {
                    f += ((long)i5 | (long)i6);
                    i6 = (int)Test.instanceCount;
                }
                dArr[i4 + 1] += i4;
                i6 = i5;
                try {
                    i3 = (i5 / i6);
                    i3 = (127 % i6);
                    i6 = (i5 / i5);
                } catch (ArithmeticException a_e) {}
            } while (++i4 < 11);
        }
        vMeth2_check_sum += i2 + i3 + Float.floatToIntBits(f) + i4 + by + i5 + i6 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i7=20658, i8=-55492, i9=12, i10=12453, i11=-921;
        float f1=-44.539F, f2=0.405F;
        byte by1=-12;

        vMeth2();
        for (i7 = 6; i7 < 258; ++i7) {
            for (i9 = 1; 6 > i9; ++i9) {
                short s=1934;
                for (f1 = 1; f1 < 2; ++f1) {
                    i8 += (int)(f1 + i7);
                    Test.iArrFld[(int)(f1 + 1)] -= by1;
                    i11 += (int)(f1 - Test.instanceCount);
                }
                i8 += (((i9 * i10) + i10) - i11);
                i11 *= i9;
                Test.iArrFld[i9] = i7;
                Test.iArrFld[i9 + 1] -= i8;
                Test.iArrFld[i7 + 1] = s;
                f2 -= Test.instanceCount;
                s += (short)-36.17580;
                i8 = i10;
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + by1 + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i) {

        int i1=64168, i12=-11, i13=-196, i14=-1, i15=3478;
        double d=-74.73231;
        byte by2=3;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-14638);

        Test.iArrFld[(i >>> 1) % N] = (int)(((i *= i) - (--Test.instanceCount)) - ((++i) * (i--)));
        i1 = 291;
        do {
            vMeth1();
        } while ((i1 -= 2) > 0);
        i = (int)d;
        i -= (int)Test.instanceCount;
        for (i12 = 9; i12 < 154; i12++) {
            by2 += (byte)i12;
            sArr[i12] <<= (short)Test.instanceCount;
            sArr[i12] = (short)Test.instanceCount;
            i += i13;
            for (i14 = i12; i14 < 11; i14++) {
                try {
                    i = (-19975 % i15);
                    Test.iArrFld[i14 + 1] = (-58 / i12);
                    i15 = (Test.iArrFld[i14 + 1] / 39395);
                } catch (ArithmeticException a_e) {}
                i13 *= (int)Test.instanceCount;
                by2 = (byte)-19341;
                i15 += (int)-20L;
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i12 + i13 + by2 + i14 + i15 +
            FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=-18847, i17=-169, i18=129, i19=103, i20=-31625, i21=174, i22=5, i23=10;
        byte by3=-46;
        boolean b=false;
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-16296);

        vMeth(i16);
        for (i17 = 5; i17 < 329; i17++) {
            i19 = 88;
            for (i20 = 3; i20 < 78; i20++) {
                for (i22 = 1; i22 < 2; i22++) {
                    Test.fFld = i23;
                    sFld += (short)(i22 - sFld);
                    if (b) {
                        Test.fFld = 143;
                        i23 *= i19;
                        Test.fFld = by3;
                    } else if (b) {
                        switch ((i20 % 9) + 126) {
                        case 126:
                            lArrFld[i20 - 1] -= i21;
                            Test.instanceCount += i18;
                            Test.instanceCount = Test.instanceCount;
                            break;
                        case 127:
                            i16 += i16;
                        case 128:
                            sFld = (short)i18;
                            if (b) {
                                Test.iArrFld[i20 + 1] |= -209;
                                i19 += (((i22 * Test.fFld) + i17) - i22);
                            } else {
                                lArrFld[i17] |= i17;
                            }
                        case 129:
                            Test.fFld += i18;
                            break;
                        case 130:
                            i16 = -188;
                        case 131:
                            dFld += i20;
                            Test.instanceCount = i18;
                            Test.instanceCount += (164L + (i22 * i22));
                            Test.fFld = i16;
                            break;
                        case 132:
                            sArr1[i22] ^= (short)i20;
                            i21 += (int)Test.fFld;
                            break;
                        case 133:
                            i18 += -2045;
                            break;
                        case 134:
                            Test.iArrFld[i20] >>= (int)Test.instanceCount;
                        default:
                            Test.instanceCount <<= -21711;
                        }
                    } else if (b) {
                        i23 += (i22 ^ i21);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 by3 = " + i22 + "," + i23 + "," + by3);
        FuzzerUtils.out.println("b sArr1 = " + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + sFld);
        FuzzerUtils.out.println("dFld Test.iArrFld lArrFld = " + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
