// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public short sFld=-6688;
    public static float fFld=-2.314F;
    public byte byFld=-10;
    public static boolean bFld=true;
    public static byte byFld1=-39;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(long l) {

        int i3=70;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-110);

        Test.fFld -= (byArr[(i3 >>> 1) % N]++);
        long meth_res = l + i3 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        double d=95.15901;
        short s=-21237;
        int i7=171, i8=-10, i9=-123, i10=-4, iArr1[]=new int[N];
        byte by=-73;
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -72);
        FuzzerUtils.init(fArr, 55.836F);

        d /= (s | 1);
        i7 ^= i7;
        Test.instanceCount >>= 12;
        iArr1[(i7 >>> 1) % N] *= by;
        for (float f : fArr) {
            i7 *= i7;
            i7 = i7;
            i8 = 1;
            do {
                f += i7;
                i7 |= i8;
            } while (++i8 < 4);
            for (i9 = 1; i9 < 4; i9++) {
                i10 += i7;
                i10 -= i9;
                i10 >>= i9;
                if (Test.bFld) break;
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + s + i7 + by + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1() {

        int i6=-3, i11=58206, iArr2[]=new int[N];
        double d1=0.113816;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -5886L);
        FuzzerUtils.init(iArr2, -23);

        i6 = (int)((i6 -= (int)(i6 * Test.instanceCount)) + (++i6));
        i6 *= (int)(Test.instanceCount++);
        vMeth2();
        for (long l3 : lArr) {
            iArr2[(i6 >>> 1) % N] *= (int)l3;
            i6 += (int)d1;
            l3 = l3;
            i6 >>>= i6;
            i6 <<= 6;
            switch (((i6 >>> 1) % 2) + 74) {
            case 74:
                d1 -= -864;
                d1 -= Test.instanceCount;
                break;
            case 75:
                i11 = 1;
                do {
                    iArr2 = FuzzerUtils.int1array(N, (int)-7590);
                    Test.byFld1 <<= (byte)i6;
                } while (++i11 < 4);
            default:
            }
        }
        vMeth1_check_sum += i6 + Double.doubleToLongBits(d1) + i11 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(long l1, long l2, int i5) {

        int i12=-117, i13=7980, i14=-123, i15=-51573, i16=-4, i17=-9;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -1321985879493634784L);

        vMeth1();
        lArr1[(-4 >>> 1) % N] -= i5;
        l2 = (long)Test.fFld;
        Test.fFld -= i5;
        Test.fFld += Test.fFld;
        l1 = i5;
        for (i12 = 12; 302 > i12; i12++) {
            Test.fFld = i13;
            for (i14 = 6; i12 < i14; i14 -= 2) {
                i13 = i13;
                i5 = i13;
                for (i16 = 1; i16 < 1; ++i16) {
                    Test.instanceCount += Test.instanceCount;
                    i13 += 54;
                    i13 += (((i16 * Test.fFld) + l2) - i15);
                }
            }
        }
        vMeth_check_sum += l1 + l2 + i5 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-124, i1=140, i2=-12, i18=-11, i19=-170, i20=-5, i21=-12, i22=3, i23=10, i24=-7, i25=11, i26=-13,
            iArr[]=new int[N];
        double d2=-1.42476;
        long lArr2[]=new long[N];

        FuzzerUtils.init(iArr, -30084);
        FuzzerUtils.init(lArr2, -114L);

        iArr[(-183 >>> 1) % N] = (int)(((i - Test.instanceCount) - Test.instanceCount) | i);
        i = (int)(sFld + ((-i) - (Test.instanceCount - i)));
        for (i1 = 22; 376 > i1; ++i1) {
            if ((((i2--) + Long.reverseBytes(Test.instanceCount)) + iMeth(134 - i1)) >= (i2 - (byFld + (i2 -
                Test.instanceCount)))) continue;
            vMeth(Test.instanceCount, Test.instanceCount, -11);
            i18 = 1;
            while (++i18 < 71) {
                i += (int)Test.instanceCount;
                Test.instanceCount ^= i;
                Test.byFld1 = (byte)i18;
                if (Test.bFld) break;
                for (i19 = i1; 1 > i19; i19++) {
                    iArr[i1] = -124;
                    sFld += (short)i19;
                    i2 = (int)Test.instanceCount;
                    Test.instanceCount += i;
                }
                Test.instanceCount = i1;
            }
            Test.byFld1 *= (byte)Test.fFld;
            d2 *= 101;
            i2 = i20;
            iArr[i1 - 1] += i1;
            i20 += (i1 | i2);
            i2 += i;
        }
        lArr2[(i18 >>> 1) % N] *= i19;
        d2 = Test.fFld;
        i21 = 1;
        while (++i21 < 163) {
            for (i22 = 5; i22 < 154; i22++) {
                for (i24 = 1; i24 < 2; i24 += 3) {
                    i += i18;
                }
                Test.fFld += (((i22 * i24) + i26) - i24);
                i20 += i22;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d2 i21 i22 = " + Double.doubleToLongBits(d2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr lArr2 = " + i26 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount sFld Test.fFld = " + Test.instanceCount + "," + sFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("byFld Test.bFld Test.byFld1 = " + byFld + "," + (Test.bFld ? 1 : 0) + "," +
            Test.byFld1);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
