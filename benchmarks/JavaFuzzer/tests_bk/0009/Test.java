// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public int iFld=163;
    public static float fFld=2.198F;
    public boolean bFld=true;
    public static volatile boolean bArrFld[]=new boolean[N];
    public static byte byArrFld[]=new byte[N];
    public int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.byArrFld, (byte)46);
        FuzzerUtils.init(Test.fArrFld, 0.877F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static long lMeth(int i3) {

        byte by=64;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -4344516314823911782L);

        i3 -= (int)((i3 + (i3 / (by | 1))) * lArr[(i3 >>> 1) % N]);
        i3 += ((--i3) - i3);
        long meth_res = i3 + by + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        int i6=7, i7=47573, i8=-50345, i9=14, i10=-38;
        short s1=14074;
        double d2=-2.57327;
        byte by2=-12;

        for (i6 = 15; i6 < 376; ++i6) {
            byte by1=-107;
            Test.instanceCount += (57689 + (i6 * i6));
            i7 *= i7;
            by1 |= (byte)s1;
            i7 += (i6 * i6);
            i7 -= 31826;
        }
        i7 = 0;
        i8 = 170;
        while (--i8 > 0) {
            switch (((i8 % 2) * 5) + 86) {
            case 96:
                for (i9 = i8; i9 < 9; i9++) {
                    Test.instanceCount = Test.instanceCount;
                    Test.byArrFld[i8] = (byte)i6;
                    Test.instanceCount = i8;
                    i10 -= 6;
                }
                s1 %= (short)((long)(d2) | 1);
                break;
            case 87:
                i7 += by2;
                break;
            default:
                i10 += (-3 + (i8 * i8));
            }
        }
        vMeth1_check_sum += i6 + i7 + s1 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + by2;
    }

    public static void vMeth() {

        int i5=-6188, i11=-42621, i12=148, i13=15322, i14=-50143, i15=12, i16=-45, iArr1[]=new int[N];
        double d1=0.110008;
        short s2=-15538;
        byte by3=-78;

        FuzzerUtils.init(iArr1, 10939);

        i5 = 1;
        do {
            d1 = 1;
            do {
                vMeth1();
            } while (++d1 < 8);
            for (i11 = 1; 8 > i11; ++i11) {
                i12 -= (int)d1;
            }
        } while (++i5 < 188);
        for (i13 = 198; i13 > 2; --i13) {
            i14 += i13;
            switch (((i13 % 4) * 5) + 114) {
            case 134:
                Test.instanceCount -= Test.instanceCount;
                for (i15 = 1; i15 < 8; i15++) {
                    Test.instanceCount = i5;
                    i14 = (int)d1;
                    iArr1[i13 + 1] = (int)Test.instanceCount;
                    Test.instanceCount <<= s2;
                    Test.fFld = i15;
                }
                break;
            case 119:
                i12 = -7;
                break;
            case 131:
                i14 += (i13 * i13);
            case 123:
                by3 += (byte)(-23224 + (i13 * i13));
            default:
                Test.instanceCount = Test.instanceCount;
            }
        }
        vMeth_check_sum += i5 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + i15 + i16 + s2 + by3 +
            FuzzerUtils.checkSum(iArr1);
    }

    public int iMeth(short s, int i4) {

        int i17=0, i18=4, i19=-49, i20=-7, i21=-44, i22=16, i23=-11;
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -83.9F);

        i4 = (int)Test.instanceCount;
        vMeth();
        Test.instanceCount = iFld;
        iFld -= s;
        for (i17 = 10; 349 > i17; ++i17) {
            i19 = 1;
            while ((i19 += 2) < 5) {
                for (i20 = 1; 3 > i20; ++i20) {
                    i21 += (i20 + iFld);
                    iArrFld[i20 - 1] *= (int)Test.instanceCount;
                }
            }
            for (i22 = 1; i22 < 5; i22++) {
                if (i23 != 0) {
                }
                i21 += (int)(8672840552939442793L + (i22 * i22));
                Test.instanceCount >>>= i19;
                fArr[i17 + 1][i17 + 1] = 32388;
                iFld |= (int)Test.instanceCount;
            }
        }
        long meth_res = s + i4 + i17 + i18 + i19 + i20 + i21 + i22 + i23 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=-89, i2=49078, i24=58671, i25=53206, i26=29, i27=13, i28=-198, i29=-3, iArr[][]=new int[N][N];
        double d=-2.75907;
        short s3=28369;
        long l=2003829553886572630L;

        FuzzerUtils.init(iArr, -10404);

        Test.bArrFld[(iFld >>> 1) % N] = (Test.instanceCount > iArr[(iFld >>> 1) % N][(172 >>> 1) % N]);
        i = 1;
        while (++i < 191) {
            for (i1 = 5; i1 < 131; i1++) {
                d = ((iArr[i - 1][i1]--) * lMeth(i1 & iFld));
            }
            i2 -= i;
            iMeth(s3, i);
            iFld += i;
            for (i24 = 3; i24 < 131; i24++) {
                i2 %= (int)((long)(d) | 1);
                Test.instanceCount = i25;
                d = i;
                i25 = -196;
                Test.fArrFld[i] *= Test.instanceCount;
            }
            for (i26 = i; 131 > i26; i26++) {
                i2 <<= s3;
                Test.fArrFld[i26 + 1] = iFld;
                l = 1;
                while (++l < 1) {
                    i25 = i25;
                }
                iArr[i26 - 1][i + 1] |= i26;
                for (i28 = i26; i28 < 1; ++i28) {
                    i29 = 113;
                    Test.instanceCount = i2;
                    i2 = (int)l;
                    Test.instanceCount -= i27;
                    bFld = bFld;
                    i29 = i26;
                    Test.instanceCount = i2;
                    s3 = (short)i;
                    if (false) continue;
                    i2 += (171 + (i28 * i28));
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d s3 i24 = " + Double.doubleToLongBits(d) + "," + s3 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("l i28 i29 = " + l + "," + i28 + "," + i29);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("bFld Test.bArrFld Test.byArrFld = " + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.bArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("iArrFld Test.fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
