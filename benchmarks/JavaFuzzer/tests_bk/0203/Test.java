// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-57953L;
    public static double dFld=2.105325;
    public static int iFld=-38338;
    public float fFld=44.50F;
    public boolean bFld=true;
    public static volatile double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.2470);
        FuzzerUtils.init(Test.lArrFld, 14L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, int i4, int i5) {

        int i6=5, i7=25, i8=36156, i9=-2, i10=-14, i11=5, i12=-11, iArr[]=new int[N];
        float f1=-48.914F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -8L);
        FuzzerUtils.init(iArr, 226);

        for (i6 = 11; i6 < 187; i6++) {
            for (i8 = 9; i8 > 1; --i8) {
                for (i10 = 1; i10 < 2; i10++) {
                    float f=-1.956F;
                    f *= i11;
                    lArr = lArr;
                }
                iArr[i6 + 1] += i10;
                i12 = 1;
                while (++i12 < 2) {
                    i5 -= i11;
                    i4 += (((i12 * i8) + i11) - i10);
                    f1 += (float)Test.dFld;
                    i5 <<= i8;
                    i5 = (int)Test.instanceCount;
                }
                i9 += (i8 | i11);
                iArr[i8] -= i10;
                Test.instanceCount -= i10;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        float f2=116.104F;
        int i14=-63352, iArr1[]=new int[N];
        short s=-5078;

        FuzzerUtils.init(iArr1, -10);

        vMeth1(i2, i2, i2);
        i2 >>= (int)3L;
        for (int i13 : iArr1) {
            i13 += i2;
            switch (((i13 >>> 1) % 4) + 71) {
            case 71:
                Test.dArrFld[(i2 >>> 1) % N] = f2;
                i2 = i13;
                iArr1[(i13 >>> 1) % N] -= i13;
                break;
            case 72:
                i2 -= i2;
                i13 = i13;
                switch ((((i13 >>> 1) % 4) * 5) + 126) {
                case 145:
                    i2 = i2;
                    i14 = 1;
                    do {
                        i13 *= i13;
                    } while (++i14 < 4);
                    i2 += 238;
                    break;
                case 138:
                    i2 -= (int)f2;
                    break;
                case 133:
                    i13 = s;
                    break;
                case 137:
                    i13 += (int)f2;
                }
                break;
            case 73:
                i13 = i2;
                break;
            case 74:
                i2 <<= 172;
                break;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f2) + i14 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(int i, int i1) {


        vMeth(Test.iFld);
        Test.lArrFld[(i >>> 1) % N] = Test.instanceCount;
        vSmallMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        byte by=-97;
        int i15=-26910, i16=-10, i17=7322, i18=-55129, i19=5, iArr2[]=new int[N], iArr3[]=new int[N];
        short s1=22245;
        float f3=-123.347F;

        FuzzerUtils.init(iArr2, -1);
        FuzzerUtils.init(iArr3, 13);

        for (int smallinvoc=0; smallinvoc<504; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld);
        by <<= (byte)i15;
        for (i16 = 256; i16 > 16; i16--) {
            i18 = 1;
            while (++i18 < 105) {
                i17 = i16;
                Test.iFld += (i18 | i18);
                switch ((i16 % 10) + 27) {
                case 27:
                    i19 = 1;
                    while (++i19 < 1) {
                        if (false) {
                            switch (((i18 % 1) * 5) + 83) {
                            case 86:
                                Test.iFld = (int)Test.instanceCount;
                                iArr2[i19] = i15;
                                i17 -= (int)1.10F;
                                break;
                            default:
                                Test.instanceCount = i17;
                            }
                            Test.dFld *= Test.instanceCount;
                        } else if (bFld) {
                            by *= (byte)4;
                            i17 += (int)fFld;
                            i15 = i19;
                            fFld *= s1;
                        } else if (bFld) {
                            Test.dFld = fFld;
                            Test.instanceCount = (long)Test.dFld;
                        } else {
                            s1 -= by;
                            Test.instanceCount += (long)fFld;
                        }
                        bFld = bFld;
                        i15 = i17;
                        Test.iFld = (int)Test.instanceCount;
                        iArr2 = FuzzerUtils.int1array(N, (int)11505);
                        iArr2[i19 + 1] >>= i19;
                        i15 *= i17;
                        Test.iFld += 218;
                    }
                    break;
                case 28:
                    f3 += -12;
                    break;
                case 29:
                    i15 *= i18;
                case 30:
                    Test.iFld >>= i15;
                    break;
                case 31:
                    Test.instanceCount -= by;
                case 32:
                    iArr3 = iArr2;
                    break;
                case 33:
                    iArr3[i18] = i16;
                    break;
                case 34:
                    if (bFld) break;
                    break;
                case 35:
                    i17 = (int)Test.instanceCount;
                    break;
                case 36:
                    i17 += i18;
                default:
                    iArr3[i18 + 1] >>= -2;
                }
            }
        }

        FuzzerUtils.out.println("by i15 i16 = " + by + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("s1 f3 iArr2 = " + s1 + "," + Float.floatToIntBits(f3) + "," +
            FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("fFld bFld Test.dArrFld = " + Float.floatToIntBits(fFld) + "," + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
