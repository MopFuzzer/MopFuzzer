// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-149L;
    public static short sFld=-3668;
    public double dFld=95.53965;
    public int iFld=-28;
    public float fFld=-1.194F;
    public static byte byFld=47;
    public int iFld1=0;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 103);
        FuzzerUtils.init(Test.lArrFld, -42722L);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, long l, long l1) {

        int i7=2657, i8=-11, i9=-1, i10=42689, i11=57947;
        double d=-2.97770;
        byte by=-103;
        float f=-13.175F;
        long l2=32426L;
        boolean b=false;

        for (i7 = 6; 279 > i7; i7++) {
            i8 -= (int)l1;
            switch (((i7 % 2) * 5) + 61) {
            case 71:
                for (i9 = 6; i9 > i7; i9--) {
                    i8 = (int)d;
                    by += (byte)l1;
                    i10 += (int)f;
                    try {
                        i8 = (i9 % 12512);
                        Test.iArrFld[i9 + 1] = (-62894 % Test.iArrFld[i7]);
                        i8 = (49368 / Test.iArrFld[i9]);
                    } catch (ArithmeticException a_e) {}
                }
                for (l2 = 1; l2 < 6; l2++) {
                    d *= l2;
                    if (b) break;
                    i11 >>= (int)l2;
                    f += l2;
                    l = (long)f;
                }
                i8 >>>= -23305;
                break;
            case 63:
                Test.iArrFld[i7] = -27065;
                break;
            }
        }
        vMeth1_check_sum += s + l + l1 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + by + Float.floatToIntBits(f)
            + l2 + i11 + (b ? 1 : 0);
    }

    public static void vMeth(int i6) {

        int i12=-146, i13=61174, i14=-108, i15=4, i16=41986, i17=31564;
        double d1=2.25380;

        vMeth1((short)(-29401), -172L, Test.instanceCount);
        for (i12 = 7; i12 < 235; i12++) {
            for (i14 = i12; i14 < 7; i14++) {
                for (i16 = 1; i16 < 1; ++i16) {
                    i13 = 2;
                    i6 *= (int)Test.instanceCount;
                    Test.instanceCount += (i16 - i12);
                    i6 += (int)(0.680F + (i16 * i16));
                    Test.lArrFld[i16] -= i13;
                    d1 += i12;
                    if (true) break;
                    Test.instanceCount -= 28438L;
                    Test.lArrFld[i12] += Test.byFld;
                    Test.instanceCount += (((i16 * i6) + Test.instanceCount) - i15);
                }
                i13 = i16;
            }
        }
        vMeth_check_sum += i6 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d1);
    }

    public float fMeth(int i3, int i4) {

        int i5=6;

        i5 = 1;
        do {
            vMeth(i5);
            iFld = (int)Test.instanceCount;
        } while (++i5 < 225);
        long meth_res = i3 + i4 + i5;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=146, i1=1, i2=-243, i18=44534, i19=-7, i20=17702, i21=-4072, i22=-83;
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);

        if (bArr[(-231 >>> 1) % N] ^ (((Test.sFld + dFld) - (iFld = iFld)) <= (fFld++))) {
            i >>= (int)(((--Test.instanceCount) * (-38280 * (-11856 - (Test.instanceCount--)))) - (++Test.iArrFld[(-3
                >>> 1) % N]));
            i &= (int)((-9310 - Test.instanceCount) + Test.iArrFld[(i >>> 1) % N]);
        } else {
            Test.instanceCount *= ((i + Test.instanceCount) - ((-(iFld + i)) * (Test.instanceCount + i)));
            for (i1 = 12; i1 < 193; ++i1) {
                fMeth(i2, -3);
                i2 += i2;
                i2 %= (int)(iFld | 1);
                fFld += i1;
                for (i18 = 139; i18 > 8; i18 -= 3) {
                    fFld -= -8;
                    fFld = i2;
                    for (i20 = 1; i20 < 4; ++i20) {
                        Test.iArrFld[i18 + 1] -= iFld;
                        Test.instanceCount = i;
                        i += (((i20 * iFld) + i) - i18);
                        dFld = Test.byFld;
                        i19 += i20;
                        i /= (int)-16L;
                        fFld += (i20 + i20);
                        Test.iArrFld[i1 - 1] >>= iFld;
                    }
                    i = (int)fFld;
                }
                iFld1 += (i1 * i1);
                i2 += (((i1 * i21) + Test.instanceCount) - iFld);
                Test.iArrFld = Test.iArrFld;
                fFld -= i2;
                Test.instanceCount *= -8;
            }
            i22 = 1;
            while (++i22 < 301) {
                bArr[i22] = b1;
                Test.instanceCount = -5140;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 b1 = " + i21 + "," + i22 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld dFld = " + Test.instanceCount + "," + Test.sFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iFld fFld Test.byFld = " + iFld + "," + Float.floatToIntBits(fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("iFld1 Test.iArrFld Test.lArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld)
            + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
