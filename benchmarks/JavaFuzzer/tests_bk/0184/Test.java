// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4278811451268350333L;
    public static byte byFld=23;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 138);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        int i4=-8, i5=52, i6=-18536, i7=-230, i8=-52041, i9=-60838;
        float f2=0.546F;
        boolean b=false;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -44.39074);

        for (i4 = 1; i4 < 174; ++i4) {
            for (i6 = 9; i6 > 1; i6--) {
                i5 += (i6 + i6);
                i7 = i7;
                for (i8 = 1; i8 < 2; i8++) {
                    i7 += (i8 ^ i5);
                    Test.instanceCount = 5;
                    f2 = i7;
                    b = true;
                    Test.iArrFld[i4] = i8;
                    Test.byFld = (byte)11;
                    switch ((i8 % 4) + 123) {
                    case 123:
                        i7 = i6;
                        dArr[i8 - 1] -= i5;
                        if (b) break;
                        break;
                    case 124:
                        i5 <<= 99;
                    case 125:
                        Test.byFld = (byte)35023;
                        break;
                    case 126:
                        Test.iArrFld[i8] = i6;
                        break;
                    }
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1(int i1, int i2) {

        double d=112.50094;
        float f1=0.1002F;
        int i10=185, i11=-70, i12=121, i13=-3, i14=8;

        Test.instanceCount = i2;
        d += ((++f1) + ((i2 - i2) + (f1++)));
        vMeth2(i1);
        for (i10 = 239; i10 > 5; --i10) {
            i12 = 1;
            while (++i12 < 7) {
                i11 = i10;
                if (i11 != 0) {
                    vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i10 + i11 +
                        i12 + i13 + i14;
                    return;
                }
                i11 *= -49022;
                for (i13 = 1; i13 < 1; i13++) {
                    i2 ^= -15666;
                    Test.instanceCount += i13;
                    i2 += (((i13 * i13) + Test.instanceCount) - f1);
                }
                Test.byFld >>= (byte)-107;
                Test.instanceCount += i12;
            }
            i1 += (((i10 * Test.instanceCount) + i1) - i14);
        }
        vMeth1_check_sum += i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 +
            i14;
    }

    public static void vMeth(float f) {

        int i=-8;

        Test.iArrFld[(i >>> 1) % N] += (int)(~(long)((f + 226L) - (Test.instanceCount++)));
        vMeth1(i, i);
        Test.iArrFld = Test.iArrFld;
        Test.instanceCount -= Test.instanceCount;
        i += i;
        vMeth_check_sum += Float.floatToIntBits(f) + i;
    }

    public void mainTest(String[] strArr1) {

        int i15=-64, i16=4303, i17=6, i18=63, i19=47, i20=-238, i21=36631, i22=-16;
        long l=12843L;
        float f3=-2.143F, f4=-84.949F;
        boolean b1=false;
        double d1=2.91753, dArr1[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)8);
        FuzzerUtils.init(dArr1, 0.117074);

        vMeth(0.800F);
        for (byte by : byArr) {
            i15 &= i15;
            for (l = 63; l > 3; l--) {
                f3 *= i15;
                b1 = b1;
                i16 >>= 121;
                i15 = -251;
                lArrFld[(int)(l + 1)] = -11;
                lArrFld[(int)(l - 1)] ^= Test.instanceCount;
                for (f4 = l; f4 < 2; f4++) {
                    Test.instanceCount = 90L;
                }
                for (i18 = 1; i18 < 2; ++i18) {
                    f3 += 155;
                    i16 = i15;
                    Test.instanceCount *= i16;
                    b1 = b1;
                }
                d1 %= 0.15803;
                Test.iArrFld[(int)(l)] *= (int)Test.instanceCount;
            }
            i20 = 1;
            do {
                i17 = (int)f3;
                i16 += (int)l;
                i15 += (i20 * i20);
                dArr1[i20 + 1] *= f4;
                for (i21 = 1; i21 < 1; ++i21) {
                    Test.iArrFld[i21] = i15;
                    i17 += -14;
                    i17 += i21;
                    i19 += (((i21 * i18) + i16) - i19);
                    i19 += i21;
                }
            } while (++i20 < 63);
        }

        FuzzerUtils.out.println("i15 l i16 = " + i15 + "," + l + "," + i16);
        FuzzerUtils.out.println("f3 b1 f4 = " + Float.floatToIntBits(f3) + "," + (b1 ? 1 : 0) + "," +
            Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("d1 i20 i21 = " + Double.doubleToLongBits(d1) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 byArr dArr1 = " + i22 + "," + FuzzerUtils.checkSum(byArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld Test.iArrFld = " + Test.instanceCount + "," + Test.byFld
            + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
