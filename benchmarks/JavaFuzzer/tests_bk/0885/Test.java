// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=22332L;
    public volatile float fFld=21.896F;
    public static int iFld=-10;
    public static byte byFld=-34;
    public static boolean bFld=false;
    public static short sFld=-24238;
    public int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, 4242590035L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(boolean b, int i1, int i2) {

        int i3=-43, i4=-4, i5=100, i6=-233, i7=1, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 17237);

        i3 = 1;
        do {
            double d1=-109.89678;
            i2 += i1;
            d1 += Test.iFld;
            for (i4 = 4; i4 > 1; i4 -= 2) {
                for (i6 = 1; i6 < 4; i6++) {
                    Test.iFld += (((i6 * i6) + i6) - i6);
                    d1 *= i2;
                    Test.instanceCount = Test.iFld;
                    i2 -= i4;
                    b = b;
                    i5 = (int)4L;
                }
                d1 += 5L;
                Test.instanceCount += i4;
                Test.byFld = (byte)i4;
                iArr[i4 - 1] -= (int)-100.430F;
            }
        } while (++i3 < 390);
        long meth_res = (b ? 1 : 0) + i1 + i2 + i3 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void vMeth1(double d, long l, long l1) {

        boolean b1=false;
        int i8=11, i9=-14402, i10=1, i11=-28, i12=-68, i13=-118, i14=-62812, i15=216, iArr1[]=new int[N], iArr2[]=new
            int[N];
        short s=-21616, s1=-13787;
        float f=22.801F;

        FuzzerUtils.init(iArr1, -42597);
        FuzzerUtils.init(iArr2, -4);

        Test.iFld = byMeth(b1, Test.iFld, Test.iFld);
        d = -48;
        Test.instanceCount ^= 5;
        for (i8 = 1; i8 < 126; ++i8) {
            Test.iFld = (int)d;
            for (i10 = 1; i10 < 13; ++i10) {
                l ^= s;
                for (i12 = i8; i12 < 2; ++i12) {
                    i11 >>>= i13;
                }
                for (i14 = 2; i14 > 1; i14 -= 3) {
                    iArr1[i10 - 1] >>= s1;
                    l -= l1;
                }
                i11 = i14;
            }
        }
        iArr2[(i15 >>> 1) % N] += (int)f;
        i15 = i9;
        vMeth1_check_sum += Double.doubleToLongBits(d) + l + l1 + (b1 ? 1 : 0) + i8 + i9 + i10 + i11 + s + i12 + i13 +
            i14 + i15 + s1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth() {

        int i=-82, i16=11, i17=-11, i18=45343, i19=117, i20=115, iArr3[]=new int[N];
        double d2=-13.26616;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 29556L);
        FuzzerUtils.init(iArr3, 8605);

        fFld = (lArr[(46381 >>> 1) % N] + 2.731F);
        i = 1;
        do {
            vMeth1(94.96370, Test.instanceCount, Test.instanceCount);
            iArr3[i] -= i;
            for (i16 = 1; 8 > i16; i16++) {
                i17 -= i;
                Test.bFld = Test.bFld;
                i18 = 1;
                do {
                    Test.sFld += (short)(i18 + fFld);
                } while (++i18 < 2);
                for (i19 = 1; i19 < 2; i19++) {
                    fFld -= i18;
                    i17 = (int)Test.instanceCount;
                    Test.instanceCount <<= Test.sFld;
                    d2 -= Test.instanceCount;
                    fFld = -3266555864527973370L;
                }
            }
        } while (++i < 196);
        vMeth_check_sum += i + i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i21=6, i22=-1, i23=-35610, i24=-54030, i25=-39917, i26=-7722, i27=2177, i28=85, i29=-51721, i30=-74;
        double d3=39.115987, dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -113.74011);

        vMeth();
        dArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] *= Test.iFld;
        for (i21 = 3; i21 < 139; i21++) {
            iArrFld = iArrFld;
            Test.iFld -= (int)Test.instanceCount;
            fFld += i21;
            i22 += Test.iFld;
            fFld -= i21;
        }
        Test.instanceCount *= -10;
        i22 = i21;
        if (Test.bFld) {
            Test.iFld >>>= i22;
            Test.iFld += (int)Test.instanceCount;
        } else if (true) {
            dArr[(i21 >>> 1) % N][(32434 >>> 1) % N] += fFld;
        }
        for (i23 = 397; i23 > 15; i23--) {
            Test.lArrFld = Test.lArrFld;
            i22 >>>= Test.iFld;
            Test.lArrFld[i23 + 1] -= i22;
            for (i25 = i23; 66 > i25; ++i25) {
                i24 += (((i25 * i24) + i26) - Test.instanceCount);
                Test.sFld *= (short)-6456369007532005277L;
            }
            for (i27 = 2; i27 < 66; i27++) {
                for (i29 = 1; i29 < 2; ++i29) {
                    i28 += i26;
                }
                Test.byFld = (byte)i25;
                switch (((i23 % 2) * 5) + 65) {
                case 71:
                    i26 = i25;
                    d3 *= i25;
                    Test.lArrFld[i27 - 1] = i26;
                    Test.lArrFld[i23 - 1] = Test.instanceCount;
                    break;
                case 66:
                    Test.sFld += (short)(((i27 * Test.instanceCount) + i27) - Test.instanceCount);
                    break;
                default:
                    i24 += i22;
                }
            }
        }

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 d3 dArr = " + i30 + "," + Double.doubleToLongBits(d3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld Test.bFld Test.sFld = " + Test.byFld + "," + (Test.bFld ? 1 : 0) + "," +
            Test.sFld);
        FuzzerUtils.out.println("iArrFld Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
