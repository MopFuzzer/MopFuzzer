// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-24284L;
    public int iFld=-13695;
    public static int iFld1=31;
    public static int iFld2=-37;
    public static int iArrFld[]=new int[N];
    public static byte byArrFld[]=new byte[N];
    public volatile long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13);
        FuzzerUtils.init(Test.byArrFld, (byte)-120);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i5) {

        int i7=-4, i8=-27628, iArr[]=new int[N];
        short s=-9938;
        byte by=-126;

        FuzzerUtils.init(iArr, -68);

        for (int i6 : iArr) {
            i6 = i5;
            i7 = 1;
            while (++i7 < 4) {
                float f1=0.961F;
                switch ((((i7 >>> 1) % 2) * 5) + 31) {
                case 37:
                    Test.instanceCount -= -160;
                    f1 = i7;
                    s += (short)-217;
                    f1 += i6;
                    break;
                case 36:
                    iArr = iArr;
                    i8 = 1;
                    while ((i8 += 2) < 1) {
                        by += (byte)(i8 - i6);
                    }
                    switch ((((-10 >>> 1) % 3) * 5) + 6) {
                    case 8:
                        by = (byte)i8;
                        i5 *= (int)1.24248;
                        f1 = s;
                        break;
                    case 17:
                        i5 >>= (int)1938683818454215122L;
                        break;
                    case 12:
                        i5 += i8;
                        break;
                    default:
                        if (false) break;
                    }
                }
            }
        }
        vMeth2_check_sum += i5 + i7 + s + i8 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i3, int i4, long l) {

        int i9=7, i10=10769, i11=-42572, i12=28417, i13=239, i14=14, i15=-9;

        vMeth2(-14);
        for (i9 = 1; 205 > i9; ++i9) {
            i11 = 1;
            while (++i11 < 8) {
                i3 = i10;
                l >>= i11;
            }
            i12 = 1;
            do {
                i4 = 104;
                l += i4;
                for (i13 = 1; 1 > i13; ++i13) {
                    i3 += i13;
                    Test.iArrFld[i9] += (int)-56.405F;
                    i14 = i4;
                }
                i15 = 1;
                while (++i15 < 1) {
                    l -= 210;
                    i14 = i12;
                }
            } while (++i12 < 8);
        }
        vMeth1_check_sum += i3 + i4 + l + i9 + i10 + i11 + i12 + i13 + i14 + i15;
    }

    public static void vMeth(int i) {

        int i1=-603, i2=-15585, i16=-171, i17=24169, i18=46651, i19=-47896;
        short s1=26594;
        boolean b=false;
        float fArr[]=new float[N];
        double dArr[]=new double[N];

        FuzzerUtils.init(fArr, -54.862F);
        FuzzerUtils.init(dArr, -1.10708);

        for (i1 = 12; i1 < 259; i1++) {
            i += (int)((fArr[i1 - 1] + (++i)) / (((52031 % ((Test.instanceCount % (i1 | 1)) | 1)) +
                Long.reverseBytes(Test.instanceCount)) | 1));
            vMeth1(i1, i, Test.instanceCount);
            i16 = 1;
            do {
                byte by1=56;
                i += i1;
                Test.instanceCount = i;
                by1 <<= (byte)s1;
                for (i17 = 1; i17 < 1; i17++) {
                    dArr = dArr;
                }
                i >>>= i;
                i += (((i16 * i2) + i18) - i1);
                if (true) {
                    i19 = 1;
                    do {
                        i = 163;
                        i2 &= i1;
                    } while (++i19 < 1);
                } else if (b) {
                    i2 |= i19;
                }
            } while (++i16 < 7);
        }
        vMeth_check_sum += i + i1 + i2 + i16 + s1 + i17 + i18 + i19 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        float f=-47.331F, f2=-1.12F;
        int i20=5, i21=23757, i22=-54748, i23=-64467, i24=-236, i25=176, i26=4, i27=8, i28=12, i29=-171;
        short s2=3407;
        double d1=-41.78162;

        f = Long.reverseBytes(iFld + (31291 + iFld));
        vMeth(iFld);
        Test.byArrFld[(iFld >>> 1) % N] *= (byte)Test.instanceCount;
        for (i20 = 276; i20 > 2; i20 -= 3) {
            for (i22 = 16; i22 < 275; i22++) {
                Test.instanceCount -= iFld;
                for (i24 = 1; i24 < 2; ++i24) {
                    double d=1.27936;
                    i25 -= s2;
                    i21 -= i24;
                    d -= 2;
                    f += (-11 + (i24 * i24));
                    i25 += (int)Test.instanceCount;
                    Test.instanceCount = i25;
                }
                Test.iArrFld[i20 + 1] += iFld;
                i21 = (int)Test.instanceCount;
                switch (((i20 % 5) * 5) + 72) {
                case 95:
                    i23 *= s2;
                    for (f2 = 1; f2 < 2; f2++) {
                        iFld *= (int)d1;
                    }
                    for (i27 = 1; i27 < 2; ++i27) {
                        Test.instanceCount = i28;
                        i21 |= s2;
                        i25 = i24;
                        i23 = (int)-112L;
                        i26 -= i23;
                        i21 = Test.iFld1;
                    }
                case 96:
                    f += (4 + (i22 * i22));
                    i21 += (int)Test.instanceCount;
                    Test.iFld1 += i28;
                    Test.iFld1 += (i22 ^ i23);
                    break;
                case 92:
                    lArrFld = FuzzerUtils.long1array(N, (long)-313185121L);
                    break;
                case 91:
                    i28 -= i26;
                    break;
                case 82:
                    Test.instanceCount <<= Test.iFld2;
                    break;
                default:
                    try {
                        i28 = (i27 % i27);
                        i25 = (i26 % 197);
                        i29 = (i24 % i28);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }

        FuzzerUtils.out.println("f i20 i21 = " + Float.floatToIntBits(f) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 s2 f2 = " + i25 + "," + s2 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i26 d1 i27 = " + i26 + "," + Double.doubleToLongBits(d1) + "," + i27);
        FuzzerUtils.out.println("i28 i29 = " + i28 + "," + i29);

        FuzzerUtils.out.println("Test.instanceCount iFld Test.iFld1 = " + Test.instanceCount + "," + iFld + "," +
            Test.iFld1);
        FuzzerUtils.out.println("Test.iFld2 Test.iArrFld Test.byArrFld = " + Test.iFld2 + "," +
            FuzzerUtils.checkSum(Test.iArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
