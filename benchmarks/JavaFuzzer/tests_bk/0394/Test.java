// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=21942L;
    public double dFld=30.90340;
    public static byte byFld=-49;
    public short sFld=-9526;
    public volatile byte byArrFld[]=new byte[N];
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 49.1019F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i2=130, i3=-32365, i4=-29349, i5=29114, i6=60086, i7=-66, iArr[]=new int[N];
        float f1=2.873F;
        boolean b=false;

        FuzzerUtils.init(iArr, 12);

        i2 = 1;
        while (++i2 < 303) {
            i3 -= i3;
            i3 += i2;
            if (b) {
                i3 >>>= i3;
                for (i4 = 1; i4 < 5; ++i4) {
                    Test.fArrFld[i2] += i3;
                    i5 -= i5;
                    f1 = Test.instanceCount;
                    for (i6 = 1; i6 < 2; i6++) {
                        i7 = i7;
                        try {
                            i5 = (iArr[i2 + 1] / -6);
                            i3 = (-61973 / i7);
                            iArr[i6 - 1] = (i5 % i4);
                        } catch (ArithmeticException a_e) {}
                        i7 = i7;
                        f1 += i6;
                        try {
                            i7 = (i7 / iArr[i4 + 1]);
                            i3 = (i7 / iArr[i6]);
                            i3 = (iArr[i2 - 1] % 58001);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            } else {
                try {
                    iArr[i2] = (-25929 % i7);
                    i3 = (i6 / iArr[i2 - 1]);
                    i3 = (152 % i5);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + Float.floatToIntBits(f1) + i6 + i7 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, long l1) {


        iMeth1();
        vMeth_check_sum += l + l1;
    }

    public static int iMeth(double d, byte by, int i1) {

        double d1=108.58778, d2=81.101170;
        int i8=140, i9=-130, i10=56, i11=89, iArr1[]=new int[N];
        boolean b1=false, bArr[]=new boolean[N];

        FuzzerUtils.init(iArr1, 15591);
        FuzzerUtils.init(bArr, true);

        Test.instanceCount *= (i1++);
        vMeth(Test.instanceCount, Test.instanceCount);
        for (d1 = 6; d1 < 192; ++d1) {
            iArr1[(int)(d1 - 1)] += (int)d;
            bArr[(int)(d1)] = b1;
        }
        i9 = 1;
        do {
            if (i9 != 0) {
            }
            i1 *= 62884;
            for (i10 = 1; i10 < 4; ++i10) {
                d2 *= d;
                i8 >>= i10;
            }
            i8 &= (int)Test.instanceCount;
            if (i9 != 0) {
            }
            i1 = i9;
            i11 /= (int)(Test.instanceCount | 1);
        } while (++i9 < 385);
        long meth_res = Double.doubleToLongBits(d) + by + i1 + Double.doubleToLongBits(d1) + i8 + (b1 ? 1 : 0) + i9 +
            i10 + i11 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i12=-171, i13=20418, i14=18034, i15=-94, i16=-12906, i17=11, i18=201, i19=11;
        float f=-1.725F, f2=79.188F;
        boolean b2=false, bArr1[]=new boolean[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -76L);
        FuzzerUtils.init(bArr1, false);

        i = (int)((i++) - (--Test.instanceCount));
        i = (int)(((i = i) - (Test.instanceCount++)) | byArrFld[(i >>> 1) % N]);
        f = iMeth(dFld, Test.byFld, i);
        if (b2) {
            Test.byFld *= (byte)106;
        } else {
            for (i12 = 12; i12 < 344; ++i12) {
                i += (i12 * i12);
                Test.instanceCount <<= -24443;
                i += (i12 * i12);
                i14 = 76;
                while ((i14 -= 2) > 0) {
                    i13 = -38;
                    lArr[i12 + 1] >>= Test.instanceCount;
                }
                i13 <<= i12;
                switch (((i12 % 9) * 5) + 39) {
                case 44:
                    for (i15 = i12; i15 < 76; ++i15) {
                        for (i17 = 1; i17 < 1; ++i17) {
                            i18 = (int)-113.107146;
                            i18 = 18754;
                            i18 += (i17 ^ (long)f);
                            i -= (int)dFld;
                            i += (10 + (i17 * i17));
                            Test.instanceCount = i13;
                            iArrFld = iArrFld;
                            i16 = (int)f;
                            bArr1[i17 - 1] = b2;
                        }
                        switch (((i13 >>> 1) % 7) + 43) {
                        case 43:
                            byArrFld[i12 - 1] += (byte)i18;
                        case 44:
                            for (f2 = 1; f2 < 1; ++f2) {
                                iArrFld = iArrFld;
                            }
                            i18 += (int)(0.415F + (i15 * i15));
                        case 45:
                            i13 = -1;
                            break;
                        case 46:
                            sFld = (short)Test.instanceCount;
                        case 47:
                            i += (((i15 * i17) + f2) - i19);
                            break;
                        case 48:
                            Test.instanceCount += i13;
                            break;
                        case 49:
                            try {
                                i13 = (i18 % i16);
                                i16 = (i12 % iArrFld[i12 + 1]);
                                i19 = (i12 % 27477);
                            } catch (ArithmeticException a_e) {}
                            break;
                        default:
                            i18 = -10;
                        }
                    }
                    break;
                case 52:
                    Test.fArrFld[i12 - 1] *= Test.instanceCount;
                    break;
                case 75:
                    Test.instanceCount ^= Test.instanceCount;
                case 55:
                case 73:
                    Test.instanceCount >>= -13L;
                    break;
                case 74:
                    i18 -= i18;
                case 41:
                    i13 = i15;
                case 80:
                    if (true) break;
                    break;
                case 40:
                    lArr[i12 + 1] += i16;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i f b2 = " + i + "," + Float.floatToIntBits(f) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 f2 i19 = " + i18 + "," + Float.floatToIntBits(f2) + "," + i19);
        FuzzerUtils.out.println("lArr bArr1 = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount dFld Test.byFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + Test.byFld);
        FuzzerUtils.out.println("sFld byArrFld Test.fArrFld = " + sFld + "," + FuzzerUtils.checkSum(byArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
