// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-985450310177830516L;
    public static short sFld=-8110;
    public static int iFld=5;
    public static float fFld=2.739F;
    public static byte byFld=12;
    public static int iFld1=80;
    public volatile boolean bFld=false;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.3781);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i6) {

        int i7=-198, i8=24930, i9=-13, i10=55460, i11=-216, i12=219, i13=50289, i14=199, i15=73, iArr1[]=new int[N];
        double d1=-1.112010;
        boolean b=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 8);

        for (i7 = 13; 359 > i7; i7++) {
            Test.iFld += (i7 * i7);
            Test.iFld += i7;
            i8 = (int)30429L;
        }
        for (i9 = 7; 124 > i9; i9++) {
            bArr[i9] = bArr[i9 - 1];
            i6 -= i8;
            Test.instanceCount = (long)Test.fFld;
            for (d1 = 1; d1 < 13; ++d1) {
                for (i12 = 1; i12 < 2; i12++) {
                    i8 += (int)Test.fFld;
                    iArr1[i12 - 1] = i13;
                }
                for (i14 = i9; i14 < 2; ++i14) {
                    Test.iFld += (int)-101.1532;
                    if (b) continue;
                }
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + i13 + i14 + i15 + (b ? 1 :
            0) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5) {

        double d2=0.92376;
        int i16=-20444, i17=-111, i18=-62843, iArr2[][]=new int[N][N];
        boolean b1=true;
        long l=-3196L;

        FuzzerUtils.init(iArr2, -51);

        Test.instanceCount = (long)(iMeth1(Test.iFld) + d2);
        i16 = 1;
        while ((i16 += 2) < 321) {
            switch ((i16 % 6) + 37) {
            case 37:
                if (b1) {
                    for (i17 = 1; i17 < 10; ++i17) {
                        i5 = i18;
                        Test.byFld = (byte)i18;
                        if (i5 != 0) {
                        }
                        i18 += (i17 * i17);
                        try {
                            Test.iFld = (i5 / i18);
                            iArr2[i16 - 1][i17 + 1] = (i17 / i18);
                            Test.iFld = (i17 % -150);
                        } catch (ArithmeticException a_e) {}
                        i5 = Test.sFld;
                        if (b1) continue;
                        iArr2[i17 + 1][i16 + 1] -= (int)l;
                        i5 <<= -12;
                        i5 <<= i18;
                    }
                } else if (b1) {
                    Test.fFld += i16;
                }
                break;
            case 38:
            case 39:
                i5 *= (int)d2;
            case 40:
                iArr2[i16][i16] -= (int)l;
                break;
            case 41:
                Test.fFld -= (float)d2;
            case 42:
                d2 += i18;
                break;
            default:
                Test.iFld += (235 + (i16 * i16));
            }
        }
        long meth_res = i5 + Double.doubleToLongBits(d2) + i16 + i17 + i18 + (b1 ? 1 : 0) + l +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i) {

        int i1=-11, i2=20, i3=12, i4=61, iArr[]=new int[N];
        double d=1.5738;
        float f=62.843F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 6130);
        FuzzerUtils.init(lArr, -60L);

        for (i1 = 14; i1 < 258; i1++) {
            i |= (int)-30433L;
            i = (int)(iArr[i1 + 1] += (int)(iArr[i1 + 1] + (--Test.dArrFld[i1 + 1])));
            for (i3 = 1; i3 < 7; i3++) {
                i &= (int)Test.instanceCount;
                d += (lArr[i1 + 1]++);
                f = (i2--);
                i = (int)((Test.sFld + (++i2)) - (i2 -= (int)f));
                i2 = i2;
                Test.iFld += (((i3 * Test.iFld) + Test.iFld) - Test.instanceCount);
                i <<= iArr[i3 - 1];
                iArr[i3 - 1] = (int)(Test.instanceCount--);
                Test.instanceCount = (iArr[i3] = (Test.sFld++));
                i >>= ((--i4) | iArr[i1 + 1]);
            }
            i = (int)lMeth(i2);
        }
        long meth_res = i + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d3=-2.43344, d4=39.106519, d5=-123.130147;
        int i19=4849, i20=-28191, i21=10422, i22=15, i23=-12, i24=77, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -9808);

        iMeth(Test.iFld);
        Test.iFld = (int)Test.instanceCount;
        d3 = 1;
        while (++d3 < 384) {
            Test.fFld -= -2.757F;
            switch ((int)(((d3 % 1) * 5) + 120)) {
            case 124:
                iArr3 = iArr3;
                d4 -= Test.iFld;
                break;
            }
            Test.iFld += Test.iFld;
            for (i19 = 2; i19 < 66; i19++) {
                d4 *= Test.fFld;
                for (i21 = (int)(d3); i21 < 2; i21++) {
                    i22 = i20;
                    Test.instanceCount <<= Test.iFld;
                }
                Test.fFld = Test.fFld;
                for (i23 = (int)(d3); 2 > i23; i23++) {
                    i20 -= (int)Test.fFld;
                    i22 = Test.iFld1;
                    Test.iFld = i21;
                    iArr3[i19] += (int)2.79765;
                }
                Test.iFld1 = Test.iFld1;
                i22 <<= i21;
                d5 = 1;
                do {
                    Test.instanceCount = i20;
                    i20 = (int)Test.instanceCount;
                    i24 = -58368;
                    Test.iFld += i22;
                    Test.sFld *= (short)Test.iFld;
                } while (++d5 < 2);
            }
            if (bFld) {
                i24 += i21;
                Test.sFld >>= (short)i21;
            } else {
                Test.instanceCount -= i19;
            }
        }

        FuzzerUtils.out.println("d3 d4 i19 = " + Double.doubleToLongBits(d3) + "," + Double.doubleToLongBits(d4) + ","
            + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 d5 = " + i23 + "," + i24 + "," + Double.doubleToLongBits(d5));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld Test.byFld Test.iFld1 = " + Float.floatToIntBits(Test.fFld) + "," +
            Test.byFld + "," + Test.iFld1);
        FuzzerUtils.out.println("bFld Test.dArrFld = " + (bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
