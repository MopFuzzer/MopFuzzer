// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-5621L;
    public static float fFld=2.366F;
    public static boolean bFld=false;
    public static volatile long lFld=1672164008765972009L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[]=new int[N];
    public static boolean bArrFld[][]=new boolean[N][N];
    public static int iArrFld1[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 0.85F);
        FuzzerUtils.init(Test.iArrFld, -9);
        FuzzerUtils.init(Test.bArrFld, false);
        FuzzerUtils.init(Test.iArrFld1, 144);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i12, double d2) {

        int i13=-7, i14=10, i15=225, i16=-10, i17=-174;

        i12 = i12;
        Test.bFld = Test.bFld;
        for (i13 = 10; i13 < 346; ++i13) {
            Test.instanceCount ^= i12;
            Test.instanceCount -= Test.instanceCount;
            i12 += (i13 | i14);
            Test.instanceCount += (((i13 * Test.instanceCount) + i12) - Test.instanceCount);
            for (i15 = i13; i15 < 5; i15++) {
                short s2=-6750;
                Test.fFld -= s2;
                i12 += (i15 | i12);
                i12 += (((i15 * i15) + Test.instanceCount) - Test.lFld);
                try {
                    i12 = (i14 / i16);
                    i12 = (Test.iArrFld[i13] / i12);
                    Test.iArrFld[i15 + 1] = (Test.iArrFld[i13 - 1] / 1251062151);
                } catch (ArithmeticException a_e) {}
                i17 = 1;
                do {
                    Test.iArrFld[i13 + 1] = (int)Test.lFld;
                    i14 >>>= (int)Test.lFld;
                } while (++i17 < 1);
            }
        }
        long meth_res = i12 + Double.doubleToLongBits(d2) + i13 + i14 + i15 + i16 + i17;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i10=-51711, i11=-3, i18=2, i19=-156, i20=-51847, i21=-105, i22=-10;
        double d3=0.65272;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)82);

        for (i10 = 3; i10 < 364; i10++) {
            if (Test.bFld) break;
            i11 = (byArr[i10] -= (byte)(iMeth(i10, d3) & i11));
            for (i18 = 5; i18 > i10; --i18) {
                Test.lFld += (i18 + i11);
                Test.bFld = Test.bFld;
                Test.lFld = i18;
                for (i20 = 1; i20 < 1; i20++) {
                    Test.fArrFld[i18 - 1] %= (i19 | 1);
                    Test.lFld -= Test.lFld;
                    Test.fFld += i10;
                }
                if (Test.bFld) {
                    i19 = i22;
                    Test.iArrFld[i18 + 1] -= i18;
                    vMeth_check_sum += i10 + i11 + Double.doubleToLongBits(d3) + i18 + i19 + i20 + i21 + i22 +
                        FuzzerUtils.checkSum(byArr);
                    return;
                } else if (Test.bFld) {
                    i19 ^= (int)Test.lFld;
                } else {
                    i22 += i18;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + Double.doubleToLongBits(d3) + i18 + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(long l, double d1) {

        int i6=-7, i7=1, i8=-60469, i9=-20453, i23=4, i24=12, iArr1[]=new int[N];
        short s1=30754;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.743F);
        FuzzerUtils.init(iArr1, -4);

        i6 = 1;
        do {
            i7 += (int)((d1++) + i7);
            i7 += (int)((-i7) + (-(i7 + Test.instanceCount)));
            iArr1[i6] = (int)(((s1 * l) & -152) + ((s1--) * -83.17635));
            if (b) break;
            for (i8 = 1; i8 < 11; i8++) {
                byte by=65;
                vMeth();
                by += (byte)i8;
                i9 += (int)Test.fFld;
                Test.bArrFld[i6 + 1][i8 - 1] = Test.bFld;
                i9 += i8;
                for (i23 = 2; i6 < i23; i23 -= 2) {
                    Test.iArrFld[i8] *= (int)-1133768338L;
                    i7 += (i23 * i23);
                }
                Test.fFld += i8;
            }
        } while ((i6 += 2) < 291);
        long meth_res = l + Double.doubleToLongBits(d1) + i6 + i7 + s1 + (b ? 1 : 0) + i8 + i9 + i23 + i24 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-12, i1=246, i2=-109, i3=-2303, i4=-14, i5=199, i25=-25780, i26=-8, i27=-65247, i28=-75, i29=-61,
            i30=47055, iArr[]=new int[N];
        short s=14677;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, -79.110274);
        FuzzerUtils.init(iArr, 13);

        for (i = 269; i > 16; --i) {
            i2 = 1;
            do {
                i1 += (((i2 * i2) + i) - i2);
                for (i3 = 1; i3 < 1; ++i3) {
                    double d=-2.29301;
                    dArr[i2 - 1][i + 1] = (d -= iArr[i2]);
                    Test.fFld += i3;
                    i1 -= (i4++);
                    i5 -= (int)(((s * 8) + (i5 /= (int)(i | 1))) + ((Test.instanceCount + i5) * i4));
                    i4 <<= ((-i1) & (++i1));
                    i5 += (9 + (i3 * i3));
                    i5 = (int)(lMeth(Test.instanceCount, -117.21683) >>> i);
                }
                i5 -= i5;
                Test.bFld = Test.bFld;
                Test.instanceCount &= Test.instanceCount;
            } while (++i2 < 99);
            for (i25 = 5; i25 < 99; i25++) {
                for (i27 = 1; i27 < 2; ++i27) {
                    if (Test.bFld) {
                        Test.instanceCount <<= i;
                        try {
                            i26 = (472079833 / i3);
                            Test.iArrFld[i25 + 1] = (-213 % Test.iArrFld1[i25 + 1]);
                            i28 = (i28 / i26);
                        } catch (ArithmeticException a_e) {}
                        i1 += (i27 * i3);
                        Test.fFld = 164;
                    } else {
                        try {
                            i28 = (64875 / i27);
                            iArr[i25 + 1] = (1042597729 % Test.iArrFld[i + 1]);
                            i28 = (Test.iArrFld[i25 + 1] % -255);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test.fFld = 28847L;
                    iArr[i + 1] /= (int)(Test.instanceCount | 1);
                    Test.lFld += (-246 + (i27 * i27));
                }
                for (i29 = 1; i29 < 2; i29++) {
                    Test.bFld = Test.bFld;
                    Test.instanceCount -= Test.lFld;
                    i26 = (int)Test.lFld;
                    Test.lFld *= Test.lFld;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("s i25 i26 = " + s + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 dArr iArr = " + i30 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.lFld Test.fArrFld Test.iArrFld = " + Test.lFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.bArrFld Test.iArrFld1 = " + FuzzerUtils.checkSum(Test.bArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
