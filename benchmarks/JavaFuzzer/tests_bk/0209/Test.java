// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-158L;
    public static boolean bFld=false;
    public static float fFld=-83.687F;
    public static byte byFld=30;
    public static volatile double dArrFld[]=new double[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 35.130339);
        FuzzerUtils.init(Test.iArrFld, 9);
    }

    public static long bMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i8) {

        int i9=13, i10=-24600, i11=-13, i12=-14, i13=-34645, i14=4979, i15=2;

        for (i9 = 8; 345 > i9; i9++) {
            i10 -= i8;
            if (true) continue;
        }
        i11 = 1;
        while (++i11 < 393) {
            switch ((i11 % 5) + 121) {
            case 121:
                if (Test.bFld) {
                    Test.fFld += i9;
                    i12 -= (int)Test.fFld;
                    i8 += (int)-7451465097681564611L;
                    i8 += (i11 ^ (long)Test.fFld);
                } else if (Test.bFld) {
                    i8 = i13;
                    i10 += i11;
                    for (i14 = 1; i14 < 4; ++i14) {
                        if (i9 != 0) {
                            vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15;
                            return;
                        }
                        Test.iArrFld[i11] += (int)Test.instanceCount;
                    }
                }
                break;
            case 122:
                Test.instanceCount -= (long)-2.9756;
                break;
            case 123:
                Test.iArrFld[i11 + 1] = (int)Test.fFld;
                break;
            case 124:
            case 125:
                i15 = i13;
                break;
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15;
    }

    public static long lMeth(int i4, int i5) {

        int i6=181, i7=63959, i16=236, i17=189, i18=5155, i19=59;
        long l2=-5137180778177424876L;
        short s1=-2271;

        for (i6 = 5; 261 > i6; i6++) {
            if (Test.bFld) break;
            i5 -= i7;
            try {
                i5 = (i6 / i4);
                i5 = (-908243213 / Test.iArrFld[i6 + 1]);
                i5 = (-222 % i7);
            } catch (ArithmeticException a_e) {}
            Test.instanceCount >>>= Test.instanceCount;
            vMeth(i4);
        }
        for (l2 = 4; l2 < 325; ++l2) {
            Test.byFld -= (byte)i5;
            s1 *= (short)i5;
            Test.instanceCount += l2;
            i17 = 1;
            while (++i17 < 5) {
                for (i18 = 1; i18 > 1; i18 -= 2) {
                    i19 -= i18;
                    i4 = i7;
                    Test.iArrFld = Test.iArrFld;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + l2 + i16 + s1 + i17 + i18 + i19;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static boolean bMeth(float f, long l, long l1) {

        short s=21204;
        float f1=43.804F;
        int i3=101, i20=5, i21=-10, i22=-12, i23=-169, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -5);

        s -= (short)l;
        f1 = 1;
        do {
            i3 += (int)f1;
            i3 -= (int)((l1++) * (iArr[(int)(f1)]++));
            l <<= lMeth(i3, i3);
            i3 <<= -9;
            for (i20 = 1; i20 < 7; ++i20) {
                for (i22 = 1; i22 < 2; i22++) {
                    i23 -= i22;
                    s -= (short)i20;
                    i3 -= -17031;
                }
                switch (((i21 >>> 1) % 7) + 106) {
                case 106:
                case 107:
                case 108:
                    l1 += (i20 * i20);
                    break;
                case 109:
                    Test.bFld = Test.bFld;
                    i21 += i3;
                    break;
                case 110:
                case 111:
                    i23 ^= (int)l;
                    break;
                case 112:
                    l1 <<= l1;
                    break;
                }
            }
        } while (++f1 < 222);
        long meth_res = Float.floatToIntBits(f) + l + l1 + s + Float.floatToIntBits(f1) + i3 + i20 + i21 + i22 + i23 +
            FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=6714, i1=1, i2=98, i24=-100, i25=157, i26=8, i27=1, i28=-58225, i29=-191;
        double d=126.37161;
        float f2=102.186F, fArr[][]=new float[N][N];
        short s2=-31474;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 0.438F);

        i = i;
        for (i1 = 4; i1 < 171; i1++) {
            if (Test.bFld) {
                switch ((((((int)(i1 + d)) >>> 1) % 5) * 5) + 113) {
                case 135:
                    if (!bMeth(Test.fFld, Test.instanceCount, Test.instanceCount)) break;
                    i2 = i2;
                    for (f2 = i1; f2 < 150; f2++) {
                        Test.byFld *= (byte)i;
                        try {
                            i = (64528 / i);
                            i24 = (30864 % i2);
                            i2 = (i24 % -193);
                        } catch (ArithmeticException a_e) {}
                        for (i25 = 1; 1 > i25; ++i25) {
                            i2 -= i26;
                            Test.bFld = Test.bFld;
                            bArr[i1 - 1] = Test.bFld;
                            fArr[i1] = fArr[i25 - 1];
                            Test.instanceCount &= Test.byFld;
                            i24 -= (int)f2;
                            Test.instanceCount <<= i25;
                        }
                        s2 *= (short)d;
                        for (i27 = 1; i27 < 1; ++i27) {
                            i26 = (int)f2;
                        }
                        i29 = 1;
                        do {
                            Test.iArrFld = FuzzerUtils.int1array(N, (int)-4);
                            i26 += (-48695 + (i29 * i29));
                            i2 >>>= i29;
                            i28 = i;
                            if (Test.bFld) {
                                Test.instanceCount >>= Test.instanceCount;
                                i2 *= i27;
                            } else {
                                Test.instanceCount -= (long)Test.fFld;
                            }
                            if (Test.bFld) break;
                        } while ((i29 += 3) < 1);
                    }
                    break;
                case 119:
                    i24 += (((i1 * Test.instanceCount) + i25) - i);
                case 114:
                    Test.fFld = 7;
                    break;
                case 118:
                    i += (((i1 * i) + f2) - Test.byFld);
                    break;
                case 138:
                    i28 -= (int)Test.fFld;
                    break;
                }
            } else if (Test.bFld) {
                i24 += i1;
            } else {
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d f2 i24 = " + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f2) + "," +
            i24);
        FuzzerUtils.out.println("i25 i26 s2 = " + i25 + "," + i26 + "," + s2);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("bArr fArr = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.fFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.dArrFld Test.iArrFld = " + Test.byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  lMeth ->  lMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
