// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1048632282L;
    public static int iFld=-10;
    public static short sFld=-23818;
    public byte byFld=60;
    public float fFld=0.342F;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth2(long l2, boolean b) {

        int i2=-13, i3=-3, i4=6, i5=51108, i6=-1, i7=-5, i8=7185, iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, 73);

        iArr[(Test.iFld >>> 1) % N][(Test.iFld >>> 1) % N] >>= Test.iFld;
        for (i2 = 7; i2 < 244; ++i2) {
            try {
                Test.iFld = (iArr[i2 + 1][i2] / 38702);
                i3 = (i2 % i2);
                i3 = (-212433040 % i3);
            } catch (ArithmeticException a_e) {}
            for (i4 = 1; i4 < 7; ++i4) {
                for (i6 = 2; 1 < i6; i6--) {
                    iArr[i2 - 1][i4 - 1] -= i6;
                    iArr[i2] = iArr[i4];
                    Test.iFld = i7;
                    i3 |= i7;
                    iArr[i6 - 1][i2 + 1] = i4;
                }
                i8 = 1;
                do {
                    Test.instanceCount >>= Test.instanceCount;
                    if (b) continue;
                } while (++i8 < 2);
                i3 = i6;
                i5 += i4;
            }
        }
        long meth_res = l2 + (b ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i1, double d) {

        boolean b1=false;
        int i9=-21856, i10=-9, i11=-72, i12=15030, iArr1[]=new int[N];
        float f=2.470F, f1=2.641F;
        byte by=-103;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -28572L);
        FuzzerUtils.init(iArr1, 7506);

        lArr[(i1 >>> 1) % N] -= (long)((iMeth2(Test.instanceCount, b1) + d) * i1);
        iArr1[(i1 >>> 1) % N] += (int)Test.instanceCount;
        i1 += (int)170L;
        Test.iFld += (int)Test.instanceCount;
        for (i9 = 14; i9 < 284; i9 += 2) {
            for (f = 1; 12 > f; f++) {
                Test.iFld = (int)Test.instanceCount;
                i12 = 2;
                while (--i12 > 0) {
                    switch (((i9 % 7) * 5) + 37) {
                    case 48:
                    case 65:
                        i11 = i9;
                        if (i11 != 0) {
                        }
                        Test.iFld += i1;
                        f1 += i11;
                        break;
                    case 54:
                        by >>= (byte)-38;
                        i11 >>= Test.iFld;
                        break;
                    case 52:
                        lArr[i9 + 1] = i9;
                        break;
                    case 41:
                        i11 += i12;
                    case 69:
                        i1 += i11;
                    case 57:
                        f1 *= Test.instanceCount;
                        break;
                    default:
                        f1 = Test.sFld;
                    }
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i9 + i10 + Float.floatToIntBits(f) + i11 + i12
            + Float.floatToIntBits(f1) + by + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, int i, long l1) {

        double d1=-2.11551;

        i -= (160 - (--i));
        i += iMeth1(Test.iFld, d1);
        long meth_res = l + i + l1 + Double.doubleToLongBits(d1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=-10, i14=12, i15=-143, i16=-32170, i17=-9, i18=19347, i19=99;
        float f2=-79.897F, f3=-72.325F;
        double d2=-93.2495;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 376003531L);

        Test.iFld -= (Test.iFld = iMeth(1192560611L, Test.iFld, Test.instanceCount));
        Test.iFld = Test.iFld;
        for (i13 = 15; i13 < 268; i13++) {
            for (f2 = i13; f2 < 99; f2++) {
                i14 ^= i14;
                Test.iFld += (int)(((f2 * byFld) + i15) - i13);
                lArr1[(int)(f2)] |= i14;
                switch ((i13 % 5) + 10) {
                case 10:
                    fFld *= f2;
                    i15 >>= (int)222L;
                    for (f3 = 1; f3 > 1; f3--) {
                        i16 = Test.iFld;
                        Test.iArrFld[(int)(f3)] = i13;
                        Test.iFld *= (int)Test.instanceCount;
                        i14 -= i16;
                        Test.iArrFld[i13 + 1] <<= i16;
                        Test.iArrFld[i13] = i14;
                        i14 += (int)(((f3 * i14) + byFld) - Test.instanceCount);
                        Test.sFld -= (short)i13;
                        i15 -= i15;
                        try {
                            Test.iArrFld[(int)(f3 + 1)] = (-44 / i16);
                            i15 = (19 / i13);
                            i16 = (462116422 % Test.iArrFld[(int)(f3 + 1)]);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 11:
                    fFld = (float)d2;
                    i15 += (int)(((f2 * Test.instanceCount) + Test.instanceCount) - i16);
                    try {
                        Test.iArrFld[(int)(f2)] = (Test.iArrFld[i13 + 1] % Test.iArrFld[(int)(f2 - 1)]);
                        i17 = (-56 % i15);
                        Test.iArrFld[(int)(f2)] = (i15 % 50);
                    } catch (ArithmeticException a_e) {}
                    for (i18 = 1; i18 < 1; ++i18) {
                        fFld = i13;
                        d2 += Test.instanceCount;
                        Test.iArrFld[(int)(f2 + 1)] += i16;
                        lArr1[(int)(f2 - 1)] |= byFld;
                        i19 -= (int)d2;
                    }
                    break;
                case 12:
                    Test.instanceCount *= 116;
                    break;
                case 13:
                    Test.instanceCount = i19;
                    break;
                case 14:
                    fFld += (f2 * f2);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 f2 = " + i13 + "," + i14 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i15 f3 i16 = " + i15 + "," + Float.floatToIntBits(f3) + "," + i16);
        FuzzerUtils.out.println("d2 i17 i18 = " + Double.doubleToLongBits(d2) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 lArr1 = " + i19 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("byFld fFld Test.iArrFld = " + byFld + "," + Float.floatToIntBits(fFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
