// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-57067L;
    public static int iFld=-61934;
    public static byte byFld=-123;
    public float fFld=0.673F;
    public volatile short sFld=14971;
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public static volatile float fArrFld[]=new float[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -8);
        FuzzerUtils.init(Test.dArrFld, 0.36259);
        FuzzerUtils.init(Test.fArrFld, 29.735F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth1(long l, float f2, short s) {

        int i1=26070, i2=243, i3=-39391, i4=13, i5=147, i6=57;
        boolean b=false;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, -2551344990520827625L);

        for (i1 = 7; i1 < 350; i1++) {
            f2 += (((i1 * Test.iFld) + i1) - i1);
            for (i3 = i1; i3 < 5; i3++) {
                if (b = b) break;
                Test.iFld -= (i3 + i2);
                f2 += (((i3 * Test.instanceCount) + i4) - i4);
                Test.iFld = (int)(--Test.instanceCount);
                lArr[i1 - 1] = (lArr[i1] = (lArr[i3] = lArr[i1 - 1]));
                for (i5 = 1; 1 > i5; ++i5) {
                    Test.iFld = (int)(--lArr[i3][i1 + 1]);
                    Test.dArrFld = (Test.dArrFld = (Test.dArrFld = FuzzerUtils.double1array(N, (double)109.77467)));
                    i4 = (int)f2;
                    b = (b && ((i4 != i4) != (i2 != 0.2328)));
                    i6 += (int)(l--);
                    f2 += (((--Test.iFld) + (--i4)) - ((f2 - i3) - (Test.instanceCount--)));
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f2) + s + i1 + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth2(int i10, float f3) {

        long l1=-2666650586L;
        int i11=4223, i12=3, i13=-48, i14=-10, iArr[]=new int[N];
        short s1=30439;
        double d1=0.9887;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-66);
        FuzzerUtils.init(iArr, 8);

        for (l1 = 14; l1 < 374; ++l1) {
            f3 -= (-(iMeth1(l1, -2.225F, s1) - s1));
            i12 = 1;
            do {
                switch ((int)(((l1 % 7) * 5) + 12)) {
                case 17:
                    d1 = Test.byFld;
                    Test.instanceCount <<= i12;
                    break;
                case 24:
                    switch ((i12 % 7) + 22) {
                    case 22:
                    case 23:
                        for (i13 = 1; i13 < 1; i13++) {
                            Test.iArrFld = Test.iArrFld;
                            i10 /= (int)(i10 | 1);
                            i11 *= i11;
                        }
                        i10 |= (int)l1;
                        break;
                    case 24:
                        f3 *= i10;
                        Test.iFld -= i13;
                        byArr[i12] *= (byte)Test.iFld;
                    case 25:
                        Test.fArrFld[i12 + 1] = Test.instanceCount;
                        break;
                    case 26:
                        i14 = Test.byFld;
                    case 27:
                        i10 -= Test.iFld;
                        break;
                    case 28:
                        i11 *= i12;
                    default:
                        Test.byFld += (byte)Test.instanceCount;
                    }
                    break;
                case 13:
                    i11 += (i12 * i11);
                case 23:
                    Test.iFld += (i12 * i11);
                    break;
                case 27:
                    i10 -= (int)d1;
                case 26:
                    iArr[(int)(l1)] *= i12;
                case 22:
                    i14 <<= i14;
                }
            } while (++i12 < 5);
        }
        long meth_res = i10 + Float.floatToIntBits(f3) + l1 + i11 + s1 + i12 + Double.doubleToLongBits(d1) + i13 + i14
            + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(double d, float f, float f1) {

        int i7=-17, i8=188, i9=-1, i15=129, i16=-43423, i17=-3, i18=60705;
        short s2=-2383;
        boolean b1=true;

        Test.iArrFld[(Test.iFld >>> 1) % N] += iMeth1(Test.iFld * Math.min(178, Test.iFld), (Test.iFld++) +
            (Test.instanceCount >> Test.instanceCount), (short)(Test.iFld - (Test.iFld - Test.iFld)));
        for (i7 = 3; i7 < 164; ++i7) {
            switch (((i7 % 2) * 5) + 101) {
            case 102:
            case 105:
                i9 = 1;
                do {
                    d *= (iMeth2(6, f1) + d);
                    Test.iFld = i8;
                    for (i15 = 1; i15 < 1; ++i15) {
                        Test.instanceCount >>= s2;
                        Test.iFld = (int)d;
                        Test.instanceCount += i15;
                        d = i15;
                    }
                    b1 = b1;
                    for (i17 = 1; i17 < 1; i17++) {
                        i8 += i17;
                        f1 += i17;
                    }
                } while (++i9 < 10);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i7 + i8 + i9
            + i15 + i16 + s2 + (b1 ? 1 : 0) + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=4, i19=76, i20=18315, i21=-10, i22=-49139, i24=236, i25=0, i26=51364, i27=34;
        boolean b2=false, bArr[][]=new boolean[N][N];
        double d2=0.59248;

        FuzzerUtils.init(bArr, false);

        Test.iArrFld[(i >>> 1) % N] = iMeth(-121.105648, fFld, fFld);
        Test.iFld -= sFld;
        sFld *= (short)Test.iFld;
        for (i19 = 4; 355 > i19; i19++) {
            Test.iFld += (i19 * Test.instanceCount);
            Test.iFld += (i19 ^ (long)fFld);
            for (i21 = 4; i21 < 72; i21 += 3) {
                Test.iFld += (((i21 * i22) + i) - i);
            }
            if (b2) continue;
        }
        i *= i19;
        for (int i23 : Test.iArrFld) {
            for (i24 = 2; 63 > i24; ++i24) {
                for (i26 = 1; i26 < 2; ++i26) {
                    Test.iArrFld[i26] >>>= i23;
                    i25 = i25;
                    i25 += i26;
                    Test.instanceCount += i;
                    i23 += (-49 + (i26 * i26));
                    switch (((i26 % 2) * 5) + 83) {
                    case 86:
                    case 84:
                        Test.iFld &= -11;
                        bArr[i24][i24] = b2;
                        i23 &= i19;
                        d2 *= Test.byFld;
                        break;
                    }
                    if (true) break;
                    Test.dArrFld[i24 + 1] = i20;
                    i23 = Test.iFld;
                    Test.iArrFld[i26 - 1] = i24;
                }
                i += i24;
            }
            i22 *= i27;
            lArrFld[(i21 >>> 1) % N] >>>= -27;
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 b2 = " + i21 + "," + i22 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 d2 bArr = " + i27 + "," + Double.doubleToLongBits(d2) + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("fFld sFld Test.iArrFld = " + Float.floatToIntBits(fFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld Test.fArrFld lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest iMeth2
//DEBUG  iMeth2 ->  iMeth2 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
