// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-12426L;
    public static float fFld=0.148F;
    public static int iFld=10;
    public static byte byFld=-95;
    public volatile int iFld1=-3;

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i11) {

        short s=5857;
        int i12=-12, i13=13, i14=4, i15=10915;
        byte byArr[]=new byte[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(byArr, (byte)-86);
        FuzzerUtils.init(lArr1, 22330L);

        Test.iFld -= Test.byFld;
        Test.iFld *= i11;
        Test.instanceCount = s;
        i11 -= (int)Test.instanceCount;
        i11 <<= i11;
        i11 %= -125;
        i12 = 1;
        while (++i12 < 254) {
            i11 = i11;
            i13 = 1;
            do {
                i11 = i12;
                byArr[i12 - 1] -= (byte)7010447879422532652L;
                for (i14 = 1; i14 < 3; ++i14) {
                    Test.fFld += Test.instanceCount;
                }
                i11 += (((i13 * i11) + i15) - Test.fFld);
                lArr1[(Test.iFld >>> 1) % N] >>= Test.instanceCount;
            } while ((i13 += 3) < 6);
        }
        long meth_res = i11 + s + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(int i7, int i8) {

        double d1=-1.101999;
        int i9=7, i10=-112, iArr1[]=new int[N];
        float f2=1.159F, fArr[][]=new float[N][N];
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 47199L);
        FuzzerUtils.init(iArr1, 93);
        FuzzerUtils.init(fArr, -46.941F);

        d1 *= Test.fFld;
        switch ((((((int)(Test.fFld * i7)) >>> 1) % 7) * 5) + 63) {
        case 90:
            for (i9 = 11; i9 < 197; ++i9) {
                i10 += (int)lArr[i9];
            }
        case 81:
            f2 = 1;
            while (++f2 < 183) {
                try {
                    i7 = (i8 % Test.iFld);
                    i8 = (i9 / i9);
                    i7 = (iArr1[(int)(f2 + 1)] / 25213);
                } catch (ArithmeticException a_e) {}
                i8 = (-(byMeth(i8) - 12));
                if (b) continue;
                Test.iFld += i10;
                fArr[(int)(f2 + 1)][(int)(f2 + 1)] = i7;
                Test.instanceCount += (long)f2;
            }
            break;
        case 64:
            Test.iFld *= (int)Test.instanceCount;
            Test.byFld = (byte)i7;
            break;
        case 72:
            Test.iFld = (int)Test.instanceCount;
            lArr[(58387 >>> 1) % N] -= Test.instanceCount;
            break;
        case 70:
            iArr1[(55974 >>> 1) % N] >>= i9;
            break;
        case 76:
            Test.byFld = (byte)Test.iFld;
            break;
        case 69:
            Test.fFld = 141L;
            break;
        default:
            Test.iFld += (int)Test.instanceCount;
        }
        vMeth_check_sum += i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + Float.floatToIntBits(f2) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static short sMeth(byte by, int i6, byte by1) {

        long l=-12L, lArr2[]=new long[N];
        float f1=108.484F, fArr1[]=new float[N];
        double d2=-65.75948;
        short s1=-17312;
        int i17=116, i18=2;
        boolean b1=false;

        FuzzerUtils.init(lArr2, 4223851108551235641L);
        FuzzerUtils.init(fArr1, -20.813F);

        l = 1;
        do {
            f1 += (l * i6);
            vMeth(Test.iFld, Test.iFld);
            d2 -= s1;
            i6 >>= (int)-59943L;
            f1 -= s1;
            for (i17 = 1; i17 < 5; i17 += 3) {
                lArr2[(int)(l)] += i6;
                i6 += (((i17 * Test.iFld) + Test.iFld) - i6);
                i18 += i17;
            }
        } while (++l < 350);
        if (b1) {
            Test.instanceCount += 18321;
            fArr1 = fArr1;
            i6 >>>= s1;
        } else {
            Test.iFld *= (int)l;
        }
        long meth_res = by + i6 + by1 + l + Float.floatToIntBits(f1) + Double.doubleToLongBits(d2) + s1 + i17 + i18 +
            (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11907, i1=-62904, i2=51, i3=66, i4=-14, i5=238, i19=-40560, i20=-2, i21=4, i22=-214, i23=-12, iArr[]=new
            int[N];
        double d=-2.112748;
        float f=-1.265F, f3=-2.519F;
        short s2=17461;
        boolean b2=true;
        long lArr3[]=new long[N];

        FuzzerUtils.init(iArr, 8123);
        FuzzerUtils.init(lArr3, 48823L);

        for (i = 5; i < 152; ++i) {
            Test.instanceCount += ((long)(d - f) << i1);
            Test.instanceCount = (iArr[i]--);
            for (i2 = 171; i2 > 8; i2--) {
                f += ((Test.instanceCount--) - (f--));
                for (i4 = 2; i4 > 1; i4--) {
                    sMeth((byte)(108), 190, Test.byFld);
                    s2 = (short)Test.instanceCount;
                }
            }
            for (i19 = i; i19 < 171; ++i19) {
                for (f3 = 1; f3 < 1; ++f3) {
                    i5 += i3;
                    i3 += (int)(((f3 * Test.instanceCount) + Test.fFld) - Test.instanceCount);
                    lArr3[i19 - 1] += s2;
                    i1 += i;
                    Test.instanceCount += (25446L + (f3 * f3));
                }
                i1 += i20;
                i1 += (((i19 * f3) + f3) - i5);
                i21 += -191;
            }
            for (i22 = 7; i22 < 171; ++i22) {
                lArr3[i] -= Test.iFld;
                switch ((i22 % 7) + 125) {
                case 125:
                    i1 = i1;
                case 126:
                    switch (((i >>> 1) % 5) + 64) {
                    case 64:
                        i20 -= i3;
                        i3 *= i21;
                        iArr[i] = i;
                        i3 += i19;
                        break;
                    case 65:
                        i20 += (((i22 * f3) + Test.instanceCount) - Test.instanceCount);
                        lArr3 = lArr3;
                        break;
                    case 66:
                        Test.instanceCount = i22;
                        break;
                    case 67:
                        iArr[i - 1] -= (int)Test.instanceCount;
                        break;
                    case 68:
                        i3 |= Test.iFld;
                        break;
                    default:
                        Test.fFld *= i20;
                    }
                    break;
                case 127:
                    lArr3[i] += iFld1;
                    break;
                case 128:
                    s2 += (short)(((i22 * i3) + i22) - Test.iFld);
                case 129:
                    if (b2) continue;
                    break;
                case 130:
                    d = s2;
                case 131:
                    i21 += (i22 - Test.instanceCount);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("f i2 i3 = " + Float.floatToIntBits(f) + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 i5 s2 = " + i4 + "," + i5 + "," + s2);
        FuzzerUtils.out.println("i19 i20 f3 = " + i19 + "," + i20 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("b2 iArr lArr3 = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.byFld iFld1 = " + Test.byFld + "," + iFld1);

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
