// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=139L;
    public static int iFld=0;
    public static volatile byte byFld=88;
    public float fFld=-17.675F;
    public static boolean bFld=false;
    public long lArrFld[]=new long[N];
    public static int iArrFld[][]=new int[N][N];
    public volatile double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -42240);
        FuzzerUtils.init(Test.sArrFld, (short)11741);
    }

    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f2, boolean b) {

        float f3=2.184F;
        int i3=-5, i4=11414, i5=0, i6=-13, i7=-31744;
        double d1=-106.126323, dArr[]=new double[N];
        byte by=96;

        FuzzerUtils.init(dArr, -10.21488);

        for (f3 = 13; f3 < 394; ++f3) {
            i3 += (int)f3;
            Test.instanceCount >>= -30044;
            for (i4 = (int)(f3); 4 > i4; ++i4) {
                if (i4 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f2) + (b ? 1 : 0) + Float.floatToIntBits(f3) + i3 + i4 + i5
                        + Double.doubleToLongBits(d1) + i6 + by + i7 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                d1 += i6;
                i5 = by;
                dArr[(i7 >>> 1) % N] *= 148L;
                i3 += (int)f2;
                f2 = i7;
                Test.instanceCount *= (long)d1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + (b ? 1 : 0) + Float.floatToIntBits(f3) + i3 + i4 + i5 +
            Double.doubleToLongBits(d1) + i6 + by + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i1, float f1, int i2) {

        boolean b1=false, bArr[]=new boolean[N];
        double d2=0.41630;
        int i8=252, i9=-48, i10=21, i11=3, iArr1[]=new int[N];
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 124L);
        FuzzerUtils.init(iArr1, -207);

        bArr = (bArr = bArr);
        vMeth(-122.715F, b1);
        lArr[(i2 >>> 1) % N][(i1 >>> 1) % N] *= Test.instanceCount;
        for (d2 = 5; d2 < 363; d2++) {
            Test.instanceCount = (long)d2;
            for (i9 = 1; 5 > i9; ++i9) {
                Test.instanceCount = Test.iFld;
                Test.iFld += i9;
                iArr1[i9 - 1] = (int)f1;
                iArr1 = iArr1;
                Test.instanceCount -= i11;
                Test.iArrFld[(i9 >>> 1) % N][i9] = i11;
                Test.instanceCount -= i2;
            }
            f1 = Test.instanceCount;
            b1 = b1;
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + i2 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i8 + i9 + i10
            + i11 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(double d, float f, int i) {

        short s=-28959;
        int i13=13, i14=13, i15=-3, i16=-194, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -57243);

        iArr[(i >>> 1) % N] -= (-(iMeth(Test.iFld, f, i) + s));
        Test.iFld = i;
        Test.iFld -= (int)f;
        for (i13 = 10; i13 < 344; ++i13) {
            Test.iFld = (int)Test.instanceCount;
            for (i15 = 1; i15 < 5; i15++) {
                Test.byFld -= (byte)Test.instanceCount;
                Test.instanceCount >>= Test.instanceCount;
                if (Test.iFld != 0) {
                }
                i = -137;
                Test.iFld *= (int)-1612745832L;
                Test.instanceCount = Test.iFld;
                i += (i15 ^ i15);
                Test.instanceCount = Test.iFld;
                i16 -= Test.iFld;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i + s + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d3=114.72906;
        int i17=-9, i18=-191, i19=-3, i21=-12, i22=5, i23=5, i24=-202, i25=13, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, 133);

        Test.instanceCount = ((--lArrFld[(0 >>> 1) % N]) * byMeth(d3, -2.817F, -9727));
        for (i17 = 9; i17 < 170; ++i17) {
            fFld %= (i18 | 1);
        }
        i19 = 1;
        while (++i19 < 169) {
            i21 = 1;
            while (++i21 < 148) {
                switch ((i21 % 7) + 2) {
                case 2:
                    i18 += (((i21 * Test.instanceCount) + i17) - i18);
                    break;
                case 3:
                    Test.instanceCount = Test.instanceCount;
                    Test.iFld ^= 11;
                    break;
                case 4:
                    Test.iFld += i21;
                    break;
                case 5:
                    for (i22 = i19; i22 < 1; i22++) {
                        dArrFld[i19] = i19;
                        Test.iArrFld[i22 + 1][i19 - 1] <<= -88;
                        Test.instanceCount += (i22 * i22);
                        Test.iArrFld[i21 - 1][i21] = (int)Test.instanceCount;
                        i18 -= (int)d3;
                    }
                    i18 += (((i21 * i19) + Test.byFld) - i23);
                    switch (((i21 % 7) * 5) + 2) {
                    case 5:
                    case 37:
                        Test.sArrFld[(i23 >>> 1) % N] -= (short)Test.iFld;
                        Test.iFld = (int)-1195432401L;
                    case 9:
                        Test.bFld = Test.bFld;
                        Test.iFld += (-37 + (i21 * i21));
                        Test.iArrFld[i21][i21] = (int)-52030L;
                        break;
                    case 3:
                        i23 *= (int)Test.instanceCount;
                        break;
                    case 22:
                        for (i24 = 1; 1 > i24; i24 += 2) {
                            d3 = Test.instanceCount;
                            if (Test.bFld) {
                                i23 %= (int)(Test.instanceCount | 1);
                                i25 += i23;
                                Test.instanceCount = (long)fFld;
                            } else if (true) {
                                dArrFld[i21] += i25;
                            } else {
                                d3 += i19;
                            }
                        }
                        break;
                    case 17:
                        fFld += (137L + (i21 * i21));
                        break;
                    case 11:
                        i18 = i25;
                        break;
                    }
                    break;
                case 6:
                    Test.iFld += (i21 ^ i18);
                    break;
                case 7:
                    i25 += i21;
                    break;
                case 8:
                    i23 -= i18;
                    break;
                default:
                    i25 *= (int)fFld;
                }
            }
        }

        FuzzerUtils.out.println("d3 i17 i18 = " + Double.doubleToLongBits(d3) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i21 i22 = " + i19 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("fFld Test.bFld lArrFld = " + Float.floatToIntBits(fFld) + "," + (Test.bFld ? 1 : 0) +
            "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test.iArrFld dArrFld Test.sArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
