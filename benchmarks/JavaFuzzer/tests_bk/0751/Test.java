// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=138L;
    public static volatile double dFld=78.106653;
    public static volatile int iFld=20631;

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        int i9=2, i10=32354, i11=2, i12=-213, i13=-3, iArr[]=new int[N];
        float f=-49.389F, fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 52120);
        FuzzerUtils.init(fArr, 0.766F);
        FuzzerUtils.init(lArr1, 26L);

        i8 <<= -56586;
        i8 = (int)Test.instanceCount;
        iArr[(4 >>> 1) % N] <<= i8;
        i9 = 1;
        do {
            for (i10 = 5; i10 > 1; i10 -= 3) {
                for (i12 = 1; i12 < 5; ++i12) {
                    fArr[i12 + 1] -= i9;
                    i8 *= i11;
                    i13 += (int)Test.dFld;
                    lArr1[i10] = i11;
                    f += (float)Test.dFld;
                }
                iArr[i10] -= i8;
                i13 += (-226 + (i10 * i10));
                Test.instanceCount += (i10 - f);
                iArr[i9] = 5;
            }
        } while (++i9 < 322);
        vMeth1_check_sum += i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i6, int i7, long l1) {

        double d1=37.29817;
        int i14=-9, i15=-10, i16=-107, i17=185, i18=-5908, i19=-7, iArr1[]=new int[N];
        byte by=-31;
        float f1=-92.621F;
        boolean b=true;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 180L);
        FuzzerUtils.init(iArr1, -18641);

        vMeth1(i6);
        i7 = (int)Test.instanceCount;
        for (d1 = 8; d1 < 130; d1++) {
            Test.dFld -= by;
            i15 = 1;
            do {
                Test.iFld -= i14;
                l1 -= 41;
            } while (++i15 < 13);
            i14 = (int)f1;
            lArr2[(int)(d1 + 1)] = i15;
            for (i16 = 13; i16 > 1; i16 -= 3) {
                if (b) continue;
                for (i18 = 4; i18 > 1; i18 -= 3) {
                    i17 += i18;
                    Test.iFld += i18;
                    iArr1 = FuzzerUtils.int1array(N, (int)13);
                }
            }
        }
        long meth_res = i6 + i7 + l1 + Double.doubleToLongBits(d1) + i14 + by + i15 + Float.floatToIntBits(f1) + i16 +
            i17 + (b ? 1 : 0) + i18 + i19 + FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i3, int i4, int i5) {

        double d=42.128529;
        long l=-1248L, lArr[]=new long[N];

        FuzzerUtils.init(lArr, -2009900823562741662L);

        lArr = (lArr = (lArr = lArr));
        i5 = (int)(Test.instanceCount - ((i3 - i3) + (i5 * i3)));
        d = Math.max(--i4, ++i5);
        i3 -= i5;
        l *= (183 * iMeth(Test.iFld, i5, l));
        vMeth_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d) + l + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-57, i1=34216, i2=-6;

        i -= (int)(--Test.instanceCount);
        for (i1 = 7; i1 < 126; ++i1) {
            vMeth(i1, Test.iFld, -30959);
        }
        i += i1;
        i2 *= i2;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
