// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-2L;
    public static float fFld=-2.903F;
    public static byte byFld=-53;
    public double dArrFld[][]=new double[N][N];

    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i7, float f1, int i8) {

        int i9=-3355, i10=-11, i11=-10, i12=-41909, i13=105, i14=25211, i15=118, iArr1[]=new int[N];
        byte by1=-60;

        FuzzerUtils.init(iArr1, -50945);

        iArr1[(i7 >>> 1) % N] = i9;
        i7 *= (int)Test.instanceCount;
        i9 *= 36;
        iArr1[(i7 >>> 1) % N] -= i7;
        for (i10 = 16; i10 < 274; ++i10) {
            i11 = i7;
        }
        iArr1[(i8 >>> 1) % N] *= i10;
        i8 -= (int)f1;
        f1 += -12L;
        for (i12 = 2; i12 < 287; i12 += 2) {
            f1 = i8;
            for (i14 = 1; i14 < 11; ++i14) {
                if (i14 != 0) {
                }
                if (i13 != 0) {
                }
                by1 = (byte)i7;
            }
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + by1 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(long l2, short s1, int i6) {

        int i16=23072, i17=-18, i18=-3, i19=39785, i20=8, i21=-2, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -53);

        l2 >>= (((90 * (i6 & i6)) + iMeth(i6, Test.fFld, i6)) * i6);
        Test.instanceCount = 43350;
        i6 = (int)Test.instanceCount;
        for (i16 = 6; i16 < 320; i16++) {
            switch (((i6 >>> 1) % 1) + 24) {
            case 24:
                iArr2[i16] = (int)Test.instanceCount;
                for (i18 = 1; i18 < 5; i18++) {
                    for (i20 = 1; i20 < 2; ++i20) {
                        try {
                            i21 = (i16 % i21);
                            i17 = (1985397798 % i16);
                            i17 = (39663 % i21);
                        } catch (ArithmeticException a_e) {}
                        Test.byFld <<= (byte)5;
                        Test.instanceCount *= i6;
                        Test.byFld = (byte)i16;
                        l2 *= i18;
                        Test.byFld = (byte)-79;
                    }
                    l2 = (long)Test.fFld;
                }
            }
        }
        long meth_res = l2 + s1 + i6 + i16 + i17 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(long l1, float f) {

        int i3=-39147, i22=6, i23=182, i24=128, i25=89, i26=207, i27=-9, iArr[]=new int[N];
        short s=-14946;
        double d=-8.22430;
        byte by=109;
        boolean b=true;

        FuzzerUtils.init(iArr, -38);

        i3 = (int)(Short.reverseBytes(Short.reverseBytes(s)) - ((d - d) + (7 >>> (i3 - i3))));
        for (int i4 : iArr) {
            int i5=137;
            Test.instanceCount += (long)((f--) * ((i3 - by) / ((-(-1477 / ((i3 + i3) | 1))) | 1)));
            i4 >>>= (int)l1;
            i3 = i5;
            i3 = ((++i5) - (-(-(i4++))));
            i3 = (int)((iArr[(i3 >>> 1) % N] * byMeth(l1, (short)(6508), -165)) - Test.instanceCount);
            iArr[(i3 >>> 1) % N] = -6997;
            for (i22 = 1; 4 > i22; i22++) {
                i4 >>= (int)Test.instanceCount;
            }
            for (i24 = 1; i24 < 4; i24++) {
                for (i26 = 1; i26 < 2; i26++) {
                    if (b) continue;
                }
                i27 += 4;
                Test.instanceCount = -19482;
            }
        }
        long meth_res = l1 + Float.floatToIntBits(f) + i3 + s + Double.doubleToLongBits(d) + by + i22 + i23 + i24 + i25
            + i26 + i27 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i=195, i1=-2, i2=-26019, i28=-89, i29=17, i30=-47161, i31=4, i32=12, i33=-35703, iArr3[]=new int[N];
        long l=-134620473848415060L;
        float f2=-47.785F, fArr[]=new float[N];
        boolean b1=false, bArr[]=new boolean[N], bArr1[]=new boolean[N];
        short s2=9773;
        double d1=0.52989;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr3, 9);
        FuzzerUtils.init(fArr, -1.341F);

        for (i = 15; i < 352; ++i) {
            i1 += (((i * i) + i) - i);
        }
        i2 = 1;
        do {
            l = 1;
            while (++l < 99) {
                Test.instanceCount = lMeth(l, Test.fFld);
            }
            i1 = (int)Test.instanceCount;
            f2 = 1;
            while (++f2 < 99) {
                bArr[(int)(f2)] = b1;
                i1 += (int)f2;
                i1 = 1;
            }
            for (i28 = 99; i28 > 6; --i28) {
                s2 &= (short)i28;
                bArr1[i2] = b1;
            }
            switch ((((6 >>> 1) % 1) * 5) + 100) {
            case 104:
                Test.instanceCount = i2;
                if (b1) continue;
                if (b1) continue;
                break;
            default:
                i1 = i29;
            }
            for (i30 = 4; i30 < 99; ++i30) {
                iArr3[i30 + 1] <<= i;
                iArr3[i2] += i;
                Test.instanceCount = Test.byFld;
                s2 = (short)i31;
                fArr[i30 - 1] = i28;
                Test.fFld -= Test.byFld;
                i29 = s2;
                for (i32 = 1; 2 > i32; i32++) {
                    dArrFld[i2 + 1][i32] = d1;
                    s2 >>= (short)i31;
                    iArr3[i32] = (int)l;
                }
            }
        } while (++i2 < 255);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("l f2 b1 = " + l + "," + Float.floatToIntBits(f2) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i28 i29 s2 = " + i28 + "," + i29 + "," + s2);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 d1 bArr = " + i33 + "," + Double.doubleToLongBits(d1) + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("bArr1 iArr3 fArr = " + FuzzerUtils.checkSum(bArr1) + "," + FuzzerUtils.checkSum(iArr3)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
