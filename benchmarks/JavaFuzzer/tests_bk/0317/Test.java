// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-207L;
    public static int iFld=-4569;
    public static int iFld1=19;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -62690);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        float f1=0.83F;
        int i3=1, i4=-246, i5=-12339, i6=-37331, i7=200, iArr[]=new int[N];
        double d1=2.31734;

        FuzzerUtils.init(iArr, 6);

        iArr[(13 >>> 1) % N] = (int)Test.instanceCount;
        Test.iFld <<= Test.iFld;
        Test.iFld = (int)f1;
        Test.iFld >>>= -18648;
        for (i3 = 346; i3 > 17; i3--) {
            for (i5 = 1; i5 < 5; i5++) {
                iArr[i3] = (int)Test.instanceCount;
                d1 = Test.instanceCount;
                i7 = 1;
                while (++i7 < 2) {
                    try {
                        iArr[i7 - 1] = (-120027520 % iArr[(i4 >>> 1) % N]);
                        iArr[i3 - 1] = (i5 / -1869741386);
                        Test.iFld = (i5 / iArr[i5 - 1]);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount += i7;
                    Test.iFld -= i5;
                    Test.instanceCount += i7;
                    i4 += (i7 | i4);
                    iArr[i7 - 1] >>= Test.iFld;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i2=-3064, i8=5, i9=40485, i10=11, i11=-126;
        byte by=-127, byArr[]=new byte[N];
        float f2=-1.666F;
        short s1=-23552;
        double dArr[][]=new double[N][N];

        FuzzerUtils.init(dArr, 35.107844);
        FuzzerUtils.init(byArr, (byte)-57);

        i2 -= (int)Test.instanceCount;
        i2 = (int)(((i2 * i2) * (Test.instanceCount++)) - (iMeth() + Test.instanceCount));
        for (i8 = 2; 166 > i8; ++i8) {
            double d2=105.90499;
            i9 = (int)Test.instanceCount;
            d2 -= Test.instanceCount;
            by -= (byte)f2;
            i2 -= (int)f2;
            Test.iArrFld[i8 - 1] += (int)Test.instanceCount;
            dArr[i8 - 1][i8] -= Test.instanceCount;
            for (i10 = 1; 10 > i10; ++i10) {
                if (i10 != 0) {
                    vMeth1_check_sum += i2 + i8 + i9 + by + Float.floatToIntBits(f2) + i10 + i11 + s1 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
                    return;
                }
                byArr[i10 - 1] = (byte)f2;
                Test.iArrFld[i10] -= (int)f2;
            }
            Test.instanceCount += Test.instanceCount;
            s1 = (short)i2;
        }
        vMeth1_check_sum += i2 + i8 + i9 + by + Float.floatToIntBits(f2) + i10 + i11 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i1) {

        double d=25.36987;
        short s=10509;
        int i12=-4, i13=161, i14=28119;
        float f3=34.591F;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 3888092658071376825L);

        d -= 2;
        Test.instanceCount -= (lArr[(i1 >>> 1) % N] * ((i1 - s) + (i1 * -25059L)));
        vMeth1();
        i1 = (int)Test.instanceCount;
        Test.iArrFld = FuzzerUtils.int1array(N, (int)-143);
        Test.iArrFld[(Test.iFld >>> 1) % N] += (int)Test.instanceCount;
        Test.iArrFld[(i1 >>> 1) % N] = (int)38141L;
        for (i12 = 1; 353 > i12; ++i12) {
            i14 = 1;
            do {
                Test.instanceCount += (((i14 * Test.instanceCount) + i14) - Test.instanceCount);
                f3 += (-41040 + (i14 * i14));
                d *= i1;
            } while (++i14 < 5);
            i1 += i13;
            if (true) continue;
            Test.iArrFld = Test.iArrFld;
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + s + i12 + i13 + i14 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=219, i15=54066, i16=-5, i17=-9, i18=-51238, i19=9, i20=-6, i21=-22103, i22=-5104, i23=6;
        float f=0.361F, f4=-1.135F;
        double d3=62.115923;
        short s2=14344;
        boolean b=true;

        i = (int)(-2.1007F + ((--i) - (i++)));
        i += (int)(f * (Integer.reverseBytes(i) - i));
        vMeth(9);
        i = (int)Test.instanceCount;
        for (i15 = 19; i15 < 357; i15++) {
            lArrFld = lArrFld;
        }
        for (i17 = 1; i17 < 140; ++i17) {
            for (i19 = 6; 180 > i19; i19 += 3) {
                for (i21 = 4; i21 > 1; --i21) {
                    d3 = i17;
                    s2 = (short)254;
                    i = (int)Test.instanceCount;
                    if (b) {
                        i20 = i22;
                        i18 = (int)Test.instanceCount;
                        i16 = Test.iFld;
                    } else {
                        Test.iArrFld[i21 - 1] = Test.iFld;
                        Test.iFld1 >>= Test.iFld;
                    }
                    Test.instanceCount -= Test.instanceCount;
                    i >>= i18;
                }
                d3 += 46877;
                i22 -= i19;
                Test.iFld1 *= i22;
                switch (((i19 % 8) * 5) + 53) {
                case 84:
                    Test.iArrFld[i19 + 1] = Test.iFld;
                case 60:
                    i20 += i17;
                    break;
                case 78:
                    fArrFld[i19] += f;
                    for (f4 = i17; f4 < 4; ++f4) {
                        i16 += (int)(f4 + i16);
                        Test.iFld1 &= 7;
                    }
                    break;
                case 92:
                    Test.instanceCount += -25153;
                    break;
                case 67:
                    i18 = i15;
                    break;
                case 76:
                    i22 += (int)Test.instanceCount;
                    break;
                case 75:
                    Test.iArrFld = Test.iArrFld;
                case 91:
                    i20 -= i23;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i f i15 = " + i + "," + Float.floatToIntBits(f) + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 d3 s2 = " + i22 + "," + Double.doubleToLongBits(d3) + "," + s2);
        FuzzerUtils.out.println("b f4 i23 = " + (b ? 1 : 0) + "," + Float.floatToIntBits(f4) + "," + i23);

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.iFld1 = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.iFld1);
        FuzzerUtils.out.println("Test.iArrFld lArrFld fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
