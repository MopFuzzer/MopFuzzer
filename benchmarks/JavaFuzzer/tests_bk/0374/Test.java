// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static float fFld=46.70F;
    public short sFld=-2850;
    public static int iFld=12892;
    public static int iFld1=7;
    public static byte byArrFld[]=new byte[N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)33);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1, long l2, int i6) {

        int i7=-962, i8=-58157, i9=-73, i10=43453, i11=-11417, i12=247, i13=-23102, i14=0;
        byte by=-5;
        float f=0.327F;

        i7 = (int)Test.fFld;
        i7 %= (int)(by | 1);
        i8 -= (int)Test.fFld;
        for (f = 8; f < 214; ++f) {
            i8 = (int)l1;
            i7 <<= i9;
            i6 += i9;
            for (i10 = 1; i10 < 8; i10++) {
                i9 *= (int)1.245F;
                by = (byte)i9;
            }
            i12 = 1;
            while (++i12 < 8) {
                for (i13 = (int)(f); i13 < 1; i13++) {
                    i6 = i7;
                    Test.byArrFld[i13] = (byte)i14;
                    Test.instanceCount *= by;
                }
            }
        }
        long meth_res = l1 + l2 + i6 + i7 + by + i8 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 + i13 + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(long l, int i1, int i2) {

        int i3=133, i4=9, i5=0, i15=139, i16=123, i17=12;
        double d=-2.82719;
        boolean b=true;

        for (i3 = 1; 230 > i3; ++i3) {
            i1 = (int)l;
            i5 = 1;
            while (++i5 < 7) {
                Test.instanceCount = (long)(((i4 + i2) * (d - 2.550F)) - lMeth(l, Test.instanceCount, i2));
                b = b;
                l += i4;
                l -= sFld;
                i1 -= i2;
            }
            for (i15 = 1; i15 < 7; i15++) {
                i17 = 1;
                do {
                    if (b) continue;
                    i1 = i16;
                    i2 += i17;
                    b = b;
                } while (++i17 < 2);
                b = b;
            }
        }
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + (b ? 1 : 0) + i15 + i16 + i17;
    }

    public int iMeth() {

        int i=-5, i18=56, i19=-44, i20=2, i21=-1, i22=70, i23=-26, i24=0, iArr[]=new int[N];
        boolean b1=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 11L);
        FuzzerUtils.init(iArr, 13);

        i = 371;
        do {
            Test.instanceCount = (~(--lArr[i - 1]));
            vMeth(452763069015662263L, i18, i);
            i18 *= i;
            Test.instanceCount += i;
            if (b1) break;
            for (i19 = 1; 5 > i19; i19++) {
                iArr = iArr;
                for (i21 = 1; i21 < 2; ++i21) {
                    i20 <<= 254;
                    i22 = i19;
                }
                i22 = (int)Test.fFld;
                for (i23 = i; i23 < 2; ++i23) {
                    i24 -= i19;
                    i24 = i21;
                }
            }
        } while (--i > 0);
        long meth_res = i + i18 + (b1 ? 1 : 0) + i19 + i20 + i21 + i22 + i23 + i24 + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i25=-5477, i27=63638, i28=53454, i29=3, i30=-122, i31=-26966, i32=-11, i33=-7, i34=-56020, i35=-6,
            i36=-49360, iArr1[]=new int[N];
        double d1=-104.66812;
        boolean b2=true;
        byte by1=-15;

        FuzzerUtils.init(iArr1, 60);

        Test.fFld += iMeth();
        i25 = 1;
        while (++i25 < 334) {
            int i26=2;
            i26 += i25;
            iArr1[i25 + 1] /= (int)(Test.instanceCount | 1);
            i26 -= (int)d1;
        }
        Test.iFld -= i25;
        for (i27 = 11; i27 < 227; i27++) {
            if (b2) {
                for (i29 = 4; i29 < 116; i29++) {
                    Test.instanceCount += i29;
                    Test.instanceCount = -55644;
                }
                for (i31 = 5; i31 < 116; ++i31) {
                    Test.instanceCount += -2;
                    i30 += (((i31 * i32) + i25) - Test.instanceCount);
                    Test.fFld += (((i31 * Test.fFld) + i30) - Test.instanceCount);
                    i28 += (int)Test.instanceCount;
                    Test.instanceCount %= (Test.instanceCount | 1);
                    b2 = b2;
                }
                fArrFld[i27 + 1] = Test.fFld;
                by1 = (byte)6;
            } else {
                for (i33 = 1; i33 < 116; i33++) {
                    Test.fFld += i27;
                    i34 += (i33 * by1);
                    i28 = (int)Test.fFld;
                    d1 = -28325;
                    Test.iFld1 -= i30;
                }
            }
            for (i35 = i27; i35 < 116; i35++) {
                Test.iFld1 >>>= i28;
                b2 = b2;
                i34 += (i35 | (long)Test.fFld);
            }
        }

        FuzzerUtils.out.println("i25 d1 i27 = " + i25 + "," + Double.doubleToLongBits(d1) + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 b2 = " + i31 + "," + i32 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("by1 i33 i34 = " + by1 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("i35 i36 iArr1 = " + i35 + "," + i36 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + sFld);
        FuzzerUtils.out.println("Test.iFld Test.iFld1 Test.byArrFld = " + Test.iFld + "," + Test.iFld1 + "," +
            FuzzerUtils.checkSum(Test.byArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
