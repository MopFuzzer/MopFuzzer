// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static volatile int iFld=44145;
    public static float fFld=-1.387F;
    public static double dArrFld[]=new double[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 40.8894);
        FuzzerUtils.init(Test.lArrFld, 31400L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3) {

        int i4=-7, i5=-45, i6=-1, i7=28182, i8=13, iArr[]=new int[N];
        float f=-18.114F;
        boolean b1=true;
        short s=-25461;
        double d1=0.107410;

        FuzzerUtils.init(iArr, -189);

        for (i4 = 8; 143 > i4; ++i4) {
            i5 *= (int)Test.instanceCount;
            iArr[i4 + 1] = i5;
            Test.instanceCount >>= Test.instanceCount;
            Test.instanceCount += (-8 + (i4 * i4));
            Test.lArrFld[i4 - 1] = (long)f;
        }
        b1 = false;
        for (i6 = 6; i6 < 126; ++i6) {
            i5 *= (int)Test.instanceCount;
            i3 += i6;
        }
        f = s;
        i8 = 1;
        do {
            i3 = i8;
            Test.instanceCount *= (long)d1;
            i7 *= i3;
        } while (++i8 < 165);
        vMeth2_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + (b1 ? 1 : 0) + i6 + i7 + s + i8 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(long l1) {


        vMeth2(Test.iFld);
        vMeth1_check_sum += l1;
    }

    public static void vMeth(long l, boolean b, int i) {

        int i1=138, i2=33, i9=-7, i10=-183, i11=-145, i12=9, iArr1[]=new int[N];
        double d2=36.33077;
        short s1=24114;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)-74);
        FuzzerUtils.init(iArr1, 32188);

        try {
            i = (byArr[(i >>> 1) % N]++);
            for (i1 = 8; (140 + 400) > i1; i1++) {
                i /= (int)((--i) | 1);
                vMeth1(l);
                iArr1[i1 - 1] += i1;
                for (i9 = 1; i9 < 4; i9++) {
                    i += (((i9 * i10) + i2) - i2);
                    for (i11 = 1; i11 < (2 + 400); i11++) {
                        d2 = i12;
                        Test.instanceCount |= Test.instanceCount;
                        iArr1[i11] *= i1;
                        iArr1[i11] += (int)d2;
                        i10 = i2;
                        i12 -= (int)-97.833F;
                    }
                }
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            s1 >>= (short)-2964735171261726139L;
        }
        vMeth_check_sum += l + (b ? 1 : 0) + i + i1 + i2 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + s1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        int i13=-253, i14=34, i15=-28731, i16=-12, i17=-2, i18=97, i19=-36313, i20=-8641, i21=6, i22=4636, iArr2[]=new
            int[N];
        byte by=94;

        FuzzerUtils.init(iArr2, -8);

        vMeth(3737690917L, b2, Test.iFld);
        for (i13 = 10; i13 < 184; ++i13) {
            Test.iFld += (i13 | Test.instanceCount);
            Test.fFld -= Test.iFld;
        }
        Test.iFld += Test.iFld;
        i15 = 1;
        while (++i15 < 316) {
            Test.instanceCount *= by;
            Test.lArrFld = Test.lArrFld;
            for (i16 = 1; 80 > i16; ++i16) {
                try {
                    Test.iFld = (i16 % i17);
                    iArr2[i16 - 1] = (i15 / i15);
                    i14 = (i16 / 57546);
                } catch (ArithmeticException a_e) {}
                Test.iFld += (i16 * i17);
                Test.fFld += by;
                for (i18 = 1; i18 < 2; i18++) {
                    Test.instanceCount = i19;
                }
            }
            i19 >>= i16;
            i20 = 1;
            do {
                double d3=-18.23179;
                if (true) break;
                Test.iFld = i16;
                i14 = (int)Test.instanceCount;
                i14 -= i14;
                d3 -= i19;
                i14 += (-3254 + (i20 * i20));
                Test.fFld = i16;
                for (i21 = 2; 1 < i21; i21 -= 3) {
                    if (b2) break;
                    i19 += i22;
                    Test.iFld *= (int)42581L;
                    i17 = (int)Test.fFld;
                    Test.instanceCount += (6L + (i21 * i21));
                }
            } while ((i20 += 2) < 80);
            iArr2[i15] += (int)Test.instanceCount;
        }

        FuzzerUtils.out.println("b2 i13 i14 = " + (b2 ? 1 : 0) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 by i16 = " + i15 + "," + by + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.dArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
