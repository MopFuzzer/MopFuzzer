// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4083807346L;
    public static double dFld=-1.94708;
    public static boolean bFld=false;
    public long lFld=7151381102042370488L;
    public static int iFld=-4;
    public static int iArrFld[]=new int[N];
    public static float fArrFld[]=new float[N];
    public volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 10);
        FuzzerUtils.init(Test.fArrFld, -97.186F);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        double d1=0.21317;
        int i10=133, i11=106, i12=6, i13=-200, i14=0;
        float f=25.325F;
        long l=17L;
        boolean b=false, bArr[]=new boolean[N];
        short s=2230;

        FuzzerUtils.init(bArr, false);

        for (d1 = 2; d1 < 195; d1++) {
            Test.iArrFld[(int)(d1)] %= (int)2.30233;
            i10 += (int)(d1 - i10);
            for (i11 = 8; i11 > 1; i11 -= 2) {
                for (i13 = 1; i13 < 3; i13++) {
                    if (true) {
                        Test.iArrFld[i11] -= i13;
                        i10 -= (int)59.25228;
                        i12 += (((i13 * i10) + f) - i11);
                        Test.iArrFld[i11 + 1] *= i10;
                    } else if (b) {
                        bArr[i13] = true;
                        switch ((i13 % 4) + 81) {
                        case 81:
                            Test.iArrFld[i11 - 1] = (int)Test.instanceCount;
                            break;
                        case 82:
                            try {
                                i12 = (-18200 / Test.iArrFld[(int)(d1)]);
                                i10 = (Test.iArrFld[i13 - 1] % 181);
                                i12 = (Test.iArrFld[i11] / 1116990178);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 83:
                        case 84:
                            f -= i10;
                            break;
                        default:
                            i14 = i10;
                        }
                    } else if (b) {
                        l = Test.instanceCount;
                    } else {
                        s = (short)i12;
                    }
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f) + l + (b
            ? 1 : 0) + s + FuzzerUtils.checkSum(bArr);
    }

    public static long lMeth() {

        int i6=6024, i7=58930, i8=-242, i9=28954, i15=36337, i16=0, i17=1, i18=7, iArr1[][]=new int[N][N];
        float f1=-1.571F;

        FuzzerUtils.init(iArr1, 0);

        for (i6 = 6; i6 < 319; ++i6) {
            if (i6 != 0) {
            }
            i7 -= (int)(Test.instanceCount | i7);
        }
        for (i8 = 20; i8 < 342; ++i8) {
            try {
                i9 = (i9 % iArr1[i8][i8 + 1]);
                i7 = (i6 % i6);
                i9 = (i8 / 2003144775);
            } catch (ArithmeticException a_e) {}
            vMeth();
            i9 = i8;
            i9 += i9;
            Test.instanceCount += -82L;
            i7 = (int)7261L;
        }
        for (i15 = 235; i15 > 2; i15 -= 2) {
            for (i17 = 1; i17 < 13; i17++) {
                Test.dFld *= i16;
                i18 += (int)f1;
                Test.instanceCount += i16;
            }
        }
        long meth_res = i6 + i7 + i8 + i9 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i4=66, i5=4, i19=-12;
        float f2=0.297F;
        double d2=0.76208;
        short s1=-17736;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -91L);

        for (i4 = 172; i4 > 4; i4--) {
            i5 -= (int)(i5 -= (int)((i5 * i5) + (Test.dFld % (i5 | 1))));
            Test.dFld += (lMeth() - i4);
            i5 += (i4 * i4);
            switch ((((i4 >>> 1) % 6) * 5) + 57) {
            case 72:
                if (Test.bFld) continue;
                break;
            case 68:
                f2 -= i5;
                i19 = 1;
                do {
                    Test.bFld = Test.bFld;
                    lArr[i4] >>= i4;
                    i5 = i19;
                    f2 += (float)d2;
                    i5 += (i19 - f2);
                    s1 <<= (short)-1096L;
                    i5 += i19;
                } while (++i19 < 9);
            case 86:
                if (Test.bFld) continue;
            case 69:
                Test.fArrFld[i4 - 1] += -13740;
                break;
            case 65:
                Test.instanceCount += i4;
                break;
            case 73:
                f2 += i4;
                break;
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f2) + i19 + Double.doubleToLongBits(d2) + s1 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=9, i1=30200, i2=46, i3=-219, i20=13150, i21=43, i22=-236, i23=36, i24=-2, i25=14, i26=35360, i29=-11,
            iArr[][]=new int[N][N];
        double d=-40.61779;
        float f3=122.297F;
        byte by=-72;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 57);
        FuzzerUtils.init(lArr1, 7L);

        for (i = 6; i < 198; ++i) {
            iArr[i - 1][i] -= i1;
            for (i2 = 2; i2 < 131; ++i2) {
                d -= (iMeth() * -11);
                if (Test.bFld) continue;
                i3 <<= i20;
                iArr[i2 + 1][i] *= -4687;
                for (i21 = i; i21 < 2; i21++) {
                    f3 += i21;
                    lArr1[i21] = i1;
                    iArr[i21] = FuzzerUtils.int1array(N, (int)-1);
                    lArr1[i2] = 13;
                    i20 += i2;
                    i22 += (i21 ^ i3);
                }
                Test.instanceCount += (((i2 * f3) + i) - i21);
                iArr[i2 + 1][i2] = i1;
            }
            i3 += i3;
            for (i23 = 6; i23 < 131; ++i23) {
                i3 &= (int)Test.instanceCount;
            }
            switch ((i % 2) + 127) {
            case 127:
                for (i25 = 3; i25 < 131; i25++) {
                    int i27=-10, i28=13997;
                    iArr[i + 1][i25] = i26;
                    switch ((((i22 >>> 1) % 8) * 5) + 97) {
                    case 113:
                        i26 ^= i21;
                        i3 += i26;
                        Test.instanceCount += (((i25 * lFld) + lFld) - i);
                        try {
                            i3 = (i1 / -19461);
                            i27 = (i27 / i);
                            i28 = (i1 % 55227);
                        } catch (ArithmeticException a_e) {}
                    case 128:
                        Test.instanceCount ^= lFld;
                        i1 += (((i25 * Test.instanceCount) + i21) - i27);
                        lFld *= i;
                        break;
                    case 112:
                        lFld = (long)f3;
                    case 132:
                        by += (byte)i28;
                        break;
                    case 135:
                        lArr1[i25 + 1] = (long)d;
                        break;
                    case 125:
                        i27 /= (int)(i26 | 1);
                        break;
                    case 127:
                        if (true) continue;
                        break;
                    case 119:
                        Test.iArrFld[i] -= i;
                        break;
                    default:
                        Test.bFld = Test.bFld;
                    }
                }
            case 128:
                i29 -= (int)f3;
                break;
            default:
                i20 = Test.iFld;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d i20 = " + i3 + "," + Double.doubleToLongBits(d) + "," + i20);
        FuzzerUtils.out.println("i21 i22 f3 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by i29 = " + i26 + "," + by + "," + i29);
        FuzzerUtils.out.println("iArr lArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("lFld Test.iFld Test.iArrFld = " + lFld + "," + Test.iFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.fArrFld sArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld))
            + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
