// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public int iFld=109;
    public static byte byFld=62;
    public static short sFld=19094;
    public static double dFld=107.23490;
    public volatile float fFld=-55.814F;
    public static int iArrFld[][]=new int[N][N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 29014);
        FuzzerUtils.init(Test.lArrFld, -2L);
        FuzzerUtils.init(Test.fArrFld, 58.141F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i10=-37635, i11=-219, i12=24708, i13=10, i14=-9, i15=9;
        boolean b=true;
        float f2=92.900F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -12.155F);

        fArr[(i10 >>> 1) % N][(i10 >>> 1) % N] -= (float)Test.dFld;
        for (i11 = 7; 256 > i11; i11++) {
            i13 *= i11;
            Test.iArrFld[i11 + 1][i11 + 1] |= 42662;
            for (i14 = 1; i14 < 7; ++i14) {
                Test.instanceCount >>>= i15;
                Test.iArrFld[i14][i11 - 1] &= i14;
                Test.dFld += i13;
                b = true;
                Test.lArrFld[i14 - 1] += Test.instanceCount;
                i10 = (int)f2;
                i15 += i14;
                f2 += (((i14 * i12) + Test.instanceCount) - f2);
                Test.iArrFld[i14 + 1][i14 - 1] -= (int)Test.dFld;
            }
            Test.byFld -= (byte)f2;
        }
        vMeth2_check_sum += i10 + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(float f1, int i2, long l) {

        int i3=13, i4=-242, i5=5, i6=0, i7=4, i8=522, i9=5, i16=-30, i17=6980;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -1.96152);

        i2 = (int)((f1 -= (-56314 + (i2 + Test.sFld))) * (45473 - (i2 <<= Test.sFld)));
        for (i3 = 8; i3 < 205; ++i3) {
            for (i5 = i3; i5 < 8; ++i5) {
                dArr[i3 - 1] *= Float.intBitsToFloat(--i6);
                Test.lArrFld[i3] *= Test.lArrFld[i3 + 1];
                i4 = (int)((Test.dFld - (-i4)) + ((Test.dFld + Test.byFld) + i2));
            }
            i4 = Math.abs((int)((-51316 + (Test.instanceCount - l)) + (i6 - Test.dFld)));
            for (i7 = 1; i7 < 8; ++i7) {
                i9 += (((i7 * i9) + f1) - i2);
                vMeth2();
                for (i16 = i3; i16 < 2; i16++) {
                    i4 >>= i3;
                }
                l -= (long)f1;
                i8 *= i16;
                Test.instanceCount = -170;
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i2 + l + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i16 + i17 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth() {

        float f=24.643F, fArr1[]=new float[N];
        int i=-10, i1=-61635, i18=-47904, i19=-31413;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 1163L);
        FuzzerUtils.init(fArr1, 0.170F);

        Test.byFld += (byte)f;
        i = 317;
        while (--i > 0) {
            i1 = (int)(lArr[i - 1][i + 1] + Test.sFld);
            vMeth1(f, i1, 57629L);
            i1 -= (int)1.587F;
            i1 >>= i1;
            for (i18 = 1; i18 < 5; i18++) {
                boolean b1=false;
                switch (((i18 % 4) * 5) + 70) {
                case 80:
                    i19 = 32364;
                    if (b1) continue;
                    break;
                case 72:
                case 83:
                    i1 &= i;
                    i19 -= (int)1811429848L;
                    break;
                case 75:
                    Test.iArrFld[i18 - 1][i + 1] *= i1;
                    break;
                }
            }
            fArr1[i + 1] *= i;
            i1 = i;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + i18 + i19 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i20=0, i21=8, i22=-31589, i23=-9, i24=-9966, i25=107, i26=-4, i27=78;
        boolean b2=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-10311);

        sArr[(-70 >>> 1) % N] >>= (short)((iFld * 1.10909) + (Test.iArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N] +
            Test.iArrFld[(iFld >>> 1) % N][(iFld >>> 1) % N]));
        iFld += (int)Test.instanceCount;
        vMeth();
        Test.fArrFld[(iFld >>> 1) % N] = fFld;
        for (i20 = 16; i20 < 261; ++i20) {
            Test.instanceCount += Test.instanceCount;
            switch ((i20 % 5) + 53) {
            case 53:
                for (i22 = 103; i22 > i20; i22 -= 2) {
                    switch ((((i23 >>> 1) % 2) * 5) + 57) {
                    case 58:
                        i23 += Test.byFld;
                    case 66:
                        iFld += (int)Test.instanceCount;
                    default:
                        Test.fArrFld[i22] -= i21;
                        iFld &= 30384;
                    }
                    Test.instanceCount -= i23;
                    i21 += (i22 * i22);
                    for (i24 = 1; i24 < 1; ++i24) {
                        Test.fArrFld = FuzzerUtils.float1array(N, (float)64.647F);
                        i21 ^= i24;
                        Test.iArrFld[i24 + 1][i22 - 1] <<= i20;
                        if (true) continue;
                        Test.iArrFld[i22 + 1][i24 + 1] = 53678;
                        i25 -= -58927;
                        fFld = i25;
                        iFld = i22;
                        switch (((i23 >>> 1) % 9) + 29) {
                        case 29:
                            switch (((i22 % 8) * 5) + 35) {
                            case 50:
                                i23 += i25;
                                i21 = (int)-127L;
                                i23 = i25;
                                fFld *= Test.instanceCount;
                                break;
                            case 54:
                                fFld = i26;
                                break;
                            case 56:
                                Test.dFld += -77;
                                break;
                            case 74:
                                i25 += (i24 * i24);
                            case 57:
                                i26 *= (int)Test.instanceCount;
                                break;
                            case 60:
                                fFld = -60763;
                                break;
                            case 71:
                                Test.fArrFld = Test.fArrFld;
                                break;
                            case 49:
                                i26 = i21;
                                break;
                            default:
                                fFld -= i20;
                            }
                            break;
                        case 30:
                            i26 += (int)Test.instanceCount;
                            break;
                        case 31:
                            i23 *= i23;
                            break;
                        case 32:
                            iFld += (12486 + (i24 * i24));
                            break;
                        case 33:
                            if (b2) continue;
                        case 34:
                            fFld += 1.987F;
                            break;
                        case 35:
                            Test.instanceCount += i21;
                            break;
                        case 36:
                            Test.sFld += (short)113;
                            break;
                        case 37:
                            iFld -= i27;
                            break;
                        }
                    }
                }
                break;
            case 54:
                i23 -= i24;
                break;
            case 55:
                Test.instanceCount += i20;
                break;
            case 56:
                Test.dFld *= fFld;
                break;
            case 57:
                Test.iArrFld[i20 - 1][i20] = i26;
                break;
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 b2 i27 = " + i26 + "," + (b2 ? 1 : 0) + "," + i27);
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.sFld Test.dFld fFld = " + Test.sFld + "," + Double.doubleToLongBits(Test.dFld) +
            "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
