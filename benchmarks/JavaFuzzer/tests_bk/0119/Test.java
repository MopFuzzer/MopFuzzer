// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=2L;
    public static volatile boolean bFld=true;
    public static int iFld=57916;
    public static double dFld=-33.26885;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d, int i3, int i4) {

        int i5=13, i6=-8, i7=29716, i8=141, i9=-11, i10=-4, iArr[]=new int[N];
        long l=225L, l1=5L;
        boolean b=true;
        byte by=-16;
        float f=0.76F;

        FuzzerUtils.init(iArr, -14105);

        i4 >>>= i4;
        for (i5 = 6; i5 < 251; ++i5) {
            i3 = (int)d;
            for (l = 1; 7 > l; l++) {
                for (i8 = 2; i8 > 1; i8--) {
                    if (b) break;
                    i9 = i8;
                    by += (byte)(i8 ^ l1);
                    switch (((i4 >>> 1) % 10) + 127) {
                    case 127:
                        b = b;
                        iArr[i5] >>= -7;
                        i4 += i8;
                        b = true;
                        break;
                    case 128:
                        i10 = i10;
                    case 129:
                        i6 >>>= i6;
                        break;
                    case 130:
                        f += -179;
                        break;
                    case 131:
                    case 132:
                        i3 >>= i8;
                        break;
                    case 133:
                        i9 += (i8 + Test.instanceCount);
                    case 134:
                        iArr[i5 + 1] = (int)Test.instanceCount;
                        break;
                    case 135:
                        i4 <<= (int)Test.instanceCount;
                    case 136:
                        i6 -= i5;
                        break;
                    default:
                        i3 -= -7;
                    }
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i3 + i4 + i5 + i6 + l + i7 + i8 + i9 + (b ? 1 : 0) + by + l1 +
            i10 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2) {

        int i11=121, i12=11, i13=-29663, i15=3, i16=-57414, i17=38, i18=0, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        byte by1=96;
        double d1=-2.9301, dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 190);
        FuzzerUtils.init(iArr2, 10071);
        FuzzerUtils.init(dArr, -117.80555);

        vMeth1(-1.4194, i2, i2);
        i11 = 1;
        while ((i11 += 3) < 378) {
            i2 *= 6;
        }
        for (i12 = 11; i12 < 184; i12++) {
            if (false) {
                for (i15 = 9; i15 > 1; --i15) {
                    i17 = 1;
                    while (++i17 < 2) {
                        i16 += (int)Test.instanceCount;
                        i16 *= (int)Test.instanceCount;
                        by1 = (byte)i11;
                    }
                    iArr2 = FuzzerUtils.int2array(N, (int)-3);
                    i18 = 1;
                    while (++i18 < 2) {
                        i2 = i13;
                        d1 = i18;
                        dArr[i12 + 1] += i16;
                    }
                }
            } else if (Test.bFld) {
                i13 += (((i12 * i11) + i15) - i17);
            }
        }
        vMeth_check_sum += i2 + i11 + i12 + i13 + i15 + i16 + i17 + by1 + i18 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i, int i1) {


        vMeth(i1);
        vSmallMeth_check_sum += i + i1;
    }

    public void mainTest(String[] strArr1) {

        float f1=2.369F, f2=-4.420F;
        int i19=189, i20=111, i21=-19, i22=9, i23=197, i24=33095, i25=-17762, i26=-9, i27=1, i28=-21370, iArr3[]=new
            int[N];
        byte by2=-108;
        short s=17804;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr3, -8);
        FuzzerUtils.init(lArr, -6071035283968946170L);

        for (int smallinvoc=0; smallinvoc<573; smallinvoc++) vSmallMeth(Test.iFld, Test.iFld);
        Test.iFld -= -3;
        f1 *= Test.instanceCount;
        for (i19 = 4; i19 < 280; i19++) {
            for (i21 = i19; i21 < 91; i21++) {
                Test.iFld ^= 50;
                by2 -= (byte)Test.instanceCount;
                f1 *= by2;
                Test.iFld >>= i21;
                Test.instanceCount = i23;
                i22 = (int)Test.instanceCount;
                Test.instanceCount = i22;
                i23 += i21;
            }
            Test.instanceCount -= Test.instanceCount;
            iArr3[i19 - 1] += Test.iFld;
            i23 -= i21;
        }
        lArr[(i19 >>> 1) % N] = s;
        Test.instanceCount = i19;
        Test.dFld = 0.532F;
        for (i24 = 5; i24 < 146; ++i24) {
            Test.iFld >>>= i19;
            for (f2 = 1; f2 < 178; ++f2) {
                f1 *= Test.instanceCount;
                for (i27 = (int)(f2); 2 > i27; i27++) {
                    Test.dFld += i23;
                    i28 ^= i28;
                    Test.iFld -= -253;
                    by2 += (byte)(i27 ^ i27);
                    i26 += i24;
                    f1 += i26;
                }
            }
        }

        FuzzerUtils.out.println("f1 i19 i20 = " + Float.floatToIntBits(f1) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 by2 = " + i21 + "," + i22 + "," + by2);
        FuzzerUtils.out.println("i23 s i24 = " + i23 + "," + s + "," + i24);
        FuzzerUtils.out.println("i25 f2 i26 = " + i25 + "," + Float.floatToIntBits(f2) + "," + i26);
        FuzzerUtils.out.println("i27 i28 iArr3 = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.iFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld = " + Double.doubleToLongBits(Test.dFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
