// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-143458903517739223L;
    public static long lFld=0L;
    public static volatile short sFld=6714;
    public static boolean bFld=true;
    public int iFld=-6;
    public static int iFld1=59904;
    public static double dFld=2.35754;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 1085158550L);
        FuzzerUtils.init(Test.iArrFld, 29767);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, short s) {

        int i4=-61, i5=-58, i6=167, iArr[]=new int[N];
        double d=12.9070;
        boolean b=true;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-9013);
        FuzzerUtils.init(iArr, -84);

        i4 = 1;
        do {
            i3 += -6;
            for (i5 = 1; i5 < 10; ++i5) {
                sArr = sArr;
                i6 += i5;
                Test.instanceCount *= (long)-5.224F;
                switch (((i3 >>> 1) % 6) + 72) {
                case 72:
                    d *= i6;
                    break;
                case 73:
                    i6 += i6;
                    i3 -= (int)d;
                    i3 = (int)Test.lFld;
                    if (b) break;
                    break;
                case 74:
                    Test.lArrFld[i4 - 1] = i3;
                    Test.lFld -= i4;
                    i6 -= i3;
                    break;
                case 75:
                    iArr[i5] &= s;
                    break;
                case 76:
                    Test.instanceCount += i5;
                    break;
                case 77:
                    b = b;
                    break;
                }
            }
        } while (++i4 < 157);
        vMeth1_check_sum += i3 + s + i4 + i5 + i6 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(int i1, long l2, int i2) {

        float f=109.90F;
        int i7=-14, i8=9, i9=6, i10=-14418;
        byte by=-103, byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)63);

        f = (Test.lArrFld[(i2 >>> 1) % N]++);
        vMeth1(i2, Test.sFld);
        i7 = 1;
        do {
            i1 += (((i7 * i7) + f) - i7);
            for (i8 = 5; 1 < i8; --i8) {
                if (Test.bFld) continue;
                if (Test.bFld) break;
                switch (((i1 >>> 1) % 5) + 77) {
                case 77:
                    byArr[i7 - 1] <<= (byte)i10;
                    if (Test.bFld) {
                        Test.sFld -= (short)l2;
                        i9 += i1;
                    } else if (false) {
                        l2 += (i8 + i7);
                        Test.iArrFld[i7 - 1] >>= i7;
                        if (i2 != 0) {
                        }
                    } else if (false) {
                        i1 *= -31466;
                    } else {
                        i2 = i1;
                    }
                case 78:
                    Test.bFld = Test.bFld;
                    break;
                case 79:
                case 80:
                    i2 += (((i8 * Test.sFld) + by) - i1);
                    break;
                case 81:
                    Test.lFld += -12;
                }
            }
        } while (++i7 < 304);
        long meth_res = i1 + l2 + i2 + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + by + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i=-129, i11=2, i12=-6, i13=-10, i14=139;
        float f1=0.444F;

        i = 1;
        do {
            l1 *= lMeth(i, l, i);
            for (i11 = i; i11 < 11; i11++) {
                i12 = i;
                i12 <<= i11;
                for (i13 = 1; i13 < 1; i13++) {
                    i12 = i;
                    i14 >>= i13;
                    Test.iArrFld[i13 + 1] -= i;
                    f1 += i13;
                    i14 = (int)l;
                    i12 = i13;
                    l = i12;
                }
                Test.bFld = Test.bFld;
                Test.iArrFld[i] = i11;
            }
        } while (++i < 141);
        vMeth_check_sum += l + l1 + i + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        int i15=-245, i16=32408, i17=-212, i18=-7, i19=128, i20=-216, i21=0, i22=-41964, i23=19690, i24=-199;
        long l3=138L;
        byte by1=-97;

        vMeth(Test.lFld, Test.instanceCount);
        fArrFld[(iFld >>> 1) % N][(-8 >>> 1) % N] = Test.instanceCount;
        i15 = 323;
        while ((i15 -= 2) > 0) {
            iFld -= iFld;
            iFld = (int)Test.lFld;
            for (l3 = 1; l3 < 155; l3 += 3) {
                if (Test.bFld) {
                    for (i17 = 1; i17 < 4; i17++) {
                        Test.lFld += i18;
                        i18 = 13;
                        iFld = iFld;
                    }
                    Test.lFld += (((l3 * Test.lFld) + i15) - i15);
                    for (i19 = 1; i19 < 4; i19++) {
                        i18 += (((i19 * by1) + Test.lFld) - Test.instanceCount);
                    }
                } else if (Test.bFld) {
                    i20 *= (int)-2423735762593661401L;
                    for (i21 = i15; i21 < 4; ++i21) {
                        i22 = (int)-150L;
                        i22 = i17;
                        Test.lFld = 55935;
                        i22 = (int)Test.lFld;
                    }
                    if (Test.bFld) {
                        for (i23 = 1; i23 < 4; ++i23) {
                            Test.iArrFld[i23 - 1] *= iFld;
                            i18 -= 238;
                            by1 -= (byte)16556;
                            Test.bFld = Test.bFld;
                            Test.instanceCount >>= i21;
                            i22 += (((i23 * l3) + Test.iFld1) - i21);
                            Test.iArrFld = Test.iArrFld;
                        }
                        fArrFld[i15 - 1][(int)(l3 + 1)] += 108.840F;
                    } else if (Test.bFld) {
                        Test.lFld <<= i17;
                    } else {
                        Test.dFld -= Test.lFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i15 l3 i16 = " + i15 + "," + l3 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 by1 i21 = " + i20 + "," + by1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.sFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld iFld Test.iFld1 = " + (Test.bFld ? 1 : 0) + "," + iFld + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.dFld Test.lArrFld Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
