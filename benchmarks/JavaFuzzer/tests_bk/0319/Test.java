// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-398526046398506977L;
    public static float fFld=-2.137F;
    public static int iFld=-206;
    public short sFld=-16895;
    public static byte byFld=0;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, int i2, double d1) {

        byte by=-20;
        float f=-2.409F;
        int i3=19707, i4=-14, i5=-233, i6=-10, iArr[]=new int[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(iArr, 61);

        for (long l : lArr) {
            iArr[(i2 >>> 1) % N] -= 140;
            by += (byte)f;
            for (i3 = 1; 4 > i3; ++i3) {
                by = (byte)i3;
                iArr[i3] += i2;
                for (i5 = i3; i5 < 2; ++i5) {
                    i2 -= (int)2.68322;
                    iArr[i3 + 1] += i2;
                    f += (i5 * i5);
                    i4 >>= i3;
                    d1 = i3;
                    i6 = i6;
                    l += (i5 * i5);
                    i6 |= 241;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i2 + Double.doubleToLongBits(d1) + by +
            Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i, int i1) {

        double d2=-27.20369;
        int i7=-12, i8=14, i9=0, i10=-253, i11=-155, i12=-54722, i13=14, iArr1[]=new int[N];
        boolean b=false;
        byte by1=44, byArr[]=new byte[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(fArr, 2.947F);
        FuzzerUtils.init(byArr, (byte)102);

        vMeth2(d2, i, d2);
        for (i7 = 4; i7 < 133; i7 += 2) {
            i8 = (int)Test.instanceCount;
            iArr1 = iArr1;
            fArr[i7 + 1] = Test.fFld;
            for (i9 = 1; 24 > i9; i9++) {
                Test.fFld = Test.fFld;
            }
            for (i11 = 24; i7 < i11; --i11) {
                i13 = 1;
                while (++i13 < 1) {
                    byArr[i11] = (byte)-696937319L;
                    d2 *= i10;
                    i1 += (i13 * i13);
                    if (b) break;
                    i -= (int)55398L;
                    Test.fFld = by1;
                }
            }
        }
        vMeth1_check_sum += i + i1 + Double.doubleToLongBits(d2) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + (b ? 1 : 0) +
            by1 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i14=-188, i15=11977, i16=3, i17=-192, i18=57676, i19=29086, iArr2[]=new int[N];
        double d3=93.47089;
        boolean b1=true, bArr[][]=new boolean[N][N];

        FuzzerUtils.init(iArr2, -11060);
        FuzzerUtils.init(bArr, true);

        vMeth1(Test.iFld, -10850);
        for (i14 = 10; i14 < 252; ++i14) {
            Test.iFld = i14;
            Test.instanceCount += (i14 - i15);
            iArr2[i14 + 1] += 19277;
            for (i16 = 7; i16 > 1; i16--) {
                for (i18 = 2; i18 > i14; i18--) {
                    i19 = i18;
                    i17 += (int)d3;
                    iArr2[i16] = (int)d3;
                    d3 += Test.fFld;
                    b1 = false;
                }
                i15 = i15;
                bArr[i14 + 1][i14 + 1] = b1;
                iArr2 = FuzzerUtils.int1array(N, (int)-42227);
            }
        }
        vMeth_check_sum += i14 + i15 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d3) + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=18, i21=2, i22=-13, i23=-149, i24=14, i25=52441, i26=180, i27=-172;
        long l1=-42983L, lArr1[]=new long[N];
        boolean b2=true, b3=false;
        double d4=-47.43358;
        short sArr[]=new short[N];

        FuzzerUtils.init(sArr, (short)-8688);
        FuzzerUtils.init(lArr1, -459502120L);

        vMeth();
        for (i20 = 7; i20 < 326; i20++) {
            for (i22 = 2; i22 < 79; ++i22) {
                i23 &= (int)Test.instanceCount;
                Test.instanceCount += (34704 + (i22 * i22));
                sArr[i20 - 1] = (short)i23;
                Test.iFld += (i22 * i22);
                Test.instanceCount += (long)Test.fFld;
                sFld -= (short)i22;
                for (l1 = 1; l1 < 2; l1++) {
                    try {
                        i24 = (i20 / i22);
                        i23 = (i24 % 17861);
                        i24 = (i21 / Test.iFld);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i21;
                    Test.iFld = i23;
                    Test.iFld = i21;
                    i25 += i24;
                    Test.instanceCount = (long)2.267F;
                }
                i24 += (int)(-10L + (i22 * i22));
                if (b2) continue;
            }
            Test.iFld -= -7463;
            i23 *= (int)Test.instanceCount;
            switch ((i20 % 6) + 11) {
            case 11:
                i24 = (int)d4;
                for (i26 = 2; i26 < 79; i26++) {
                    i23 = Test.byFld;
                    if (b3) break;
                    i27 -= (int)Test.fFld;
                    iArrFld[i20 - 1] += (int)Test.fFld;
                    sFld <<= (short)i20;
                }
            case 12:
                Test.instanceCount += i26;
                break;
            case 13:
                lArr1[i20] -= -145;
                break;
            case 14:
                i24 -= i20;
                break;
            case 15:
                lArr1[i20] >>>= -223;
            case 16:
                Test.fFld -= -12L;
                break;
            default:
                Test.iFld += i27;
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 l1 i24 = " + i23 + "," + l1 + "," + i24);
        FuzzerUtils.out.println("i25 b2 d4 = " + i25 + "," + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i26 i27 b3 = " + i26 + "," + i27 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("sArr lArr1 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("sFld Test.byFld iArrFld = " + sFld + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
