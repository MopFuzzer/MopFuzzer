// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=5L;
    public byte byFld=60;
    public static byte byFld1=37;
    public static boolean bFld=true;
    public float fFld=0.565F;
    public int iFld=0;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.fArrFld, -2.926F);
        FuzzerUtils.init(Test.lArrFld, 57732L);
    }

    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d1) {

        int i5=33523, i6=13, i7=-59413, i8=12, i9=21670, iArr1[]=new int[N];
        float f=-31.5F, f1=109.418F;
        short s=-21664;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr1, 134);
        FuzzerUtils.init(byArr, (byte)85);

        iArr1[(i5 >>> 1) % N] = (int)-46514L;
        i6 = 1;
        do {
            try {
                i5 = (i6 / i6);
                i5 = (i5 % 1943016586);
                i5 = (1512986056 % i5);
            } catch (ArithmeticException a_e) {}
            f += (i6 + i6);
            i5 = 46;
            switch ((i6 % 7) + 36) {
            case 36:
                i5 = i7;
                f1 *= Test.instanceCount;
                Test.instanceCount = 101;
                break;
            case 37:
                i7 += (((i6 * i5) + i6) - s);
                break;
            case 38:
                i7 += i5;
                break;
            case 39:
                for (i8 = 1; i8 < 6; ++i8) {
                    i5 += (((i8 * f) + i7) - f1);
                    byArr[i6 - 1][i6 - 1] -= (byte)13;
                    i5 += (i8 * i8);
                }
            case 40:
                i9 = i6;
                break;
            case 41:
                iArr1[i6 + 1] += s;
                break;
            case 42:
                i7 -= s;
                break;
            }
        } while (++i6 < 297);
        long meth_res = Double.doubleToLongBits(d1) + i5 + i6 + Float.floatToIntBits(f) + i7 + Float.floatToIntBits(f1)
            + s + i8 + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(long l) {

        int i4=57983, i10=-34281, i12=-13331, i13=-52995, iArr2[]=new int[N];
        double d2=0.60965;
        float f3=66.851F;
        boolean b=false;

        FuzzerUtils.init(iArr2, -16255);

        i4 = iMeth(d2);
        iArr2[(-231 >>> 1) % N] += i4;
        i4 <<= 24586;
        i4 -= -96;
        i10 = 1;
        while (++i10 < 180) {
            i4 += (i10 | i4);
            i4 += Test.byFld1;
            i4 = (int)Test.instanceCount;
            iArr2[i10] += i4;
            Test.lArrFld[i10 + 1][i10] = (long)-40.14844;
            if (b) {
                i4 += i4;
                for (i12 = 1; i12 < 9; ++i12) {
                    iArr2[i12] = i10;
                    i4 += (-2 + (i12 * i12));
                }
            } else if (b) {
                i4 += i10;
            } else if (b) {
                f3 -= i4;
            } else {
                i13 >>= i13;
            }
        }
        long meth_res = l + i4 + Double.doubleToLongBits(d2) + i10 + i12 + i13 + Float.floatToIntBits(f3) + (b ? 1 : 0)
            + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth(int i3) {

        int i14=48976, i15=5, i16=62820, i17=-4, iArr3[]=new int[N];
        double d3=111.11067, dArr[]=new double[N];
        float f4=-71.168F;

        FuzzerUtils.init(dArr, 0.123404);
        FuzzerUtils.init(iArr3, 198);

        byMeth(22201L);
        for (i14 = 2; i14 < 174; ++i14) {
            i15 -= (int)-3025128608L;
            i3 += i14;
            for (i16 = i14; i16 < 9; ++i16) {
                i15 *= (int)d3;
                dArr[i16 + 1] += i14;
                f4 = i15;
                Test.instanceCount += Test.instanceCount;
                Test.instanceCount = Test.instanceCount;
                i3 *= (int)Test.instanceCount;
            }
            i3 = (int)-344974078795978973L;
            i3 = (int)Test.instanceCount;
            i3 = (int)Test.instanceCount;
            try {
                iArr3[i14 + 1] = (i3 % iArr3[i14 - 1]);
                i17 = (i17 % i17);
                i15 = (iArr3[i14 - 1] / i16);
            } catch (ArithmeticException a_e) {}
        }
        long meth_res = i3 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d3) + Float.floatToIntBits(f4) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=19059, i1=-12, i2=-8735, i18=0, i19=15, i20=-214, i21=-137, i22=-3837, i23=-117, i24=90, i25=218,
            iArr[]=new int[N];
        double d=2.32185;

        FuzzerUtils.init(iArr, -15485);

        iArr[(i >>> 1) % N] *= (int)(-d);
        i = (-i);
        byFld = (byte)((iArr[(i >>> 1) % N] + 53129) + i);
        for (i1 = 1; i1 < 257; ++i1) {
            lMeth(i);
            i = byFld;
            i18 = 1;
            while (++i18 < 98) {
                Test.bFld = true;
                i2 = (int)Test.instanceCount;
            }
            i19 = 1;
            do {
                fFld += (((i19 * i19) + i18) - fFld);
                if (true) break;
            } while (++i19 < 98);
        }
        i2 = (int)d;
        i <<= i19;
        Test.instanceCount += i18;
        for (i20 = 18; i20 < 292; i20++) {
            i22 = 1;
            do {
                iFld += byFld;
                for (i23 = 1; i23 < 1; ++i23) {
                    i2 += (i23 - i18);
                }
                if (Test.bFld) break;
                if (true) {
                    i2 /= (int)(Test.instanceCount | 1);
                    i25 = 1;
                    while (++i25 < 1) {
                        i2 += (((i25 * i1) + i1) - Test.instanceCount);
                        Test.instanceCount = i18;
                        iFld += (i25 ^ (long)fFld);
                        Test.instanceCount &= 13L;
                        i2 <<= (int)Test.instanceCount;
                        if (true) continue;
                    }
                } else {
                    iFld -= i21;
                }
            } while (++i22 < 92);
        }

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("i2 i18 i19 = " + i2 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.byFld1 = " + Test.instanceCount + "," + byFld + "," +
            Test.byFld1);
        FuzzerUtils.out.println("Test.bFld fFld iFld = " + (Test.bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld) + ","
            + iFld);
        FuzzerUtils.out.println("Test.fArrFld Test.lArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
