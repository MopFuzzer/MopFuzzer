// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4365183628329009349L;
    public static double dFld=-119.112745;
    public static volatile int iFld=13;
    public byte byFld=-120;
    public boolean bFld=true;
    public static float fFld=1.900F;
    public static short sFld=-24042;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -7256772823168380534L);
        FuzzerUtils.init(Test.iArrFld, 119);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        long l1=5L;
        int i6=-2990, i7=16066, i8=-62554;
        float f2=13.366F;

        for (l1 = 15; 253 > l1; l1++) {
            i6 >>= i4;
            Test.instanceCount *= i4;
            Test.lArrFld[(int)(l1 + 1)] += i3;
            for (i7 = 1; i7 < 7; i7++) {
                i4 += (int)l1;
            }
            f2 += -129;
            i8 += (int)(l1 ^ i3);
        }
        i3 *= 139;
        Test.iArrFld[(i5 >>> 1) % N] = i5;
        vMeth2_check_sum += i3 + i4 + i5 + l1 + i6 + i7 + i8 + Float.floatToIntBits(f2);
    }

    public static void vMeth1(long l, float f1, int i2) {

        int i9=58, i10=13, i11=62891, i12=24296, i13=10;
        long l2=-17L;
        boolean b=true;
        short s=8381;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -2.57668);

        vMeth2(-1, i2, Test.iFld);
        Test.iFld = (int)l;
        for (i9 = 17; i9 < 320; i9++) {
            for (i11 = 5; i11 > 1; i11--) {
                Test.iArrFld[i9 - 1] = (int)Test.instanceCount;
                Test.iArrFld[i9] -= (int)-2130842409L;
                i2 += i11;
                l2 += (i11 * i11);
                dArr[i11 + 1] = i12;
                i13 = 2;
                while (--i13 > 0) {
                    l2 = i2;
                    if (b) continue;
                    if (b) break;
                    Test.instanceCount += (((i13 * s) + i12) - i12);
                }
                Test.iFld = Test.iFld;
            }
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f1) + i2 + i9 + i10 + i11 + i12 + l2 + i13 + (b ? 1 : 0) + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(byte by) {

        int i=-252, i1=-4725, i14=-11, i15=-28470;
        float f=2.179F, fArr[]=new float[N];
        short s1=-26729;
        boolean b1=true;

        FuzzerUtils.init(fArr, -9.202F);

        fArr = FuzzerUtils.float1array(N, (float)-19.633F);
        i = 1;
        while (++i < 364) {
            f -= i;
            i1 ^= (int)(((i1 - 51398L) + Test.dFld) - Test.dFld);
            vMeth1(-14L, f, 8);
            Test.iFld = i;
            if (b1) {
                Test.iArrFld[i - 1] = i;
                Test.instanceCount += (-40313L + (i * i));
                Test.dFld -= 0.224F;
                for (i14 = 1; i14 < 5; i14++) {
                    i1 |= -92;
                    s1 <<= (short)i14;
                    i15 = i14;
                    Test.instanceCount <<= i1;
                }
                vMeth_check_sum += by + i + Float.floatToIntBits(f) + i1 + i14 + i15 + s1 + (b1 ? 1 : 0) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                return;
            } else {
                fArr[i] *= i14;
            }
        }
        vMeth_check_sum += by + i + Float.floatToIntBits(f) + i1 + i14 + i15 + s1 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=103, i17=-4, i18=12, i19=123, i20=-9, i21=-8, i22=3, iArr[]=new int[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(sArr, (short)31180);

        vMeth(byFld);
        switch ((((Test.iFld >>> 1) % 1) * 5) + 69) {
        case 74:
            Test.iFld ^= Test.iFld;
            Test.iFld = 38320;
            for (i16 = 12; i16 < 363; i16 += 2) {
                Test.iArrFld[i16 - 1] = Test.iFld;
                Test.iFld *= -39619;
            }
            Test.instanceCount *= Test.iFld;
            break;
        default:
            Test.instanceCount -= i17;
        }
        bFld = bFld;
        for (i18 = 3; i18 < 157; i18++) {
            Test.fFld -= i19;
            Test.fFld -= i18;
            i17 = (int)Test.instanceCount;
            switch (((i18 % 8) * 5) + 25) {
            case 57:
                for (i20 = 5; i20 < 163; i20++) {
                    Test.instanceCount ^= i21;
                    switch ((i20 % 4) + 13) {
                    case 13:
                        Test.iArrFld[(i19 >>> 1) % N] = i20;
                        Test.iFld += (i20 * i20);
                        break;
                    case 14:
                        Test.iFld -= (int)103L;
                        i21 += (i20 + i20);
                        switch (((i18 % 2) * 5) + 34) {
                        case 36:
                            if (false) continue;
                            Test.instanceCount |= Test.instanceCount;
                            i22 = 1;
                            while (++i22 < 2) {
                                Test.iArrFld[i22 - 1] >>>= 61602;
                                Test.iArrFld = iArr;
                                sArr[i22] -= (short)Test.instanceCount;
                                fArrFld[i20 + 1] = i16;
                            }
                            break;
                        case 38:
                            byFld += (byte)i22;
                            break;
                        }
                    case 15:
                        i17 += i20;
                        break;
                    case 16:
                        i21 -= (int)-2061340476L;
                        break;
                    default:
                        Test.fFld -= Test.iFld;
                    }
                }
                break;
            case 31:
                Test.iFld += i18;
                break;
            case 43:
                iArr[i18 + 1] |= i18;
                break;
            case 64:
                i17 = i21;
                break;
            case 54:
            case 35:
                Test.instanceCount = i20;
                break;
            case 55:
                i17 |= Test.sFld;
            case 60:
                byFld >>>= (byte)Test.instanceCount;
                break;
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 iArr sArr = " + i22 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("byFld bFld Test.fFld = " + byFld + "," + (bFld ? 1 : 0) + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.lArrFld Test.iArrFld = " + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
