// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=23L;
    public static short sFld=-12257;
    public int iFld=6;
    public static short sArrFld[]=new short[N];
    public static long lArrFld[]=new long[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.sArrFld, (short)12544);
        FuzzerUtils.init(Test.lArrFld, -3056868304L);
        FuzzerUtils.init(Test.fArrFld, 15.259F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l) {

        int i9=19502, i10=-1, i11=51532, iArr[]=new int[N];
        float f=2.1016F, f1=2.38F;
        double d2=0.71505;
        byte byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 70);
        FuzzerUtils.init(byArr, (byte)98);
        FuzzerUtils.init(lArr, -2415769164L);

        i9 = 1;
        do {
            for (f = 1; f < 4; ++f) {
                i10 = i9;
                try {
                    i10 = (i10 / iArr[(int)(f)]);
                    iArr[(int)(f - 1)] = (iArr[i9 - 1] % iArr[(int)(f + 1)]);
                    i10 = (37288 % i9);
                } catch (ArithmeticException a_e) {}
                i10 ^= 233;
                for (d2 = 2; d2 > i9; --d2) {
                    byArr[i9 + 1] -= (byte)-210;
                    l += (long)d2;
                    i11 = i11;
                    Test.sArrFld[i9 + 1] *= (short)307889548560472381L;
                    i10 += i10;
                    f1 -= i9;
                    i11 -= i9;
                }
                lArr[(i11 >>> 1) % N] = i9;
            }
            l -= (long)f1;
        } while (++i9 < 392);
        long meth_res = l + i9 + Float.floatToIntBits(f) + i10 + Double.doubleToLongBits(d2) + i11 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i5) {

        int i6=5, i7=3, i8=-21653, i12=-4, i13=239, i14=-1, i15=49, iArr1[]=new int[N];
        double d1=101.129594;
        byte by=-70;

        FuzzerUtils.init(iArr1, 4);

        for (i6 = 11; i6 < 261; i6++) {
            i5 %= (int)((Math.max(49332L, i6 - i8) - i6) | 1);
            if (i5 != 0) {
            }
            d1 -= (i7 >>= (int)(d1 * iMeth1(Test.instanceCount)));
            for (i12 = 1; 7 > i12; ++i12) {
                for (i14 = 1; i14 < 2; ++i14) {
                    float f2=43.491F;
                    iArr1 = iArr1;
                    i5 -= (int)d1;
                    f2 -= i12;
                    i5 ^= i7;
                    by <<= (byte)i12;
                    switch ((((i12 >>> 1) % 9) * 5) + 20) {
                    case 32:
                        i8 >>>= -47;
                        break;
                    case 21:
                        iArr1[i6] *= by;
                        i8 >>>= i13;
                    case 47:
                        iArr1[i12 + 1] = i14;
                        break;
                    case 28:
                        try {
                            i8 = (i15 / i7);
                            i13 = (-237 % i7);
                            i13 = (i5 / i5);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 34:
                        iArr1[i6 + 1] = 12;
                        break;
                    case 54:
                        Test.instanceCount >>= Test.instanceCount;
                        break;
                    case 49:
                        Test.instanceCount += (-6521204765021279862L + (i14 * i14));
                    case 31:
                        f2 += i14;
                        break;
                    case 33:
                        Test.instanceCount ^= Test.instanceCount;
                    }
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + i15 + by +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1, double d) {

        int i2=34, i3=-12, i16=50, i17=-9, i18=13, i19=186, i20=13, i21=-55787, iArr2[]=new int[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -113.513F);
        FuzzerUtils.init(iArr2, 246);

        for (i2 = 2; i2 < 206; ++i2) {
            int i4=-172;
            i3 >>= (int)(Math.abs(42 - i4) | (long)(Math.sqrt(54.48735) * (Test.instanceCount++)));
            Test.sFld += (short)((Test.instanceCount + iMeth(i)) - i4);
            for (i16 = i2; i16 < 8; ++i16) {
                i1 -= i3;
            }
            i17 *= i;
            Test.instanceCount += i2;
        }
        i17 -= i2;
        for (i18 = 1; i18 < 137; i18++) {
            for (i20 = 1; i20 < 12; i20 += 3) {
                i >>>= (int)Test.instanceCount;
                switch ((((-210 >>> 1) % 2) * 5) + 83) {
                case 85:
                    fArr[i18 - 1] += Test.instanceCount;
                    iArr2[i18 - 1] = (int)Test.instanceCount;
                    i19 = -178;
                case 90:
                    Test.instanceCount -= 3;
                    break;
                default:
                    i21 -= 183;
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i16 + i17 + i18 + i19 + i20 + i21 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i22=163, i23=-60679, i24=118, i25=0, i26=-11, i27=2, i28=-18053, i29=-49454, iArr3[][]=new int[N][N];
        double d3=-1.66022;
        boolean b=true;
        float f3=-66.556F;

        FuzzerUtils.init(iArr3, 12);

        vMeth(i22, -13, d3);
        i23 = 1;
        do {
            for (i24 = 2; i24 < 80; i24++) {
                switch (((i24 % 8) * 5) + 124) {
                case 140:
                    i25 >>= i23;
                    break;
                case 125:
                    switch (((i25 >>> 1) % 7) + 72) {
                    case 72:
                        i22 += (int)Test.instanceCount;
                        for (i26 = 1; 2 > i26; ++i26) {
                            Test.instanceCount = i22;
                            i27 >>= -221;
                            iArr3 = iArr3;
                            if (b) break;
                            i25 += 51718;
                        }
                        Test.instanceCount += (i24 * i24);
                        Test.instanceCount += -16;
                        break;
                    case 73:
                        iArr3[i23 - 1] = FuzzerUtils.int1array(N, (int)13);
                        Test.instanceCount *= Test.sFld;
                        Test.sArrFld[i24 - 1] = (short)Test.instanceCount;
                        f3 += Test.instanceCount;
                    case 74:
                        Test.instanceCount = iFld;
                        i22 += (i24 | (long)f3);
                        i22 += (int)d3;
                        break;
                    case 75:
                        i25 += (i24 ^ i27);
                        Test.lArrFld[i24] = i22;
                    case 76:
                        d3 = i25;
                        for (i28 = 1; i28 < 2; ++i28) {
                            iFld = i29;
                            Test.fArrFld[i24 + 1] -= f3;
                            i22 -= i25;
                            d3 += 29530;
                        }
                        break;
                    case 77:
                        Test.instanceCount = 7682;
                        break;
                    case 78:
                        i22 = i28;
                    default:
                        Test.instanceCount <<= i28;
                    }
                    break;
                case 145:
                    i29 += i25;
                case 136:
                    i25 = (int)2168229164L;
                case 143:
                    i27 &= iFld;
                    break;
                case 149:
                    i27 += 18601;
                    break;
                case 130:
                    iFld = (int)f3;
                    break;
                case 164:
                    f3 = i22;
                    break;
                default:
                    f3 += Test.instanceCount;
                }
            }
        } while (++i23 < 314);

        FuzzerUtils.out.println("i22 d3 i23 = " + i22 + "," + Double.doubleToLongBits(d3) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 b f3 = " + i27 + "," + (b ? 1 : 0) + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i28 i29 iArr3 = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld iFld = " + Test.instanceCount + "," + Test.sFld + "," +
            iFld);
        FuzzerUtils.out.println("Test.sArrFld Test.lArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + ","
            + FuzzerUtils.checkSum(Test.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
