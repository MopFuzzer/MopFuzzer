// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-207659581L;
    public static volatile int iFld=-10;
    public static byte byFld=18;
    public static boolean bFld=false;
    public static float fArrFld[]=new float[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.fArrFld, -6.115F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i5=52957, i6=-53570, i7=45822, i8=124, iArr1[][]=new int[N][N];
        float f2=2.516F;
        double d=-10.73053;
        short s=31937;

        FuzzerUtils.init(iArr1, 205);

        Test.instanceCount &= i5;
        f2 = Test.instanceCount;
        for (i6 = 4; i6 < 168; i6++) {
            i7 += (int)Test.instanceCount;
            i8 = 1;
            while (++i8 < 10) {
                byte by=66;
                switch ((((-150 >>> 1) % 8) * 5) + 41) {
                case 56:
                    try {
                        i5 = (i6 % 1310398220);
                        i5 = (i8 % i7);
                        iArr1[i6 - 1][i8 - 1] = (i8 % 132);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount *= (long)70.71909;
                case 54:
                    i7 += (i8 - i7);
                    break;
                case 78:
                    i7 *= -39013;
                    i5 += (int)1.532F;
                    i5 += (int)d;
                    i5 = i8;
                    break;
                case 81:
                    by += (byte)-199;
                    Test.instanceCount += Test.iFld;
                    break;
                case 62:
                    i5 *= i5;
                case 66:
                    s = (short)Test.instanceCount;
                case 64:
                    s = (short)Test.iFld;
                case 76:
                    i7 = (int)f2;
                    break;
                }
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + Double.doubleToLongBits(d) + s +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1() {

        int i1=55046, i3=6, i4=105, i9=-35, iArr[]=new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr, 188);

        if (b) {
            i1 = 1;
            while (++i1 < 214) {
                i3 = 1;
                while (++i3 < 8) {
                    i4 = 1;
                    while ((i4 += 3) < 1) {
                        double d1=83.86299;
                        float f3=-2.158F;
                        iArr = FuzzerUtils.int1array(N, (int)1);
                        vMeth2();
                        switch (((i1 % 2) * 5) + 70) {
                        case 78:
                            Test.iFld += (i4 - i4);
                            d1 -= i9;
                            break;
                        case 71:
                            f3 += i1;
                        }
                        switch ((((i9 >>> 1) % 7) * 5) + 50) {
                        case 65:
                            iArr[i1 + 1] = (int)Test.instanceCount;
                            i9 += (int)Test.instanceCount;
                            i9 *= (int)Test.instanceCount;
                            break;
                        case 79:
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        case 58:
                            Test.instanceCount += (i4 ^ Test.instanceCount);
                            break;
                        case 81:
                            Test.instanceCount += Test.instanceCount;
                            break;
                        case 80:
                            iArr[i4 + 1] += 42710;
                            break;
                        case 55:
                            iArr[i4 - 1] = (int)Test.instanceCount;
                            break;
                        case 63:
                            Test.instanceCount -= 19041;
                            break;
                        default:
                            Test.iFld = i3;
                        }
                    }
                }
            }
        }
        vMeth1_check_sum += i1 + i3 + i4 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f, int i, float f1) {

        int i10=5, i11=-1, i12=-104, i13=-34, i14=-230, i15=48920, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -108);

        i = 27;
        vMeth1();
        for (i10 = 223; 12 < i10; i10 -= 2) {
            switch ((i10 % 1) + 112) {
            case 112:
                Test.byFld |= (byte)i10;
            }
            f1 -= Test.instanceCount;
            for (i12 = i10; i12 < 15; i12++) {
                i11 += (i12 * i12);
                if (Test.bFld) break;
                Test.instanceCount += i12;
                i = i;
                Test.instanceCount = i10;
            }
            for (i14 = 1; i14 < 15; ++i14) {
                iArr2[i14 + 1] = (int)-61232L;
                f1 = i12;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f4=68.990F;
        int i16=50435, i17=35408, i18=162, i19=-6, i20=-18205, i21=215, i22=64307, i23=754, i24=2, i25=14;
        long lArr[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr, 12L);
        FuzzerUtils.init(byArr, (byte)47);

        vMeth(f4, 20027, f4);
        for (i16 = 20; i16 < 363; i16++) {
            for (i18 = 4; i18 < 73; ++i18) {
                i19 += i18;
                lArr[i18] -= i19;
                Test.iFld = -7;
                Test.instanceCount -= Test.iFld;
                Test.byFld += (byte)(((i18 * i16) + i18) - f4);
                i17 += (i18 + f4);
                Test.fArrFld[i16 + 1] += i18;
                Test.iFld = i18;
                i19 += (int)Test.instanceCount;
            }
            Test.instanceCount = Test.iFld;
            for (i20 = 1; i20 < 73; i20++) {
                i19 = -28645;
                f4 = i16;
                Test.iFld += (((i20 * Test.instanceCount) + i18) - f4);
                i21 = Test.iFld;
                i17 = 7;
                Test.instanceCount >>= Test.iFld;
                Test.instanceCount &= Test.instanceCount;
            }
            for (i22 = 4; i22 < 73; ++i22) {
                if (false) continue;
                i19 = Test.iFld;
                if (Test.bFld) continue;
                switch (((i22 % 9) * 5) + 44) {
                case 70:
                    for (i24 = 1; i24 < 2; i24++) {
                        Test.instanceCount = (long)-103.20998;
                        iArrFld = iArrFld;
                        byArr[i24 + 1] -= (byte)i19;
                    }
                    break;
                case 80:
                    Test.instanceCount >>= 3;
                    break;
                case 67:
                    iArrFld[(27615 >>> 1) % N] += i22;
                    break;
                case 88:
                    i23 = i25;
                case 47:
                    lArr[i22 + 1] -= i20;
                    break;
                case 81:
                    if (Test.bFld) break;
                    break;
                case 50:
                    i19 -= 36004;
                    break;
                case 86:
                    i21 += (((i22 * i19) + i19) - i20);
                case 84:
                    i17 += i22;
                    break;
                default:
                    f4 *= 5785;
                }
            }
        }

        FuzzerUtils.out.println("f4 i16 i17 = " + Float.floatToIntBits(f4) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 lArr = " + i24 + "," + i25 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.byFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.byFld);
        FuzzerUtils.out.println("Test.bFld Test.fArrFld iArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
