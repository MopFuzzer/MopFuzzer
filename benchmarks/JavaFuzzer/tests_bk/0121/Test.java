// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=47745L;
    public static int iFld=51701;
    public static short sFld=5215;
    public static float fFld=1.164F;
    public static boolean bFld=true;
    public double dFld=83.22369;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 28872);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static void vSmallMeth(int i) {

        float f=2.794F;

        Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)(f++);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public static long lMeth1(int i4) {

        byte by=84;
        double d=-118.66349, d1=124.45497;
        int i5=3, i6=-243, i7=12, i8=-24, i9=-4;
        boolean b=false;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, -2L);

        Test.iArrFld[(i4 >>> 1) % N] = i4;
        try {
            i4 >>= i4;
            by = (byte)47982;
            d = 23969;
            for (i5 = 14; i5 < 327; i5++) {
                lArr1 = lArr1;
                for (d1 = 1; d1 < 5; d1++) {
                    i6 <<= Test.iFld;
                    i7 += (int)((long)d1 | Test.instanceCount);
                    b = b;
                    for (i8 = 1; i8 < 2; i8++) {
                        Test.sFld += (short)i8;
                        Test.instanceCount = Test.instanceCount;
                        Test.fFld = i4;
                    }
                }
            }
        }
        catch (NullPointerException exc2) {
            i9 <<= i7;
        }
        long meth_res = i4 + by + Double.doubleToLongBits(d) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + (b ? 1 : 0)
            + i8 + i9 + FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static double dMeth() {

        int i2=-61, i3=203, i10=-49005, i11=239;
        double d2=-2.121122;

        for (i2 = 285; 9 < i2; i2--) {
            switch ((i2 % 5) + 87) {
            case 87:
                Test.instanceCount = (long)(lMeth1(Test.iFld) * d2);
                break;
            case 88:
                i3 += Test.iFld;
                Test.instanceCount = (long)Test.fFld;
                break;
            case 89:
                i3 += i2;
                for (i10 = 1; i10 < 6; i10++) {
                    i11 = Test.iFld;
                    i11 = (int)180750123L;
                    i11 += 53928;
                    Test.instanceCount = i10;
                    Test.instanceCount += (i10 | Test.instanceCount);
                    i11 = Test.iFld;
                    Test.instanceCount |= Test.instanceCount;
                    Test.iArrFld[i2 - 1] = Test.iFld;
                }
                break;
            case 90:
                Test.iArrFld[i2] = i3;
                break;
            case 91:
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d2) + i10 + i11;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth() {

        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -6071965664375452307L);

        lArr[(Test.iFld >>> 1) % N] = (long)(Test.iFld + dMeth());
        long meth_res = FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=57154, i12=158, i13=92, i14=-155;
        byte byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];
        float fArr[]=new float[N];

        FuzzerUtils.init(byArr, (byte)21);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, -2.662F);

        Test.instanceCount *= -5;
        try {
            Test.iFld = (int)((long)((Test.instanceCount + -12.708F) + (++byArr[(76 >>> 1) % N])) & (++Test.iFld));
            for (int smallinvoc=0; smallinvoc<914; smallinvoc++) vSmallMeth(Test.iFld);
            Test.iFld = (int)-3503817907496941938L;
            Test.iArrFld[(Test.iFld >>> 1) % N] = -1;
        }
        catch (UserDefinedExceptionTest exc3) {
            i1 = 1;
            do {
                Test.iFld >>= (int)lMeth();
                Test.iArrFld[i1] -= (int)Test.instanceCount;
                switch (((i1 % 2) * 5) + 14) {
                case 15:
                    Test.iFld -= (int)Test.instanceCount;
                    if (true) continue;
                    for (i12 = 3; i12 < 66; i12++) {
                        Test.fFld = 84;
                        i14 = 1;
                        while (++i14 < 2) {
                            Test.iFld += i14;
                            Test.bFld = Test.bFld;
                            if (Test.bFld) {
                                dFld = Test.fFld;
                                Test.iFld -= 1;
                            } else if (Test.bFld) {
                                i13 += i1;
                                Test.iArrFld[i12] *= i13;
                                Test.iFld = (int)Test.instanceCount;
                                Test.iFld = Test.iFld;
                            } else {
                                byArr[i12] = (byte)99;
                                i13 = -4;
                            }
                            Test.iFld >>= i13;
                            bArr[i14 - 1] = false;
                            fArr[i1 + 1] = Test.fFld;
                            Test.instanceCount -= i12;
                        }
                    }
                    break;
                case 16:
                    Test.bFld = Test.bFld;
                    break;
                }
            } while (++i1 < 384);
        }

        FuzzerUtils.out.println("i1 i12 i13 = " + i1 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 byArr bArr = " + i14 + "," + FuzzerUtils.checkSum(byArr) + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.fFld Test.bFld dFld = " + Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1
            : 0) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld = " + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
