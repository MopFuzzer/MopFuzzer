// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=755664448L;
    public static float fFld=-58.84F;
    public static long lFld=-13L;
    public static boolean bFld=true;
    public static int iFld=-50399;
    public static volatile short sFld=1367;

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i1, long l1) {

        double d=2.120850;
        int iArr[][]=new int[N][N];

        FuzzerUtils.init(iArr, -244);

        Test.lFld = (--i1);
        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] += (int)d;
        vSmallMeth_check_sum += i1 + l1 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i7) {

        int i8=-13, i9=-6, i10=-12, i11=3505, i12=49772, i13=4, iArr2[]=new int[N];
        double d1=1.12593;
        boolean b=false;
        float f1=0.69F;

        FuzzerUtils.init(iArr2, 107);

        iArr2[(i7 >>> 1) % N] = i7;
        Test.lFld += -8;
        for (i8 = 381; i8 > 16; i8 -= 2) {
            i9 += 44;
            if (b) {
                for (i10 = 1; i10 < 9; i10++) {
                    Test.fFld += (i10 * i10);
                    i11 -= i7;
                    i11 = i8;
                    for (i12 = 1; i12 < 2; i12++) {
                        Test.fFld += (((i12 * i11) + i10) - Test.fFld);
                        d1 = i10;
                        if (b) {
                            iArr2[i12 + 1] *= i13;
                        }
                        f1 -= Test.instanceCount;
                    }
                }
            } else {
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i4) {

        int i5=-33, i6=-6, i14=58878, i15=-25, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, 13);

        i4 = (int)((-Test.lFld) + ((i4 - i4) - -110));
        for (i5 = 179; i5 > 2; i5--) {
            vMeth(i5);
            Test.fFld = i4;
            iArr3[i5 + 1] -= i4;
            i4 *= (int)1.642F;
            iArr3[i5] = i4;
            Test.instanceCount += (((i5 * i5) + Test.fFld) - Test.fFld);
            for (i14 = 1; 9 > i14; i14++) {
                double d2=-123.116435;
                if (Test.bFld) {
                    Test.instanceCount = i14;
                    d2 += Test.lFld;
                } else if (true) {
                    Test.instanceCount += Test.lFld;
                } else if (Test.bFld) {
                    try {
                        i6 = (i4 % -29413);
                        i4 = (i15 / i14);
                        iArr3[i14 - 1] = (203 % i15);
                    } catch (ArithmeticException a_e) {}
                    Test.lFld += i14;
                } else {
                    i6 += i15;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i14 + i15 + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(long l2, int i2) {

        float f=0.789F;
        int i3=-40892;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)34);

        for (f = 13; f < 243; f++) {
            Test.instanceCount += (long)(f * f);
            i3 += (int)(Math.abs(-84 - i3) - ((i2 - i3) + (i2 + i2)));
            Test.lFld *= iMeth(i2);
        }
        Test.iFld = 2;
        byArr = byArr;
        long meth_res = l2 + i2 + Float.floatToIntBits(f) + i3 + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=7L, l3=64527L, lArr[]=new long[N];
        int i=2, i16=-7, i17=-35, i18=31801, i19=14, i20=177, i21=22598, i22=-37, iArr1[]=new int[N];
        byte by=109;
        float f2=2.730F;
        double d3=-58.14168;
        short s=-29151;

        FuzzerUtils.init(iArr1, -39);
        FuzzerUtils.init(lArr, -3433209081L);

        for (l = 2; l < 132; ++l) {
            Test.fFld += l;
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(((++i) + by) * iArr1[(int)(l)],
                lMeth(Test.instanceCount, -62684));
            i += (int)f2;
            if (Test.bFld) break;
            i16 = 1;
            while (++i16 < 193) {
                iArr1[i16] += (int)Test.lFld;
                l3 *= i16;
                f2 -= by;
                lArr[i16] <<= Test.iFld;
                Test.instanceCount ^= Test.iFld;
                Test.iFld = Test.iFld;
                i = i;
                i -= i;
                d3 = i16;
                iArr1[(int)(l + 1)] = i;
            }
            for (i17 = (int)(l); i17 < 193; ++i17) {
                Test.instanceCount += (((i17 * i17) + i17) - s);
                i <<= by;
            }
            for (i19 = 5; 193 > i19; ++i19) {
                for (i21 = 1; i21 < 2; i21++) {
                    try {
                        Test.iFld = (-32 / i);
                        i20 = (32707 / i);
                        i20 = (i19 % 1219437693);
                    } catch (ArithmeticException a_e) {}
                    l3 += i21;
                }
                Test.instanceCount *= l;
                lArr[i19 + 1] <<= s;
                i = i20;
                d3 -= i;
                Test.sFld -= (short)-8;
                Test.lFld -= Test.iFld;
                i18 = 177;
            }
        }

        FuzzerUtils.out.println("l i by = " + l + "," + i + "," + by);
        FuzzerUtils.out.println("f2 i16 l3 = " + Float.floatToIntBits(f2) + "," + i16 + "," + l3);
        FuzzerUtils.out.println("d3 i17 i18 = " + Double.doubleToLongBits(d3) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("s i19 i20 = " + s + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 iArr1 = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.lFld);
        FuzzerUtils.out.println("Test.bFld Test.iFld Test.sFld = " + (Test.bFld ? 1 : 0) + "," + Test.iFld + "," +
            Test.sFld);

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
