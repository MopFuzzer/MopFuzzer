// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-6270193913738104408L;
    public static int iFld=11;
    public static double dFld=1.125255;
    public byte byFld=46;
    public static short sFld=-14876;
    public boolean bFld=true;
    public static int iFld1=-14;
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, int i3, int i4) {

        int i5=-49555, i6=7, i7=70, i8=-4537, i9=0, i10=13, i11=3, iArr[]=new int[N];
        float f=0.643F;
        double d=-1.79432;
        byte by=-16;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -10L);
        FuzzerUtils.init(iArr, 154);

        for (i5 = 3; i5 < 172; i5++) {
            lArr = lArr;
            f *= (float)d;
            for (i7 = i5; i7 < 9; i7++) {
                iArr[i5] = i3;
                for (i9 = 1; i9 < 1; i9++) {
                    i8 = i8;
                    lArr[i7 - 1] <<= Test.instanceCount;
                    f = (float)d;
                    d += by;
                    by = (byte)i9;
                    i8 += (i9 * i9);
                    Test.instanceCount = i8;
                }
                try {
                    i8 = (194 / i3);
                    i4 = (i7 % i8);
                    i4 = (i10 % 127);
                } catch (ArithmeticException a_e) {}
                i11 = (int)-1066231785L;
            }
        }
        vMeth2_check_sum += l + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i7 + i8 + i9
            + i10 + by + i11 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i) {

        int i1=13, i2=222, i12=-11, i13=-7, i14=64, i15=-5;
        float f1=2.548F;
        boolean b=true;
        long lArr1[][]=new long[N][N];
        short sArr[]=new short[N];

        FuzzerUtils.init(lArr1, 5922L);
        FuzzerUtils.init(sArr, (short)12999);

        for (i1 = 386; 19 < i1; i1--) {
            vMeth2(Test.instanceCount, i2, i);
            Test.instanceCount = -187;
            Test.instanceCount += (long)f1;
            for (i12 = 1; i12 < 5; i12++) {
                Test.instanceCount -= i13;
                f1 += i;
                Test.instanceCount = 40375;
                i13 = (int)f1;
                for (i14 = 1; i14 < 2; ++i14) {
                    Test.instanceCount = i;
                }
                i2 += i12;
                lArr1[i12 - 1][i1 + 1] >>= Test.instanceCount;
            }
            if (b) continue;
            sArr[i1 + 1] *= (short)Test.instanceCount;
        }
        vMeth1_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth() {

        float f2=125.644F, f3=-69.641F;
        int i16=17284, i17=3, i18=6, iArr1[]=new int[N];
        double d1=119.55919;
        byte by1=-16;

        FuzzerUtils.init(iArr1, -26);

        vMeth1(Test.iFld);
        for (f2 = 1; f2 < 286; f2++) {
            Test.dFld *= i16;
            if (false) {
                f3 = (float)Test.dFld;
                Test.instanceCount |= Test.iFld;
            }
            d1 = 1;
            while (++d1 < 6) {
                Test.iFld -= 27802;
                i16 = i16;
                for (i17 = 1; i17 < 1; i17++) {
                    iArr1 = iArr1;
                }
                Test.iFld += (int)Test.instanceCount;
                by1 &= (byte)i17;
                Test.iFld -= 44190;
                i16 += (int)(2L + (d1 * d1));
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i16 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d1) +
            i17 + i18 + by1 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=1388, i20=6277, i21=-24590, i22=110, i23=-122, i24=24105, i25=39;
        float f4=-2.513F;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, 5810697469670146401L);

        vMeth();
        Test.instanceCount >>= byFld;
        Test.iFld = 51077;
        Test.instanceCount = 12;
        for (i19 = 295; i19 > 5; i19--) {
            Test.iFld += (((i19 * Test.instanceCount) + Test.instanceCount) - Test.iFld);
            Test.iFld += Test.sFld;
            i20 += 87;
            for (i21 = 4; 87 > i21; i21++) {
                i20 += (i21 * i21);
                f4 += (-189 + (i21 * i21));
                for (i23 = 1; i23 < 2; ++i23) {
                    switch ((((i21 >>> 1) % 1) * 5) + 32) {
                    case 36:
                        f4 += i21;
                        if (bFld) {
                            i20 = i21;
                            f4 += ((long)i23 | (long)byFld);
                        } else if (bFld) {
                            i20 += (((i23 * i19) + byFld) - i19);
                            i20 += (i23 + Test.iFld);
                            try {
                                Test.iFld = (i23 / i23);
                                i22 = (i19 % -1337932641);
                                Test.iFld = (Test.iArrFld[i21] % Test.iFld);
                            } catch (ArithmeticException a_e) {}
                        } else {
                            lArr2 = lArr2;
                        }
                        byFld -= (byte)i22;
                        break;
                    default:
                        i20 += i23;
                        Test.instanceCount >>= Test.iFld1;
                    }
                    Test.dFld -= f4;
                    i20 += i23;
                    Test.iArrFld[i19 + 1] = 171;
                    Test.iArrFld[i19] ^= i22;
                    f4 += (((i23 * i25) + Test.instanceCount) - f4);
                    i22 = Test.iFld;
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 f4 i23 = " + i22 + "," + Float.floatToIntBits(f4) + "," + i23);
        FuzzerUtils.out.println("i24 i25 lArr2 = " + i24 + "," + i25 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.dFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("byFld Test.sFld bFld = " + byFld + "," + Test.sFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.iArrFld = " + Test.iFld1 + "," + FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
