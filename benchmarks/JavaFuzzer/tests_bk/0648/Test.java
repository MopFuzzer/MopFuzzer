// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-4001467745L;
    public volatile int iFld=-129;
    public static float fFld=-4.473F;
    public int iArrFld[]=new int[N];
    public static int iArrFld1[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld1, 7);
        FuzzerUtils.init(Test.lArrFld, 1L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d, int i8, int i9) {

        int i10=86, i11=-2666, i12=-34779, i13=-30277, i14=-249, i15=9, i16=-41719, iArr[]=new int[N];
        byte by=-30;
        long l1=-7L, lArr[]=new long[N];
        float f=-114.334F;
        boolean b1=true;

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr, 3031194079859560308L);

        for (i10 = 4; i10 < 229; i10++) {
            Test.fFld = i8;
            i11 *= by;
            switch (((i10 % 10) * 5) + 4) {
            case 17:
                for (i12 = 1; i12 < 7; i12 += 3) {
                    boolean b=true;
                    switch ((i10 % 8) + 108) {
                    case 108:
                        by = (byte)-238L;
                        break;
                    case 109:
                        Test.instanceCount = i10;
                        b = b;
                        for (l1 = 1; l1 < 4; l1++) {
                            try {
                                i14 = (i12 / -42903);
                                iArr[(int)(l1 - 1)] = (-155 % i9);
                                i11 = (i15 % i12);
                            } catch (ArithmeticException a_e) {}
                            Test.instanceCount = 512430767L;
                        }
                        for (f = 4; f > 1; --f) {
                            Test.instanceCount *= i16;
                            lArr[(int)(f)] -= (long)-19.66187;
                        }
                        break;
                    case 110:
                        i11 += (int)f;
                        break;
                    case 111:
                        i9 /= (int)6L;
                        break;
                    case 112:
                    case 113:
                        Test.instanceCount += (i12 - i11);
                    case 114:
                        i14 = i8;
                        break;
                    case 115:
                        i14 -= 7155;
                        break;
                    default:
                        i8 &= 196;
                    }
                }
            case 19:
                iArr[i10 + 1] = 0;
            case 13:
                i14 = i16;
            case 14:
                Test.instanceCount += i10;
                break;
            case 51:
                Test.instanceCount |= by;
                break;
            case 44:
                by *= (byte)d;
            case 39:
                i13 -= i13;
                break;
            case 37:
                Test.instanceCount += -49082;
            case 23:
            case 45:
                if (b1) continue;
            default:
                Test.instanceCount *= i16;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i8 + i9 + i10 + i11 + by + i12 + i13 + l1 + i14 + i15 +
            Float.floatToIntBits(f) + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(long l) {

        int i6=35, i7=-1, i17=28, i18=-182, i19=18995, i20=-12, i21=18312;
        double d1=108.37764;
        long lArr1[]=new long[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(lArr1, -2931033123093676760L);
        FuzzerUtils.init(byArr, (byte)-115);

        for (i6 = 13; i6 < 371; ++i6) {
            boolean b2=false;
            i7 = iMeth(d1, i6, i7);
            switch (((i6 % 3) * 5) + 50) {
            case 55:
                if (b2) {
                    i7 = 7;
                    switch (((i6 % 7) * 5) + 111) {
                    case 115:
                        for (i17 = 1; i17 < 5; ++i17) {
                            Test.instanceCount *= i6;
                        }
                        i19 = 1;
                        while (++i19 < 5) {
                            for (i20 = i6; i20 < 1; i20++) {
                                i21 += i20;
                                lArr1[i19 + 1] -= i21;
                            }
                            d1 += i19;
                            Test.fFld *= i7;
                            i7 += i19;
                        }
                        break;
                    case 128:
                        i7 += (i6 * i6);
                    case 123:
                        byArr[i6] += (byte)i6;
                        break;
                    case 124:
                        i18 <<= i6;
                        break;
                    case 133:
                        i7 += (i6 * i6);
                        break;
                    case 127:
                        l <<= 14L;
                        break;
                    case 140:
                        i18 += i18;
                    default:
                        Test.fFld += (float)d1;
                    }
                } else if (b2) {
                    i21 |= -6;
                } else if (true) {
                    Test.instanceCount -= i18;
                    vMeth1_check_sum += l + i6 + i7 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + i20 + i21 +
                        FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
                    return;
                }
                break;
            case 58:
                Test.iArrFld1[i6] *= 26176;
                break;
            case 64:
                lArr1 = lArr1;
                break;
            }
        }
        vMeth1_check_sum += l + i6 + i7 + Double.doubleToLongBits(d1) + i17 + i18 + i19 + i20 + i21 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i4, int i5) {

        short s1=15415;
        byte by1=-27;
        int i23=46907, i24=-145, i25=6882;
        boolean b3=false;

        vMeth1(-129L);
        Test.iArrFld1[(i4 >>> 1) % N] = i5;
        s1 = (short)i4;
        Test.fFld += Test.fFld;
        for (int i22 : Test.iArrFld1) {
            i4 -= by1;
        }
        Test.instanceCount = i4;
        Test.iArrFld1[(i5 >>> 1) % N] = 8;
        i23 = 1;
        do {
            for (i24 = 1; i24 < 9; ++i24) {
                b3 = b3;
            }
            i25 -= (int)Test.instanceCount;
            i25 *= i23;
            i5 -= i23;
            Test.lArrFld = Test.lArrFld;
        } while (++i23 < 183);
        vMeth_check_sum += i4 + i5 + s1 + by1 + i23 + i24 + i25 + (b3 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        short s=30838, sArr[]=new short[N];
        int i=-2, i1=5441, i2=-74, i3=-7676, i26=12, i27=63513, i28=196, i29=-136, i30=11, i31=1, i32=-3457, i33=4,
            iArr1[][]=new int[N][N];
        byte by2=88;
        double d2=0.1022;
        long l2=8L;

        FuzzerUtils.init(sArr, (short)-8379);
        FuzzerUtils.init(iArr1, -5916);

        iArrFld[(iFld >>> 1) % N] = ((-226 - (iFld--)) - s);
        for (i = 5; i < 126; ++i) {
            Test.instanceCount = 62383;
            for (i2 = 9; 207 > i2; i2 += 3) {
                vMeth(iFld, -8);
                i3 += i2;
                sArr[i2 + 1] -= (short)iFld;
                for (i26 = 4; i26 > 1; --i26) {
                    Test.fFld = i26;
                    i1 *= (int)Test.instanceCount;
                    s += (short)i26;
                    Test.fFld = i27;
                }
                i28 = 1;
                while (++i28 < 4) {
                    i3 += (((i28 * Test.instanceCount) + i) - i2);
                    iFld *= by2;
                    i27 += i1;
                }
                for (i29 = i; i29 < 4; ++i29) {
                    Test.instanceCount -= (long)Test.fFld;
                    i27 -= -164;
                }
                iFld -= i28;
                d2 += 46713;
                i30 = (int)Test.fFld;
            }
            i27 += (i | i1);
            iArr1 = iArr1;
            i3 = i;
        }
        for (l2 = 212; l2 > 13; l2--) {
            for (i32 = (int)(l2); i32 < 126; i32++) {
                s >>= (short)i30;
                Test.iArrFld1[i32 - 1] -= -20611;
            }
            Test.instanceCount += (l2 - i33);
        }

        FuzzerUtils.out.println("s i i1 = " + s + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i26 = " + i2 + "," + i3 + "," + i26);
        FuzzerUtils.out.println("i27 i28 by2 = " + i27 + "," + i28 + "," + by2);
        FuzzerUtils.out.println("i29 i30 d2 = " + i29 + "," + i30 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l2 i31 i32 = " + l2 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 sArr iArr1 = " + i33 + "," + FuzzerUtils.checkSum(sArr) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iArrFld Test.iArrFld1 Test.lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld1) + "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
