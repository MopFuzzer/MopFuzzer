// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1183961504094148340L;
    public static double dFld=-36.19221;
    public static volatile int iFld=3;
    public static float fFld=73.1010F;
    public byte byFld=112;
    public double dArrFld[]=new double[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b1, double d) {

        int i7=-13, i8=16198, i9=-107, i10=-61928, i11=61826, iArr[]=new int[N];
        byte by1=-14;
        float f=-109.530F;
        short s1=4932, sArr[]=new short[N];
        boolean bArr[]=new boolean[N];
        double dArr[]=new double[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, 2.64175);
        FuzzerUtils.init(sArr, (short)8129);
        FuzzerUtils.init(lArr, 63150L);
        FuzzerUtils.init(iArr, -172);

        i7 = i7;
        for (i8 = 8; 298 > i8; i8++) {
            i9 += i8;
            Test.instanceCount -= by1;
        }
        d *= f;
        for (i10 = 21; i10 < 370; ++i10) {
            i9 += (((i10 * i8) + Test.instanceCount) - i8);
            bArr[i10] = false;
            i9 *= i7;
            sArr[i10 - 1] += (short)f;
            switch (((i10 >>> 1) % 8) + 111) {
            case 111:
                i11 -= (int)5575704314300329898L;
                lArr[i10] -= s1;
                i7 = i10;
                break;
            case 112:
                i9 += i10;
            case 113:
                iArr[i10 - 1] -= i11;
                break;
            case 114:
                f = i8;
                break;
            case 115:
                i11 += (int)-2.55479;
            case 116:
                f += (-1.170F + (i10 * i10));
                break;
            case 117:
                Test.instanceCount -= i9;
                break;
            case 118:
                iArr[i10] = s1;
                break;
            }
        }
        vMeth2_check_sum += (b1 ? 1 : 0) + Double.doubleToLongBits(d) + i7 + i8 + i9 + by1 + Float.floatToIntBits(f) +
            i10 + i11 + s1 + FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(short s, byte by, boolean b) {

        int i12=-18246, i13=-47058, i14=14, i15=-151, iArr1[]=new int[N];
        float f1=-127.285F;
        double d2=-17.114487;

        FuzzerUtils.init(iArr1, 22972);

        vMeth2(b, Test.dFld);
        i12 = 1;
        do {
            for (f1 = 1; 10 > f1; ++f1) {
                for (i14 = 1; i14 < 2; i14++) {
                    try {
                        Test.iFld = (-6 % i13);
                        Test.iFld = (i15 % i13);
                        Test.iFld = (i12 % -43293);
                    } catch (ArithmeticException a_e) {}
                    i13 = (int)Test.instanceCount;
                    Test.instanceCount = Test.instanceCount;
                    if (false) continue;
                    d2 -= Test.instanceCount;
                    try {
                        Test.iFld = (i15 / Test.iFld);
                        i13 = (i13 / i12);
                        i15 = (iArr1[(int)(f1 - 1)] % -5656);
                    } catch (ArithmeticException a_e) {}
                    if (b) {
                        Test.instanceCount += (((i14 * Test.instanceCount) + i12) - Test.iFld);
                    } else if (b) {
                        iArr1 = iArr1;
                        iArr1[(int)(f1 - 1)] = i13;
                    } else if (b) {
                        i13 &= s;
                    } else {
                        by *= (byte)i15;
                    }
                }
            }
        } while (++i12 < 156);
        vMeth1_check_sum += s + by + (b ? 1 : 0) + i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i3, long l, int i4) {

        int i5=-109, i6=-147, i16=5100, i17=-14, i18=56861, iArr2[]=new int[N];
        short s2=6847;
        byte by2=84;
        boolean b2=false;

        FuzzerUtils.init(iArr2, -4);

        i4 += (int)-2709529109L;
        for (i5 = 1; i5 < 173; i5++) {
            vMeth1(s2, by2, b2);
            Test.fFld = i4;
            iArr2[i5 - 1] = by2;
            iArr2[i5 - 1] *= 12;
            Test.iFld = i6;
            i4 = (int)Test.instanceCount;
            l += (i5 * i5);
            Test.instanceCount ^= 28757;
            for (i16 = 1; i16 < 9; i16++) {
                Test.iFld -= Test.iFld;
                i18 = 1;
                while (++i18 < 2) {
                    l += (7 + (i18 * i18));
                    i6 |= i4;
                }
            }
        }
        vMeth_check_sum += i3 + l + i4 + i5 + i6 + s2 + by2 + (b2 ? 1 : 0) + i16 + i17 + i18 +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=128, i2=-21773, i19=-5, i20=-9, i21=-5, i22=-14, iArr3[]=new int[N];
        boolean b3=true, bArr1[]=new boolean[N];
        float fArr[]=new float[N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(fArr, -87.958F);
        FuzzerUtils.init(iArr3, -49393);
        FuzzerUtils.init(lArr1, 8104766159545629985L);
        FuzzerUtils.init(bArr1, false);

        i = Integer.reverseBytes(i);
        for (i1 = 7; i1 < 152; ++i1) {
            vMeth(i1, 3L, i);
            if (b3) break;
            if (b3) break;
            fArr[i1 - 1] = i2;
            Test.instanceCount = i;
            Test.iFld = (int)Test.fFld;
            try {
                Test.iFld = (-184 / i);
                Test.iFld = (i2 % 60096);
                iArr3[i1 + 1] = (i2 / 72);
            } catch (ArithmeticException a_e) {}
            for (i19 = i1; 173 > i19; i19++) {
                for (i21 = 1; i21 < 1; i21++) {
                    i = i19;
                    Test.instanceCount *= 2117633521L;
                    Test.instanceCount = -9212;
                    dArrFld[i1 + 1] -= i2;
                    i22 = Test.iFld;
                    lArr1[i21] = byFld;
                    Test.fFld -= i22;
                }
                lArr1[i1 - 1] >>= i;
                if (true) continue;
                i2 = i;
            }
        }
        bArr1[(215 >>> 1) % N] = true;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("b3 i19 i20 = " + (b3 ? 1 : 0) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 fArr = " + i21 + "," + i22 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr3 lArr1 bArr1 = " + FuzzerUtils.checkSum(iArr3) + "," +
            FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.iFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.fFld byFld dArrFld = " + Float.floatToIntBits(Test.fFld) + "," + byFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
