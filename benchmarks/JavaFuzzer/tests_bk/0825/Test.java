// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-718589738L;
    public int iFld=91;
    public static byte byFld=-105;
    public static volatile float fFld=0.34F;
    public static double dFld=86.20422;
    public int iArrFld[]=new int[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7, byte by, int i8) {

        float f1=-1.1F;
        int i9=-8, i10=-100, i11=13664, i12=-20, i13=-11527, iArr1[]=new int[N];
        long l=144L, l1=0L;
        boolean b=false;
        double d=104.88071;

        FuzzerUtils.init(iArr1, 12);

        iArr1[(i7 >>> 1) % N] = 233;
        iArr1[(i7 >>> 1) % N] -= (int)-90.880F;
        f1 += i8;
        if (b) {
            iArr1[(i7 >>> 1) % N] *= (int)77.52600;
            Test.instanceCount <<= i8;
            i9 = 1;
            while (++i9 < 220) {
                i8 = i7;
                for (i10 = 7; i9 < i10; i10--) {
                    i8 &= i8;
                    for (l = 1; l < 1; l++) {
                        i8 = -214;
                    }
                    for (l1 = i9; l1 < 1; ++l1) {
                        f1 -= i11;
                        b = b;
                    }
                }
            }
        } else if (b) {
            d += l1;
        } else {
            b = b;
            vMeth_check_sum += i7 + by + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + l + i12 + l1 + i13 + (b ? 1 :
                0) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
            return;
        }
        vMeth_check_sum += i7 + by + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + l + i12 + l1 + i13 + (b ? 1 : 0)
            + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(int i4, int i5, int i6) {

        int i14=-63382, i15=-48, i16=-59, i17=-243, iArr[]=new int[N];
        float f2=2.710F, fArr1[]=new float[N];
        boolean b1=true;
        double d1=-1.109438;

        FuzzerUtils.init(iArr, 192);
        FuzzerUtils.init(fArr1, -47.34F);

        iArr[(i6 >>> 1) % N] <<= i4;
        vMeth(i14, Test.byFld, -35562);
        i15 = 1;
        while (++i15 < 213) {
            int i19=-7;
            i5 = (int)f2;
            i6 -= i15;
            Test.instanceCount *= Test.instanceCount;
            try {
                i6 = (31690 % i4);
                iArr[i15 + 1] = (i6 / i14);
                i14 = (18997 / iArr[i15 - 1]);
            } catch (ArithmeticException a_e) {}
            switch (((i4 >>> 1) % 4) + 52) {
            case 52:
                fArr1[i15] -= 11;
                Test.instanceCount -= -47501;
                i4 |= (int)Test.instanceCount;
                for (i16 = 1; 8 > i16; ++i16) {
                    int i18=-209;
                    i14 += (i16 * i16);
                    if (b1) continue;
                    iArr[i15 + 1] += i18;
                }
                break;
            case 53:
                f2 -= Test.instanceCount;
            case 54:
                i14 %= 5180;
            case 55:
                d1 += i19;
                break;
            }
        }
        long meth_res = i4 + i5 + i6 + i14 + i15 + Float.floatToIntBits(f2) + i16 + i17 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i2=-10, i3=-14, i20=-29407, i21=37, i22=5;
        double d2=-1.73272, d3=44.101464;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.592F);

        Test.instanceCount |= (long)((92.1011F + (iFld * -7967)) * (++Test.byFld));
        for (i2 = 12; i2 < 220; ++i2) {
            fArr[i2 + 1] = iMeth1(105, i2, -73);
            i3 -= (int)Test.instanceCount;
            iFld += (((i2 * Test.instanceCount) + i2) - i3);
            Test.fFld += i2;
            i20 = 8;
            do {
                d2 += iFld;
            } while (--i20 > 0);
        }
        Test.fFld -= (float)d3;
        for (i21 = 13; i21 < 383; i21++) {
            try {
                i3 = (-13 / i3);
                i22 = (iFld / i2);
                i3 = (200 % iArrFld[i21 + 1]);
            } catch (ArithmeticException a_e) {}
            i22 *= i21;
            Test.instanceCount >>= i3;
            iFld += i21;
            i3 = i22;
        }
        long meth_res = i2 + i3 + i20 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=19605, i1=19116, i23=-30605, i24=-62, i25=-235, i26=12;
        short s=-15143;
        float f=-71.348F;
        boolean b2=true;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, -12404L);

        for (i = 11; 202 > i; i++) {
            i1 = (int)(s += (short)((Test.instanceCount + i) - i));
            f *= ((Test.instanceCount++) ^ (++i1));
            f *= (i >>> iMeth());
            if (b2) {
                i23 = 1;
                do {
                    for (i24 = 1; i24 < 1; i24++) {
                        iFld = iFld;
                    }
                    switch (((iFld >>> 1) % 3) + 116) {
                    case 116:
                        i26 = 1;
                        while (++i26 < 1) {
                            i25 += (34090 + (i26 * i26));
                            f = (float)Test.dFld;
                        }
                        iArrFld[i] -= i;
                        break;
                    case 117:
                        lArr[i23 - 1] -= Test.instanceCount;
                        break;
                    case 118:
                        Test.instanceCount += i1;
                    }
                    Test.instanceCount += (-7745L + (i23 * i23));
                } while (++i23 < 131);
            }
        }

        FuzzerUtils.out.println("i i1 s = " + i + "," + i1 + "," + s);
        FuzzerUtils.out.println("f i23 i24 = " + Float.floatToIntBits(f) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 b2 = " + i25 + "," + i26 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.fFld Test.dFld iArrFld = " + Float.floatToIntBits(Test.fFld) + "," +
            Double.doubleToLongBits(Test.dFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
