// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-63794L;
    public float fFld=2.638F;
    public static double dFld=0.120567;
    public static int iFld=10;
    public static short sFld=19798;
    public static volatile boolean bFld=false;
    public static int iFld1=2;
    public static double dArrFld[]=new double[N];
    public static short sArrFld[]=new short[N];
    public static float fArrFld[]=new float[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 58.105852);
        FuzzerUtils.init(Test.sArrFld, (short)-23879);
        FuzzerUtils.init(Test.fArrFld, -1.253F);
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2) {

        int i3=51989, i4=242, i5=33, i6=3, i7=-52868;
        boolean b=false;
        long l2=-124204996L;
        byte by=104;
        short s=7723;
        float f1=2.670F;

        for (i3 = 1; i3 < 206; i3++) {
            Test.instanceCount += i2;
            if (b) {
                if (b) {
                    for (i5 = i3; i5 < 8; i5++) {
                        b = b;
                        switch (((i5 % 5) * 5) + 114) {
                        case 129:
                        case 132:
                            for (l2 = 1; l2 < 1; ++l2) {
                                by += (byte)l2;
                                if (b) {
                                    if (b) continue;
                                    Test.instanceCount = i5;
                                    i7 += i7;
                                } else if (false) {
                                    i2 = i6;
                                    i2 += by;
                                } else {
                                    i4 = s;
                                }
                            }
                            break;
                        case 133:
                            f1 = (float)Test.dFld;
                        case 136:
                            i6 += (int)-3804362923L;
                            break;
                        case 134:
                            Test.dFld += i5;
                            break;
                        }
                    }
                } else {
                    Test.iFld = (int)l2;
                }
            } else if (b) {
                i6 += (i3 * s);
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + (b ? 1 : 0) + l2 + i7 + by + s + Float.floatToIntBits(f1);
    }

    public static int iMeth(long l1) {

        int i1=-36397, i8=-43353, i9=7, iArr[]=new int[N];

        FuzzerUtils.init(iArr, -245);

        i1 = 1;
        do {
            vMeth1(i1);
            iArr[i1 - 1] += (int)-175L;
            i8 = 1;
            do {
                iArr[i1 + 1] -= -57008;
                Test.iFld += (int)l1;
                Test.iFld = i1;
                Test.instanceCount += (64797 + (i8 * i8));
                Test.iFld *= i8;
                i9 = -46;
            } while (++i8 < 6);
            l1 = i9;
            i9 |= (int)l1;
            iArr[i1] += (int)-888104209L;
        } while (++i1 < 299);
        long meth_res = l1 + i1 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i) {

        double d1=-1.118151;
        float f=-6.111F;
        int i10=-13, i11=-3, i12=-238, i13=-47719;
        byte by1=-115, byArr[]=new byte[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(byArr, (byte)74);
        FuzzerUtils.init(lArr, -193L);

        d1 = i;
        byArr[(i >>> 1) % N] -= (byte)((lArr[(i >>> 1) % N] * (f + i)) * i);
        for (long l : lArr) {
            i >>= iMeth(-6106981768680078475L);
            switch (((Test.iFld >>> 1) % 10) + 28) {
            case 28:
                i *= -47941;
                Test.dArrFld[(Test.iFld >>> 1) % N] = Test.instanceCount;
                l -= -10;
                Test.dFld += i;
                break;
            case 29:
                for (i10 = 1; i10 < 4; i10++) {
                    for (i12 = 1; i12 < 2; i12++) {
                        Test.sArrFld[i10] -= (short)i;
                        Test.instanceCount += 10;
                        Test.instanceCount *= Test.iFld;
                    }
                    Test.sFld = (short)l;
                }
                break;
            case 30:
                l *= (long)d1;
                break;
            case 31:
                i11 = i12;
            case 32:
                by1 = (byte)i13;
            case 33:
                if (Test.bFld) break;
                break;
            case 34:
                lArr[(Test.iFld1 >>> 1) % N] += i13;
            case 35:
                Test.sFld %= (short)(i | 1);
                break;
            case 36:
                Test.fArrFld[(Test.iFld1 >>> 1) % N] += Test.instanceCount;
            case 37:
                Test.dFld = f;
            }
        }
        vMeth_check_sum += i + Double.doubleToLongBits(d1) + Float.floatToIntBits(f) + i10 + i11 + i12 + i13 + by1 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-1.35496;
        int i14=134, i15=-12, i16=-16254, i17=30260, i18=-10, i19=-20, i20=95, iArr1[]=new int[N];
        byte by2=-16;

        FuzzerUtils.init(iArr1, -206);

        fFld *= (float)d;
        vMeth(Test.iFld1);
        for (i14 = 6; 350 > i14; i14++) {
            Test.iFld |= Test.iFld;
            for (i16 = 4; i16 < 73; i16++) {
                i17 -= 26943;
                for (i18 = 1; i18 < 2; i18++) {
                    Test.instanceCount += i18;
                    iArr1[i18] -= Test.iFld;
                    Test.iFld1 >>= Test.iFld1;
                    switch (((i16 % 3) * 5) + 4) {
                    case 18:
                        switch ((i16 % 5) + 30) {
                        case 30:
                            Test.instanceCount = (long)d;
                            break;
                        case 31:
                            Test.iFld = (int)fFld;
                            Test.dArrFld = Test.dArrFld;
                            switch ((i18 % 2) + 123) {
                            case 123:
                                i17 += (((i18 * Test.iFld1) + i19) - i14);
                                break;
                            case 124:
                                Test.iFld1 *= i20;
                            }
                            fFld += Test.instanceCount;
                            break;
                        case 32:
                            Test.instanceCount += (((i18 * i17) + fFld) - i15);
                            i15 = i16;
                            i17 = (int)Test.instanceCount;
                            break;
                        case 33:
                            Test.iFld |= i15;
                            by2 = (byte)Test.iFld;
                            if (Test.bFld) continue;
                            i15 += (int)Test.instanceCount;
                            break;
                        case 34:
                            Test.dArrFld[i18 - 1] -= i19;
                            Test.iFld1 += i16;
                            Test.bArrFld[i18] = Test.bFld;
                            Test.fArrFld[i18 + 1] *= 11;
                            break;
                        default:
                            Test.instanceCount = i14;
                        }
                        break;
                    case 15:
                        Test.instanceCount <<= Test.iFld;
                    case 6:
                        i15 += (((i18 * i15) + by2) - i18);
                    }
                }
            }
        }

        FuzzerUtils.out.println("d i14 i15 = " + Double.doubleToLongBits(d) + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by2 = " + i19 + "," + i20 + "," + by2);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.dFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(Test.dFld));
        FuzzerUtils.out.println("Test.iFld Test.sFld Test.bFld = " + Test.iFld + "," + Test.sFld + "," + (Test.bFld ? 1
            : 0));
        FuzzerUtils.out.println("Test.iFld1 Test.dArrFld Test.sArrFld = " + Test.iFld1 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.sArrFld));
        FuzzerUtils.out.println("Test.fArrFld Test.bArrFld = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
