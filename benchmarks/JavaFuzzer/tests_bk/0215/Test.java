// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-34038L;
    public static volatile long lFld=-47503L;
    public int iArrFld[]=new int[N];
    public volatile long lArrFld[]=new long[N];
    public volatile int iArrFld1[]=new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth() {

        double d=-1.36451;
        int i2=-2, i3=51, i4=85, i5=-11, i6=53, iArr[]=new int[N];
        float f1=0.226F, fArr[]=new float[N];
        boolean b=false;

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(fArr, 26.244F);

        d = i2;
        iArr[(i2 >>> 1) % N] |= i2;
        i3 = i2;
        i2 = i3;
        i4 = 1;
        do {
            if (b) {
                i5 = 1;
                while (++i5 < 6) {
                    i2 = 88;
                    if (b) {
                        i6 = 1;
                        do {
                            i3 -= i4;
                            i3 += (((i6 * i6) + i6) - Test.instanceCount);
                            Test.instanceCount = (long)f1;
                            i3 %= (int)(i3 | 1);
                            fArr = fArr;
                        } while ((i6 -= 3) > 0);
                    } else {
                        i2 += (int)f1;
                    }
                }
            }
        } while (++i4 < 277);
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(float f) {

        int i7=9, i8=-130, i9=-54179, i10=-1, i11=254, i12=144, i13=-3651, iArr1[]=new int[N];

        FuzzerUtils.init(iArr1, 11);

        f += (float)dMeth();
        Test.instanceCount += i7;
        switch ((((i7 >>> 1) % 2) * 5) + 119) {
        case 127:
        case 125:
            f = Test.instanceCount;
            i7 *= i7;
            break;
        }
        for (i8 = 18; 311 > i8; ++i8) {
            for (i10 = 1; i10 < 6; ++i10) {
                i7 = i11;
            }
            Test.instanceCount += (long)16.102F;
            i9 |= (int)Test.instanceCount;
            iArr1[i8 + 1] >>>= i10;
            Test.instanceCount += (-2 + (i8 * i8));
            for (i12 = 1; i12 < 6; ++i12) {
                try {
                    i11 = (i12 / iArr1[i8]);
                    i9 = (i11 / i13);
                    iArr1[i12] = (42418 % i12);
                } catch (ArithmeticException a_e) {}
                Test.instanceCount += (141 + (i12 * i12));
            }
        }
        long meth_res = Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i1) {

        float f2=60.881F;
        double d1=124.41375;

        lMeth(f2);
        d1 += Test.instanceCount;
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i=-57677, i14=239, i15=10, i16=-28560, i17=-5, i18=-3, i19=-7, i20=234, i21=59474, i22=-11, i23=2;
        long l=44639L;
        float f3=-44.150F;
        short s=18905;
        double d2=34.74124;
        boolean b1=false;

        iArrFld[(i >>> 1) % N] = (Math.min(Math.min(i, i), (int)(i - l)) - (i--));
        i -= -1684;
        for (int smallinvoc=0; smallinvoc<150; smallinvoc++) vSmallMeth(i);
        i = (int)l;
        i &= 239;
        for (i14 = 13; 354 > i14; ++i14) {
            for (i16 = 2; i16 < 74; i16 += 2) {
                lArrFld[i14] >>= i14;
                f3 = l;
                i17 += (((i16 * Test.instanceCount) + f3) - i16);
                l = -13345;
                i17 += (i16 | Test.instanceCount);
            }
            i15 += (i14 * i14);
            for (i18 = 2; i18 < 74; ++i18) {
                i = (int)Test.instanceCount;
                for (i20 = 1; i20 < 2; i20++) {
                    i15 += s;
                    i17 -= -10;
                    i15 = i;
                    i += (((i20 * i19) + Test.instanceCount) - f3);
                    f3 += (i20 * i16);
                    d2 = Test.lFld;
                }
                Test.instanceCount -= i20;
                for (i22 = 1; i22 < 2; i22++) {
                    i21 = i19;
                    iArrFld[i22] >>= i23;
                    i23 <<= i;
                    if (b1) {
                        f3 *= i15;
                        iArrFld1 = iArrFld1;
                    } else {
                        i += (((i22 * i22) + Test.lFld) - i14);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i l i14 = " + i + "," + l + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("f3 i18 i19 = " + Float.floatToIntBits(f3) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 s = " + i20 + "," + i21 + "," + s);
        FuzzerUtils.out.println("d2 i22 i23 = " + Double.doubleToLongBits(d2) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("b1 = " + (b1 ? 1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld iArrFld = " + Test.instanceCount + "," + Test.lFld + ","
            + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("lArrFld iArrFld1 = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
