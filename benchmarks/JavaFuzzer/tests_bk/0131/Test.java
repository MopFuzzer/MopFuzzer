// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-1099434399L;
    public static float fFld=104.952F;
    public static short sFld=-9249;
    public int iFld=61666;
    public double dFld=2.23228;
    public static int iArrFld[]=new int[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 6);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s, int i5, int i6) {

        int i7=28, i8=32603, i9=40000, i10=-22007, i11=2, i12=49903, i13=44769, i14=-7;
        double d=0.78898;

        for (i7 = 7; i7 < 307; i7++) {
            Test.iArrFld[i7 + 1] += (int)d;
            i8 = 12;
            i8 = i8;
        }
        for (i9 = 9; i9 < 263; i9++) {
            i5 += (i9 * Test.fFld);
            if (i5 != 0) {
                vMeth1_check_sum += s + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 +
                    i14;
                return;
            }
            for (i11 = 1; i11 < 6; i11++) {
                i12 += (((i11 * i5) + Test.instanceCount) - Test.instanceCount);
                i12 -= (int)Test.fFld;
                i6 = (int)-3354033232L;
                try {
                    i6 = (i5 / i5);
                    i10 = (599886847 / i7);
                    i6 = (i10 / i11);
                } catch (ArithmeticException a_e) {}
            }
            for (i13 = 1; i13 < 6; i13++) {
                Test.instanceCount += i13;
                Test.fFld -= i12;
            }
        }
        vMeth1_check_sum += s + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + i11 + i12 + i13 + i14;
    }

    public static int iMeth(long l, long l1, int i4) {

        int i15=-4, i16=-76, i17=50344;
        boolean b=false;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 8569798733524892574L);

        vMeth1(Test.sFld, -46300, i4);
        for (i15 = 16; i15 < 262; ++i15) {
            lArr[i15 - 1] <<= -3132898581L;
            if (b) {
                switch ((((i4 >>> 1) % 2) * 5) + 26) {
                case 35:
                    if (b) break;
                    Test.iArrFld[i15 - 1] = i4;
                    break;
                case 33:
                    Test.sFld += (short)i15;
                    break;
                default:
                    i4 += (((i15 * i16) + Test.instanceCount) - Test.instanceCount);
                    i4 += (((i15 * i15) + i16) - l);
                    i4 = (int)4431632724408537346L;
                    Test.iArrFld[i15] >>>= i4;
                }
            }
            i17 = 1;
            while (++i17 < 7) {
                byte by=32;
                l -= by;
                Test.instanceCount = 35515;
            }
        }
        long meth_res = l + l1 + i4 + i15 + i16 + (b ? 1 : 0) + i17 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2, int i3) {


        i2 = (iMeth(Test.instanceCount, Test.instanceCount, i3) * i2);
        vMeth_check_sum += i2 + i3;
    }

    public void mainTest(String[] strArr1) {

        int i=111, i1=38, i18=78, i19=224, i20=-37284, i21=12, i22=-6, i23=-9, i24=61523;
        boolean b1=false, bArr[]=new boolean[N];
        byte by2=-79;

        FuzzerUtils.init(bArr, true);

        for (i = 5; i < 219; ++i) {
            vMeth(iFld, i);
            i18 = 1;
            do {
                i1 -= 14;
            } while (++i18 < 117);
        }
        for (i19 = 182; i19 > 3; i19--) {
            if (b1) continue;
            iFld += (i19 | iFld);
            Test.instanceCount *= i20;
            i21 = 1;
            do {
                byte by1=-3;
                i20 += (((i21 * i20) + Test.instanceCount) - by1);
            } while ((i21 += 3) < 140);
            Test.iArrFld[i19] = (int)dFld;
            for (i22 = 1; 140 > i22; ++i22) {
                i20 += i1;
                bArr[i19] = false;
                Test.iArrFld[i22] += 44833;
                switch (((i22 % 6) * 5) + 88) {
                case 116:
                    i24 = 1;
                    do {
                        Test.instanceCount += (0 + (i24 * i24));
                        by2 += (byte)(i24 * i24);
                        switch (((i22 % 2) * 5) + 85) {
                        case 93:
                            try {
                                iFld = (1558 / Test.iArrFld[i22 - 1]);
                                i20 = (55371 / i18);
                                Test.iArrFld[i24 - 1] = (i18 % -107347514);
                            } catch (ArithmeticException a_e) {}
                            i23 %= (int)(Test.instanceCount | 1);
                            if (b1) continue;
                            lArrFld[i24] = i18;
                            break;
                        case 91:
                            i23 += (i24 * i24);
                            iFld -= (int)Test.instanceCount;
                            i1 >>>= i21;
                        default:
                            i20 = -69;
                            lArrFld[i22] += -2;
                            i1 *= i24;
                        }
                    } while (++i24 < 2);
                case 117:
                case 89:
                    b1 = false;
                    break;
                case 91:
                    i20 = i1;
                    break;
                case 94:
                    try {
                        i1 = (-173 % i19);
                        i20 = (i1 / iFld);
                        Test.iArrFld[i22] = (i19 / -255);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 93:
                    i1 = (int)Test.instanceCount;
                    break;
                default:
                    iFld -= i23;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("i19 i20 b1 = " + i19 + "," + i20 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 by2 bArr = " + i24 + "," + by2 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.sFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.sFld);
        FuzzerUtils.out.println("iFld dFld Test.iArrFld = " + iFld + "," + Double.doubleToLongBits(dFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
