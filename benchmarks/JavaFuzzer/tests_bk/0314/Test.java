// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:00 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public int iFld=-30044;
    public static byte byFld=-36;
    public static int iFld1=-10;
    public double dFld=0.28242;
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -249L);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1) {

        double d=14.10197, dArr[][]=new double[N][N];
        int i2=0, i3=-2, i4=-20, iArr[]=new int[N];
        float f=13.50F;

        FuzzerUtils.init(iArr, -117);
        FuzzerUtils.init(dArr, -91.54546);

        for (d = 6; d < 171; ++d) {
            f += (float)(((d * Test.byFld) + i1) - i1);
            iArr[(int)(d + 1)] = i2;
            iArr[(int)(d)] = (int)Test.instanceCount;
            Test.instanceCount -= Test.instanceCount;
            for (i3 = 10; i3 > 1; --i3) {
                Test.instanceCount += i3;
                switch ((i3 % 2) + 121) {
                case 121:
                    dArr[(int)(d)][i3 - 1] -= i2;
                    i4 += i3;
                    Test.instanceCount = i1;
                    break;
                case 122:
                    i1 = 54468;
                    iArr[i3 + 1] += -28148;
                }
                Test.instanceCount += (((i3 * i3) + Test.instanceCount) - i3);
                i2 = i4;
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d) + i2 + Float.floatToIntBits(f) + i3 + i4 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth() {

        int i5=1, i6=-32, i7=-13, i8=6, i9=-11, i10=-2, i11=-80, i12=-11, iArr1[]=new int[N];
        boolean b=true;
        long l=6429293757748685619L;
        float f1=-113.0F, fArr[][]=new float[N][N];

        FuzzerUtils.init(fArr, -1.271F);
        FuzzerUtils.init(iArr1, 4);

        vMeth1(181);
        i5 = 1;
        do {
            switch ((i5 % 7) + 61) {
            case 61:
            case 62:
                if (b) break;
                for (l = 6; l > 1; --l) {
                    Test.byFld = (byte)i5;
                }
                break;
            case 63:
                for (i7 = 1; i7 < 6; i7++) {
                    for (i9 = 1; i9 < 2; ++i9) {
                        Test.lArrFld[i5] *= i7;
                    }
                    try {
                        iFld = (i10 % 1592340846);
                        iFld = (i9 / i10);
                        i10 = (i9 % -82);
                    } catch (ArithmeticException a_e) {}
                    for (i11 = 1; 2 > i11; i11 += 3) {
                        iFld *= (int)f1;
                        i10 = (int)Test.instanceCount;
                        f1 *= f1;
                        Test.instanceCount += (long)f1;
                    }
                }
                break;
            case 64:
                i12 += (int)(-2L + (i5 * i5));
                break;
            case 65:
                Test.instanceCount += i5;
                break;
            case 66:
                fArr[i5][i5 + 1] = i6;
            case 67:
                iArr1[i5 + 1] >>= (int)l;
            }
        } while (++i5 < 254);
        vMeth_check_sum += i5 + (b ? 1 : 0) + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public double dMeth(int i) {


        vMeth();
        long meth_res = i;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=-13, i14=27898, i15=-3, i16=32382, i17=-31774, iArr2[]=new int[N];
        short s=-14105, sArr[]=new short[N];
        boolean b1=false;

        FuzzerUtils.init(sArr, (short)-22277);
        FuzzerUtils.init(iArr2, 13);

        Test.lArrFld[(iFld >>> 1) % N] -= (long)dMeth(iFld);
        iFld = iFld;
        i13 = 1;
        while (++i13 < 123) {
            Test.instanceCount += 29;
            Test.instanceCount = iFld;
            for (i14 = i13; i14 < 204; i14++) {
                i15 += (i14 + iFld);
                switch ((i14 % 3) + 30) {
                case 30:
                    i15 = s;
                    break;
                case 31:
                    i15 &= (int)Test.instanceCount;
                    for (i16 = 1; 1 > i16; ++i16) {
                        switch ((i13 % 2) + 71) {
                        case 71:
                            Test.iFld1 = (int)Test.instanceCount;
                            Test.lArrFld[i13] -= i15;
                            i17 -= s;
                        case 72:
                            Test.instanceCount = 1;
                            Test.byFld &= (byte)Test.instanceCount;
                            Test.iFld1 += (((i16 * Test.iFld1) + i14) - Test.instanceCount);
                            break;
                        }
                        dFld -= iFld;
                        if (b1) break;
                        Test.iFld1 = 6;
                        iFld -= i17;
                        i15 = (int)Test.instanceCount;
                        Test.instanceCount = -11L;
                        i15 *= 35;
                        iFld = Test.iFld1;
                    }
                    i17 >>= 50;
                    sArr[i13 - 1] += (short)iFld;
                    break;
                case 32:
                    Test.iFld1 += iFld;
                    iFld += i17;
                    break;
                default:
                    iArr2[(i16 >>> 1) % N] |= i13;
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("s i16 i17 = " + s + "," + i16 + "," + i17);
        FuzzerUtils.out.println("b1 sArr iArr2 = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.byFld = " + Test.instanceCount + "," + iFld + "," +
            Test.byFld);
        FuzzerUtils.out.println("Test.iFld1 dFld Test.lArrFld = " + Test.iFld1 + "," + Double.doubleToLongBits(dFld) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
