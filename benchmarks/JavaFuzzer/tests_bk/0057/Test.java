// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test {

    public static final int N = 400;

    public static long instanceCount=1561036887L;
    public static volatile short sFld=32009;
    public static int iFld=109;
    public long lArrFld[]=new long[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f2, int i7) {

        int i8=13, i9=-11, i10=35749, i11=-11, i12=-11645, i13=-10, i14=-8, i15=20051;
        double dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, -1.92299);
        FuzzerUtils.init(byArr, (byte)84);

        Test.instanceCount = i7;
        i7 -= Test.sFld;
        for (i8 = 176; 1 < i8; i8 -= 2) {
            dArr[i8] = i9;
            for (i10 = 1; i10 < 18; ++i10) {
                i11 += i10;
                i7 += i10;
                for (i12 = i10; i12 < 2; i12++) {
                    i11 *= (int)Test.instanceCount;
                    try {
                        i7 = (i8 % i12);
                        i11 = (-29837 / i8);
                        i7 = (i7 % -39961);
                    } catch (ArithmeticException a_e) {}
                    Test.instanceCount = i9;
                }
                byArr = byArr;
                i14 = 2;
                do {
                    i15 -= (int)Test.instanceCount;
                    i7 <<= (int)Test.instanceCount;
                } while ((i14 -= 3) > 0);
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f2) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth1(long l, int i6, float f1) {

        int i16=33721, i17=-20562, i18=-41830, iArr[]=new int[N];

        FuzzerUtils.init(iArr, 7);

        vMeth2(f1, i6);
        for (i16 = 12; i16 < 273; i16++) {
            byte by=91;
            i17 += (i16 - i6);
            by -= by;
            i6 = i6;
            Test.instanceCount += i6;
            l -= i16;
            i17 >>= i6;
            Test.instanceCount -= i16;
            l += i16;
            i18 = 6;
            do {
                i6 += (((i18 * l) + i17) - i6);
                i6 += (int)f1;
                iArr[i18 + 1] >>= i18;
                i17 = 64;
            } while (--i18 > 0);
        }
        vMeth1_check_sum += l + i6 + Float.floatToIntBits(f1) + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, int i1, int i2) {

        float f=7.331F, f3=0.538F;
        int i3=-7, i4=62504, i5=-3, i19=29829, iArr1[][]=new int[N][N];
        double d=56.110119;

        FuzzerUtils.init(iArr1, 83);

        for (f = 15; 345 > f; f++) {
            for (i4 = 5; i4 > 1; --i4) {
                vMeth1(231L, 176, f);
                i1 = (int)Test.instanceCount;
                f3 *= i;
                switch ((int)(((f % 1) * 5) + 24)) {
                case 29:
                    for (d = 1; d < 2; ++d) {
                        i19 += (int)Test.instanceCount;
                        i3 += (int)d;
                    }
                    Test.instanceCount += (((i4 * i) + i5) - i1);
                    i1 += (i4 * i4);
                    i19 += (((i4 * i5) + i4) - i1);
                    break;
                }
                i2 = i1;
            }
        }
        iArr1[(i5 >>> 1) % N][(i4 >>> 1) % N] += i4;
        i1 >>= i;
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(d) + i19 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i20=-58, i21=25793, i23=33665, i24=417, i25=173, i26=6, i27=-170, i28=-9, i29=0, i30=0, iArr2[]=new int[N];
        float f4=1.306F;

        FuzzerUtils.init(iArr2, 225);

        vMeth(i20, i20, i20);
        i21 = 1;
        do {
            i20 = i20;
            iArr2[i21 + 1] = -88;
            i20 -= -113;
            for (i23 = i21; i23 < 101; i23++) {
                for (i25 = 1; i25 < 1; ++i25) {
                    Test.instanceCount = (long)f4;
                    i20 += i26;
                    iArr2[i21] = (int)Test.instanceCount;
                    Test.iFld >>= i21;
                    f4 += f4;
                    Test.instanceCount %= (Test.iFld | 1);
                    i24 = i20;
                    Test.instanceCount <<= i24;
                    Test.iFld >>= 27024;
                }
                for (i27 = 1; i27 < 1; i27++) {
                    f4 = Test.sFld;
                }
                lArrFld[i23] = i20;
                iArr2[i23] = (int)Test.instanceCount;
                i24 &= i28;
                for (i29 = 1; i29 > 1; i29 -= 3) {
                    Test.instanceCount += (i29 * i29);
                    i26 <<= i27;
                }
                i20 += (int)(4113122766L + (i23 * i23));
                i24 >>= 7;
                f4 *= i27;
                i28 = 20770;
            }
            i24 *= i27;
            lArrFld[i21] += -201;
        } while (++i21 < 249);

        FuzzerUtils.out.println("i20 i21 i23 = " + i20 + "," + i21 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("f4 i27 i28 = " + Float.floatToIntBits(f4) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 iArr2 = " + i29 + "," + i30 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld Test.iFld = " + Test.instanceCount + "," + Test.sFld +
            "," + Test.iFld);
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
