// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-12572L;
    public static double dFld=-1.52880;
    public float fFld=1.962F;
    public volatile short sFld=-11408;
    public byte byFld=-122;
    public boolean bFld=false;
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i3=-26553;

        i3 *= (int)Test.instanceCount;
        long meth_res = i3;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i2=-192, i4=143, i5=-167, i6=5, iArr1[]=new int[N];
        float f=0.512F;
        long l1=9L, lArr[][]=new long[N][N];
        boolean b=false;

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(lArr, -14347541L);

        i2 += (int)(Test.dFld = lMeth());
        for (f = 243; f > 15; f -= 3) {
            iArr1[(int)(f)] <<= i4;
            switch ((((i4 >>> 1) % 2) * 5) + 127) {
            case 135:
                i5 = 1;
                do {
                    iArr1[(int)(f)] += (int)Test.instanceCount;
                    for (l1 = 1; l1 < 1; ++l1) {
                        lArr[(int)(l1 + 1)][(int)(f)] = i5;
                        i2 = i5;
                        i6 -= (int)l1;
                        i6 >>= (int)Test.instanceCount;
                        Test.bArrFld[(int)(l1)] = b;
                        iArr1[(int)(l1 - 1)] *= i6;
                        iArr1[(int)(l1 + 1)] = i5;
                        iArr1[(int)(l1)] -= (int)f;
                    }
                } while (++i5 < 20);
            case 137:
                i6 = i5;
                break;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i4 + i5 + l1 + i6 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth(long l, int i1) {

        int i7=-176, i8=139, i9=7, i10=167, i11=0, i12=-151, i13=-205, iArr2[][]=new int[N][N];
        short s=5059;
        byte by=-37;

        FuzzerUtils.init(iArr2, 124);

        vMeth();
        for (i7 = 11; 252 > i7; i7++) {
            Test.dFld = l;
            i1 -= (int)Test.dFld;
            i8 -= s;
            i8 -= i8;
            for (i9 = 1; 7 > i9; i9 += 3) {
                for (i11 = 4; i11 > 1; i11--) {
                    i1 = i10;
                    iArr2[i7 + 1][i9 - 1] += 1;
                    if (i7 != 0) {
                    }
                    fFld *= i7;
                    i1 >>>= i12;
                    l >>>= i7;
                    i13 *= by;
                }
            }
        }
        long meth_res = l + i1 + i7 + i8 + s + i9 + i10 + i11 + i12 + i13 + by + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14, i14=-77, i15=129, i16=-169, i17=10, i18=-13, i19=-5, i20=-13, i21=-221, i22=-4, iArr[]=new int[N],
            iArr3[][]=new int[N][N];
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 159);
        FuzzerUtils.init(iArr3, -185);
        FuzzerUtils.init(lArr1, 65010L);

        iArr[(i >>> 1) % N] ^= iMeth(3229153799566218684L, i);
        i14 = 1;
        do {
            sFld <<= byFld;
            Test.instanceCount *= i;
            i15 = 1;
            while (++i15 < 172) {
                if (bFld) {
                    i16 <<= (int)Test.instanceCount;
                    sFld >>>= (short)i16;
                } else if (bFld) {
                    i17 = 1;
                    do {
                        try {
                            i = (i / 178318595);
                            i16 = (151 % i14);
                            i = (i16 % i17);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount = 144;
                        i /= (int)((long)(Test.dFld) | 1);
                    } while (++i17 < 1);
                    if (bFld) continue;
                    if (false) {
                        i18 = (int)Test.instanceCount;
                    } else if (bFld) {
                        i += (((i15 * i16) + i15) - Test.instanceCount);
                    } else if (bFld) {
                        i16 += (i15 - fFld);
                        Test.dFld = i14;
                        switch (((i18 >>> 1) % 9) + 2) {
                        case 2:
                            switch ((i14 % 7) + 89) {
                            case 89:
                                fFld += (i15 * i15);
                                for (i19 = 1; i19 < 1; i19++) {
                                    Test.instanceCount -= i;
                                }
                                break;
                            case 90:
                                i += i15;
                                break;
                            case 91:
                                iArr[i14] ^= i20;
                                i21 = 1;
                                do {
                                    Test.dFld *= i22;
                                    i22 += (((i21 * i19) + i14) - i18);
                                    iArr3 = iArr3;
                                    i <<= -50169;
                                } while (++i21 < 1);
                            case 92:
                                i18 += i15;
                                break;
                            case 93:
                                Test.instanceCount = (long)1.117623;
                                break;
                            case 94:
                                i += i20;
                            case 95:
                                i20 *= (int)Test.dFld;
                            default:
                                byFld *= (byte)sFld;
                            }
                            break;
                        case 3:
                            if (true) break;
                            break;
                        case 4:
                            lArr1 = lArr1;
                            break;
                        case 5:
                            i += -244;
                        case 6:
                            lArr1[i14] = i20;
                            break;
                        case 7:
                            Test.instanceCount -= i17;
                            break;
                        case 8:
                            iArr[i14 + 1] += i;
                        case 9:
                            i22 = i17;
                            break;
                        case 10:
                            Test.instanceCount += (i15 + i19);
                            break;
                        }
                    }
                } else {
                    i16 += i15;
                }
            }
        } while (++i14 < 146);

        FuzzerUtils.out.println("i i14 i15 = " + i + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 iArr iArr3 = " + i22 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("sFld byFld bFld = " + sFld + "," + byFld + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.bArrFld = " + FuzzerUtils.checkSum(Test.bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
