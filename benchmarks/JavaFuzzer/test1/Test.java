// Generated by Java* Fuzzer test generator (1.0.001). Tue Aug 16 19:27:00 2022
public class Test {
    private static final Object lock = new Object();

    public static final int N = 400;

    public static long instanceCount = -82243709L;
    public static int iFld = 3;
    public static volatile int[][] iArrFld = new int[N][N];
    public static long[][] lArrFld = new long[N][N];
    public volatile double dFld = 0.73157;
    public int[] iArrFld1 = new int[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -13708);
        FuzzerUtils.init(Test.lArrFld, 131L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(float f1, int i9) {

        int i10=-33, i11=5, i12=118, i13=-247, i14=-46779;
        double d=84.28860;
        short s=-6496;
        byte by1=-60;
        long lArr[]=new long[N];
        float fArr[][]=new float[N][N];

        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(fArr, 73.1017F);

        i10 = 1;
        do {
            switch ((i10 % 6) + 68) {
            case 68:
                i9 = 21976;
                break;
            case 69:
                for (i11 = 1; i11 < 13; i11 += 3) {
                    i9 *= (int)d;
                    i9 = (int)f1;
                    for (i13 = 1; i13 < 4; i13++) {
                        i9 = i9;
                        Test.instanceCount += i14;
                        d = -7;
                        Test.instanceCount -= i10;
                        lArr[i10 - 1] <<= -19920;
                    }
                    fArr[i10 - 1][i10] -= i13;
                    s >>>= (short)i11;
                    by1 ^= (byte)i9;
                }
            case 70:
                Test.iArrFld[(i12 >>> 1) % N] = Test.iArrFld[i10 + 1];
            case 71:
                i9 += (int)Test.instanceCount;
                break;
            case 72:
                f1 += Test.instanceCount;
                break;
            case 73:
                i12 += i11;
                break;
            }
        } while (++i10 < 123);
        long meth_res = Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 + s +
            by1 + FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i7, int i8, long l2) {

        float f2=-66.394F;
        double d1=0.25313;
        int i15=-61609, i16=60098, i17=210, i18=-61364;
        byte by2=-73;
        boolean b=true;

        l2 = iMeth(f2, i8);
        i7 = (int)d1;
        for (i15 = 5; i15 < 138; i15 += 3) {
            i16 = by2;
            l2 = i16;
            if (b) {
                if (true) {
                    Test.iArrFld[i15 + 1] = Test.iArrFld[i15 - 1];
                    Test.iArrFld[i15 + 1][i15] = (int)Test.instanceCount;
                } else {
                    if (b) {
                        for (i17 = 2; i17 < 35; i17++) {
                            Test.iArrFld[i15][i15 - 1] += i7;
                            i18 = i7;
                        }
                        i8 ^= (int)l2;
                        d1 *= i16;
                    } else {
                        i8 += i15;
                    }
                }
            } else if (b) {
                i16 *= (int)-8L;
            }
        }
        long meth_res = i7 + i8 + l2 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i15 + i16 + by2 + i17 +
            i18 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

     public void vMeth(int i, long l, int i1) {

         long l1 = -2L;
         int i2 = 2, i3 = 55593, i4 = 3, i5 = -65505, i6 = -46521;
         float f = -1.580F;
         byte by = 18;
         boolean b1 = true;

         for (l1 = 7; l1 < 124; l1++) {
             f += (i2++);
             if (b1) {
                if (b1) {
                    for (i3 = (int)(l1); 13 > i3; ++i3) {
                        Test.instanceCount += i3;
                        try {
                            i4 = (i / i2);
                            i4 = (-248 / i2);
                            i4 = (219 / i);
                        } catch (ArithmeticException a_e) {}
                        Test.instanceCount += (((i3 * i4) + Test.instanceCount) - i2);
                        for (i5 = 1; i5 > 1; i5 -= 3) {
                            Test.instanceCount = ((by - (i | i3)) + (lMeth(i4, i, l1) + by));
                            Test.instanceCount *= l;
                            Test.iArrFld[i5][i3 + 1] += i6;
                            i2 *= i5;
                            Test.lArrFld[(int)(l1)] = Test.lArrFld[(int)(l1)];
                            i6 *= 172;
                        }
                    }
                } else if (b1) {
                    Test.iArrFld[(int)(l1 - 1)][(int)(l1 + 1)] = i6;
                } else {
                    i6 = by;
                    vMeth_check_sum += i + l + i1 + l1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + by + (b1 ?
                        1 : 0);
                    return;
                }
            }
        }
        vMeth_check_sum += i + l + i1 + l1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + by + (b1 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i19=-166, i20=243, i22=-102, i23=11, i24=180;
        short s1=19779;
        byte by3=-19;
        boolean b2=true;
        float f3=-2.446F;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, 0.113429);

        vMeth(Test.iFld, Test.instanceCount, Test.iFld);
        for (i19 = 12; i19 < 335; ++i19) {
            int i21=-2;
            switch ((i19 % 7) + 34) {
            case 34:
                Test.instanceCount += (((i19 * i21) + Test.instanceCount) - i21);
                for (i22 = 1; i22 < 78; ++i22) {
                    iArrFld1 = FuzzerUtils.int1array(N, (int)5);
                    i24 = 1;
                    while (++i24 < 2) {
                        Test.iFld += i24;
                        Test.iFld -= i24;
                        switch (((-6 >>> 1) % 1) + 90) {
                        case 90:
                            i23 ^= s1;
                            Test.iArrFld[i22][i24 - 1] *= i24;
                            Test.iFld = (int)Test.instanceCount;
                            break;
                        default:
                        }
                        switch (((i24 >>> 1) % 6) + 29) {
                        case 29:
                            by3 += (byte)-9939;
                            switch (((i19 % 7) * 5) + 117) {
                            case 137:
                                dArr = dArr;
                                Test.iFld = i21;
                            case 127:
                                switch (((i19 % 6) * 5) + 113) {
                                case 132:
                                    i23 += (i24 * Test.instanceCount);
                                    iArrFld1[i19] *= i21;
                                    if (b2) continue;
                                    switch (((i19 >>> 1) % 7) + 114) {
                                    case 114:
                                        i20 += (((i24 * Test.iFld) + i19) - f3);
                                        if (true) {
                                            Test.instanceCount += by3;
                                            Test.instanceCount = i24;
                                        } else if (b2) {
                                            f3 += (i24 * i24);
                                            i21 += (int)dFld;
                                        } else {
                                            Test.iArrFld[i24 - 1][i22 + 1] += i21;
                                        }
                                        break;
                                    case 115:
                                        Test.iArrFld[i22][i24 - 1] = i21;
                                    case 116:
                                        Test.lArrFld[i19][i19 + 1] -= s1;
                                        break;
                                    case 117:
                                        Test.iArrFld[(i24 >>> 1) % N][i19 - 1] >>= i21;
                                    case 118:
                                        Test.instanceCount = i22;
                                    case 119:
                                        s1 -= (short)i19;
                                        break;
                                    case 120:
                                        i21 += (int)f3;
                                        break;
                                    }
                                    break;
                                case 139:
                                    Test.lArrFld[i24][i19] = -10;
                                    break;
                                case 117:
                                    dFld -= f3;
                                    break;
                                case 115:
                                case 129:
                                    b2 = b2;
                                    break;
                                case 124:
                                    if (b2) continue;
                                    break;
                                default:
                                    Test.instanceCount = i20;
                                }
                            case 135:
                                iArrFld1[i22 - 1] = Test.iFld;
                                break;
                            case 123:
                                i23 += (i24 ^ Test.instanceCount);
                                break;
                            case 134:
                                i21 += (i24 ^ i24);
                                break;
                            case 126:
                                if (b2) break;
                            case 149:
                                Test.instanceCount <<= i22;
                                break;
                            }
                            break;
                        case 30:
                            i21 ^= 10;
                            break;
                        case 31:
                            Test.instanceCount >>= i24;
                            break;
                        case 32:
                            f3 -= f3;
                            break;
                        case 33:
                            f3 -= i22;
                            break;
                        case 34:
                            i20 >>>= i24;
                            break;
                        }
                    }
                }
                break;
            case 35:
                f3 = Test.instanceCount;
            case 36:
                Test.instanceCount += (54L + (i19 * i19));
            case 37:
                if (b2) continue;
            case 38:
                s1 += (short)(((i19 * i24) + i19) - i24);
                break;
            case 39:
                Test.iFld += s1;
                break;
            case 40:
                i21 += i19;
                break;
            }
        }

        FuzzerUtils.out.println("i19 i20 i22 = " + i19 + "," + i20 + "," + i22);
        FuzzerUtils.out.println("i23 i24 s1 = " + i23 + "," + i24 + "," + s1);
        FuzzerUtils.out.println("by3 b2 f3 = " + by3 + "," + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld dFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iArrFld Test.lArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
