// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:54 2023
public class Test0901 {

    public static final int N = 400;

    public static long instanceCount=-23L;
    public static int iFld=2;
    public static boolean bFld=true;
    public static volatile float fFld=-7.531F;
    public double dFld=-56.112745;
    public long lFld=-58170L;
    public long[] lArrFld =new long[N];
    public static float[][] fArrFld =new float[N][N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0901.fArrFld, -57.296F);
        FuzzerUtils.init(Test0901.iArrFld, 64498);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vSmallMeth(long l) {


        Test0901.iFld += Test0901.iFld;
        vSmallMeth_check_sum += l;
    }

    public static boolean bMeth() {

        int i7=14415, i8=30273, i9=33756, i10=11;
        double d=-101.11056;
        short s1=-13064;
        byte by=71;
        long[][] lArr1 =new long[N][N];

        FuzzerUtils.init(lArr1, -10L);

        switch (((Test0901.iFld >>> 1) % 6) + 31) {
        case 31:
            Test0901.iFld += (int) (Test0901.fArrFld[(Test0901.iFld >>> 1) % N][(Test0901.iFld >>> 1) % N]++);
            for (i7 = 12; i7 < 365; i7++) {
                vSmallMeth(Test0901.instanceCount);
                switch (((i7 % 9) * 5) + 74) {
                case 115:
                    for (i9 = i7; 5 > i9; ++i9) {
                        if (Test0901.bFld) continue;
                        i8 *= i8;
                        i10 = i8;
                        i8 = (int) Test0901.instanceCount;
                        d -= s1;
                        if (Test0901.bFld) {
                            Test0901.instanceCount += i8;
                        } else {
                            if (i10 != 0) {
                                return ((int)(i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + s1 + by +
                                    FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                            }
                            Test0901.instanceCount -= Test0901.instanceCount;
                        }
                    }
                case 94:
                    d = i8;
                    break;
                case 85:
                    i10 = (int) Test0901.instanceCount;
                    break;
                case 118:
                    i8 <<= s1;
                    break;
                case 84:
                    i10 += (((i7 * i8) + i8) - Test0901.iFld);
                    break;
                case 91:
                    by -= (byte)-1225041503012045224L;
                    break;
                case 99:
                    i8 <<= 30620;
                    break;
                case 75:
                    Test0901.iFld -= (int) Test0901.fFld;
                    break;
                case 106:
                    by -= (byte)i8;
                }
            }
        case 32:
            lArr1[(Test0901.iFld >>> 1) % N][(i8 >>> 1) % N] <<= i10;
            break;
        case 33:
            i10 = (int) Test0901.instanceCount;
        case 34:
            d -= -72.793F;
            break;
        case 35:
            Test0901.fFld += Test0901.fFld;
            break;
        case 36:
            Test0901.iFld *= Test0901.iFld;
            break;
        }
        long meth_res = i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + s1 + by + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i, int i1, long l1) {

        int i2=-43080;
        int i3=38263;
        int i4=4;
        int i5=157;
        int i6=4;
        int[] iArr =new int[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -39L);
        FuzzerUtils.init(iArr, -11);

        Test0901.iFld = (int) (-(-(--Test0901.instanceCount)));
        for (i2 = 1; 206 > i2; i2++) {
            i4 = 1;
            while (++i4 < 8) {
                Test0901.instanceCount -= (l1 + i3);
                for (i5 = i2; i5 < 1; ++i5) {
                    short s=-27033;
                    i += (i5 - i5);
                    i6 -= (int) ((-(Test0901.instanceCount - s)) - Integer.reverseBytes((int) (i -= (int) 6L)));
                    Test0901.instanceCount <<= (Test0901.instanceCount - Short.reverseBytes((short) (i4 + l1)));
                    i3 = (int)lArr[i5 - 1];
                    iArr[i2 + 1] >>= i5;
                }
                i = iArr[i4 - 1];
                bMeth();
                Test0901.fFld = Test0901.iFld;
                Test0901.fFld -= 5;
                i1 += (i4 * i4);
            }
        }
        long meth_res = i + i1 + l1 + i2 + i3 + i4 + i5 + i6 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i11=1, i12=14, i13=217, i14=-112, i15=225, i16=-122, i17=108, i18=43504, i19=37178, i20=-3183;
        byte by1=95;

        for (int smallinvoc = 0; smallinvoc < 178; smallinvoc++) vSmallMeth(lArrFld[(Test0901.iFld >>> 1) % N]--);
        Test0901.instanceCount *= iMeth(Test0901.iFld, Test0901.iFld, 80L);
        Test0901.iFld = Test0901.iFld;
        for (i11 = 165; i11 > 9; i11--) {
            Test0901.iArrFld[i11] -= i11;
            Test0901.iFld |= Test0901.iFld;
            Test0901.instanceCount ^= Test0901.instanceCount;
        }
        for (i13 = 22; i13 < 386; i13++) {
            i12 ^= i13;
            Test0901.instanceCount = 14777L;
            i12 >>>= i11;
        }
        for (i15 = 5; 175 > i15; ++i15) {
            for (i17 = 8; i17 < 148; i17++) {
                i14 /= (int) (Test0901.iFld | 1);
                lArrFld[i15 + 1] = i14;
                Test0901.fFld += Test0901.instanceCount;
                try {
                    i18 = (24116 % i11);
                    i12 = (-223 / i18);
                    i14 = (i11 / Test0901.iArrFld[i15 - 1]);
                } catch (ArithmeticException a_e) {}
                i18 += (int)(-150L + (i17 * i17));
            }
        }
        for (i19 = 2; 215 > i19; i19++) {
            if (Test0901.bFld) continue;
            Test0901.bFld = Test0901.bFld;
            try {
                i14 = (i17 % -242);
                Test0901.iArrFld[i19] = (i14 / 212);
                i20 = (-1929916076 / i12);
            } catch (ArithmeticException a_e) {}
            i12 += by1;
            Test0901.iArrFld[i19] += (int) dFld;
            i14 = (int)lFld;
        }
        i16 >>= i20;
        dFld += i13;
        Test0901.instanceCount >>= lFld;
        dFld -= Test0901.iFld;
        Test0901.instanceCount = 19637;

        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 by1 = " + i20 + "," + by1);

        FuzzerUtils.out.println("Test0901.instanceCount Test0901.iFld Test0901.bFld = " + Test0901.instanceCount + "," + Test0901.iFld +
                "," + (Test0901.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0901.fFld dFld lFld = " + Float.floatToIntBits(Test0901.fFld) + "," +
            Double.doubleToLongBits(dFld) + "," + lFld);
        FuzzerUtils.out.println("lArrFld Test0901.fArrFld Test0901.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0901.fArrFld)) + "," + FuzzerUtils.checkSum(Test0901.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0901 _instance = new Test0901();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test bMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  bMeth ->  bMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
