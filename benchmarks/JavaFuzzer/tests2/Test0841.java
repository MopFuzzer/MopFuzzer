// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:51 2023
public class Test0841 {

    public static final int N = 400;

    public static long instanceCount=7905L;
    public static int iFld=39;
    public static int iFld1=-1;
    public static float fFld=-126.950F;
    public byte byFld=77;
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];
    public static int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0841.dArrFld, 32.125075);
        FuzzerUtils.init(Test0841.iArrFld, -61823);
        FuzzerUtils.init(Test0841.iArrFld1, 18885);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static void vMeth(int i, long l, int i1) {

        short s=-28203;

        s = (short)(--l);
        vMeth_check_sum += i + l + i1 + s;
    }

    public static int iMeth2() {

        int i7=4832, i8=64411, i9=3, i10=-168, i11=-46118, i12=9590, i13=9;
        byte by=91;
        double d2=-87.119995;
        long l1=-14L;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -4072282229261497520L);

        for (i7 = 7; i7 < 252; i7++) {
            Test0841.iFld = i8;
            i8 = (int) Test0841.instanceCount;
            for (i9 = 1; i9 < 7; ++i9) {
                for (i11 = 1; i11 < 2; i11++) {
                    by = (byte)-10623;
                }
                Test0841.instanceCount += 27634;
                i10 <<= by;
                Test0841.instanceCount = Test0841.iFld;
                d2 = i10;
                lArr[i7 - 1] *= i13;
                switch (((i9 % 2) * 5) + 31) {
                case 32:
                    Test0841.iArrFld[i9 + 1] += (int) l1;
                    break;
                case 39:
                    Test0841.iArrFld = Test0841.iArrFld;
                    Test0841.iFld += (i9 * i9);
                    break;
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + i11 + i12 + by + Double.doubleToLongBits(d2) + i13 + l1 +
            FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        double d1=-61.526;

        Test0841.instanceCount *= (long) ((--Test0841.fFld) + d1);
        Test0841.instanceCount = iMeth2();
        long meth_res = Double.doubleToLongBits(d1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4) {

        int i5=40696, i6=-95, i14=-1, i15=-32785;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)119);

        for (i5 = 1; i5 < 134; ++i5) {
            vMeth(iMeth1(), Test0841.instanceCount, i6);
            switch (((i5 % 4) * 5) + 82) {
            case 100:
                switch (((i5 >>> 1) % 2) + 114) {
                case 114:
                    for (i14 = 1; i14 < 12; i14++) {
                        Test0841.instanceCount &= i6;
                        Test0841.iArrFld[i5] >>= i4;
                        i15 = 45760;
                    }
                    if (i14 != 0) {
                    }
                case 115:
                    Test0841.iFld1 >>= (int) Test0841.instanceCount;
                    i6 *= (int)1.847F;
                    break;
                }
                break;
            case 96:
                i4 = (int) Test0841.instanceCount;
                i15 -= i5;
                if (i6 != 0) {
                }
                Test0841.instanceCount += (((i5 * i4) + Test0841.fFld) - i5);
                break;
            case 97:
                i15 = (int) Test0841.instanceCount;
            case 89:
                Test0841.iFld += -2128;
            }
        }
        long meth_res = i4 + i5 + i6 + i14 + i15 + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i2=-185;
        int i3=11057;
        int i16=59222;
        int i17=-4;
        int i18=-116;
        int i19=-14;
        int i20=36411;
        int[] iArr =new int[N];
        double d=1.14264;
        long l3=560L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, -249);
        FuzzerUtils.init(lArr1, -25L);

        Test0841.iFld += (Test0841.iFld++);
        vMeth(--Test0841.iFld, (long) ((++Test0841.dArrFld[(Test0841.iFld >>> 1) % N]) % (((++Test0841.iFld) << (Test0841.iFld >>
                Test0841.iFld)) | 1)), (int) ((Test0841.instanceCount--) + (Math.min(Test0841.iFld, Test0841.iFld) *
                (Test0841.instanceCount++))));
        Test0841.iFld1 = -14;
        i2 = 1;
        while (++i2 < 317) {
            d -= (Test0841.iFld1++);
            iArr[i2] <<= (int) (Test0841.fFld + ((long) (i3 * d) & iMeth(-2)));
        }
        try {
            Test0841.iArrFld[(Test0841.iFld >>> 1) % N] = Test0841.iFld;
        }
        catch (NegativeArraySizeException exc1) {
            i16 = 1;
            while (++i16 < 398) {
                for (i17 = 3; i17 < 63; i17++) {
                    Test0841.instanceCount = i17;
                    i19 = 1;
                    do {
                        long l2=-2889640003572299528L;
                        l2 += i19;
                        l2 += Test0841.instanceCount;
                        Test0841.iFld += 34;
                        Test0841.fFld += (i19 * i19);
                        Test0841.iFld1 = (int) Test0841.fFld;
                        lArr1[i16] = -3;
                        byFld += (byte)l2;
                        Test0841.fFld *= l2;
                        Test0841.iFld1 += (i19 ^ i16);
                    } while (++i19 < 2);
                    Test0841.iArrFld[i16] += byFld;
                    for (l3 = 1; l3 < 2; l3++) {
                        Test0841.iFld += (6392 + (l3 * l3));
                        Test0841.fFld = i16;
                        iArr = FuzzerUtils.int1array(N, (int)25);
                        Test0841.iArrFld[i16] = i18;
                        i3 = Test0841.iFld1;
                        Test0841.iArrFld1[(int) (l3 - 1)] += i20;
                        Test0841.iFld1 >>= i18;
                    }
                }
            }
        }
        finally {
            lArr1[(33 >>> 1) % N] &= byFld;
        }

        FuzzerUtils.out.println("i2 d i3 = " + i2 + "," + Double.doubleToLongBits(d) + "," + i3);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 l3 i20 = " + i19 + "," + l3 + "," + i20);
        FuzzerUtils.out.println("iArr lArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0841.instanceCount Test0841.iFld Test0841.iFld1 = " + Test0841.instanceCount + "," + Test0841.iFld +
                "," + Test0841.iFld1);
        FuzzerUtils.out.println("Test0841.fFld byFld Test0841.dArrFld = " + Float.floatToIntBits(Test0841.fFld) + "," + byFld + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0841.dArrFld)));
        FuzzerUtils.out.println("Test0841.iArrFld Test0841.iArrFld1 = " + FuzzerUtils.checkSum(Test0841.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0841.iArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0841 _instance = new Test0841();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
