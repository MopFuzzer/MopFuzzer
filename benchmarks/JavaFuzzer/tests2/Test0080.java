// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0080 {

    public static final int N = 400;

    public static long instanceCount=-13L;
    public float fFld=-2.209F;
    public static boolean bFld=true;
    public static double dFld=81.72444;
    public static short sFld=7852;
    public int[] iArrFld =new int[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0080.dArrFld, 121.12881);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6, float f1) {

        int i7=42338;
        int i8=43604;
        int i9=-10499;
        int i10=-10729;
        int[] iArr =new int[N];
        double d1=-1.59380;
        short s=-24442;
        long l1=-3306503833L;

        FuzzerUtils.init(iArr, -6);

        for (i7 = 7; i7 < 152; ++i7) {
            Test0080.instanceCount -= (long) d1;
            f1 *= s;
            i8 += i8;
            i8 >>= i6;
        }
        i9 = 1;
        while (++i9 < 271) {
            i6 *= i9;
        }
        f1 = s;
        iArr[(5 >>> 1) % N] -= i9;
        Test0080.instanceCount >>>= i7;
        l1 = 180;
        do {
            i8 *= (int)d1;
            i10 = 1;
            while (++i10 < 9) {
                f1 += i8;
                i8 *= s;
            }
        } while (--l1 > 0);
        long meth_res = i6 + Float.floatToIntBits(f1) + i7 + i8 + Double.doubleToLongBits(d1) + s + i9 + l1 + i10 +
            FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, float f, long l) {

        double d2=-2.58577;
        int i11=-65;
        int i12=-87;
        int i13=162;
        int i14=-9;
        int i15=-239;
        int i16=132;
        int i17=7;
        int[] iArr1 =new int[N];
        byte by=55;
        boolean b=true;
        boolean[][] bArr =new boolean[N][N];
        long[] lArr =new long[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr1, -37543);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 4657820096378099191L);
        FuzzerUtils.init(sArr, (short)18054);

        lMeth(i5, f);
        i5 -= (int)45.341F;
        d2 -= -7062;
        i11 = 1;
        while (++i11 < 174) {
            i5 |= (int) Test0080.instanceCount;
            Test0080.instanceCount = l;
        }
        for (i12 = 165; i12 > 7; i12--) {
            if (false) {
                d2 = by;
                iArr1[i12] = i12;
                for (i14 = 1; i14 < 10; ++i14) {
                    for (i16 = 1; i16 < 2; ++i16) {
                        f += i12;
                        l += i11;
                        bArr[i14 - 1][i14 - 1] = b;
                    }
                }
            } else {
                sArr[i12 - 1] -= (short)9231;
            }
        }
        vMeth1_check_sum += i5 + Float.floatToIntBits(f) + l + Double.doubleToLongBits(d2) + i11 + i12 + i13 + by + i14
            + i15 + i16 + i17 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(int i, int i1, double d) {

        int i2=-7, i3=59448, i4=14;
        float f2=0.8F;
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(dArr, 0.86165);

        i2 = 1;
        while (++i2 < 154) {
            for (i3 = 1; 10 > i3; i3++) {
                Test0080.instanceCount *= -3;
                fFld += iArrFld[i3];
                vMeth1(i3, fFld, Test0080.instanceCount);
                fFld = (float)2.124207;
                Test0080.instanceCount += (long) d;
                switch ((i3 % 2) + 37) {
                case 37:
                    f2 = 1;
                    do {
                        fFld = i1;
                        if (Test0080.bFld) {
                            iArrFld[i3 + 1] = i;
                            if (Test0080.bFld) continue;
                            i1 += (int)(f2 - i2);
                        } else if (Test0080.bFld) {
                            fFld = Test0080.instanceCount;
                        } else {
                            i1 -= i3;
                        }
                    } while (++f2 < 2);
                    break;
                case 38:
                    dArr[i2 + 1][i2] = 8L;
                default:
                    fFld -= i3;
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=-206, i19=11, i20=46561, i21=11, i22=-12;
        double d3=115.48324;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.510F);

        vMeth(i18, i18, Test0080.dFld);
        i18 *= 13;
        i19 = 1;
        do {
            byte by1=72;
            i18 += i19;
            iArrFld[i19 - 1] -= (int) Test0080.instanceCount;
            by1 -= (byte)i18;
            Test0080.instanceCount >>= by1;
            i18 += (i19 * i18);
            if (false) continue;
            switch ((i19 % 1) + 72) {
            case 72:
                if (Test0080.bFld) continue;
                break;
            }
            Test0080.bFld = true;
            if (Test0080.bFld) {
                Test0080.dFld += Test0080.sFld;
                Test0080.dFld *= Test0080.instanceCount;
                for (i20 = 1; i20 < 113; i20++) {
                    i21 += (53228 + (i20 * i20));
                    switch ((i19 % 6) + 10) {
                    case 10:
                        try {
                            i18 = (-138 / i21);
                            i21 = (i19 / i18);
                            i21 = (-38989 / i19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 11:
                        if (Test0080.bFld) break;
                        Test0080.instanceCount = i19;
                        d3 = 1;
                        do {
                            fArr[i19] -= by1;
                            i21 = i19;
                            i21 += i19;
                            Test0080.dArrFld = FuzzerUtils.double1array(N, (double) 0.90252);
                        } while (++d3 < 2);
                        break;
                    case 12:
                        i18 += (((i20 * i19) + i20) - Test0080.instanceCount);
                        i22 = 1;
                        while (++i22 < 2) {
                            iArrFld = iArrFld;
                            i21 <<= i18;
                        }
                    case 13:
                        i21 = (int)fFld;
                    case 14:
                    case 15:
                        Test0080.instanceCount = i19;
                    }
                }
            } else {
                Test0080.dArrFld[i19] = i18;
            }
        } while (++i19 < 222);

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 d3 i22 = " + i21 + "," + Double.doubleToLongBits(d3) + "," + i22);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0080.instanceCount fFld Test0080.bFld = " + Test0080.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + (Test0080.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0080.dFld Test0080.sFld iArrFld = " + Double.doubleToLongBits(Test0080.dFld) + "," + Test0080.sFld
            + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0080.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0080.dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0080 _instance = new Test0080();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
