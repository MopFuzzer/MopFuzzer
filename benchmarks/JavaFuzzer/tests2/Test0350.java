// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:28 2023
public class Test0350 {

    public static final int N = 400;

    public static volatile long instanceCount=-3570005190L;
    public static float fFld=-2.687F;
    public static boolean bFld=true;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0350.iArrFld, -39);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i5, int i6, int i7) {

        double d1=-6.86566;
        int i8=5, i9=26560, i10=82, i11=198;
        byte by1=75;
        boolean b=false;

        switch (((i6 >>> 1) % 1) + 101) {
        case 101:
            d1 += i5;
            break;
        }
        i8 = 1;
        while (++i8 < 168) {
            Test0350.iArrFld[i8 + 1] -= by1;
            i5 -= i5;
            Test0350.instanceCount &= i5;
            i5 = (int) Test0350.instanceCount;
            i9 = 1;
            while (++i9 < 9) {
                for (i10 = 1; i10 < 1; i10++) {
                    Test0350.instanceCount += (((i10 * i9) + Test0350.fFld) - Test0350.instanceCount);
                    if (b) continue;
                    Test0350.fFld *= 0;
                    Test0350.instanceCount = i5;
                    i6 >>= (int) Test0350.instanceCount;
                    Test0350.instanceCount = i7;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + Double.doubleToLongBits(d1) + i8 + by1 + i9 + i10 + i11 + (b ? 1 : 0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(byte by, double d) {

        int i1=0, i2=41937, i3=181, i4=12;
        float f=-58.43F;
        long l1=197L;

        for (i1 = 12; i1 < 395; i1++) {
            for (i3 = 4; 1 < i3; i3--) {
                by += (byte)i3;
                f = fMeth(i1, i2, i1);
                f += (((i3 * i2) + i2) - i2);
                Test0350.fFld = i4;
                i2 += (((i3 * Test0350.instanceCount) + i4) - i2);
                i4 = (int)l1;
                i4 -= i1;
                d -= Test0350.instanceCount;
                switch ((i1 % 2) + 88) {
                case 88:
                    i4 |= i1;
                    Test0350.iArrFld[i1] = i4;
                    break;
                case 89:
                    Test0350.bFld = Test0350.bFld;
                    i2 = i2;
                    break;
                }
            }
        }
        vMeth1_check_sum += by + Double.doubleToLongBits(d) + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + l1;
    }

    public static void vMeth(long l) {

        double d2=0.113305, d3=52.51791;
        int i12=14, i13=-3236, i14=-16870, i15=63860, i16=14, i17=12, i18=-9843;
        float f1=-1.906F;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)15656);

        sArr[(-76 >>> 1) % N] = (short)39656;
        vMeth1((byte)(39), d2);
        Test0350.iArrFld[(i12 >>> 1) % N] = i12;
        for (i13 = 13; i13 < 284; i13++) {
            d2 += Test0350.fFld;
        }
        for (d3 = 7; 235 > d3; d3++) {
            for (i16 = 1; i16 < 7; ++i16) {
                Test0350.instanceCount = i12;
                Test0350.instanceCount *= i14;
                for (f1 = 1; f1 < 2; ++f1) {
                    i15 = i16;
                    Test0350.instanceCount += (long) (((f1 * i18) + i15) - i13);
                    if (Test0350.bFld) break;
                    Test0350.iArrFld[(int) (d3)] *= i18;
                }
                Test0350.fFld += l;
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d2) + i12 + i13 + i14 + Double.doubleToLongBits(d3) + i15 + i16
            + i17 + Float.floatToIntBits(f1) + i18 + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-9;
        int i20=-154;
        int i21=-58191;
        int i22=-37064;
        int i23=-58;
        int i24=-4;
        int i25=61342;
        int i26=213;
        int i27=9;
        int i28=-230;
        int i29=-66;
        int[] iArr =new int[N];
        double d4=-34.89383;
        short s=-17980;

        FuzzerUtils.init(iArr, 10);

        for (int i : iArr) {
            vMeth(Test0350.instanceCount);
            for (i19 = 1; i19 < 63; i19++) {
                for (i21 = 1; i21 < 2; ++i21) {
                    Test0350.instanceCount += (i21 * i21);
                }
                i22 += i19;
            }
            i ^= i22;
            iArr[(i19 >>> 1) % N] |= i21;
            for (i23 = 1; i23 < 63; ++i23) {
                i20 = i23;
                i = (int) Test0350.instanceCount;
                i24 = (int)-3862390837L;
            }
            i20 = (int)37461L;
            d4 = 63;
            while (--d4 > 0) {
                i20 = (int)-54L;
                i20 -= i23;
                Test0350.iArrFld[(int) (d4)] += (int) Test0350.instanceCount;
                i22 = i20;
            }
            i20 = i22;
            i24 = 17672;
            for (i25 = 1; i25 < 63; ++i25) {
                switch ((((i19 >>> 1) % 9) * 5) + 33) {
                case 42:
                    i20 >>= s;
                    break;
                case 66:
                    for (i27 = 1; i27 < 2; i27++) {
                        Test0350.fFld = i24;
                        try {
                            Test0350.iArrFld[i25] = (iArr[i27] % -52776);
                            i = (i22 % i22);
                            i20 = (307881299 / i26);
                        } catch (ArithmeticException a_e) {}
                        Test0350.instanceCount = i23;
                        i = i29;
                        i24 += (i27 ^ (long) Test0350.fFld);
                        Test0350.fFld += (((i27 * Test0350.fFld) + i26) - i26);
                    }
                    break;
                case 59:
                    Test0350.instanceCount += i25;
                    break;
                case 63:
                    iArr[i25] += -11;
                    break;
                case 55:
                    i28 += (((i25 * i25) + i28) - Test0350.instanceCount);
                    break;
                case 39:
                    Test0350.instanceCount <<= -223;
                    break;
                case 51:
                    Test0350.fFld += (-293117154496917059L + (i25 * i25));
                case 37:
                    i += (i25 * i25);
                    break;
                case 74:
                    i29 ^= (int) Test0350.instanceCount;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("d4 i25 i26 = " + Double.doubleToLongBits(d4) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("s i27 i28 = " + s + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 iArr = " + i29 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0350.instanceCount Test0350.fFld Test0350.bFld = " + Test0350.instanceCount + "," +
                Float.floatToIntBits(Test0350.fFld) + "," + (Test0350.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0350.iArrFld = " + FuzzerUtils.checkSum(Test0350.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0350 _instance = new Test0350();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
