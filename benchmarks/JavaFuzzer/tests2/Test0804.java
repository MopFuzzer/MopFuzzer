// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0804 {

    public static final int N = 400;

    public static long instanceCount=-318173083L;
    public static short sFld=13687;
    public static byte byFld=96;
    public static byte[] byArrFld =new byte[N];
    public static long[][] lArrFld =new long[N][N];
    public static int[] iArrFld =new int[N];
    public static long[] lArrFld1 =new long[N];

    static {
        FuzzerUtils.init(Test0804.byArrFld, (byte) -45);
        FuzzerUtils.init(Test0804.lArrFld, -2782300179L);
        FuzzerUtils.init(Test0804.iArrFld, 1);
        FuzzerUtils.init(Test0804.lArrFld1, 147L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l3) {

        int i12=2816, i13=5, i14=15112, i15=38744, i16=19;
        float f1=2.174F, f2=-126.719F;
        boolean b=false;

        i12 -= i12;
        i12 = i12;
        for (i13 = 320; i13 > 9; i13--) {
            Test0804.lArrFld[i13 + 1][(i12 >>> 1) % N] += i12;
            if (b) {
                f1 += l3;
            } else if (false) {
                Test0804.iArrFld[i13] += (int) 1.439F;
                f2 += (i13 - i12);
            } else if (true) {
                i14 += (-107 + (i13 * i13));
                b = b;
                for (i15 = 5; i15 > i13; i15 -= 2) {
                    l3 += (i15 * i16);
                    i14 >>= i15;
                    i14 -= (int)f2;
                    l3 = Test0804.sFld;
                }
            }
        }
        long meth_res = l3 + i12 + i13 + i14 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + (b ? 1 : 0) + i15
            + i16;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(long l) {

        float f=-94.773F;
        int i4=-13;
        int i5=-44095;
        int i6=-177;
        int i7=-2668;
        int i8=186;
        int i9=219;
        int i10=-182;
        int i11=-65452;
        int[] iArr =new int[N];
        int[][] iArr1 =new int[N][N];
        long l1=-1111259088L, l2=-1126556251L;
        double d=83.81867;
        byte by=-110;

        FuzzerUtils.init(iArr, -143);
        FuzzerUtils.init(iArr1, -113);

        f += i4;
        for (l1 = 11; l1 < 209; l1++) {
            int i17=47261;
            for (i6 = 1; i6 < 8; ++i6) {
                for (i8 = 2; i8 > i6; i8--) {
                    i4 += (i8 + l2);
                }
            }
            if (false) {
                switch ((((iArr[(int)(l1 + 1)] >>> 1) % 6) * 5) + 87) {
                case 110:
                    d -= (++l);
                    Test0804.instanceCount -= (Test0804.instanceCount++);
                    try {
                        i9 = (i5 / i6);
                        i9 = (i5 % 35528);
                        iArr[(int)(l1 - 1)] = (i6 / i7);
                    } catch (ArithmeticException a_e) {}
                    for (i10 = 1; i10 < 8; i10++) {
                        l2 += (i10 | Test0804.instanceCount);
                        i5 -= (int) ((--Test0804.byArrFld[(int) (l1 - 1)]) - (fMeth(l2) - -181));
                        Test0804.instanceCount += i10;
                        iArr1 = iArr1;
                    }
                    break;
                case 92:
                    if (i6 != 0) {
                    }
                case 105:
                    try {
                        i9 = (i11 / i4);
                        i9 = (i8 % -65);
                        i11 = (i6 / i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 99:
                    l2 += (((l1 * i4) + i11) - l1);
                    break;
                case 114:
                    i9 = i9;
                    break;
                case 106:
                    i9 *= by;
                    break;
                default:
                    try {
                        iArr[(int)(l1 - 1)] = (i10 / i7);
                        i7 = (i8 % iArr1[(int)(l1 - 1)][(int)(l1 - 1)]);
                        i17 = (i8 / 10);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f) + i4 + l1 + i5 + i6 + i7 + i8 + i9 + l2 +
            Double.doubleToLongBits(d) + i10 + i11 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i2=-74, i3=-14219, i18=-14, i19=-194, i20=-86;
        double d1=-48.118119;
        boolean b1=true;
        float f3=-2.237F;

        for (i2 = 6; i2 < 300; i2++) {
            Test0804.instanceCount = (iMeth(Test0804.instanceCount) & -8);
            if (true) {
                d1 = 1;
                while (++d1 < 6) {
                    Test0804.instanceCount -= i2;
                    i3 = i2;
                    Test0804.instanceCount = i1;
                    i3 = (int) Test0804.instanceCount;
                    b1 = b1;
                }
            }
        }
        f3 = -148;
        i1 = i1;
        i18 = 1;
        do {
            for (i19 = i18; i19 < 8; ++i19) {
                i1 = (int)d1;
                Test0804.byFld += (byte) (i19 - i18);
            }
        } while (++i18 < 210);
        vMeth_check_sum += i1 + i2 + i3 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + Float.floatToIntBits(f3) + i18 +
            i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        int i=59148;
        int i21=2;
        int i22=4;
        int i23=8;
        int i24=-21713;
        int i25=-167;
        int i26=18573;
        int i27=-58691;
        int i28=108;
        int i29=-35673;
        int i30=43;
        int i31=10;
        int[] iArr2 =new int[N];
        double d2=-1.10153, d3=2.87860;
        boolean b2=false;
        float f4=1.378F;

        FuzzerUtils.init(iArr2, 4354);

        i = 235;
        i += i;
        vMeth(i);
        for (d2 = 7; 320 > d2; ++d2) {
            for (i22 = 5; i22 < 80; i22++) {
                d3 -= i22;
                d3 -= Test0804.instanceCount;
            }
            try {
                i = (-34221 / i21);
                i23 = (33003 % i);
                Test0804.iArrFld[(int) (d2)] = (-1626249057 % i23);
            } catch (ArithmeticException a_e) {}
            for (i24 = 80; 5 < i24; i24--) {
                if (b2) continue;
                i23 = -10;
                i23 = i23;
                if (b2) break;
                for (i26 = 1; i26 < 2; i26 += 2) {
                    f4 += (i26 * i26);
                    f4 += (-14176 + (i26 * i26));
                    i *= i21;
                }
                i21 -= Test0804.sFld;
                d3 = i;
            }
            i23 += (int)((long)d2 ^ i25);
            Test0804.instanceCount += (long) d2;
            b2 = false;
            for (i28 = (int)(d2); i28 < 80; i28++) {
                i *= i26;
                for (i30 = (int)(d2); i30 < 1; i30++) {
                    i25 = i25;
                }
                i21 -= i30;
                Test0804.lArrFld[(int) (d2)][(int) (d2)] += i26;
                iArr2[i28 + 1] -= (int)-1L;
                i31 = i26;
            }
        }

        FuzzerUtils.out.println("i d2 i21 = " + i + "," + Double.doubleToLongBits(d2) + "," + i21);
        FuzzerUtils.out.println("i22 i23 d3 = " + i22 + "," + i23 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i24 i25 b2 = " + i24 + "," + i25 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i26 i27 f4 = " + i26 + "," + i27 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 iArr2 = " + i31 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0804.instanceCount Test0804.sFld Test0804.byFld = " + Test0804.instanceCount + "," + Test0804.sFld +
                "," + Test0804.byFld);
        FuzzerUtils.out.println("Test0804.byArrFld Test0804.lArrFld Test0804.iArrFld = " + FuzzerUtils.checkSum(Test0804.byArrFld) +
                "," + FuzzerUtils.checkSum(Test0804.lArrFld) + "," + FuzzerUtils.checkSum(Test0804.iArrFld));
        FuzzerUtils.out.println("Test0804.lArrFld1 = " + FuzzerUtils.checkSum(Test0804.lArrFld1));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0804 _instance = new Test0804();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
