// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0014 {

    public static final int N = 400;

    public static long instanceCount=253L;
    public short sFld=587;
    public static double dFld=53.115810;
    public static short sFld1=24405;
    public static float fFld=2.397F;
    public static long lFld=-56675L;
    public static volatile int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0014.iArrFld, 233);
        FuzzerUtils.init(Test0014.lArrFld, -38736L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4) {

        int i5=51137, i6=38187, i7=35009, i8=7, i9=-14, i10=6;
        float f=2.754F;
        boolean b=false;

        for (i5 = 13; 374 > i5; ++i5) {
            for (i7 = i5; 5 > i7; ++i7) {
                f += (i7 * i7);
                f = -1.414F;
                i8 += (i7 ^ i4);
                Test0014.instanceCount += Test0014.instanceCount;
                for (i9 = 1; i9 < 1; i9++) {
                    i4 = 8;
                    i4 = i6;
                    i6 <<= (int) Test0014.instanceCount;
                    Test0014.iArrFld[i9 + 1] = i6;
                    Test0014.dFld -= i7;
                    Test0014.instanceCount += -842410609328679751L;
                    i8 = 30068;
                }
                b = false;
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + i9 + i10 + (b ? 1 : 0);
    }

    public static void vMeth() {

        int i11=-1, i13=9, i14=65278, i15=30120, i16=-52, i17=-15, i18=178;
        boolean b1=true, b2=false;
        float f1=-68.337F;
        short s=14441;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -1.48167);

        vMeth1(i11);
        Test0014.iArrFld[(-5 >>> 1) % N] -= (int) Test0014.instanceCount;
        for (int i12 : Test0014.iArrFld) {
            for (i13 = 1; 4 > i13; ++i13) {
                if (b1) break;
            }
            if (b2) {
                Test0014.lArrFld[(i13 >>> 1) % N] -= i14;
                f1 += f1;
                for (i15 = 1; i15 < 4; ++i15) {
                    switch (((i12 >>> 1) % 3) + 67) {
                    case 67:
                        for (i17 = 1; i17 < 2; i17++) {
                            i18 -= i18;
                            i12 = i11;
                            try {
                                i12 = (Test0014.iArrFld[(i16 >>> 1) % N] % -17494);
                                Test0014.iArrFld[i17] = (i18 / i15);
                                Test0014.iArrFld[i17 + 1] = (-61962 / i11);
                            } catch (ArithmeticException a_e) {}
                            i12 >>= i15;
                        }
                        break;
                    case 68:
                        dArr[i15] = s;
                        break;
                    case 69:
                        f1 += i15;
                        break;
                    }
                }
            } else if (true) {
                f1 -= i17;
            } else if (b1) {
                i18 = -1;
                vMeth_check_sum += i11 + i13 + i14 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 +
                    s + (b2 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                return;
            } else {
                try {
                    i14 = (i16 % -34);
                    i12 = (-55197 / i13);
                    i12 = (i18 / -94);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i11 + i13 + i14 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + s + (b2
            ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth(int i3) {

        int i19=96, i20=13, i21=-14;
        boolean b3=true;
        byte by=48;

        vMeth();
        i3 <<= i3;
        i3 = -6262;
        for (i19 = 250; i19 > 14; --i19) {
            i20 = (int) Test0014.dFld;
            i20 += i20;
        }
        i3 -= (int) Test0014.dFld;
        i21 = 281;
        while (--i21 > 0) {
            if (b3) break;
        }
        Test0014.instanceCount *= Test0014.sFld1;
        Test0014.instanceCount &= -14;
        i3 -= -54;
        Test0014.fFld = Test0014.instanceCount;
        Test0014.instanceCount -= i21;
        by *= (byte) Test0014.fFld;
        long meth_res = i3 + i19 + i20 + i21 + (b3 ? 1 : 0) + by;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-43;
        int i1=202;
        int i2=130;
        int i22=22;
        int[] iArr =new int[N];
        byte by1=-93;
        boolean b4=false;
        boolean[] bArr =new boolean[N];
        double[][] dArr1 =new double[N][N];

        FuzzerUtils.init(iArr, -144);
        FuzzerUtils.init(dArr1, 98.33098);
        FuzzerUtils.init(bArr, true);

        i = 189;
        do {
            iArr[i + 1] += (int)(sFld + 0.847F);
            switch (((i % 1) * 5) + 28) {
            case 29:
                for (i1 = 5; i1 < 133; i1++) {
                    i2 <<= i2;
                    switch (((iMeth(i1) >>> 1) % 1) + 2) {
                    case 2:
                        i22 = 1;
                        do {
                            switch ((i % 5) + 20) {
                            case 20:
                                switch (((i1 % 6) * 5) + 77) {
                                case 107:
                                    Test0014.lArrFld[i1] += Test0014.instanceCount;
                                    i2 += i22;
                                    break;
                                case 100:
                                    by1 = (byte)i1;
                                    i2 += (i22 * sFld);
                                    if (b4) continue;
                                    i2 *= i22;
                                    break;
                                case 89:
                                    Test0014.instanceCount = (long) Test0014.fFld;
                                    break;
                                case 87:
                                    i2 = -38516;
                                    i2 = (int) Test0014.instanceCount;
                                    switch ((i % 2) + 121) {
                                    case 121:
                                        Test0014.fFld = Test0014.instanceCount;
                                        i2 += i22;
                                    case 122:
                                        Test0014.fFld *= i;
                                        Test0014.fFld += i22;
                                        dArr1[i][i1 - 1] -= i22;
                                        break;
                                    }
                                    break;
                                case 101:
                                    i2 += (i22 * i22);
                                    break;
                                case 103:
                                    Test0014.instanceCount -= 229;
                                    Test0014.iArrFld[i1] &= (int) -6342226827109002473L;
                                    Test0014.fFld += i22;
                                    i2 = 5952;
                                    break;
                                default:
                                    Test0014.lFld += i22;
                                }
                                break;
                            case 21:
                                bArr[i22 + 1] = b4;
                                break;
                            case 22:
                                Test0014.dFld += Test0014.dFld;
                                break;
                            case 23:
                                Test0014.lFld *= i22;
                                break;
                            case 24:
                                i2 = sFld;
                                break;
                            default:
                                i2 += (i22 * i22);
                            }
                        } while (++i22 < 2);
                        break;
                    default:
                        i2 *= i;
                    }
                }
                break;
            default:
                Test0014.fFld = i;
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i22 by1 b4 = " + i22 + "," + by1 + "," + (b4 ? 1 : 0));
        FuzzerUtils.out.println("iArr dArr1 bArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0014.instanceCount sFld Test0014.dFld = " + Test0014.instanceCount + "," + sFld + "," +
                Double.doubleToLongBits(Test0014.dFld));
        FuzzerUtils.out.println("Test0014.sFld1 Test0014.fFld Test0014.lFld = " + Test0014.sFld1 + "," +
                Float.floatToIntBits(Test0014.fFld) + "," + Test0014.lFld);
        FuzzerUtils.out.println("Test0014.iArrFld Test0014.lArrFld = " + FuzzerUtils.checkSum(Test0014.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0014.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0014 _instance = new Test0014();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
