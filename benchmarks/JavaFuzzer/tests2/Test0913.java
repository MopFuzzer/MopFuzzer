// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:55 2023
public class Test0913 {

    public static final int N = 400;

    public static volatile long instanceCount=939404564L;
    public static double dFld=0.103664;
    public boolean bFld=true;
    public static short sFld=29951;
    public static int iFld=62588;
    public static int[] iArrFld =new int[N];
    public volatile short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0913.iArrFld, -36694);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i7) {

        float f=1.312F, f1=-1.265F;
        int i8=0, i9=14, i10=-5;
        byte by1=70;

        i7 = (int)f;
        i8 = 1;
        while (++i8 < 229) {
            i9 = 1;
            do {
                i7 += (i9 * i9);
                Test0913.sFld -= (short) Test0913.instanceCount;
            } while (++i9 < 7);
            i7 = 21366;
            for (f1 = 1; 7 > f1; f1 += 3) {
                i7 += (int)f1;
                i10 /= (int) (Test0913.instanceCount | 1);
                i7 = by1;
            }
            i7 = i9;
            Test0913.iArrFld[i8] = -59162;
            i10 += (i8 * i9);
        }
        vMeth1_check_sum += i7 + Float.floatToIntBits(f) + i8 + i9 + Float.floatToIntBits(f1) + i10 + by1;
    }

    public static void vMeth() {

        int i11=44748, i12=20, i13=5, i14=43617;
        float[] fArr =new float[N];
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(fArr, 1.21F);
        FuzzerUtils.init(lArr, -1838812226L);

        vMeth1(Test0913.iFld);
        i11 = 1;
        do {
            try {
                Test0913.iFld = (6 % Test0913.iFld);
                Test0913.iFld = (223 % i11);
                Test0913.iFld = (-208 % Test0913.iArrFld[i11]);
            } catch (ArithmeticException a_e) {}
            for (i12 = i11; 7 > i12; i12++) {
                Test0913.instanceCount = i13;
                Test0913.instanceCount -= i13;
                if (true) continue;
                i14 = 1;
                do {
                    byte by2=-32;
                    Test0913.iFld += i14;
                    switch ((i14 % 2) + 27) {
                    case 27:
                        fArr[i14 + 1] = (float) Test0913.dFld;
                        Test0913.instanceCount += (i14 * i14);
                        break;
                    case 28:
                        lArr[i11] = lArr[i11];
                        Test0913.iFld += i14;
                        break;
                    default:
                        by2 *= (byte) Test0913.instanceCount;
                    }
                } while (++i14 < 1);
            }
        } while (++i11 < 216);
        vMeth_check_sum += i11 + i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(int i5, int i6) {

        float f2=0.58F;
        float[] fArr1 =new float[N];
        int i15=0, i16=11, i17=179, i18=-108;

        FuzzerUtils.init(fArr1, 56.41F);

        vMeth();
        fArr1 = FuzzerUtils.float1array(N, (float)-1.319F);
        switch (((Test0913.iFld >>> 1) % 2) + 89) {
        case 89:
            Test0913.iFld &= i6;
            Test0913.iFld -= Test0913.iFld;
            Test0913.iFld = -31644;
        case 90:
            i6 -= (int) Test0913.instanceCount;
            f2 += i6;
            for (i15 = 4; i15 < 219; i15++) {
                i6 <<= i15;
                for (i17 = 1; i17 < 7; i17++) {
                    i16 = (int)124L;
                    i5 *= (int) Test0913.instanceCount;
                    Test0913.instanceCount *= Test0913.iFld;
                    Test0913.instanceCount = i16;
                }
            }
            break;
        default:
            Test0913.instanceCount *= i15;
        }
        long meth_res = i5 + i6 + Float.floatToIntBits(f2) + i15 + i16 + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-49542, i1=3, i2=193, i3=-127, i4=-10, i19=-13, i20=-11, i21=5, i22=49020;
        byte by=56;
        float f3=0.227F;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -4636053232421547137L);

        for (i = 11; 254 > i; ++i) {
            Test0913.dFld *= (--i1);
            try {
                i1 = (i1 % -71);
                i1 = (i % -1593219611);
                i1 = (i / Test0913.iArrFld[i]);
            } catch (ArithmeticException a_e) {}
            if (!bFld) break;
            i2 = 103;
            do {
                by += (byte)(i2 + i1);
                for (i3 = 1; 2 > i3; ++i3) {
                    i1 -= (int) (Test0913.instanceCount - ((i - 6262057784451307697L) * lMeth(i, i2)));
                    i4 = i2;
                    Test0913.iFld = by;
                }
                for (i19 = 1; i19 < 2; i19++) {
                    Test0913.iFld += (((i19 * i2) + i1) - i3);
                    Test0913.instanceCount += (long) f3;
                    Test0913.sFld = by;
                    Test0913.iArrFld[i] ^= Test0913.sFld;
                }
                i4 >>>= i4;
            } while ((i2 -= 2) > 0);
            i21 = 1;
            do {
                Test0913.instanceCount += (((i21 * i4) + i20) - Test0913.instanceCount);
                Test0913.instanceCount *= Test0913.instanceCount;
                i4 += (int) Test0913.dFld;
                i22 = 1;
                while (--i22 > 0) {
                    Test0913.iFld += (-53003 + (i22 * i22));
                    switch ((((Test0913.iFld >>> 1) % 5) * 5) + 90) {
                    case 91:
                        switch (((i22 >>> 1) % 2) + 125) {
                        case 125:
                            sArrFld[i22] /= (short) (Test0913.iFld | 1);
                            Test0913.iFld >>= i21;
                            lArr1[i + 1] = i2;
                            Test0913.instanceCount += i22;
                            break;
                        case 126:
                            Test0913.iArrFld[i] *= (int) Test0913.dFld;
                            break;
                        }
                        if (true) break;
                        break;
                    case 115:
                        Test0913.instanceCount = i;
                        break;
                    case 108:
                        i4 = i1;
                    case 95:
                        Test0913.dFld *= i1;
                        break;
                    case 93:
                        Test0913.dFld = i2;
                        break;
                    }
                }
            } while (++i21 < 103);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("by i3 i4 = " + by + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i19 i20 f3 = " + i19 + "," + i20 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i21 i22 lArr1 = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0913.instanceCount Test0913.dFld bFld = " + Test0913.instanceCount + "," +
                Double.doubleToLongBits(Test0913.dFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0913.sFld Test0913.iFld Test0913.iArrFld = " + Test0913.sFld + "," + Test0913.iFld + "," +
                FuzzerUtils.checkSum(Test0913.iArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0913 _instance = new Test0913();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
