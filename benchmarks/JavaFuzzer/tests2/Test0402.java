// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0402 {

    public static final int N = 400;

    public static long instanceCount=-48145L;
    public static double dFld=-33.49921;
    public static long lFld=5800125218418944916L;
    public static float fFld=2.483F;
    public static boolean bFld=false;
    public int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0402.fArrFld, 1.307F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth() {

        int i5=46929;
        int i6=119;
        int i7=19285;
        int i8=131;
        int i9=-22;
        int i10=21;
        int i11=13;
        int[] iArr2 =new int[N];
        byte by=1;
        boolean b=true;
        float[][] fArr =new float[N][N];
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(fArr, 108.215F);
        FuzzerUtils.init(iArr2, 35);
        FuzzerUtils.init(dArr, 1.127884);

        fArr[(i5 >>> 1) % N][(i5 >>> 1) % N] -= (float) Test0402.dFld;
        i5 = (int) Test0402.lFld;
        Test0402.instanceCount <<= i5;
        if (b) {
            for (i6 = 6; i6 < 143; ++i6) {
                iArr2[i6 + 1] = (int) Test0402.dFld;
                iArr2[i6] -= (int) Test0402.lFld;
            }
            i5 = (int)1.31F;
        } else if (b) {
            iArr2[(i5 >>> 1) % N] |= i6;
            for (i8 = 19; i8 < 332; ++i8) {
                by += (byte)i8;
                i9 -= i6;
                for (i10 = i8; i10 < 5; ++i10) {
                    dArr[i10 - 1][i10] *= Test0402.dFld;
                    b = b;
                }
            }
        } else {
            i5 = i10;
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + by + i10 + i11 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static float fMeth() {

        int i4=6;
        int i12=59806;
        int i13=5;
        int i14=26;
        int i15=78;
        int[] iArr1 =new int[N];
        boolean b1=false;
        boolean[] bArr =new boolean[N];
        byte by1=104;
        long[] lArr =new long[N];
        float[] fArr1 =new float[N];

        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, -232L);
        FuzzerUtils.init(fArr1, -2.636F);

        i4 <<= i4;
        iArr1[(-8 >>> 1) % N] = ((i4 - (i4 * i4)) - iArr1[(i4 >>> 1) % N]);
        bArr[(i4 >>> 1) % N] = (bMeth() || b1);
        Test0402.instanceCount -= i4;
        for (long l : lArr) {
            i12 = 1;
            while (++i12 < 4) {
                float f=1.860F;
                Test0402.dFld %= (i12 | 1);
                f += Test0402.instanceCount;
                for (i13 = 1; i13 < 1; ++i13) {
                    if (true) break;
                    by1 += (byte)i15;
                    f = i12;
                    fArr1[i12] += i14;
                }
                i4 -= i15;
                i15 -= (int) Test0402.dFld;
            }
        }
        long meth_res = i4 + (b1 ? 1 : 0) + i12 + i13 + i14 + by1 + i15 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i2=253;
        int i3=13;
        int i16=10;
        int i17=7;
        int i18=-44713;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 53327);

        for (i2 = 1; i2 < 329; i2++) {
            iArr[i2] = (iArr[i2 + 1] + i2);
            i3 = (int)fMeth();
            try {
                i3 = (i2 % i2);
                i3 = (i2 / i2);
                i3 = (i2 % i3);
            } catch (ArithmeticException a_e) {}
            i3 = i2;
            i3 -= i2;
            for (i16 = i2; i16 < 5; i16++) {
                i18 = 1;
                while (++i18 < 1) {
                    Test0402.instanceCount = i2;
                    Test0402.fArrFld[i2 + 1] -= Test0402.fFld;
                    switch ((i18 % 2) + 45) {
                    case 45:
                        try {
                            i3 = (-2863 % i3);
                            i17 = (i3 % -179);
                            i3 = (1162918725 / i16);
                        } catch (ArithmeticException a_e) {}
                        iArr[i2 - 1] = i17;
                        break;
                    case 46:
                        Test0402.lFld = Test0402.instanceCount;
                        i17 += (i18 * i3);
                    default:
                        i17 <<= i18;
                    }
                }
            }
        }
        long meth_res = i2 + i3 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=7, i19=-248, i20=8229, i21=59164, i22=10;
        double d=0.69169;
        short s=-23969;
        byte by2=114;

        i = 1;
        while (++i < 371) {
            for (d = 4; d < 68; ++d) {
                Test0402.instanceCount *= (-(i + (i1 << 10)));
                switch ((int)(((d % 2) * 5) + 88)) {
                case 97:
                    i1 ^= ((iArrFld[(int)(d)] + Integer.reverseBytes(-32430)) - (--i1));
                    iMeth();
                    if (Test0402.bFld) {
                        Test0402.lFld = i1;
                    } else if (Test0402.bFld) {
                        iArrFld[(int)(d)] += -5;
                    } else {
                        try {
                            i1 = (iArrFld[(int)(d + 1)] % i1);
                            i1 = (iArrFld[i + 1] / i);
                            i1 = (i / 51);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 94:
                    i1 = (int) Test0402.lFld;
                }
                Test0402.lFld -= i1;
                lArrFld[(int)(d)] *= s;
                i1 += (int)(((d * s) + i1) - i);
                Test0402.instanceCount = i1;
                iArrFld[i + 1] += i;
                by2 ^= (byte)i1;
                i1 += (13 + (d * d));
            }
            iArrFld[i + 1] -= (int) Test0402.lFld;
            iArrFld = iArrFld;
            iArrFld[i] = -185;
            i19 = 1;
            while (++i19 < 68) {
                for (i20 = 1; i20 < 1; i20++) {
                    i21 += (i20 | i20);
                    i1 += i20;
                    i1 += -59224;
                    try {
                        i1 = (i19 / i1);
                        iArrFld[i19] = (65446 / i);
                        i21 = (i1 / -51);
                    } catch (ArithmeticException a_e) {}
                }
                i22 = 1;
                do {
                    i1 = i;
                    Test0402.instanceCount ^= i22;
                } while (++i22 < 1);
            }
        }

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("s by2 i19 = " + s + "," + by2 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);

        FuzzerUtils.out.println("Test0402.instanceCount Test0402.dFld Test0402.lFld = " + Test0402.instanceCount + "," +
                Double.doubleToLongBits(Test0402.dFld) + "," + Test0402.lFld);
        FuzzerUtils.out.println("Test0402.fFld Test0402.bFld iArrFld = " + Float.floatToIntBits(Test0402.fFld) + "," + (Test0402.bFld ?
            1 : 0) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0402.fArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0402.fArrFld))
            + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0402 _instance = new Test0402();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
