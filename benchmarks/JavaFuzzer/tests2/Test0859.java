// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:52 2023
public class Test0859 {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static int iFld=-2756;
    public static short sFld=24805;
    public static byte byFld=-90;
    public static volatile float[] fArrFld =new float[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0859.fArrFld, -1.651F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, int i8) {

        int i9=14;
        int i10=-28395;
        int i11=-56422;
        int i12=64547;
        int i13=-2;
        int[] iArr1 =new int[N];
        float f1=0.329F;
        byte by=-123;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -162);
        FuzzerUtils.init(lArr, -137L);

        i9 = 1;
        while (++i9 < 232) {
            for (i10 = i9; i10 < 7; ++i10) {
                d1 += i9;
                switch ((i9 % 6) + 1) {
                case 1:
                    for (i12 = 1; i12 < 1; i12++) {
                        iArr1[i9 + 1] -= i13;
                        lArr[i12 - 1] += Test0859.instanceCount;
                        d1 *= i8;
                        Test0859.fArrFld[i10 + 1] -= f1;
                        i13 += (((i12 * f1) + Test0859.instanceCount) - i10);
                        i8 -= i13;
                    }
                    lArr[i10] = i12;
                    break;
                case 2:
                    i11 = i10;
                    break;
                case 3:
                    Test0859.instanceCount = 143;
                    break;
                case 4:
                    by += (byte)f1;
                    break;
                case 5:
                    i11 = Test0859.iFld;
                    break;
                case 6:
                    i11 += (i10 * i10);
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) +
            by + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(short s) {

        int i6=-74, i7=-187, i14=40, i15=1;
        double d2=-51.122928;
        float f2=1.529F;

        for (i6 = 9; i6 < 173; ++i6) {
            boolean b=false;
            vMeth1(d2, -87);
            Test0859.instanceCount += (((i6 * Test0859.iFld) + Test0859.instanceCount) - f2);
            Test0859.iFld += i6;
            Test0859.instanceCount ^= i7;
            for (i14 = 1; 10 > i14; i14++) {
                i7 += i15;
                Test0859.instanceCount += (i14 ^ i7);
                Test0859.iFld >>= (int) -52116L;
            }
            i7 ^= Test0859.iFld;
            i15 += i7;
            i15 = Test0859.iFld;
            if (b) {
                Test0859.fArrFld[i6 + 1] -= -2.765F;
            } else {
                i15 &= (int) Test0859.instanceCount;
            }
        }
        vMeth_check_sum += s + i6 + i7 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i14 + i15;
    }

    public static int iMeth() {

        int i4=-6;
        int i5=-35682;
        int i16=-5;
        int i17=-12;
        int i18=140;
        int i19=4221;
        int[] iArr =new int[N];
        float f3=62.365F;
        double d3=-89.24563;

        FuzzerUtils.init(iArr, 40677);

        for (i4 = 14; i4 < 245; i4++) {
            Test0859.iFld = Math.max(i5, i5++);
            Test0859.iFld >>= (iArr[i4 - 1]--);
            vMeth(Test0859.sFld);
            for (i16 = 1; i16 < 7; ++i16) {
                iArr = iArr;
                Test0859.instanceCount <<= Test0859.instanceCount;
                Test0859.instanceCount = i16;
            }
        }
        i17 %= (int)1266903023L;
        for (i18 = 5; 233 > i18; ++i18) {
            Test0859.iFld *= (int) f3;
            Test0859.instanceCount += (((i18 * i19) + Test0859.instanceCount) - i16);
            iArr[i18 - 1] = (int) Test0859.instanceCount;
        }
        d3 -= -62216;
        i17 >>= -38897;
        long meth_res = i4 + i5 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f3) + Double.doubleToLongBits(d3) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=66.244F, f4=0.789F;
        int i=-167;
        int i1=7;
        int i2=76;
        int i3=13;
        int i20=-7;
        int i21=226;
        int i22=54260;
        int[] iArr2 =new int[N];
        double d=75.37107;

        FuzzerUtils.init(iArr2, 55758);

        f = (Test0859.iFld--);
        for (i = 7; 247 > i; i++) {
            boolean b1=false;
            i1 >>= (++Test0859.iFld);
            for (i2 = 2; i2 < 105; i2 += 3) {
                i1 = -111;
                Test0859.iFld += (((i2 * i3) + i3) - i);
                d += ((d + -11) * (--Test0859.instanceCount));
                Test0859.iFld -= iMeth();
            }
            Test0859.instanceCount >>= Test0859.iFld;
            switch (((i1 >>> 1) % 8) + 2) {
            case 2:
                Test0859.instanceCount = Test0859.instanceCount;
                for (i20 = 1; i20 < 105; i20++) {
                    i3 <<= (int) Test0859.instanceCount;
                    Test0859.byFld += (byte) (i20 * i20);
                    for (f4 = 1; f4 < 2; f4++) {
                        iArr2[(int) (f4 - 1)] = (int) Test0859.instanceCount;
                        i3 += i20;
                        iArr2[(int) (f4 + 1)] = (int) Test0859.instanceCount;
                        i21 |= 129;
                        lArrFld[i] >>= Test0859.instanceCount;
                        iArr2[i + 1] -= i2;
                        iArr2[i] += i;
                        d = d;
                    }
                    f += (float)d;
                    iArr2 = FuzzerUtils.int1array(N, (int)38088);
                    i3 = i;
                    i1 &= i22;
                    i21 = i;
                    i1 -= (int)d;
                }
                break;
            case 3:
            case 4:
                i22 = (int) Test0859.instanceCount;
            case 5:
                f = i22;
            case 6:
                d += Test0859.instanceCount;
            case 7:
                i1 <<= -3;
                break;
            case 8:
                if (b1) break;
                break;
            case 9:
                i1 = i2;
                break;
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 d = " + i2 + "," + i3 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i20 i21 f4 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i22 iArr2 = " + i22 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0859.instanceCount Test0859.iFld Test0859.sFld = " + Test0859.instanceCount + "," + Test0859.iFld +
                "," + Test0859.sFld);
        FuzzerUtils.out.println("Test0859.byFld Test0859.fArrFld lArrFld = " + Test0859.byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0859.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0859 _instance = new Test0859();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
