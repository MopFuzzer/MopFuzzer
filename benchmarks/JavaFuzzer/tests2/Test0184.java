// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0184 {

    public static final int N = 400;

    public static long instanceCount=2219757845356275242L;
    public static byte byFld=-19;
    public float fFld=1.993F;
    public static boolean bFld=true;
    public int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public static volatile int[][] iArrFld1 =new int[N][N];

    static {
        FuzzerUtils.init(Test0184.lArrFld, 126L);
        FuzzerUtils.init(Test0184.iArrFld1, 9104);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l, long l1, int i11) {

        int i12=-16844;
        int i13=0;
        int i14=46212;
        int i15=-55731;
        int i16=-63892;
        int i17=49766;
        int i18=-13;
        int[] iArr =new int[N];
        long l2=0L;
        float f=14.625F, f1=0.615F;
        boolean b=true;
        boolean[] bArr =new boolean[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 56995);
        FuzzerUtils.init(sArr, (short)6867);
        FuzzerUtils.init(bArr, true);

        for (i12 = 178; i12 > 5; --i12) {
            switch ((i12 % 8) + 33) {
            case 33:
                for (l2 = 1; l2 < 9; ++l2) {
                    i11 += (-10282 + (l2 * l2));
                }
                for (i15 = 1; i15 < 9; i15++) {
                    iArr[i15] -= i11;
                    f /= ((long)(f) | 1);
                    l += (long)f1;
                    for (i17 = i12; i17 < 2; i17++) {
                        double d=2.43005;
                        if (b) break;
                        i13 <<= i11;
                        i11 = (int)l;
                        b = false;
                        i14 += (((i17 * i14) + l2) - i13);
                        d += i15;
                    }
                }
                break;
            case 34:
                l1 -= Test0184.byFld;
                break;
            case 35:
                sArr[i12 + 1] -= (short)i11;
                break;
            case 36:
                i18 -= 59203;
                break;
            case 37:
                i11 += (i12 | Test0184.byFld);
                break;
            case 38:
                Test0184.lArrFld[i12 - 1] -= l2;
                break;
            case 39:
                i11 += (i12 * i12);
            case 40:
                sArr[i12] = (short)l2;
                break;
            default:
                bArr[i12 + 1] = b;
            }
        }
        vMeth2_check_sum += l + l1 + i11 + i12 + i13 + l2 + i14 + i15 + i16 + Float.floatToIntBits(f) +
            Float.floatToIntBits(f1) + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(int i6, int i7, int i8) {

        int i9=-1877;
        int i10=5;
        int i19=-67;
        int i20=2;
        int[] iArr1 =new int[N];
        float f2=2.701F;
        short s=-14244;
        double d1=0.50067;
        boolean[] bArr1 =new boolean[N];

        FuzzerUtils.init(iArr1, -245);
        FuzzerUtils.init(bArr1, true);

        for (i9 = 1; i9 < 196; i9 += 2) {
            boolean b1=false;
            switch ((i9 % 4) + 117) {
            case 117:
                Test0184.lArrFld[i9] >>= i10;
                vMeth2(Test0184.instanceCount, Test0184.instanceCount, i6);
                Test0184.instanceCount -= (long) f2;
                i6 = (int)859474469L;
            case 118:
                i8 ^= i10;
                f2 -= i8;
                switch (((i8 >>> 1) % 5) + 125) {
                case 125:
                    for (i19 = 1; 16 > i19; i19++) {
                        iArr1[i19] = i8;
                        i20 += (((i19 * s) + i9) - Test0184.byFld);
                        i7 += (int) Test0184.instanceCount;
                        i6 *= (int) Test0184.instanceCount;
                        d1 = i8;
                    }
                    break;
                case 126:
                    bArr1[i9 + 1] = b1;
                case 127:
                    i10 = i8;
                    break;
                case 128:
                    i6 += (i9 * i9);
                    break;
                case 129:
                    i6 -= i8;
                    break;
                default:
                    Test0184.iArrFld1 = FuzzerUtils.int2array(N, (int) -3);
                }
            case 119:
                i8 = i19;
                break;
            case 120:
                d1 = i20;
                break;
            }
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + i19 + i20 + s +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr1);
    }

    public static void vMeth(int i4, int i5) {

        double d2=47.122587;
        float f3=-54.283F;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -127.491F);

        vMeth1(i4, i5, i4);
        i4 = Test0184.byFld;
        Test0184.instanceCount = i5;
        d2 -= f3;
        Test0184.iArrFld1[(i4 >>> 1) % N][(14 >>> 1) % N] = Test0184.byFld;
        Test0184.instanceCount = i4;
        fArr[(i5 >>> 1) % N] = Test0184.instanceCount;
        fArr[(i5 >>> 1) % N] *= Test0184.instanceCount;
        vMeth_check_sum += i4 + i5 + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-5326, i1=-14, i2=54686, i3=-11, i21=-6, i22=-195, i23=-8, i24=-54347;
        double d3=49.126148, d4=0.65060;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)-89);

        i *= (-((Test0184.byFld + i) * (iArrFld[(i >>> 1) % N]--)));
        Test0184.instanceCount = -55026;
        i = Math.abs(-115);
        i1 = 1;
        do {
            for (i2 = 3; 71 > i2; ++i2) {
                vMeth(0, i);
                i21 = 1;
                while ((i21 += 2) < 2) {
                    byArr[i21 + 1] = (byte)i;
                }
                i3 >>= i3;
                iArrFld[i2 + 1] <<= i3;
                Test0184.iArrFld1[i1 - 1][i2 - 1] = i1;
                Test0184.iArrFld1[i2][i1] = (int) -112.53877;
                try {
                    i3 = (iArrFld[i2 - 1] / i);
                    Test0184.iArrFld1[i2][i1] = (-215 / i21);
                    i3 = (Test0184.iArrFld1[i1 - 1][i1 + 1] / i2);
                } catch (ArithmeticException a_e) {}
            }
            switch ((((231 >>> 1) % 4) * 5) + 1) {
            case 4:
                for (d3 = 71; d3 > 4; d3--) {
                    Test0184.instanceCount = 24818;
                }
                i ^= (int) Test0184.instanceCount;
                if (Test0184.bFld) {
                    d4 = i3;
                    i23 = 71;
                    do {
                        i3 = -8;
                        switch ((i1 % 5) + 3) {
                        case 3:
                            if (Test0184.bFld) {
                                i24 = 1;
                                while (++i24 < 2) {
                                    fFld = i22;
                                    fFld -= i23;
                                    i += (i24 | i21);
                                    Test0184.instanceCount -= Test0184.instanceCount;
                                    i -= (int) Test0184.instanceCount;
                                    i3 += (((i24 * Test0184.byFld) + i23) - i2);
                                }
                            } else {
                                fFld *= Test0184.instanceCount;
                            }
                            break;
                        case 4:
                            i3 -= i1;
                            break;
                        case 5:
                            Test0184.lArrFld[i23] = i1;
                        case 6:
                            if (Test0184.bFld) break;
                        case 7:
                            i >>= i24;
                            break;
                        }
                    } while ((i23 -= 2) > 0);
                } else {
                    i3 = i;
                }
                break;
            case 12:
                Test0184.instanceCount -= 1;
                break;
            case 3:
                i22 -= -41;
                break;
            case 16:
                fFld += (i1 * i1);
                break;
            default:
                Test0184.iArrFld1 = Test0184.iArrFld1;
            }
        } while (++i1 < 357);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i21 d3 = " + i3 + "," + i21 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i22 d4 i23 = " + i22 + "," + Double.doubleToLongBits(d4) + "," + i23);
        FuzzerUtils.out.println("i24 byArr = " + i24 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0184.instanceCount Test0184.byFld fFld = " + Test0184.instanceCount + "," + Test0184.byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0184.bFld iArrFld Test0184.lArrFld = " + (Test0184.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test0184.lArrFld));
        FuzzerUtils.out.println("Test0184.iArrFld1 = " + FuzzerUtils.checkSum(Test0184.iArrFld1));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0184 _instance = new Test0184();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
