// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:59 2023
public class Test0995 {

    public static final int N = 400;

    public static long instanceCount=-2943498985L;
    public static float fFld=-2.398F;
    public static volatile short sFld=-15305;
    public static boolean bFld=true;
    public static double dFld=115.105802;
    public volatile byte byFld=32;
    public float[] fArrFld =new float[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i4=5470;
        int i5=-48;
        int i6=225;
        int i7=-52;
        int[] iArr =new int[N];
        boolean b1=true;
        short s=-17517;
        long l2=-245L;
        long[] lArr =new long[N];
        double d=0.53296, d1=-1.21961;
        byte by=120;

        FuzzerUtils.init(lArr, 22330L);
        FuzzerUtils.init(iArr, 6679);

        for (i4 = 157; i4 > 9; i4--) {
            if (b1) break;
            s += (short)i4;
            for (l2 = 1; l2 < 11; ++l2) {
                i5 -= 9;
                for (d = 1; 2 > d; d++) {
                    i6 = i5;
                    lArr[(int)(d - 1)] -= i4;
                    i5 += (int)d;
                    switch (((i4 % 5) * 5) + 100) {
                    case 122:
                        i6 = i7;
                        switch ((int)((l2 % 4) + 47)) {
                        case 47:
                            Test0995.fFld += (float) d;
                            iArr[(int) (d + 1)] -= (int) Test0995.instanceCount;
                            i5 <<= i6;
                        case 48:
                            Test0995.fFld *= l2;
                            break;
                        case 49:
                            i6 += by;
                            break;
                        case 50:
                        default:
                            i6 += i5;
                        }
                        break;
                    case 109:
                        i5 += (int)d;
                        break;
                    case 119:
                        d1 += Test0995.instanceCount;
                        break;
                    case 112:
                        if (i5 != 0) {
                            vMeth1_check_sum += i4 + i5 + (b1 ? 1 : 0) + s + l2 + i6 + Double.doubleToLongBits(d) + i7
                                + by + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) +
                                FuzzerUtils.checkSum(iArr);
                            return;
                        }
                        break;
                    case 105:
                        i5 -= (int)-5485670797637811099L;
                        break;
                    default:
                        Test0995.instanceCount = (long) d1;
                    }
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + (b1 ? 1 : 0) + s + l2 + i6 + Double.doubleToLongBits(d) + i7 + by +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(boolean b, long l1) {

        int i2=1, i3=-122, i8=101, i9=87, i10=-52240, i11=-23895, i12=21365;
        byte by1=-66;
        double[] dArr =new double[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(dArr, -9.41575);
        FuzzerUtils.init(lArr1, 170L);

        for (i2 = 8; i2 < 170; i2++) {
            vMeth1();
            i8 = 1;
            while (++i8 < 10) {
                for (i9 = 1; 1 > i9; i9++) {
                    by1 >>= (byte)i10;
                    dArr[i9 + 1] = i9;
                    if (i9 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + l1 + i2 + i3 + i8 + i9 + i10 + by1 + i11 + i12 +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    i3 *= Test0995.sFld;
                }
                i10 += (int) Test0995.fFld;
                i10 = (int) Test0995.fFld;
                Test0995.fFld += i8;
                lArr1[i8 + 1] += i9;
                for (i11 = 1; i11 > 1; i11--) {
                    i10 *= i9;
                    lArr1[i8 + 1] += 2506950880L;
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + l1 + i2 + i3 + i8 + i9 + i10 + by1 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(long l, float f) {


        vMeth(Test0995.bFld, l);
        vSmallMeth_check_sum += l + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i=-11;
        int i1=-30656;
        int i13=-12;
        int i14=-12;
        int i15=4;
        int i16=-713;
        int i17=160;
        int[] iArr1 =new int[N];
        double d2=-87.32967;
        boolean b2=true;
        long[] lArr2 =new long[N];
        long[][] lArr3 =new long[N][N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr1, 165);
        FuzzerUtils.init(lArr2, 215L);
        FuzzerUtils.init(byArr, (byte)103);
        FuzzerUtils.init(lArr3, -3328962370L);

        for (i = 3; 201 > i; ++i) {
            for (int smallinvoc = 0; smallinvoc < 62; smallinvoc++) vSmallMeth(Test0995.instanceCount, Test0995.fFld);
            Test0995.dFld = -14;
            i1 = (int) Test0995.fFld;
            switch ((i % 9) + 127) {
            case 127:
                iArr1 = iArr1;
                switch (((i1 >>> 1) % 4) + 127) {
                case 127:
                    d2 = i;
                    try {
                        i1 = (i % -47328);
                        i1 = (-148933476 / i);
                        i1 = (i % i);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 128:
                    i1 += (i * i);
                    d2 += i1;
                    for (i13 = 2; i13 < 127; i13++) {
                        lArr2[i - 1] += i;
                        if (Test0995.bFld) {
                            i1 = (int) Test0995.instanceCount;
                            if (Test0995.bFld) break;
                            i14 += (((i13 * Test0995.fFld) + i14) - Test0995.instanceCount);
                        } else {
                        }
                        Test0995.dFld -= Test0995.instanceCount;
                        i15 = 1;
                        while (++i15 < 2) {
                            Test0995.instanceCount += i1;
                            i14 = i14;
                            i14 = i14;
                            Test0995.sFld += (short) (((i15 * i14) + Test0995.fFld) - Test0995.instanceCount);
                            d2 = i1;
                            i1 += i15;
                            Test0995.sFld += (short) i14;
                        }
                        switch (((i15 >>> 1) % 1) + 34) {
                        case 34:
                            for (i16 = i; i16 < 2; i16++) {
                                fArrFld[i] *= byFld;
                                try {
                                    i17 = (i16 % iArr1[i - 1]);
                                    i14 = (11 % iArr1[i16 + 1]);
                                    iArr1[i16] = (-19470 / i16);
                                } catch (ArithmeticException a_e) {}
                            }
                        }
                    }
                case 129:
                    iArr1[i] = (int) Test0995.instanceCount;
                    break;
                case 130:
                    lArr2[i] <<= Test0995.instanceCount;
                    break;
                default:
                    byArr[i + 1] |= (byte)i1;
                }
                break;
            case 128:
                i1 += i;
                break;
            case 129:
                i14 += i;
                break;
            case 130:
                i14 += i;
                break;
            case 131:
                Test0995.bFld = b2;
                break;
            case 132:
                Test0995.instanceCount += i;
                break;
            case 133:
                i14 = Test0995.sFld;
            case 134:
                byArr[i - 1] = (byte)39;
            case 135:
                lArr3 = lArr3;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 d2 = " + i + "," + i1 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 b2 = " + i16 + "," + i17 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("iArr1 lArr2 byArr = " + FuzzerUtils.checkSum(iArr1) + "," +
            FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr3 = " + FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test0995.instanceCount Test0995.fFld Test0995.sFld = " + Test0995.instanceCount + "," +
                Float.floatToIntBits(Test0995.fFld) + "," + Test0995.sFld);
        FuzzerUtils.out.println("Test0995.bFld Test0995.dFld byFld = " + (Test0995.bFld ? 1 : 0) + "," +
                Double.doubleToLongBits(Test0995.dFld) + "," + byFld);
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0995 _instance = new Test0995();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
