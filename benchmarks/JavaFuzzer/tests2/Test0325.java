// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:27 2023
public class Test0325 {

    public static final int N = 400;

    public static long instanceCount=14L;
    public short sFld=-26550;
    public static float fFld=-99.467F;
    public static byte byFld=55;
    public static double dFld=0.16533;
    public static boolean bFld=false;
    public int iFld=-206;
    public static double[] dArrFld =new double[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0325.dArrFld, -104.80175);
        FuzzerUtils.init(Test0325.fArrFld, -2.694F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(int i1, double d) {

        int i2=-6;
        int i3=-117;
        int i4=-115;
        int i5=1527;
        int i6=-118;
        int i7=15;
        int[] iArr1 =new int[N];
        byte by=29;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, 63728);
        FuzzerUtils.init(lArr, 5351976110438155615L);

        i1 -= (int) (Test0325.fFld++);
        i1 <<= (int) (Test0325.fFld - (-i1));
        for (i2 = 4; 384 > i2; ++i2) {
            if (i1 != (i2 - d)) {
                i1 += -33;
            }
            i1 = (--i1);
            for (i4 = i2; i4 < 4; i4++) {
                i5 += (int) (Test0325.instanceCount++);
                i3 += i1;
                by += (byte)(i4 - i4);
                for (i6 = i4; i6 < 1; ++i6) {
                    i3 >>= iArr1[i4];
                    lArr = (lArr = (lArr = (lArr = lArr)));
                    i1 -= (int) (Test0325.dArrFld[i4 - 1] = ((d + d) + (i1++)));
                    i5 += (int) (Test0325.fFld * Test0325.instanceCount);
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + by + i6 + i7 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2() {

        int i11=12;
        int i12=13131;
        int i13=-45557;
        int i14=-93;
        int i15=-4;
        int[] iArr2 =new int[N];
        double d1=-51.52806;

        FuzzerUtils.init(iArr2, -77);

        i11 -= i11;
        i11 = 7667;
        for (i12 = 14; i12 < 290; ++i12) {
            for (i14 = i12; i14 < 6; i14++) {
                i11 += (i14 * i15);
                i13 += (int) Test0325.fFld;
                try {
                    i13 = (13548 % iArr2[i12 + 1]);
                    i13 = (iArr2[i14 + 1] / i11);
                    i15 = (i11 / 56899);
                } catch (ArithmeticException a_e) {}
                iArr2[i14] = i14;
                Test0325.byFld += (byte) (i14 - i13);
            }
            i15 *= i14;
            i13 += i12;
            iArr2[i12 - 1] = (int)d1;
            i15 = (int) Test0325.instanceCount;
            i13 += i12;
        }
        d1 = -112;
        vMeth2_check_sum += i11 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(int i9, int i10) {

        int i16=37573;
        int i17=-19573;
        int i18=14640;
        int i19=-39099;
        int i20=-21;
        int[] iArr3 =new int[N];
        short s=-2731;
        short[] sArr =new short[N];
        boolean b=true;

        FuzzerUtils.init(sArr, (short)-1427);
        FuzzerUtils.init(iArr3, 3);

        vMeth2();
        Test0325.fArrFld = Test0325.fArrFld;
        for (i16 = 13; i16 < 227; i16++) {
            Test0325.dFld = -1;
            for (i18 = 8; 1 < i18; --i18) {
                sArr[i16 + 1] -= s;
                i17 *= i17;
                i19 &= i10;
                switch ((i16 % 2) + 104) {
                case 104:
                    i20 = 1;
                    do {
                        Test0325.instanceCount -= i16;
                        iArr3[i20 - 1] *= i19;
                        i10 *= (int) Test0325.fFld;
                        Test0325.dFld -= i20;
                        b = b;
                    } while (++i20 < 2);
                    break;
                case 105:
                    Test0325.fFld -= i16;
                    break;
                default:
                    Test0325.dFld = i10;
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + i16 + i17 + i18 + i19 + s + i20 + (b ? 1 : 0) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr3);
    }

    public static void vMeth(int i8, float f1, byte by1) {

        int i21=-33373;
        int i22=-178;
        int i23=161;
        int i24=20;
        int i25=-7;
        int i26=-11;
        int[][] iArr4 =new int[N][N];

        FuzzerUtils.init(iArr4, 52);

        vMeth1(8, i8);
        i21 = 1;
        do {
            Test0325.dFld -= 1.66837;
            i8 = i21;
            i8 = (int) Test0325.dFld;
            i8 = (int)1.10029;
            for (i22 = 1; 7 > i22; i22++) {
                iArr4 = FuzzerUtils.int2array(N, (int)-12);
                i23 >>= (int)12L;
                i8 += (i22 + i22);
                for (i24 = 1; i24 < 2; i24++) {
                    try {
                        i8 = (65 % i25);
                        i26 = (-37588 % iArr4[i22][i22 + 1]);
                        iArr4[i22][i22] = (iArr4[i22 + 1][i21] / -649193926);
                    } catch (ArithmeticException a_e) {}
                    Test0325.dFld += i26;
                    i25 = 59971;
                }
                Test0325.instanceCount = -50;
            }
        } while (++i21 < 226);
        vMeth_check_sum += i8 + Float.floatToIntBits(f1) + by1 + i21 + i22 + i23 + i24 + i25 + i26 +
            FuzzerUtils.checkSum(iArr4);
    }

    public void mainTest(String[] strArr1) {

        float f=-1.225F;
        int i27=12;
        int i28=-6;
        int i29=26615;
        int i30=3;
        int i31=-16271;
        int i32=-51652;
        int i33=0;
        int[] iArr =new int[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, -13);
        FuzzerUtils.init(lArr1, 1959597641927340939L);

        for (int i : iArr) {
            iArr[(i >>> 1) % N] = (int) ((Test0325.instanceCount - sFld) + ((i = i) * (-89 + Math.min(Test0325.instanceCount,
                -13L))));
            f = (iMeth(i | Test0325.byFld, 35512 + (Test0325.instanceCount - i)) - iMeth(i = -48, --Test0325.dArrFld[(i >>> 1) %
                N]));
            vMeth(i, -28.96F, (byte)(-101));
            for (i27 = 2; i27 < 63; i27++) {
                i += (int)(55660L + (i27 * i27));
                for (i29 = 1; i29 < 2; i29++) {
                    i += -17074;
                    Test0325.instanceCount -= i28;
                    Test0325.instanceCount = 41109441097337303L;
                    if (Test0325.bFld) continue;
                    i28 = (int) Test0325.instanceCount;
                    i += (int)-23.105665;
                    Test0325.fArrFld[i27 - 1] += Test0325.instanceCount;
                    try {
                        i28 = (-29 / i28);
                        i30 = (54 % i30);
                        iArr[i27] = (928641008 / i);
                    } catch (ArithmeticException a_e) {}
                    lArr1[i27 + 1] = Test0325.instanceCount;
                    Test0325.instanceCount = i30;
                }
                if (false) continue;
            }
            i30 += i27;
            i30 = i28;
            i *= i28;
            iFld = i28;
            i28 = (int)2518682870L;
        }
        iFld = -58649;
        i31 = 1;
        do {
            lArr1 = lArr1;
            iFld += (((i31 * Test0325.fFld) + i31) - i30);
            for (i32 = 7; i32 < 151; ++i32) {
                i33 %= (int)(i28 | 1);
            }
            iFld = (int)f;
        } while (++i31 < 166);

        FuzzerUtils.out.println("f i27 i28 = " + Float.floatToIntBits(f) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 iArr = " + i32 + "," + i33 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0325.instanceCount sFld Test0325.fFld = " + Test0325.instanceCount + "," + sFld + "," +
                Float.floatToIntBits(Test0325.fFld));
        FuzzerUtils.out.println("Test0325.byFld Test0325.dFld Test0325.bFld = " + Test0325.byFld + "," +
                Double.doubleToLongBits(Test0325.dFld) + "," + (Test0325.bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld Test0325.dArrFld Test0325.fArrFld = " + iFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0325.dArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0325.fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0325 _instance = new Test0325();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
