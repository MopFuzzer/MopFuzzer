// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:37 2023
public class Test0528 {

    public static final int N = 400;

    public static long instanceCount=21205L;
    public static int iFld=14;
    public static double dFld=-123.6793;
    public int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0528.fArrFld, -1.461F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        float f1=1.923F;
        short s=-3006;
        int i5=-362;
        int i6=0;
        int i7=47494;
        int i8=63781;
        int i9=3;
        int i10=-214;
        int[] iArr =new int[N];
        byte by=-57;
        double[] dArr1 =new double[N];

        FuzzerUtils.init(iArr, -3);
        FuzzerUtils.init(dArr1, 122.94515);

        i4 = (int) Test0528.instanceCount;
        f1 += s;
        Test0528.iFld *= Test0528.iFld;
        for (i5 = 7; i5 < 290; i5++) {
            for (i7 = 6; i7 > 1; i7 -= 3) {
                i6 %= (int) (Test0528.iFld | 1);
                i4 += (-42143 + (i7 * i7));
                if (i7 != 0) {
                    vMeth2_check_sum += i4 + Float.floatToIntBits(f1) + s + i5 + i6 + i7 + i8 + i9 + i10 + by +
                        FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                    return;
                }
                for (i9 = 1; i9 < 6; ++i9) {
                    f1 += 30805;
                    Test0528.iFld = s;
                    f1 -= 56937;
                    iArr[i7] += i8;
                    dArr1[i9] -= by;
                    i4 ^= i4;
                }
            }
        }
        vMeth2_check_sum += i4 + Float.floatToIntBits(f1) + s + i5 + i6 + i7 + i8 + i9 + i10 + by +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth1() {

        float f2=-112.81F;
        int i11=-27208;
        int i12=-109;
        int i13=-38170;
        int i14=-181;
        int[] iArr1 =new int[N];
        byte by1=-123;
        boolean b=false;
        short s1=-30952;

        FuzzerUtils.init(iArr1, -41);

        vMeth2(Test0528.iFld);
        for (f2 = 7; f2 < 328; f2++) {
            switch (((-1 >>> 1) % 1) + 16) {
            case 16:
                for (i12 = 1; i12 < 5; i12++) {
                    by1 = (byte)i12;
                    iArr1[(int)(f2)] >>= i13;
                    iArr1[(int) (f2 + 1)] *= (int) Test0528.instanceCount;
                    i13 %= (int)(i12 | 1);
                    b = b;
                }
                break;
            }
            i14 = 5;
            do {
                iArr1[(int)(f2 + 1)] = i14;
                Test0528.dFld *= f2;
                i13 = i14;
                s1 = (short)i13;
                iArr1[i14] <<= i14;
            } while (--i14 > 0);
        }
        vMeth1_check_sum += Float.floatToIntBits(f2) + i11 + i12 + i13 + by1 + (b ? 1 : 0) + i14 + s1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(double d, long l) {

        int i15=62, i16=31718, i17=44365, i18=12, i19=0, i20=11, i21=-117;
        long l1=65L;
        byte by2=-70;

        Test0528.iFld = (int) (((Test0528.iFld + Test0528.iFld) - (l - Test0528.iFld)) * (-(iArrFld[(Test0528.iFld >>> 1) % N] -= (int) l)));
        vMeth1();
        Test0528.iFld = (int) -117.448F;
        Test0528.iFld += Test0528.iFld;
        i15 = 1;
        do {
            Test0528.iFld += (i15 | l);
        } while (++i15 < 190);
        for (i16 = 134; i16 > 1; --i16) {
            i17 /= (int)(l | 1);
            i17 -= i17;
        }
        for (i18 = 8; i18 < 222; ++i18) {
            l1 += i18;
            for (i20 = 1; i20 < 8; i20++) {
                Test0528.iFld = (int) l;
                try {
                    iArrFld[i18] = (iArrFld[i20 + 1] % -14);
                    Test0528.iFld = (i17 / -234);
                    i17 = (i21 / Test0528.iFld);
                } catch (ArithmeticException a_e) {}
                Test0528.instanceCount += (((i20 * i19) + l1) - by2);
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + l + i15 + i16 + i17 + i18 + i19 + l1 + i20 + i21 + by2;
    }

    public void mainTest(String[] strArr1) {

        int i=207, i1=-7, i2=-7285, i3=11, i22=108, i23=208, i24=8;
        float f=2.1016F;
        short s3=-22705;
        boolean b1=false;
        double[][] dArr =new double[N][N];
        long[] lArr =new long[N];

        FuzzerUtils.init(dArr, 2.89494);
        FuzzerUtils.init(lArr, 58379L);

        i = 338;
        do {
            float f3=-5.8F;
            for (f = 1; f < 148; f++) {
                short s2=-21122;
                i1 = (i1++);
                i1 += (int)f;
                dArr[i + 1][(int)(f)] -= Math.min(i1, iArrFld[i]);
                for (i2 = 2; i2 > i; --i2) {
                    Test0528.instanceCount = i2;
                }
                vMeth(Test0528.dFld, 8138349797146787467L);
                Test0528.iFld += (int) f;
                i3 += (-38085 + (f * f));
                i1 <<= s2;
                Test0528.iFld <<= i1;
            }
            i1 = (int)f;
            lArr[i] <<= -9033247580978137691L;
            f3 = i3;
            s3 = (short)59246;
            if (b1) {
                if (true) {
                    i1 >>= i1;
                } else if (b1) {
                } else if (b1) {
                    for (i22 = 8; i22 < 148; ++i22) {
                        Test0528.iFld += (int) Test0528.dFld;
                        i24 = 1;
                        do {
                            f3 += (43482 + (i24 * i24));
                            if (b1) {
                                if (b1) continue;
                            } else if (b1) {
                                if (b1) continue;
                                i1 += s3;
                            } else if (b1) {
                                Test0528.instanceCount *= i3;
                                i1 >>= i22;
                                i23 -= 51;
                            }
                        } while (++i24 < 2);
                    }
                } else {
                    Test0528.iFld *= Test0528.iFld;
                }
            } else {
                Test0528.fArrFld[i - 1] -= Test0528.instanceCount;
            }
        } while ((i -= 2) > 0);

        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i3 s3 = " + i2 + "," + i3 + "," + s3);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("b1 dArr lArr = " + (b1 ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0528.instanceCount Test0528.iFld Test0528.dFld = " + Test0528.instanceCount + "," + Test0528.iFld +
                "," + Double.doubleToLongBits(Test0528.dFld));
        FuzzerUtils.out.println("iArrFld Test0528.fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0528.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0528 _instance = new Test0528();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
