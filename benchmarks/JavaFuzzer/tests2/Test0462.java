// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:33 2023
public class Test0462 {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static float fFld=-2.333F;
    public static int iFld=33;
    public static volatile short sFld=-5366;
    public static double dFld=0.85582;
    public double[] dArrFld =new double[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, long l1, long l2) {

        int i2=194, i3=-11, i4=-239;
        byte by=-48;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -46130L);

        l &= Test0462.iFld;
        l <<= Test0462.iFld;
        l = Test0462.iFld;
        i2 = 396;
        while (--i2 > 0) {
            by *= (byte) Test0462.iFld;
            lArr[i2 + 1] = Test0462.sFld;
            Test0462.iFld += (8 + (i2 * i2));
            l1 += i2;
            Test0462.instanceCount *= 49445L;
        }
        for (i3 = 190; i3 > 9; i3--) {
            boolean b=false;
            if (Test0462.iFld != 0) {
            }
            lArr[i3 + 1] -= 7;
            if (b) {
                Test0462.fFld -= l1;
                i4 += i2;
            } else if (b) {
                by -= (byte) Test0462.instanceCount;
            }
        }
        long meth_res = l + l1 + l2 + i2 + by + i3 + i4 + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d) {

        int i1=-7;
        int i5=2;
        int i6=42;
        int i7=-21559;
        int i8=8;
        int[][] iArr =new int[N][N];
        boolean b1=true;

        FuzzerUtils.init(iArr, 14);

        i1 -= iMeth(Test0462.instanceCount, Test0462.instanceCount, 2451467411552662239L);
        for (i5 = 6; i5 < 177; i5++) {
            for (i7 = 1; i7 < 9; ++i7) {
                if (b1) continue;
                i6 += (((i7 * i6) + Test0462.iFld) - i5);
                Test0462.instanceCount = -36770L;
                Test0462.instanceCount -= (long) d;
                Test0462.instanceCount += i1;
                Test0462.iFld = Test0462.iFld;
                Test0462.instanceCount = Test0462.instanceCount;
                b1 = b1;
                i1 = i6;
                iArr[i7][i5] = i7;
            }
        }
        Test0462.instanceCount += 40036L;
        Test0462.fFld -= (float) d;
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i5 + i6 + i7 + i8 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth() {


        vMeth(Test0462.dFld);
        vSmallMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=0;
        int i9=8;
        int i10=-33;
        int i11=34808;
        int i12=238;
        int i13=0;
        int[][] iArr1 =new int[N][N];
        boolean b2=false;
        float f=-63.148F;

        FuzzerUtils.init(iArr1, -93);

        dArrFld[(i >>> 1) % N] = Test0462.fFld;
        for (int smallinvoc=0; smallinvoc<723; smallinvoc++) vSmallMeth();
        i9 = 1;
        do {
            i += (i9 * Test0462.instanceCount);
            switch (((5 >>> 1) % 2) + 34) {
            case 34:
                Test0462.instanceCount = i;
                if (b2) continue;
                Test0462.sFld += (short) i;
                Test0462.iFld <<= i9;
            case 35:
                Test0462.iFld |= i;
                break;
            default:
                i *= Test0462.iFld;
            }
            for (i10 = 3; 74 > i10; i10++) {
                Test0462.instanceCount += i10;
                Test0462.sFld >>>= (short) i11;
                Test0462.fFld += (i10 * i10);
                for (i12 = 1; i12 < 2; ++i12) {
                    i <<= Test0462.sFld;
                    iArr1[i10 + 1][i9 - 1] = (int) Test0462.instanceCount;
                    i13 += (i12 ^ i9);
                }
                f = 2;
                do {
                    i13 = 29;
                    switch ((i9 % 5) + 127) {
                    case 127:
                        Test0462.instanceCount += (long) (((f * i) + i13) - Test0462.sFld);
                    case 128:
                        if (b2) continue;
                        iArr1[i10][(int)(f + 1)] = i9;
                        iArr1[(int)(f + 1)][(int)(f)] += i12;
                        break;
                    case 129:
                        i11 -= (int) Test0462.instanceCount;
                        Test0462.fFld -= i13;
                        break;
                    case 130:
                        i13 -= (int) Test0462.dFld;
                        i = (int) Test0462.instanceCount;
                    case 131:
                        Test0462.dFld %= -20987;
                    }
                } while (--f > 0);
            }
        } while (++i9 < 342);

        FuzzerUtils.out.println("i i9 b2 = " + i + "," + i9 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 f iArr1 = " + i13 + "," + Float.floatToIntBits(f) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0462.instanceCount Test0462.fFld Test0462.iFld = " + Test0462.instanceCount + "," +
                Float.floatToIntBits(Test0462.fFld) + "," + Test0462.iFld);
        FuzzerUtils.out.println("Test0462.sFld Test0462.dFld dArrFld = " + Test0462.sFld + "," + Double.doubleToLongBits(Test0462.dFld)
            + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0462 _instance = new Test0462();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
