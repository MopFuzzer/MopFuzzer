// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:48 2023
public class Test0768 {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static short sFld=10369;
    public static float fFld=90.44F;
    public int iFld=24566;
    public volatile double[] dArrFld =new double[N];
    public static volatile byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0768.byArrFld, (byte) 53);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        byte by1=49;
        int i14=-5;
        int i15=-154;
        int i16=47617;
        int i17=225;
        int i18=-230;
        int i19=-240;
        int[] iArr1 =new int[N];
        boolean b=false;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -84);
        FuzzerUtils.init(lArr, 5L);

        by1 = (byte)-35L;
        i14 = 1;
        while (++i14 < 243) {
            i15 |= (int) Test0768.instanceCount;
            for (i16 = 1; i16 < 7; ++i16) {
                if (true) continue;
                i17 >>= 21184;
                for (i18 = 1; i18 < 2; ++i18) {
                    i15 = i17;
                    switch ((i14 % 6) + 32) {
                    case 32:
                        i19 += i16;
                        i17 += (int) Test0768.instanceCount;
                        switch (((i18 >>> 1) % 5) + 4) {
                        case 4:
                            iArr1[i16 - 1] = i14;
                            i15 += by1;
                            i15 = (int) Test0768.instanceCount;
                            break;
                        case 5:
                            i15 *= i18;
                            break;
                        case 6:
                            iArr1[i16 - 1] *= Test0768.sFld;
                        case 7:
                            if (b) break;
                        case 8:
                            lArr = lArr;
                            break;
                        default:
                            Test0768.instanceCount = -1;
                        }
                        break;
                    case 33:
                        iArr1[i14 - 1] += i15;
                        break;
                    case 34:
                    case 35:
                        i19 = i17;
                    case 36:
                        iArr1[i18] -= (int) Test0768.fFld;
                        break;
                    case 37:
                        iArr1[(i15 >>> 1) % N] = (int) Test0768.instanceCount;
                        break;
                    }
                }
            }
        }
        vMeth1_check_sum += by1 + i14 + i15 + i16 + i17 + i18 + i19 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i11, long l1, double d1) {

        int i12=130;
        int i13=-7;
        int i20=53587;
        int i21=9;
        int i22=-140;
        int[] iArr2 =new int[N];
        long[] lArr1 =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr1, 4872095860060131588L);
        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(dArr, 125.82289);

        for (i12 = 2; i12 < 133; ++i12) {
            vMeth1();
            i20 = 12;
            do {
                lArr1[i12] >>= i11;
                i13 |= i11;
                Test0768.instanceCount *= 3;
                iArr2[i12 + 1] >>= i12;
                for (i21 = i12; i21 < 1; i21++) {
                    i22 += (-3 + (i21 * i21));
                    iArr2[i12 + 1] %= (int)((long)(d1) | 1);
                }
                if (i13 != 0) {
                }
                dArr[i12 + 1] -= i20;
            } while (--i20 > 0);
            i22 = i22;
            Test0768.fFld += (((i12 * i13) + l1) - i21);
            Test0768.sFld += (short) (((i12 * Test0768.fFld) + i22) - i20);
        }
        long meth_res = i11 + l1 + Double.doubleToLongBits(d1) + i12 + i13 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(long l, int i) {

        int i1=3;
        int i2=-58123;
        int i3=-92;
        int i4=-4;
        int i5=-12;
        int i6=-51;
        int i7=10;
        int i8=-224;
        int i9=0;
        int i10=43310;
        int[] iArr =new int[N];
        float f=-2.946F;
        byte by=37;
        double d2=0.68794;

        FuzzerUtils.init(iArr, 4305);

        for (i1 = 5; i1 < 161; i1++) {
            for (i3 = 1; i3 < 10; i3++) {
                for (i5 = 1; i5 < 2; ++i5) {
                    f += (((i5 * i4) + Test0768.sFld) - i1);
                    Test0768.byArrFld[i5] &= (byte) iArr[i5 - 1];
                    i2 -= -7;
                    i6 = (int)(((-16429 - (by - i)) - i2) - f);
                    Test0768.instanceCount = i1;
                }
            }
            for (i7 = 1; i7 < 10; ++i7) {
                for (i9 = 2; i9 > 1; i9--) {
                    f += (((i9 * i1) + f) - i4);
                    try {
                        i4 = (iArr[i9] / i5);
                        i6 = (i1 % -1160194764);
                        i = (i1 % i);
                    } catch (ArithmeticException a_e) {}
                    i = ((Test0768.sFld--) + iMeth(101, l, d2));
                }
            }
            i6 = (int)l;
        }
        i8 += (int) Test0768.fFld;
        vMeth_check_sum += l + i + i1 + i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + by + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        long l2=941127979L, l3=3L;
        double d3=-109.15371, d4=13.11093;
        int i23=14;
        int i24=5029;
        int i25=76;
        int i26=-10;
        int[] iArr3 =new int[N];
        byte by2=-109;
        boolean b1=true;
        boolean[][] bArr =new boolean[N][N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr3, 58914);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(sArr, (short)-21205);

        for (double d : dArrFld) {
            vMeth(l2, iFld);
            iFld += iFld;
            iFld = (int) Test0768.instanceCount;
        }
        iFld &= (int)l2;
        for (d3 = 252; d3 > 3; d3 -= 3) {
            i23 += (int) (((d3 * Test0768.instanceCount) + iFld) - l2);
            Test0768.instanceCount *= iFld;
            Test0768.fFld = l3;
            i23 = by2;
            Test0768.fFld -= i23;
            for (i24 = 14; i24 < 302; ++i24) {
                i25 += 59755;
                by2 ^= (byte)i25;
                i26 = 1;
                while (++i26 < 2) {
                    switch ((i24 % 8) + 99) {
                    case 99:
                        i23 = iFld;
                        break;
                    case 100:
                        switch ((int)(((d3 % 9) * 5) + 83)) {
                        case 121:
                        case 114:
                            switch ((i24 % 9) + 127) {
                            case 127:
                                by2 *= (byte)d3;
                                break;
                            case 128:
                                i23 = i25;
                                try {
                                    iFld = (i23 / 973393198);
                                    i25 = (26881 % i25);
                                    i25 = (54 / i26);
                                } catch (ArithmeticException a_e) {}
                                iFld = i26;
                                break;
                            case 129:
                                iArr3[i26 - 1] = i23;
                                switch ((i24 % 7) + 98) {
                                case 98:
                                    try {
                                        iArr3[i24 - 1] = (i23 % iArr3[i24 + 1]);
                                        i23 = (i26 % 11);
                                        i25 = (iFld / iArr3[i24]);
                                    } catch (ArithmeticException a_e) {}
                                    bArr = bArr;
                                case 99:
                                    iFld = i24;
                                    break;
                                case 100:
                                    Test0768.byArrFld[i26 - 1] |= (byte) 11233;
                                    break;
                                case 101:
                                    iFld <<= 31;
                                    break;
                                case 102:
                                    Test0768.fFld = l3;
                                    break;
                                case 103:
                                    i25 += i26;
                                    break;
                                case 104:
                                    i25 = (int) Test0768.fFld;
                                    break;
                                }
                                break;
                            case 130:
                                Test0768.sFld += (short) (i26 * by2);
                            case 131:
                                d4 = i25;
                            case 132:
                            case 133:
                            case 134:
                                iArr3[i26] += (int)d4;
                            case 135:
                                iFld += (((i26 * i24) + i25) - i26);
                            }
                        case 125:
                            i23 = Test0768.sFld;
                            break;
                        case 111:
                            l3 &= Test0768.sFld;
                        case 92:
                            iArr3[i26] >>= i26;
                            break;
                        case 109:
                            i23 = i26;
                            break;
                        case 108:
                            iArr3[(int)(d3 + 1)] <<= i26;
                        case 85:
                            l3 -= i24;
                            break;
                        case 88:
                            l2 += iFld;
                            break;
                        }
                        break;
                    case 101:
                        sArr[i26] -= (short)l2;
                        break;
                    case 102:
                        i25 = by2;
                        break;
                    case 103:
                        i25 += (int)l2;
                        break;
                    case 104:
                        l2 += l2;
                        break;
                    case 105:
                        Test0768.fFld += (float) d4;
                        break;
                    case 106:
                        iFld = i26;
                    default:
                        b1 = b1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("l2 d3 i23 = " + l2 + "," + Double.doubleToLongBits(d3) + "," + i23);
        FuzzerUtils.out.println("l3 by2 i24 = " + l3 + "," + by2 + "," + i24);
        FuzzerUtils.out.println("i25 i26 d4 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("b1 iArr3 bArr = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr3) + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0768.instanceCount Test0768.sFld Test0768.fFld = " + Test0768.instanceCount + "," + Test0768.sFld +
                "," + Float.floatToIntBits(Test0768.fFld));
        FuzzerUtils.out.println("iFld dArrFld Test0768.byArrFld = " + iFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test0768.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0768 _instance = new Test0768();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
