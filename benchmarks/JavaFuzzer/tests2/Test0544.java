// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:37 2023
public class Test0544 {

    public static final int N = 400;

    public static long instanceCount=-239L;
    public static volatile short sFld=-30452;
    public static float fFld=-1.562F;
    public static double dFld=0.39559;
    public int iFld=14;
    public static volatile boolean bFld=true;
    public int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];
    public volatile boolean[][] bArrFld =new boolean[N][N];

    static {
        FuzzerUtils.init(Test0544.byArrFld, (byte) 59);
    }

    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i19, int i20, int i21) {

        int i22=11, i23=7186, i24=-9, i25=58, i26=36699, i27=221;
        boolean b=false;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 0.388F);

        for (i22 = 6; i22 < 256; ++i22) {
            i19 = i19;
        }
        i19 -= -1;
        Test0544.dFld = 0.788F;
        for (i24 = 4; i24 < 147; ++i24) {
            fArr1[i24] *= Test0544.fFld;
            if (b) {
                i23 += (i24 ^ i19);
            } else if (b) {
                i25 *= i21;
                for (i26 = 11; i26 > 1; --i26) {
                    switch (((i24 % 1) * 5) + 28) {
                    case 32:
                    default:
                        i21 += (i26 ^ i22);
                        Test0544.dFld *= i19;
                        Test0544.dFld -= 9667;
                        i21 = Test0544.sFld;
                    }
                }
            } else {
                Test0544.byArrFld[i24 + 1] += (byte) i23;
            }
        }
        long meth_res = i19 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i14) {

        double d2=0.44298;
        int i15=1;
        int i16=17556;
        int i17=12;
        int i18=-5;
        int i28=213;
        int i29=-68;
        int[] iArr =new int[N];
        byte by=83;

        FuzzerUtils.init(iArr, -14784);

        Test0544.instanceCount *= (long) ((d2++) * (Test0544.fFld - (i14++)));
        for (i15 = 4; i15 < 135; i15++) {
            for (i17 = 12; i17 > 1; i17--) {
                i14 = (int) ((Test0544.fFld += i15) - Math.abs(iMeth(i16, i18, i15)));
                Test0544.instanceCount += (i17 * i15);
                switch (((i15 % 5) * 5) + 52) {
                case 77:
                    Test0544.instanceCount += (long) Test0544.fFld;
                    try {
                        i16 = (i18 % 167);
                        iArr[i15 - 1] = (i18 % 148);
                        iArr[i15] = (-40731 / i18);
                    } catch (ArithmeticException a_e) {}
                    for (i28 = 1; i28 < 2; i28++) {
                        iArr = iArr;
                        iArr[i28 + 1] *= (int)167L;
                        Test0544.instanceCount *= i29;
                        i18 = i17;
                        d2 -= Test0544.instanceCount;
                        i14 += (((i28 * i16) + i28) - i16);
                    }
                    break;
                case 59:
                case 62:
                    by -= (byte) Test0544.fFld;
                    break;
                case 67:
                    iArr[i15 + 1] -= i29;
                    break;
                case 69:
                    i16 += (((i17 * i18) + i28) - i29);
                    break;
                }
            }
        }
        long meth_res = i14 + Double.doubleToLongBits(d2) + i15 + i16 + i17 + i18 + i28 + i29 + by +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public long lMeth(int i8, int i9, int i10) {

        int i11=-50003, i12=1, i13=-64349, i30=7589, i31=-204;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -13L);

        i11 = 1;
        while (++i11 < 269) {
            i9 -= i8;
            for (i12 = 1; i12 < 6; i12++) {
                lArr[i11 + 1][i11 - 1] += (long)dMeth(i13);
            }
            for (i30 = i11; i30 < 6; i30++) {
                i13 -= (int) Test0544.instanceCount;
                Test0544.instanceCount += -137;
                i31 += (((i30 * Test0544.fFld) + i31) - i9);
                iFld *= (int)-1297509653L;
                i10 += iFld;
                iFld += (i30 * Test0544.instanceCount);
            }
            iArrFld[i11 - 1] = (int) Test0544.fFld;
            Test0544.bFld = Test0544.bFld;
            Test0544.bFld = Test0544.bFld;
            if (Test0544.bFld) break;
        }
        long meth_res = i8 + i9 + i10 + i11 + i12 + i13 + i30 + i31 + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=90.49134, d1=55.89676;
        int i=-22166, i1=-243, i2=9, i3=89, i4=-50385, i5=59430, i6=-60877, i7=30670;
        float f=0.270F;
        float[] fArr =new float[N];
        byte by1=-32;

        FuzzerUtils.init(fArr, 77.751F);

        for (d = 230; d > 10; d--) {
            for (i1 = 1; i1 < 114; ++i1) {
                for (i3 = 1; i3 < 2; ++i3) {
                    i >>= (int) (((f = 4404495261888753178L) + (fArr[i3 - 1]++)) * Test0544.instanceCount);
                    d1 *= (i3 + (Test0544.instanceCount--));
                    i += (i3 * Test0544.instanceCount);
                }
                Test0544.instanceCount <<= 8L;
                d1 /= (((long) (Short.reverseBytes(Test0544.sFld) + ((i2 << i4) + (d - i3)))) | 1);
                iArrFld[i1] += (int)(-76 - ((--i5) / ((i2 + 8L) | 1)));
            }
            for (i6 = 6; i6 < 114; i6++) {
                iArrFld[i6 + 1] += i;
                lMeth(i4, i6, i);
                bArrFld[i6][i6 + 1] = Test0544.bFld;
                i2 <<= i7;
                i += (((i6 * Test0544.fFld) + by1) - Test0544.sFld);
                i4 += i6;
            }
            iFld += -2;
            iFld = 30409;
            Test0544.instanceCount = i7;
        }
        Test0544.instanceCount >>>= Test0544.instanceCount;

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("f d1 i5 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d1) + "," + i5);
        FuzzerUtils.out.println("i6 i7 by1 = " + i6 + "," + i7 + "," + by1);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0544.instanceCount Test0544.sFld Test0544.fFld = " + Test0544.instanceCount + "," + Test0544.sFld +
                "," + Float.floatToIntBits(Test0544.fFld));
        FuzzerUtils.out.println("Test0544.dFld iFld Test0544.bFld = " + Double.doubleToLongBits(Test0544.dFld) + "," + iFld + "," +
                (Test0544.bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld Test0544.byArrFld bArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0544.byArrFld) + "," + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0544 _instance = new Test0544();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
