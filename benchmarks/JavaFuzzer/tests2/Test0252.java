// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0252 {

    public static final int N = 400;

    public static long instanceCount=3993613797L;
    public static byte byFld=-124;
    public static volatile double dFld=-26.96332;
    public short sFld=20721;
    public boolean bFld=true;
    public float fFld=87.347F;
    public static int[][] iArrFld =new int[N][N];
    public short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0252.iArrFld, -3);
    }

    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1() {

        int i9=-56260, i10=6, i11=-41830, i12=73, i13=-27539;

        sArrFld[(i9 >>> 1) % N] = (short)4;
        i10 = 1;
        while (++i10 < 265) {
            i9 = 134;
            Test0252.instanceCount += i9;
            Test0252.instanceCount += (-5298L + (i10 * i10));
            i9 -= (int) Test0252.instanceCount;
            for (i11 = 1; i11 < 6; ++i11) {
                Test0252.instanceCount = Test0252.instanceCount;
                i9 += i11;
                if (i12 != 0) {
                    vMeth1_check_sum += i9 + i10 + i11 + i12 + i13;
                    return;
                }
                Test0252.instanceCount += -126;
                Test0252.instanceCount <<= i11;
                Test0252.byFld = (byte) -136;
                Test0252.instanceCount %= (Test0252.instanceCount | 1);
                i13 = i13;
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + i12 + i13;
    }

    public void vMeth(float f, long l) {

        int i5=113, i6=-33529, i7=4113, i8=11;
        long l1=6218075408876474858L;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -1.4284);

        Test0252.byFld = (byte) 166;
        i5 >>>= (int) (((Test0252.iArrFld[(i5 >>> 1) % N][(i5 >>> 1) % N]--) + (--i5)) * ((++Test0252.dFld) * (++i5)));
        dArr[(i6 >>> 1) % N] *= i6;
        for (l1 = 16; 282 > l1; ++l1) {
            i5 = ((--Test0252.iArrFld[(int) (l1 - 1)][(int) (l1 + 1)]) + ((i5 * i7) - sFld));
            i8 = 6;
            while (--i8 > 0) {
                vMeth1();
                sFld += (short) Test0252.instanceCount;
                l += i8;
                sFld >>= (short)i5;
                if (i6 != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + l + i5 + i6 + l1 + i7 + i8 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
            }
            bFld = bFld;
            dArr[(int)(l1 - 1)] -= f;
            i6 += (int)(((l1 * l) + i6) - i5);
            Test0252.dFld = i5;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + l + i5 + i6 + l1 + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public short sMeth() {

        int i3=23427, i4=-34, i14=-27047, i15=-15346, i16=-4, i17=-5, i18=34324, i19=-10002;
        long l2=55782L;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -1.578F);

        for (i3 = 13; i3 < 225; i3++) {
            i4 = i3;
            i4 += (((i3 * i4) + i4) - Test0252.instanceCount);
            i4 -= (int) Test0252.instanceCount;
        }
        vMeth(101.889F, -204L);
        fArr = fArr;
        Test0252.iArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N] += (int) Test0252.instanceCount;
        i4 = (int)-2.980F;
        for (i14 = 11; i14 < 345; ++i14) {
            for (i16 = 1; 5 > i16; i16++) {
                i17 += (int)l2;
                i15 += (((i16 * i4) + l2) - i16);
                for (i18 = 2; i18 > 1; --i18) {
                    Test0252.iArrFld[i16 + 1] = Test0252.iArrFld[i18 - 1];
                    fFld *= i19;
                }
            }
        }
        long meth_res = i3 + i4 + i14 + i15 + i16 + i17 + l2 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-113, i1=-13, i2=-6, i20=30049, i21=-51297, i22=205, i23=-9;
        long l3=-5409462151176965919L;
        double[] dArr1 =new double[N];

        FuzzerUtils.init(dArr1, -21.91850);

        i = (int) (++Test0252.instanceCount);
        for (i1 = 17; 385 > i1; ++i1) {
            i2 -= sMeth();
            for (i20 = 1; i20 < 68; i20++) {
                i >>= i20;
                switch (((i20 % 1) * 5) + 70) {
                case 72:
                    Test0252.iArrFld[i1 + 1][i20 + 1] = -17357;
                default:
                    l3 = 1;
                    while (++l3 < 2) {
                        i = i20;
                        switch (((i2 >>> 1) % 9) + 101) {
                        case 101:
                            i2 /= (int)(i21 | 1);
                            break;
                        case 102:
                            i += (int) (l3 | Test0252.instanceCount);
                            i22 += (int)4925052725036361041L;
                            fFld += (((l3 * i22) + i22) - i23);
                            break;
                        case 103:
                            fFld = i1;
                            fFld -= -4392912377111381258L;
                            fFld -= (float)-43.94865;
                            break;
                        case 104:
                            Test0252.instanceCount = i22;
                            dArr1[i1] += 0.900F;
                            Test0252.instanceCount -= i;
                            break;
                        case 105:
                            i2 >>= i2;
                            if (bFld) break;
                            sFld += (short)l3;
                            break;
                        case 106:
                            Test0252.byFld = (byte) i21;
                            bFld = bFld;
                            i21 += (int)(((l3 * i) + i1) - i2);
                            i22 += (int) (l3 - Test0252.instanceCount);
                            break;
                        case 107:
                            Test0252.instanceCount += l3;
                            i2 = (int) Test0252.dFld;
                            i22 = i21;
                            break;
                        case 108:
                            i23 += (int)l3;
                        case 109:
                            dArr1 = dArr1;
                            break;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 i21 l3 = " + i20 + "," + i21 + "," + l3);
        FuzzerUtils.out.println("i22 i23 dArr1 = " + i22 + "," + i23 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0252.instanceCount Test0252.byFld Test0252.dFld = " + Test0252.instanceCount + "," + Test0252.byFld +
                "," + Double.doubleToLongBits(Test0252.dFld));
        FuzzerUtils.out.println("sFld bFld fFld = " + sFld + "," + (bFld ? 1 : 0) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0252.iArrFld sArrFld = " + FuzzerUtils.checkSum(Test0252.iArrFld) + "," +
            FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0252 _instance = new Test0252();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
