// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0227 {

    public static final int N = 400;

    public static long instanceCount=-33L;
    public volatile boolean bFld=true;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0227.iArrFld, 7);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(short s) {

        int i10=7976, i11=89, i13=-8, i14=-7;
        double d=-35.54447;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 3372235044L);

        for (i10 = 12; i10 < 217; i10++) {
            i11 = (int) Test0227.instanceCount;
            i11 *= i10;
            Test0227.iArrFld[i10 + 1] <<= i11;
            i11 &= (int)1707288289518262282L;
        }
        Test0227.instanceCount = i11;
        for (int i12 : Test0227.iArrFld) {
            for (i13 = 1; i13 < 4; i13++) {
                switch ((((i11 >>> 1) % 3) * 5) + 89) {
                case 96:
                    lArr1[i13] <<= i14;
                    Test0227.instanceCount ^= i13;
                    i12 >>>= i11;
                    d = 1;
                    do {
                        Test0227.instanceCount = (long) 1.330F;
                        i12 += (int)d;
                    } while (++d < 2);
                    break;
                case 94:
                    i12 += (((i13 * i10) + i13) - i12);
                    break;
                case 91:
                    if (i11 != 0) {
                        vMeth1_check_sum += s + i10 + i11 + i13 + i14 + Double.doubleToLongBits(d) +
                            FuzzerUtils.checkSum(lArr1);
                        return;
                    }
                    break;
                }
            }
        }
        vMeth1_check_sum += s + i10 + i11 + i13 + i14 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(byte by, float f) {

        int i8=-4002, i9=2;
        short s1=-20170, s2=-29511;
        double d1=-1.33014;
        float f1=124.638F;
        float[] fArr =new float[N];
        long[] lArr2 =new long[N];

        FuzzerUtils.init(fArr, 0.652F);
        FuzzerUtils.init(lArr2, 0L);

        i8 = (int) (((Test0227.instanceCount * i8) + f) + i8);
        i9 = 1;
        do {
            Test0227.iArrFld[i9 - 1] += (int) (fArr[i9]++);
            vMeth1(s1);
            d1 -= i9;
            lArr2[i9] = i9;
            by += (byte)i8;
            switch ((i9 % 1) + 58) {
            case 58:
                i8 -= (int)d1;
                lArr2[i9 + 1] -= 248;
                break;
            default:
                i8 = i9;
                lArr2[i9] *= Test0227.instanceCount;
            }
            f -= 171;
            s2 = (short)36651;
            f -= f1;
        } while (++i9 < 375);
        vMeth_check_sum += by + Float.floatToIntBits(f) + i8 + i9 + s1 + Double.doubleToLongBits(d1) + s2 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr2);
    }

    public int iMeth(int i2, int i3) {

        int i4=-4, i5=-33157, i6=232, i7=-95, i15=21619, i16=-64846;
        short s3=22948;
        byte by1=102;

        for (i4 = 142; i4 > 7; --i4) {
            for (i6 = 1; 12 > i6; i6++) {
                float f2=-1.691F;
                Test0227.iArrFld[i4 + 1] += (++i7);
                vMeth((byte)(-7), f2);
                for (i15 = 1; i15 < 2; i15++) {
                    s3 += (short)(i15 - i4);
                    by1 = (byte)82;
                    i2 += (int) Test0227.instanceCount;
                    i5 *= i4;
                    if (i16 != 0) {
                    }
                }
                Test0227.instanceCount >>= i6;
                i16 *= i16;
                i3 += by1;
                Test0227.instanceCount = i7;
                f2 *= i7;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i7 + i15 + i16 + s3 + by1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=6580, i1=45979, i18=45124, i19=-8, i20=-227, i21=8, i22=-186, i24=8, i25=-40820, i26=5, i27=-215, i28=1,
            i29=-5;
        double d2=-6.86180;
        float f3=-2.538F;
        float[] fArr1 =new float[N];
        short s4=14464;
        byte by2=-57;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(fArr1, -115.431F);

        for (i = 22; i < 393; i += 2) {
            Test0227.instanceCount = (Test0227.iArrFld[i] * (i1 -= (int) (Test0227.instanceCount - i1)));
            lArr[i + 1] = (iMeth(i, i1) + i);
            for (i18 = 3; i18 < 136; i18++) {
                i19 += (i18 ^ i1);
                switch (((i % 1) * 5) + 80) {
                case 84:
                    d2 *= f3;
                    i1 <<= i;
                    i19 = (int) Test0227.instanceCount;
                    break;
                }
            }
            i19 += i;
        }
        i20 = 1;
        do {
            for (i21 = i20; 83 > i21; i21++) {
                int i23=3;
                Test0227.instanceCount *= s4;
                i22 = i23;
                fArr1[i20 - 1] = i18;
                if (bFld) break;
                i1 = by2;
            }
            for (i24 = 5; i24 < 83; i24++) {
                for (i26 = 1; i26 < 2; i26++) {
                    i1 -= i26;
                    Test0227.instanceCount *= i19;
                }
                i27 = (int) Test0227.instanceCount;
                for (i28 = 1; i28 < 2; i28++) {
                    i1 >>= (int)-42L;
                    i27 += (int) Test0227.instanceCount;
                    switch (((i20 % 8) * 5) + 64) {
                    case 75:
                        by2 = (byte)i28;
                        f3 *= i25;
                        break;
                    case 86:
                        Test0227.instanceCount = i21;
                        Test0227.iArrFld[i20] += i;
                        break;
                    case 70:
                        i25 += i29;
                        break;
                    case 92:
                        if (false) break;
                    case 74:
                        d2 += d2;
                    case 82:
                        Test0227.instanceCount = -61;
                    case 85:
                        d2 = i26;
                        break;
                    case 77:
                    }
                }
            }
        } while (++i20 < 303);

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("i19 d2 f3 = " + i19 + "," + Double.doubleToLongBits(d2) + "," +
            Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("s4 by2 i24 = " + s4 + "," + by2 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 lArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0227.instanceCount bFld Test0227.iArrFld = " + Test0227.instanceCount + "," + (bFld ? 1 : 0) +
                "," + FuzzerUtils.checkSum(Test0227.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0227 _instance = new Test0227();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
