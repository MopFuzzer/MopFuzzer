// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:24 2023
public class Test0269 {

    public static final int N = 400;

    public static long instanceCount=-9L;
    public static boolean bFld=true;
    public static int iFld=31;
    public double dFld=2.109517;
    public static byte byFld=45;
    public int iFld1=228;
    public static int iFld2=-32536;
    public static volatile short sFld=14667;
    public static int[] iArrFld =new int[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0269.iArrFld, -26670);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i2, int i3) {

        double d=-54.5817;
        int i4=-57, i5=7, i6=-134, i7=-19296, i8=-2;
        float f1=-35.440F;
        long[] lArr1 =new long[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(lArr1, -4227L);
        FuzzerUtils.init(bArr, false);

        i2 <<= 124;
        Test0269.instanceCount = Test0269.instanceCount;
        for (d = 18; d < 391; ++d) {
            if (Test0269.bFld) break;
            f1 += (float)d;
            lArr1[(int)(d - 1)] *= i2;
            for (i5 = 1; i5 < 5; i5++) {
                bArr[i5 + 1] = Test0269.bFld;
                Test0269.iArrFld = Test0269.iArrFld;
                i4 += (i5 * i5);
                i2 *= i2;
                f1 += i6;
                for (i7 = 1; i7 < 2; i7++) {
                    if (i6 != 0) {
                    }
                }
                i3 -= (int)-58589L;
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth1(int i1) {

        double d1=-2.38017, d2=38.57425;
        float f2=-1.873F;
        int i9=-14, i10=7;
        short s=21055;
        long l=8165060358936544717L;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -1906662691998983748L);

        lArr[(i1 >>> 1) % N][(-11 >>> 1) % N] -= lArr[(i1 >>> 1) % N][(i1 >>> 1) % N];
        i1 -= iMeth(-73, i1);
        d1 = 1;
        while (++d1 < 270) {
            i1 = i1;
            d2 += f2;
            Test0269.bFld = Test0269.bFld;
            for (i9 = (int)(d1); i9 < 6; i9 += 2) {
                s += (short)i10;
                Test0269.iArrFld[i9] >>= (int) l;
                d2 %= (s | 1);
                Test0269.iArrFld[(int) (d1)] = i10;
                i1 += i9;
                i10 = i10;
                i1 += (((i9 * f2) + i10) - i10);
                Test0269.iArrFld[i9] = (int) l;
            }
        }
        vMeth1_check_sum += i1 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) +
            i9 + i10 + s + l + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth() {

        int i11=4, i12=-172, i13=-38127, i14=-41447;

        vMeth1(Test0269.iFld);
        for (i11 = 18; i11 < 313; i11++) {
            Test0269.bFld = Test0269.bFld;
            Test0269.iArrFld[i11 - 1] ^= 5;
            for (i13 = 1; i13 < 6; ++i13) {
                Test0269.iFld += i13;
                Test0269.iFld = i14;
                i12 -= i12;
            }
            i12 += i11;
        }
        dFld *= i12;
        vMeth_check_sum += i11 + i12 + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i=34489, i15=-4, i16=-46162, i17=-66, i18=47583, i19=64, i20=168;
        float f=-2.899F;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 1.57169);

        i = 133;
        do {
            f += (6128709063068408074L + (i * i));
            vMeth();
            Test0269.instanceCount = Test0269.instanceCount;
            for (i15 = 9; i15 < 188; ++i15) {
                i17 = 1;
                while (++i17 < 2) {
                    Test0269.instanceCount -= Test0269.byFld;
                    switch ((i15 % 3) + 95) {
                    case 95:
                        Test0269.iFld &= i;
                        Test0269.iFld -= i16;
                        break;
                    case 96:
                        Test0269.instanceCount -= 6612;
                        dArr[i + 1] = -6216;
                        Test0269.iFld &= 12056;
                        break;
                    case 97:
                        Test0269.iFld += (((i17 * i16) + Test0269.instanceCount) - i16);
                        Test0269.instanceCount = (long) f;
                        f = Test0269.instanceCount;
                        i16 -= (int)-20.761F;
                        break;
                    }
                }
            }
            for (i18 = 8; i18 < 188; i18++) {
                i16 += i15;
                Test0269.iFld >>= -12;
                i20 = 1;
                while (++i20 < 2) {
                    Test0269.instanceCount *= iFld1;
                    switch (((i18 % 9) * 5) + 114) {
                    case 142:
                        iFld1 *= (int)2.120801;
                        i16 += i20;
                        break;
                    case 155:
                        Test0269.iFld2 = (int) Test0269.instanceCount;
                        switch ((i18 % 1) + 24) {
                        case 24:
                            lArrFld[i20 + 1] += Test0269.instanceCount;
                            break;
                        }
                    case 148:
                        Test0269.instanceCount = (long) f;
                        break;
                    case 158:
                        lArrFld[i20 - 1] &= i17;
                        break;
                    case 146:
                        i19 = Test0269.sFld;
                        break;
                    case 153:
                        i19 += (((i20 * f) + i16) - i18);
                        break;
                    case 159:
                        Test0269.instanceCount = i16;
                        break;
                    case 152:
                        Test0269.instanceCount += (((i20 * i18) + i) - iFld1);
                    case 118:
                    default:
                        Test0269.instanceCount >>= i16;
                    }
                }
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i f i15 = " + i + "," + Float.floatToIntBits(f) + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 dArr = " + i19 + "," + i20 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0269.instanceCount Test0269.bFld Test0269.iFld = " + Test0269.instanceCount + "," + (Test0269.bFld ? 1
                : 0) + "," + Test0269.iFld);
        FuzzerUtils.out.println("dFld Test0269.byFld iFld1 = " + Double.doubleToLongBits(dFld) + "," + Test0269.byFld + "," +
            iFld1);
        FuzzerUtils.out.println("Test0269.iFld2 Test0269.sFld Test0269.iArrFld = " + Test0269.iFld2 + "," + Test0269.sFld + "," +
                FuzzerUtils.checkSum(Test0269.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0269 _instance = new Test0269();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
