// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0249 {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static volatile double dFld=-1.54226;
    public static long lFld=-6439362614129839836L;
    public static boolean bFld=false;
    public static int iFld=13;
    public static short sFld=2148;
    public static float fFld=-1.788F;
    public long lFld1=12392L;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0249.lArrFld, 14L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i2, long l1, int i3) {

        int i4=11472;
        int i5=41060;
        int i6=-35661;
        int i7=-40018;
        int i8=-43194;
        int[] iArr =new int[N];
        float[] fArr =new float[N];
        long[] lArr =new long[N];
        boolean[][] bArr =new boolean[N][N];

        FuzzerUtils.init(fArr, 87.715F);
        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(bArr, false);

        for (float f1 : fArr) {
            i3 |= (int) Test0249.instanceCount;
        }
        for (i4 = 10; i4 < 349; i4++) {
            if (i3 != 0) {
                vMeth1_check_sum += i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr) +
                    FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
                return;
            }
            for (i6 = 1; i6 < 5; i6++) {
                Test0249.dFld -= Test0249.lFld;
                i8 = 1;
                while (++i8 < 2) {
                    i2 >>= -6;
                    i2 = i6;
                    Test0249.bFld = false;
                    i3 = i5;
                    lArr[i6 + 1] += i7;
                }
                iArr[i6] += (int) Test0249.lFld;
                bArr[i6][i6] = Test0249.bFld;
                if (Test0249.bFld) continue;
            }
        }
        vMeth1_check_sum += i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr))
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth(long l, float f) {

        int i1=18, i9=-178, i10=4647, i11=-225, i12=6, i13=6;
        long l2=-42844L;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)17368);

        f += (((long) (Test0249.dFld + 1.54585) >> (sArr[(i1 >>> 1) % N]++)) * (i1 + (Test0249.lFld--)));
        vMeth1(i1, Test0249.instanceCount, i1);
        Test0249.instanceCount >>>= i1;
        i1 = 10;
        for (i9 = 10; i9 < 169; i9++) {
            for (i11 = 10; i9 < i11; i11 -= 3) {
                f += (i11 * f);
                switch (((Test0249.iFld >>> 1) % 4) + 85) {
                case 85:
                    i10 >>= (int) Test0249.instanceCount;
                    l2 = 1;
                    do {
                        i10 += (int) (((l2 * i13) + Test0249.iFld) - l);
                        Test0249.sFld = (short) l2;
                        Test0249.iFld += (int) (l2 | Test0249.lFld);
                    } while (++l2 < 1);
                    f += (i11 * i11);
                    l = i12;
                    break;
                case 86:
                    i13 += (i11 * i11);
                    break;
                case 87:
                    Test0249.lFld = 130;
                    break;
                case 88:
                    i1 += (-22 + (i11 * i11));
                }
            }
        }
        vMeth_check_sum += l + Float.floatToIntBits(f) + i1 + i9 + i10 + i11 + i12 + l2 + i13 +
            FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(boolean b) {


        vMeth(Test0249.lFld, Test0249.fFld);
        long meth_res = (b ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-39889;
        int i14=4628;
        int i15=148;
        int i16=68;
        int[] iArr1 =new int[N];
        byte by=36;

        FuzzerUtils.init(iArr1, -42243);

        i = iMeth(Test0249.bFld);
        i14 = 1;
        while ((i14 += 3) < 179) {
            i15 = 1;
            do {
                Test0249.instanceCount += (((i15 * i15) + Test0249.lFld) - i);
                switch ((i15 % 8) + 71) {
                case 71:
                    i16 = 1;
                    do {
                        Test0249.iFld = i16;
                        iArr1[i15 + 1] = i14;
                        Test0249.fFld += Test0249.lFld;
                        Test0249.iFld *= i;
                        switch (((i14 % 2) * 5) + 1) {
                        case 5:
                            switch ((i16 % 5) + 2) {
                            case 2:
                                Test0249.iFld -= (int) Test0249.lFld;
                                break;
                            case 3:
                                iArr1[i16 + 1] -= i;
                                Test0249.lArrFld[i14] += 0;
                                i += (((i16 * i15) + i) - Test0249.instanceCount);
                                Test0249.iFld *= i15;
                            case 4:
                                Test0249.iFld += (i16 * i16);
                                i = 41888;
                                Test0249.lFld += i15;
                                iArr1[i15 + 1] = i14;
                                break;
                            case 5:
                                Test0249.iFld += (-19529 + (i16 * i16));
                                Test0249.lArrFld[i16] %= (Test0249.iFld | 1);
                                Test0249.iFld -= i14;
                                break;
                            case 6:
                                Test0249.lFld += i16;
                                Test0249.lFld = 26630;
                            }
                            Test0249.iFld = by;
                        case 7:
                        default:
                            iArr1[i15 - 1] >>= i;
                            i >>= i;
                            lFld1 += (((i16 * lFld1) + i) - by);
                        }
                    } while (++i16 < 2);
                case 72:
                    by = (byte) Test0249.fFld;
                    break;
                case 73:
                    Test0249.iFld = (int) Test0249.fFld;
                    break;
                case 74:
                case 75:
                    by = (byte) Test0249.instanceCount;
                    break;
                case 76:
                    Test0249.instanceCount -= i16;
                    break;
                case 77:
                    Test0249.iFld &= i15;
                case 78:
                    i = (int)-7L;
                    break;
                }
            } while (++i15 < i14);
        }

        FuzzerUtils.out.println("i i14 i15 = " + i + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 by iArr1 = " + i16 + "," + by + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0249.instanceCount Test0249.dFld Test0249.lFld = " + Test0249.instanceCount + "," +
                Double.doubleToLongBits(Test0249.dFld) + "," + Test0249.lFld);
        FuzzerUtils.out.println("Test0249.bFld Test0249.iFld Test0249.sFld = " + (Test0249.bFld ? 1 : 0) + "," + Test0249.iFld + "," +
                Test0249.sFld);
        FuzzerUtils.out.println("Test0249.fFld lFld1 Test0249.lArrFld = " + Float.floatToIntBits(Test0249.fFld) + "," + lFld1 + ","
                + FuzzerUtils.checkSum(Test0249.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0249 _instance = new Test0249();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
