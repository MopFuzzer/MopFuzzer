// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:26 2023
public class Test0311 {

    public static final int N = 400;

    public static long instanceCount=6790951973286146877L;
    public short sFld=23887;
    public static long lFld=1177731402124746949L;
    public static double dFld=-55.47550;
    public static short sFld1=-28003;
    public static float fFld=-54.1003F;
    public static long lFld1=0L;
    public static float[] fArrFld =new float[N];
    public static volatile double[] dArrFld =new double[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0311.fArrFld, 75.7F);
        FuzzerUtils.init(Test0311.dArrFld, -1.93401);
        FuzzerUtils.init(Test0311.byArrFld, (byte) -5);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(byte by) {

        int i8=44393;
        int i9=-53780;
        int i10=4;
        int i11=-126;
        int i12=-64884;
        int i13=-237;
        int i14=-136;
        int[] iArr =new int[N];
        boolean b1=true;
        float f=2.356F;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr, -12);
        FuzzerUtils.init(dArr, 14.119816);

        switch (((-9249 >>> 1) % 6) + 16) {
        case 16:
            try {
                for (i8 = 246; (11 - 400) < i8; i8--) {
                    for (i10 = 1; (4 + 400) > i10; ++i10) {
                        i9 *= (int)88.846F;
                        i11 += i11;
                        iArr[i8 - 1] -= i11;
                        i9 = i11;
                        i9 += i10;
                    }
                    if (b1) break;
                }
                i11 -= (int)f;
                i12 = 1;
                while (++i12 < 263) {
                    for (i13 = 1 - 400; i13 < 6; ++i13) {
                        i14 += (i13 ^ i11);
                        iArr[i13] = i9;
                    }
                }
            }
            catch (ArrayIndexOutOfBoundsException exc2) {
                i14 *= 123;
            }
            finally {
                i9 = -151;
            }
            break;
        case 17:
            Test0311.dFld = i13;
            break;
        case 18:
            dArr[(i11 >>> 1) % N] += Test0311.dFld;
            break;
        case 19:
            i14 = i8;
            break;
        case 20:
            Test0311.instanceCount = i10;
            break;
        case 21:
            i14 += 13316;
            break;
        default:
            by *= (byte)1.990F;
        }
        vMeth2_check_sum += by + i8 + i9 + i10 + i11 + (b1 ? 1 : 0) + Float.floatToIntBits(f) + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth1() {

        int i7=-1, i15=-54019, i16=49620;
        byte by1=28;
        long l1=-2324L, l2=431924728L;
        float f2=-2.697F;

        Test0311.fArrFld[(i7 >>> 1) % N] = (float) ((-(i7 + i7)) * -1.61324);
        vMeth2(by1);
        i15 = 199;
        while ((i15 -= 3) > 0) {
            i16 = 1;
            while (++i16 < 23) {
                float f1=0.948F;
                Test0311.instanceCount = 52486;
                i7 = (int)l1;
                i7 += (((i16 * i7) + i7) - i15);
                Test0311.sFld1 -= (short) f1;
                i7 = i16;
                l1 >>= l1;
            }
            i7 %= (int)(i16 | 1);
            i7 += (int)l2;
            f2 = i16;
            i7 = Test0311.sFld1;
            l1 <<= i16;
        }
        vMeth1_check_sum += i7 + by1 + i15 + i16 + l1 + l2 + Float.floatToIntBits(f2);
    }

    public static void vMeth(int i1, long l, int i2) {

        int i3=-230, i4=-23906, i5=-47678, i6=-157, i17=14851, i18=7;
        boolean b2=false;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -2911L);

        for (i3 = 126; i3 > 5; i3 -= 2) {
            boolean b=false;
            i2 += (int)(++l);
            b = false;
            for (i5 = 1; i5 < 26; ++i5) {
                vMeth1();
            }
            if (true) continue;
            i6 += i3;
        }
        i4 = (int) Test0311.lFld;
        lArr[(54936 >>> 1) % N] = i1;
        Test0311.dArrFld[(2 >>> 1) % N] /= (i1 | 1);
        Test0311.byArrFld[(i1 >>> 1) % N] ^= (byte) i4;
        for (i17 = 138; i17 > 3; i17 -= 2) {
            i18 = i5;
            i18 = i1;
        }
        b2 = b2;
        vMeth_check_sum += i1 + l + i2 + i3 + i4 + i5 + i6 + i17 + i18 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-8;
        int i19=224;
        int i20=71;
        int i21=-197;
        int i22=-46;
        int i23=-246;
        int i24=-5;
        int[] iArr1 =new int[N];
        boolean b3=true;

        FuzzerUtils.init(iArr1, -2333);

        i <<= (int) (sFld *= (short) ((-(Test0311.lFld + -236L)) - (sFld--)));
        vMeth(-39, Test0311.lFld, i);
        i -= (int) Test0311.instanceCount;
        for (i19 = 1; i19 < 200; ++i19) {
            for (i21 = 2; i21 < 126; ++i21) {
                switch (((i19 % 2) * 5) + 85) {
                case 95:
                    i20 = i21;
                    switch ((((i19 >>> 1) % 1) * 5) + 9) {
                    case 11:
                        Test0311.instanceCount *= 72;
                        break;
                    default:
                        i22 *= 0;
                        i20 >>= -2;
                        Test0311.fFld += (((i21 * Test0311.lFld) + Test0311.lFld) - i22);
                    }
                    break;
                case 89:
                    Test0311.fFld -= i19;
                    iArr1[i19 + 1] -= i21;
                    i -= i19;
                    break;
                default:
                    Test0311.dArrFld[i19 + 1] += -7863571314207872151L;
                    i22 += (i21 | i19);
                    for (i23 = 2; 1 < i23; i23--) {
                        Test0311.dFld = Test0311.lFld1;
                        i += i23;
                        sFld -= (short)i20;
                        iArr1[i21 + 1] <<= i22;
                        i += (int)(5621L + (i23 * i23));
                        i22 *= (int) Test0311.lFld1;
                        Test0311.dFld = Test0311.fFld;
                        i20 += (int)85L;
                        i -= (int)-40L;
                        i20 += i;
                    }
                    b3 = b3;
                }
                iArr1[(i24 >>> 1) % N] = i19;
            }
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 b3 iArr1 = " + i24 + "," + (b3 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0311.instanceCount sFld Test0311.lFld = " + Test0311.instanceCount + "," + sFld + "," +
                Test0311.lFld);
        FuzzerUtils.out.println("Test0311.dFld Test0311.sFld1 Test0311.fFld = " + Double.doubleToLongBits(Test0311.dFld) + "," +
                Test0311.sFld1 + "," + Float.floatToIntBits(Test0311.fFld));
        FuzzerUtils.out.println("Test0311.lFld1 Test0311.fArrFld Test0311.dArrFld = " + Test0311.lFld1 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0311.fArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0311.dArrFld)));
        FuzzerUtils.out.println("Test0311.byArrFld = " + FuzzerUtils.checkSum(Test0311.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0311 _instance = new Test0311();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
