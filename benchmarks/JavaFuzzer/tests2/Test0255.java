// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0255 {

    public static final int N = 400;

    public static long instanceCount=-8172107939105096387L;
    public static boolean bFld=false;
    public static int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0255.iArrFld, 23526);
        FuzzerUtils.init(Test0255.lArrFld, -12L);
        FuzzerUtils.init(Test0255.fArrFld, 121.708F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1, float f1) {

        int i3=162, i4=25016, i5=-168, i6=-234, i7=0, i8=-46, i9=-7;
        double d=0.29083;

        for (int i2 : Test0255.iArrFld) {
            for (i3 = 4; 1 < i3; i3--) {
                f1 += i2;
            }
            i4 = (int)l1;
            i2 >>= i5;
            if (Test0255.bFld) break;
            i2 = i2;
            for (i6 = 1; i6 < 4; ++i6) {
                d = 65;
                i5 /= (int)(i3 | 1);
                i2 = -128;
                for (i8 = 1; i8 < 2; ++i8) {
                    i5 = (int)l;
                    i4 = (int) Test0255.instanceCount;
                    i2 <<= i8;
                }
            }
        }
        vMeth1_check_sum += l + l1 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            i8 + i9;
    }

    public static void vMeth() {

        float f2=0.915F;
        int i10=-17678, i12=-13, i13=33, i14=-1, i15=-11;
        byte by=-54;
        long l2=1768746808356386705L;

        vMeth1(Test0255.instanceCount, Test0255.instanceCount, f2);
        i10 = by;
        Test0255.instanceCount -= i10;
        i10 = (int) Test0255.instanceCount;
        for (int i11 : Test0255.iArrFld) {
            int i16=2;
            for (i12 = 1; i12 < 4; ++i12) {
                i13 += (((i12 * i10) + f2) - i12);
                Test0255.iArrFld[i12 - 1] >>= i12;
                for (i14 = 1; 2 > i14; i14++) {
                    i10 += i15;
                    try {
                        i11 = (i14 / -2674);
                        i10 = (i14 / 64736);
                        i13 = (-634309797 / i12);
                    } catch (ArithmeticException a_e) {}
                    i11 = i14;
                    l2 += (((i14 * i12) + l2) - i15);
                }
                i11 = 0;
            }
            try {
                i13 = (i11 / 17);
                i16 = (i12 / Test0255.iArrFld[(-35711 >>> 1) % N]);
                i13 = (127 % Test0255.iArrFld[(i16 >>> 1) % N]);
            } catch (ArithmeticException a_e) {}
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i10 + by + i12 + i13 + i14 + i15 + l2;
    }

    public static void vSmallMeth(int i1, float f) {

        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)17223);

        vMeth();
        i1 ^= i1;
        vSmallMeth_check_sum += i1 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-43;
        int i17=13;
        int i18=21483;
        int i19=0;
        int i20=13;
        int i21=9;
        int i22=-8;
        int i23=-47263;
        int[][] iArr =new int[N][N];
        double d1=57.79367;
        double[] dArr =new double[N];
        float f3=0.697F;

        FuzzerUtils.init(dArr, 29.24478);
        FuzzerUtils.init(iArr, 10);

        Test0255.iArrFld[(i >>> 1) % N] = i;
        for (int smallinvoc=0; smallinvoc<517; smallinvoc++) vSmallMeth(i, 1.538F);
        Test0255.bFld = Test0255.bFld;
        i &= i;
        for (i17 = 143; 6 < i17; --i17) {
            for (i19 = i17; i19 < 183; ++i19) {
                Test0255.instanceCount -= i;
                dArr[i19] += i18;
                i18 += (int)d1;
                for (i21 = 1; 1 > i21; i21++) {
                    if (Test0255.bFld) {
                        i22 *= i22;
                        Test0255.lArrFld[i21 + 1] -= i17;
                        Test0255.fArrFld[i19 + 1] = (float) d1;
                    } else {
                        d1 = i18;
                        Test0255.instanceCount -= -25940;
                        i18 = (int)10L;
                    }
                    d1 += -20891;
                    i18 <<= 30;
                    i18 = i;
                    i18 += (i21 ^ Test0255.instanceCount);
                    i |= i18;
                    iArr = FuzzerUtils.int2array(N, (int)-10);
                }
                try {
                    i = (i19 % i17);
                    iArr[i17 - 1][i19 - 1] = (57 % i18);
                    i18 = (206 % i18);
                } catch (ArithmeticException a_e) {}
                f3 *= i22;
                i23 = 1;
                do {
                    i = i21;
                    i += (((i23 * i22) + i22) - Test0255.instanceCount);
                    i = i17;
                    Test0255.instanceCount = (long) f3;
                } while (++i23 < 1);
            }
        }

        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 d1 = " + i19 + "," + i20 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i21 i22 f3 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 dArr iArr = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0255.instanceCount Test0255.bFld Test0255.iArrFld = " + Test0255.instanceCount + "," + (Test0255.bFld
                ? 1 : 0) + "," + FuzzerUtils.checkSum(Test0255.iArrFld));
        FuzzerUtils.out.println("Test0255.lArrFld Test0255.fArrFld = " + FuzzerUtils.checkSum(Test0255.lArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0255.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0255 _instance = new Test0255();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
