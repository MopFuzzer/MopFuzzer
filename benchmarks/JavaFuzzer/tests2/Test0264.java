// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:24 2023
public class Test0264 {

    public static final int N = 400;

    public static long instanceCount=-6L;
    public static int iFld=-59430;
    public static int iFld1=-5;
    public static boolean bFld=true;
    public static byte byFld=-26;
    public volatile double dFld=80.85826;
    public static int[] iArrFld =new int[N];
    public static volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0264.iArrFld, -5);
        FuzzerUtils.init(Test0264.lArrFld, 598366841L);
    }

    public static long vMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth(boolean b, int i2, int i3) {


        i2 %= (int) (Test0264.instanceCount | 1);
        vMeth_check_sum += (b ? 1 : 0) + i2 + i3;
    }

    public static void vMeth1(int i9, int i10, int i11) {

        float f2=0.789F;
        double d=0.64681, d1=1.127253;
        int i12=-161;
        int i13=-176;
        int i14=-6;
        int i15=-254;
        int i16=-61818;
        int[] iArr1 =new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr1, 5);

        Test0264.instanceCount -= (long) f2;
        Test0264.iFld = (int) d;
        for (i12 = 5; i12 < 244; ++i12) {
            for (d1 = 1; d1 < 7; ++d1) {
                byte by=95;
                if (b1) {
                    i10 |= i11;
                    i11 = by;
                    i11 += (int)(d1 * i11);
                    for (i15 = 1; i15 < 2; ++i15) {
                        i16 += (-138 + (i15 * i15));
                        if (i16 != 0) {
                            vMeth1_check_sum += i9 + i10 + i11 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d)
                                + i12 + i13 + Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b1 ? 1 : 0) +
                                FuzzerUtils.checkSum(iArr1);
                            return;
                        }
                        iArr1[(i16 >>> 1) % N] = i16;
                        d += i9;
                        Test0264.instanceCount += (((i15 * i10) + i9) - Test0264.iFld1);
                    }
                } else if (Test0264.bFld) {
                    b1 = true;
                }
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + i12 + i13 +
            Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static double dMeth(long l) {

        int i8=10;
        int i17=-13;
        int[] iArr =new int[N];
        float f1=-48.15F;
        short s=3258;
        long l1=-12L;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr, 57912);
        FuzzerUtils.init(dArr, 44.46860);

        i8 *= (iArr[(i8 >>> 1) % N] << i8);
        i8 = (int)f1;
        vMeth1(i8, Test0264.iFld, -123);
        dArr[(-55972 >>> 1) % N] = Test0264.iFld;
        f1 = Test0264.iFld1;
        Test0264.iFld1 += (int) 1.109348;
        i17 = 1;
        while (++i17 < 126) {
            l -= i8;
            Test0264.instanceCount = -220;
            s += (short)2069464899L;
            i8 += i17;
            Test0264.iFld1 = (int) l;
            l -= Test0264.instanceCount;
            l1 %= ((long)(f1) | 1);
            l1 += i17;
        }
        long meth_res = l + i8 + Float.floatToIntBits(f1) + i17 + s + l1 + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static boolean bMeth(int i4, int i5, float f) {

        int i6=7992, i7=-3100, i18=6432, i19=-25998, i20=178;
        short s1=25908;
        double d2=0.63158;

        for (i6 = 10; i6 < 258; ++i6) {
            vMeth((dMeth(Test0264.instanceCount) - Test0264.instanceCount) >= i4, i4, i6);
            i7 += (52189 + (i6 * i6));
            i18 = 1;
            do {
                for (i19 = 1; i19 < 1; i19++) {
                    s1 = (short)i7;
                    i4 += i19;
                    Test0264.iFld1 += (int) d2;
                    if (true) break;
                    Test0264.instanceCount -= Test0264.iFld1;
                    Test0264.iFld1 %= (int) ((long) (f) | 1);
                    try {
                        Test0264.iFld = (392594239 % Test0264.iFld1);
                        Test0264.iFld = (-181 % Test0264.iFld1);
                        i7 = (Test0264.iFld % -204);
                    } catch (ArithmeticException a_e) {}
                }
                Test0264.iArrFld[i6 + 1] = (int) -187L;
                Test0264.iArrFld[i18] = i7;
                Test0264.lArrFld[i6] -= i19;
            } while (++i18 < 7);
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i18 + i19 + i20 + s1 +
            Double.doubleToLongBits(d2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=-5, i21=-2, i22=-27341, i23=-251, i24=-183;
        float f3=0.255F;
        long l2=-8154L;
        double d3=-1.14534;

        for (i = 5; i < 330; ++i) {
            vMeth(bMeth(Test0264.iFld, Test0264.iFld1, f3), 35, i);
            for (l2 = i; l2 < 77; l2++) {
                i1 -= -150;
                Test0264.iFld -= 83;
            }
            d3 = 1;
            while (++d3 < 77) {
                i22 = 1;
                do {
                    Test0264.iFld1 = (int) l2;
                    Test0264.byFld += (byte) l2;
                    i1 = 248;
                    if (Test0264.bFld) {
                        Test0264.instanceCount = i22;
                        dFld -= Test0264.iFld;
                        Test0264.iFld1 += (i22 * i21);
                        Test0264.lArrFld[(int) (d3 - 1)] = Test0264.iFld;
                    }
                } while (++i22 < 1);
                Test0264.iFld1 *= i;
                i1 >>= i;
                for (i23 = i; i23 < 1; ++i23) {
                    Test0264.instanceCount -= i1;
                    Test0264.instanceCount += (((i23 * f3) + f3) - i);
                }
                if (Test0264.bFld) {
                    i1 += i23;
                    Test0264.iArrFld = Test0264.iArrFld;
                    i1 += (int)d3;
                } else if (Test0264.bFld) {
                    Test0264.instanceCount = -39;
                }
                Test0264.iFld <<= i;
            }
            i1 -= 39400;
        }
        Test0264.iFld = i22;
        i1 *= i21;
        f3 = f3;

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("l2 i21 d3 = " + l2 + "," + i21 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);

        FuzzerUtils.out.println("Test0264.instanceCount Test0264.iFld Test0264.iFld1 = " + Test0264.instanceCount + "," + Test0264.iFld +
                "," + Test0264.iFld1);
        FuzzerUtils.out.println("Test0264.bFld Test0264.byFld dFld = " + (Test0264.bFld ? 1 : 0) + "," + Test0264.byFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0264.iArrFld Test0264.lArrFld = " + FuzzerUtils.checkSum(Test0264.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0264.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0264 _instance = new Test0264();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest bMeth
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  dMeth ->  dMeth bMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 dMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
