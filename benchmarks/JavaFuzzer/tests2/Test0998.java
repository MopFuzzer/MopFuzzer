// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:59 2023
public class Test0998 {

    public static final int N = 400;

    public static long instanceCount=137L;
    public int iFld=-206;
    public static short sFld=15043;
    public static volatile int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0998.iArrFld, 245);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, int i11) {

        double d=2.6504;
        int i12=56147, i13=0, i14=-26328, i15=-20007, i16=3, i17=12;
        float f2=0.757F;
        short s1=24230;

        d += 14447;
        for (i12 = 2; i12 < 134; ++i12) {
            f2 = i11;
            f2 -= i10;
            i10 = 1;
            i13 -= i10;
            i13 *= -14;
            for (i14 = 1; i14 < 12; i14++) {
                for (i16 = 2; i16 > 1; i16--) {
                    switch (((i14 % 1) * 5) + 64) {
                    case 68:
                        switch (((i13 >>> 1) % 2) + 24) {
                        case 24:
                            s1 |= (short)i15;
                            Test0998.instanceCount += (i16 * i16);
                            break;
                        case 25:
                            Test0998.instanceCount -= i17;
                            f2 -= -51L;
                        }
                        break;
                    }
                }
            }
        }
        long meth_res = i10 + i11 + Double.doubleToLongBits(d) + i12 + i13 + Float.floatToIntBits(f2) + i14 + i15 + i16
            + i17 + s1;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i4) {

        int i5=-229, i6=-224, i7=5, i8=-5, i9=-20434;
        boolean b=true;
        double d1=-71.24478;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -1620091699271810192L);

        for (i5 = 12; 334 > i5; i5 += 3) {
            i6 = (int)-1.716F;
            for (i7 = 1; i7 < 15; i7++) {
                i9 = 1;
                do {
                    i8 *= (int) (Test0998.instanceCount - (Test0998.iArrFld[i9] + iMeth(i7, i9)));
                    Test0998.instanceCount += Test0998.sFld;
                    i6 = i6;
                    if (b) break;
                    lArr[i9 - 1] = (long)d1;
                } while (++i9 < 2);
                try {
                    i6 = (i4 % i7);
                    i6 = (i4 % i8);
                    Test0998.iArrFld[i7 - 1] = (i4 % i5);
                } catch (ArithmeticException a_e) {}
                i6 += (-145 + (i7 * i7));
                i8 = (int) Test0998.instanceCount;
                Test0998.iArrFld[i5 - 1] ^= i4;
                i6 += i7;
                i4 &= (int)1789258860663343534L;
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr);
    }

    public float fMeth(short s, long l) {

        float f1=-2.338F;
        float[] fArr =new float[N];
        int i18=-6, i19=5, i20=254, i21=-23226, i22=20, i23=-60858;
        byte by1=116;
        double d2=0.91055;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(fArr, 0.390F);
        FuzzerUtils.init(lArr1, -232L);

        iFld = iFld;
        l -= (long)f1;
        s = (short)(f1++);
        vMeth(-8);
        for (i18 = 340; i18 > 17; i18 -= 2) {
            for (i20 = 10; i20 > 1; --i20) {
                boolean b1=false;
                i19 += (((i20 * i21) + iFld) - f1);
                fArr[i18] = 111;
                lArr1 = lArr1;
                i21 -= (int)f1;
                i21 = by1;
                b1 = b1;
                i22 = 1;
                while (++i22 < 2) {
                    f1 += (float)d2;
                    i23 = (int)l;
                }
            }
        }
        long meth_res = s + l + Float.floatToIntBits(f1) + i18 + i19 + i20 + i21 + by1 + i22 +
            Double.doubleToLongBits(d2) + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.819F;
        float f3=2.499F;
        float f4=12.39F;
        float[] fArr1 =new float[N];
        int i=33104, i1=-6, i2=-229, i3=63972, i24=-44348, i25=12, i26=-38239, i27=-9;
        byte by=119;
        boolean b2=true;
        boolean[] bArr =new boolean[N];
        double d3=111.108747;

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 55.526F);

        Test0998.instanceCount = (--iFld);
        for (f = 7; 218 > f; ++f) {
            i1 = 1;
            while (++i1 < 119) {
                for (i2 = 1; i2 < 1; ++i2) {
                    iFld += (int) (((by - i3) - (-fMeth(Test0998.sFld, Test0998.instanceCount))) - i);
                    by += (byte)i2;
                    i3 |= i3;
                    Test0998.instanceCount = Test0998.instanceCount;
                    iFld = 42143;
                    iFld = i3;
                    bArr[(int)(f + 1)] = b2;
                    f3 *= i2;
                }
                for (i24 = 1; i24 > 1; --i24) {
                    try {
                        i = (12672 % iFld);
                        i3 = (iFld % 1320);
                        Test0998.iArrFld[(int) (f + 1)] = (i25 / 195);
                    } catch (ArithmeticException a_e) {}
                    i25 += (int)d3;
                }
                Test0998.instanceCount /= (iFld | 1);
                i25 += i25;
                i26 = 1;
                do {
                    f3 = i2;
                    Test0998.instanceCount <<= i3;
                    f3 += i26;
                } while (++i26 < 1);
                f4 = 1;
                do {
                    Test0998.instanceCount = i2;
                    i3 -= by;
                    i27 = iFld;
                    switch (((i27 >>> 1) % 1) + 116) {
                    case 116:
                        fArr1[(int)(f4 + 1)] -= i3;
                        if (b2) break;
                        break;
                    default:
                        Test0998.instanceCount >>= i2;
                    }
                    i25 %= (int) (Test0998.instanceCount | 1);
                } while (++f4 < 1);
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 by = " + i2 + "," + i3 + "," + by);
        FuzzerUtils.out.println("b2 f3 i24 = " + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f3) + "," + i24);
        FuzzerUtils.out.println("i25 d3 i26 = " + i25 + "," + Double.doubleToLongBits(d3) + "," + i26);
        FuzzerUtils.out.println("f4 i27 bArr = " + Float.floatToIntBits(f4) + "," + i27 + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0998.instanceCount iFld Test0998.sFld = " + Test0998.instanceCount + "," + iFld + "," +
                Test0998.sFld);
        FuzzerUtils.out.println("Test0998.iArrFld = " + FuzzerUtils.checkSum(Test0998.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0998 _instance = new Test0998();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
