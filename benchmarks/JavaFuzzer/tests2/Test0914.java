// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:55 2023
public class Test0914 {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static short sFld=27464;
    public static double dFld=-78.97629;
    public float fFld=112.776F;
    public static short[] sArrFld =new short[N];
    public static volatile long[] lArrFld =new long[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0914.sArrFld, (short) 32518);
        FuzzerUtils.init(Test0914.lArrFld, -14L);
        FuzzerUtils.init(Test0914.fArrFld, -64.906F);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10) {

        int i11=-6;
        int i12=-52811;
        int i13=-9;
        int i14=140;
        int i15=57;
        int[] iArr1 =new int[N];
        float f1=104.572F, f2=1.68F;
        double d=126.20236;

        FuzzerUtils.init(iArr1, 9);

        for (i11 = 3; i11 < 202; i11++) {
            i12 = 40080;
        }
        i13 = 1;
        while (++i13 < 129) {
            i14 = 1;
            while (++i14 < 12) {
                switch ((i13 % 8) + 69) {
                case 69:
                    for (f1 = 1; f1 < 1; f1++) {
                        i15 = Test0914.sFld;
                        i10 += (int)(f1 * i15);
                        i15 = (int)f1;
                        Test0914.instanceCount += (long) ((long) f1 | i13);
                        switch ((((i13 >>> 1) % 6) * 5) + 101) {
                        case 115:
                            Test0914.instanceCount += (long) (((f1 * f1) + i14) - i15);
                            i10 += (-6829 + (f1 * f1));
                        case 128:
                            i15 *= i15;
                            f2 += (((f1 * i11) + Test0914.instanceCount) - i11);
                            break;
                        case 110:
                            iArr1[i13] += (int)f1;
                            break;
                        case 121:
                            if (i11 != 0) {
                                vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 +
                                    Float.floatToIntBits(f2) + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
                                return;
                            }
                            break;
                        case 106:
                            Test0914.instanceCount += (-32182 + (f1 * f1));
                        case 105:
                            i15 -= i14;
                            break;
                        default:
                            i15 <<= (int) Test0914.instanceCount;
                        }
                    }
                case 70:
                    i15 = 94;
                    break;
                case 71:
                    i15 -= i12;
                    break;
                case 72:
                    i15 = (int)d;
                    break;
                case 73:
                case 74:
                    Test0914.sArrFld[i14] = (short) i10;
                    break;
                case 75:
                    Test0914.lArrFld = Test0914.lArrFld;
                    break;
                case 76:
                    f2 += (10 + (i14 * i14));
                    break;
                default:
                    Test0914.instanceCount -= i13;
                }
            }
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + Float.floatToIntBits(f2) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth(float f, int i5, int i6) {

        int i7=10;
        int i8=208;
        int i9=72;
        int i16=57369;
        int i17=141;
        int i18=39;
        int[][] iArr2 =new int[N][N];
        float f3=-95.618F;

        FuzzerUtils.init(iArr2, -26);

        i7 = 215;
        do {
            for (i8 = i7; i8 < 7; i8++) {
                vMeth(-57);
                i5 += (i8 + i7);
                i6 |= i7;
                for (i16 = 1; i16 > i7; --i16) {
                    i18 += (i16 * i16);
                    i6 -= i18;
                    i9 += (int)f3;
                    i5 += (i16 | i8);
                    Test0914.instanceCount += (long) (0.454F + (i16 * i16));
                    Test0914.instanceCount -= (long) Test0914.dFld;
                }
                Test0914.instanceCount = i6;
                i17 = i16;
                iArr2[i8 - 1][i8 + 1] *= i7;
            }
        } while (--i7 > 0);
        long meth_res = Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + i9 + i16 + i17 + i18 + Float.floatToIntBits(f3) +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i1=-4;
        int i2=34148;
        int i3=-6;
        int i4=13;
        int i19=10;
        int i20=6;
        int i21=28811;
        int i22=240;
        int[] iArr3 =new int[N];
        float f4=-1.819F;

        FuzzerUtils.init(iArr3, 0);

        for (i1 = 10; i1 < 243; i1++) {
            for (i3 = i1; 7 > i3; i3++) {
                if ((fMeth(f4, i1, i3) - 6540) != Test0914.instanceCount) continue;
                iArr3[i1] *= (int)f4;
                i4 *= (int) Test0914.instanceCount;
            }
            i2 += (i1 + Test0914.instanceCount);
            for (i19 = 1; i19 < 7; i19++) {
                for (i21 = 1; 2 > i21; i21++) {
                    Test0914.fArrFld[i19] = i2;
                    Test0914.instanceCount = i20;
                    switch ((i19 % 3) + 79) {
                    case 79:
                        Test0914.lArrFld[i1] *= Test0914.instanceCount;
                        i4 += (int) Test0914.instanceCount;
                        Test0914.instanceCount = i3;
                        i20 = i2;
                        break;
                    case 80:
                        try {
                            iArr3[i19 + 1] = (26185 / i19);
                            i22 = (iArr3[i19 - 1] / -242);
                            i2 = (iArr3[i1 + 1] / -49769);
                        } catch (ArithmeticException a_e) {}
                    case 81:
                        i22 += (int) Test0914.instanceCount;
                        break;
                    default:
                        Test0914.instanceCount = i20;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f4) + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=-17L;
        int i23=1328;
        int i26=-94;
        int i27=-5;
        int i28=-247;
        int[] iArr =new int[N];
        boolean b=false;
        double d1=1.54044;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr, 4);
        FuzzerUtils.init(byArr, (byte)47);

        iArr[(29063 >>> 1) % N] >>>= (int) Test0914.instanceCount;
        for (int i : iArr) {
            i = (-62 * iMeth());
            i *= i;
            fFld -= i;
        }
        for (l = 4; l < 154; l++) {
            Test0914.instanceCount = Test0914.instanceCount;
            Test0914.instanceCount = 2;
            i23 /= (int)(i23 | 1);
            try {
                i23 = (i23 / -27579);
                i23 = (-55890 / i23);
                i23 = (i23 / i23);
            } catch (ArithmeticException a_e) {}
            i23 += (int)(((l * i23) + i23) - i23);
            Test0914.lArrFld[(int) (l - 1)] >>= i23;
            byArr[(int)(l + 1)] += (byte)-6541822005692672499L;
            i23 += (-241 + (l * l));
            i23 += (int)(l * l);
        }
        b = b;
        for (i26 = 1; i26 < 224; ++i26) {
            fFld += (-7 + (i26 * i26));
            Test0914.instanceCount %= -7;
            i28 = 113;
            while (--i28 > 0) {
                i23 >>= i23;
                d1 = 1;
                do {
                    Test0914.instanceCount -= i27;
                    i27 += (int)(d1 * d1);
                    iArr[(int)(d1)] += i23;
                    Test0914.sFld += (short) i27;
                    Test0914.instanceCount += (-12 + (d1 * d1));
                    i27 = (int)1.130093;
                    iArr[(int)(d1 - 1)] -= (int)-1.929F;
                    i27 *= i26;
                } while (++d1 < 1);
            }
        }

        FuzzerUtils.out.println("l i23 b = " + l + "," + i23 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d1 iArr byArr = " + Double.doubleToLongBits(d1) + "," + FuzzerUtils.checkSum(iArr) +
            "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0914.instanceCount Test0914.sFld Test0914.dFld = " + Test0914.instanceCount + "," + Test0914.sFld +
                "," + Double.doubleToLongBits(Test0914.dFld));
        FuzzerUtils.out.println("fFld Test0914.sArrFld Test0914.lArrFld = " + Float.floatToIntBits(fFld) + "," +
                FuzzerUtils.checkSum(Test0914.sArrFld) + "," + FuzzerUtils.checkSum(Test0914.lArrFld));
        FuzzerUtils.out.println("Test0914.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0914.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0914 _instance = new Test0914();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
