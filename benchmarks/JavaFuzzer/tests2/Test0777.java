// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:48 2023
public class Test0777 {

    public static final int N = 400;

    public static long instanceCount=767013869718470538L;
    public static float fFld=-1.743F;
    public static boolean bFld=false;
    public static volatile double dFld=51.113599;
    public static short sFld=23837;
    public static byte byFld=74;
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0777.dArrFld, -76.51616);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(double d1, byte by, float f1) {

        int i7=-236;
        int i8=136;
        int i9=1;
        int i10=14;
        int i11=-40554;
        int i12=-8;
        int[][] iArr1 =new int[N][N];
        short s=-31474;
        short[][] sArr =new short[N][N];
        double[] dArr =new double[N];

        FuzzerUtils.init(sArr, (short)21209);
        FuzzerUtils.init(dArr, 2.86755);
        FuzzerUtils.init(iArr1, -22303);

        for (i7 = 10; i7 < 297; i7++) {
            i8 += (((i7 * i8) + i7) - i8);
            sArr[i7 - 1][i7] -= (short) Test0777.instanceCount;
            dArr[i7 - 1] = d1;
            iArr1[i7][i7 + 1] = s;
            for (i9 = i7; 6 > i9; i9++) {
                Test0777.instanceCount -= Test0777.instanceCount;
                Test0777.instanceCount -= i10;
                i8 *= i10;
                i10 *= -6;
                iArr1[i7][i7] = -8;
                if (Test0777.bFld) continue;
                for (i11 = 1; 1 < i11; i11--) {
                    Test0777.instanceCount = (long) 1.44863;
                    iArr1[i9 - 1][i7 + 1] -= 2;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + by + Float.floatToIntBits(f1) + i7 + i8 + s + i9 + i10 + i11 +
            i12 + FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i6=-4, i13=-6, i14=25555, i15=2, i16=-58830;
        byte by1=61;

        i6 += (int) ((fMeth(Test0777.dFld, by1, Test0777.fFld) + Test0777.fFld) * i6);
        for (i13 = 6; i13 < 262; i13++) {
            Test0777.dArrFld[i13] = i6;
            i6 *= (int) Test0777.fFld;
            i6 = i13;
            by1 += (byte) (i13 ^ Test0777.instanceCount);
            i14 = (int) Test0777.instanceCount;
        }
        Test0777.instanceCount = Test0777.instanceCount;
        for (i15 = 8; i15 < 316; ++i15) {
            if (false) break;
            i14 *= by1;
        }
        Test0777.fFld *= i6;
        for (double d2 : Test0777.dArrFld) {
            i16 -= i15;
            i16 -= (int)101.183F;
        }
        long meth_res = i6 + by1 + i13 + i14 + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, float f) {

        int i4=-14;
        int i5=4;
        int i17=1;
        int i18=-249;
        int i19=53;
        int i20=-61871;
        int[] iArr2 =new int[N];
        byte by2=38;
        boolean[] bArr =new boolean[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr2, -8618);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, -592619181L);

        for (i4 = 3; i4 < 132; ++i4) {
            i5 = (Math.max(i3, Math.min(-225, i5)) * (-(i3++)));
            switch (((i4 % 4) * 5) + 61) {
            case 71:
                Test0777.instanceCount *= (i5--);
                iMeth();
                for (i17 = 1; i17 < 12; ++i17) {
                    for (i19 = 1; i19 < 2; i19++) {
                        iArr2[i17] = (int) Test0777.instanceCount;
                    }
                    Test0777.fFld -= Test0777.instanceCount;
                    i20 += i20;
                    i18 += (((i17 * i3) + i5) - Test0777.instanceCount);
                    Test0777.dFld -= by2;
                    Test0777.dFld = -18.842F;
                }
            case 65:
                try {
                    i5 = (i20 / 26518);
                    iArr2[i4] = (-114762416 % i3);
                    iArr2[i4] = (196 % i20);
                } catch (ArithmeticException a_e) {}
                bArr[i4] = Test0777.bFld;
                break;
            case 72:
                lArr[i4 - 1] &= 13L;
            case 75:
                Test0777.sFld = (short) Test0777.instanceCount;
                break;
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f) + i4 + i5 + i17 + i18 + i19 + i20 + by2 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-125.27992;
        int i=22140;
        int i1=-30524;
        int i2=138;
        int i21=-12;
        int i22=98;
        int i23=2327;
        int i24=4;
        int i25=-12;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 1);

        for (d = 3; d < 261; ++d) {
            iArr[(int) (d)] = Math.min(--iArr[(int) (d - 1)], (int) ((-(Test0777.instanceCount - i)) - (--Test0777.fFld)));
        }
        for (i1 = 8; i1 < 158; i1++) {
            vMeth(i, 2.858F);
        }
        for (i21 = 4; i21 < 360; i21++) {
            Test0777.fFld += (i21 * i2);
            i2 *= (int) Test0777.instanceCount;
            i = -84;
            switch ((i21 % 4) + 16) {
            case 16:
            case 17:
                i23 = 1;
                while (++i23 < 71) {
                    iArr = iArr;
                    for (i24 = 1; i24 < 1; ++i24) {
                        i2 >>= i21;
                        i2 -= i25;
                        i22 += i24;
                        i2 -= (int) Test0777.fFld;
                        if (Test0777.bFld) {
                            Test0777.bFld = true;
                            Test0777.bFld = true;
                            i22 += i24;
                            Test0777.byFld -= (byte) 47009;
                        }
                        switch ((i24 % 7) + 26) {
                        case 26:
                            i += (int) Test0777.instanceCount;
                            i25 ^= -2;
                            i2 += i24;
                            iArr[i21] >>= 2;
                            break;
                        case 27:
                            if (Test0777.bFld) {
                                i += (i24 * i24);
                            } else {
                                i2 = (int) Test0777.instanceCount;
                                Test0777.dFld = d;
                            }
                            break;
                        case 28:
                            Test0777.dArrFld[i24 - 1] = -8578L;
                        case 29:
                            i -= i23;
                            break;
                        case 30:
                            i25 += (((i24 * Test0777.fFld) + i25) - i25);
                            break;
                        case 31:
                            i25 = i25;
                            break;
                        case 32:
                            i2 -= Test0777.sFld;
                            break;
                        default:
                            Test0777.bFld = Test0777.bFld;
                        }
                    }
                }
                break;
            case 18:
                if (Test0777.bFld) continue;
                break;
            case 19:
                i += (i21 ^ i25);
                break;
            default:
                i25 = (int) Test0777.instanceCount;
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i21 i22 = " + i2 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0777.instanceCount Test0777.fFld Test0777.bFld = " + Test0777.instanceCount + "," +
                Float.floatToIntBits(Test0777.fFld) + "," + (Test0777.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0777.dFld Test0777.sFld Test0777.byFld = " + Double.doubleToLongBits(Test0777.dFld) + "," +
                Test0777.sFld + "," + Test0777.byFld);
        FuzzerUtils.out.println("Test0777.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0777.dArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0777 _instance = new Test0777();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
