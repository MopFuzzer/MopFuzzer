// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:58 2023
public class Test0969 {

    public static final int N = 400;

    public static long instanceCount=88L;
    public static int iFld=10;
    public static boolean bFld=true;
    public float fFld=0.501F;
    public short sFld=15719;
    public static int[][] iArrFld =new int[N][N];

    static {
        FuzzerUtils.init(Test0969.iArrFld, -14);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1, long l2, int i7) {

        int i8=-64535, i9=-33317, i10=0, i11=-7, i12=-3, i13=2, i14=-5;
        float f1=-78.228F;
        float f2=66.924F;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.11F);

        for (i8 = 10; i8 < 224; i8++) {
            Test0969.iFld >>>= Test0969.iFld;
            switch ((i8 % 7) + 118) {
            case 118:
                i7 += i8;
                i7 += Test0969.iFld;
            case 119:
            case 120:
                for (f1 = 1; f1 < 8; f1++) {
                    for (f2 = i8; f2 < 2; ++f2) {
                        fArr[i8 + 1] *= i7;
                        l2 = Test0969.iFld;
                    }
                    i9 = (int) Test0969.instanceCount;
                    for (i12 = i8; i12 < 2; i12++) {
                        if (Test0969.bFld) break;
                        Test0969.iArrFld[i12 - 1][i8 - 1] -= i14;
                        i11 += i13;
                        Test0969.instanceCount = 54L;
                    }
                }
                break;
            case 121:
                i9 *= (int)l1;
            case 122:
                if (Test0969.bFld) break;
                break;
            case 123:
                i11 = 71;
                break;
            case 124:
                i9 = i14;
            default:
                Test0969.iArrFld[i8 - 1][i8] = (int) l1;
            }
        }
        vMeth1_check_sum += l1 + l2 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + Float.floatToIntBits(f2) + i11 +
            i12 + i13 + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(short s, long l, double d) {

        float f=3.240F, f3=-113.731F;
        byte by=87;
        int i15=14, i16=16617, i17=14486, i18=13365, i19=201;

        Test0969.iFld = (int) ((f + (l++)) - Test0969.iArrFld[(Test0969.iFld >>> 1) % N][(Test0969.iFld >>> 1) % N]);
        vMeth1(l, Test0969.instanceCount, Test0969.iFld);
        Test0969.iFld = Test0969.iFld;
        l = (long)f;
        by &= (byte) Test0969.iFld;
        l *= (long)-7.162F;
        for (i15 = 10; i15 < 187; i15++) {
            for (i17 = 1; i17 < 9; i17++) {
                d *= -105.908F;
            }
            i16 /= (int)(l | 1);
            i18 = (int)d;
            f3 += (((i15 * i18) + i17) - i19);
        }
        f3 *= -226;
        d -= Test0969.iFld;
        Test0969.iFld += by;
        vMeth_check_sum += s + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + by + i15 + i16 + i17 + i18 +
            Float.floatToIntBits(f3) + i19;
    }

    public static long lMeth(int i4) {

        int i5=-25931, i6=8, i20=-1, i21=1, i22=-231, i23=13;
        short s1=942;
        double d1=-1.47976;

        for (i5 = 369; i5 > 10; --i5) {
            vMeth(s1, Test0969.instanceCount, d1);
            i6 -= i6;
            i4 -= i4;
            i4 += Test0969.iFld;
            Test0969.iFld -= 10165;
            i4 *= (int)-5L;
            s1 += (short)i5;
            if (Test0969.bFld) {
                for (i20 = 1; i20 < 5; i20++) {
                    for (i22 = 1; i22 < 2; i22++) {
                        Test0969.iFld >>>= (int) 410999935730247120L;
                        s1 = (short)i6;
                        i21 -= i23;
                        i23 = s1;
                    }
                }
            } else {
                i4 += (((i5 * i22) + i23) - i6);
            }
        }
        long meth_res = i4 + i5 + i6 + s1 + Double.doubleToLongBits(d1) + i20 + i21 + i22 + i23;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=28922;
        int i1=140;
        int i2=198;
        int i3=155;
        int i24=99;
        int i25=-65268;
        int i26=-250;
        int i27=138;
        int i28=208;
        int i29=31170;
        int[] iArr =new
                    int[N];
        double d2=2.65866;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(iArr, -1);
        FuzzerUtils.init(lArr, -194L);

        iArr = (iArr = (iArr = (iArr = iArr)));
        i = 1;
        do {
            Test0969.instanceCount = ((i1--) - i);
            i1 *= (int)(i / -6L);
            iArr[i + 1] >>= (int) (-((i * Test0969.instanceCount) >>> (--lArr[i][i - 1])));
            for (i2 = 3; i2 < 78; i2++) {
                Test0969.instanceCount = (lMeth(i) ^ Test0969.iFld);
                fFld = Test0969.instanceCount;
                d2 -= i3;
            }
            Test0969.iArrFld[i + 1][(0 >>> 1) % N] -= (int) -1.81940;
            switch (((i % 1) * 5) + 95) {
            case 96:
                for (i24 = 4; i24 < 78; ++i24) {
                    i25 = i24;
                    iArr = Test0969.iArrFld[i + 1];
                }
                d2 %= (i1 | 1);
                for (i26 = 2; i26 < 78; i26++) {
                    for (i28 = 1; i28 < 2; i28 += 3) {
                        if (Test0969.bFld) {
                            i25 += (((i28 * Test0969.iFld) + Test0969.instanceCount) - sFld);
                            Test0969.instanceCount *= 13;
                        } else if (Test0969.bFld) {
                            i1 *= (int) Test0969.instanceCount;
                            i3 <<= i28;
                            i25 = -217;
                        } else {
                            sFld <<= (short)i2;
                            i25 *= (int) Test0969.instanceCount;
                        }
                    }
                    if (false) break;
                    d2 *= i25;
                    iArr[i26] = Test0969.iFld;
                    Test0969.instanceCount = i27;
                    i29 = i;
                }
                break;
            default:
                i3 += (((i * i29) + i1) - i24);
            }
        } while (++i < 321);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d2 i24 = " + i3 + "," + Double.doubleToLongBits(d2) + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 iArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0969.instanceCount Test0969.iFld Test0969.bFld = " + Test0969.instanceCount + "," + Test0969.iFld +
                "," + (Test0969.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld sFld Test0969.iArrFld = " + Float.floatToIntBits(fFld) + "," + sFld + "," +
                FuzzerUtils.checkSum(Test0969.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0969 _instance = new Test0969();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
