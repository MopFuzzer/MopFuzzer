// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:18 2023
public class Test0144 {

    public static final int N = 400;

    public static long instanceCount=-238633428L;
    public static volatile float fFld=46.180F;
    public int iFld=44244;
    public static byte byFld=-117;
    public static double dFld=-2.37512;
    public static volatile int iFld1=8;
    public static long lFld=-171L;
    public short sFld=6971;
    public static long[] lArrFld =new long[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0144.lArrFld, -4143096299116715435L);
        FuzzerUtils.init(Test0144.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i10=-6;
        int i11=44175;
        int i13=201;
        int i14=5;
        int[] iArr1 =new int[N];
        boolean b=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr1, 40609);
        FuzzerUtils.init(fArr, 90.952F);

        for (i10 = 9; i10 < 216; i10++) {
            int i12=41;
            i11 = -98;
            i12 += (i10 * i10);
            if (b) {
                iArr1[i10] <<= (int) Test0144.instanceCount;
                for (i13 = 1; i13 < 8; ++i13) {
                    fArr[i13 + 1] += i14;
                    i11 += -4908;
                    i11 = (int) Test0144.instanceCount;
                    Test0144.instanceCount += (i13 | i14);
                    i11 += (int)115.17755;
                    Test0144.dFld = i10;
                    iArr1 = iArr1;
                }
                i14 += (i10 | i10);
                Test0144.lArrFld[i10] += i12;
            } else if (b) {
                iArr1[i10] += i13;
            }
        }
        vMeth_check_sum += i10 + i11 + i13 + i14 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(float f, float f1) {

        double d=-2.41736;
        int i15=222;
        int i16=-171;
        int i17=61337;
        int[] iArr2 =new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, -12);

        vMeth();
        d = 1;
        while (++d < 325) {
            Test0144.dFld = i15;
            if (b1) break;
            i16 = 1;
            do {
                Test0144.instanceCount = Test0144.instanceCount;
                iArr2[i16] += 17309;
                Test0144.fFld += (((i16 * i16) + Test0144.instanceCount) - Test0144.instanceCount);
                i15 = i16;
                Test0144.instanceCount += Test0144.instanceCount;
                i17 = 1;
                while (++i17 < 1) {
                    short s=22227;
                    Test0144.instanceCount += (long) Test0144.dFld;
                    i15 *= (int)d;
                    s += (short)i17;
                    Test0144.iFld1 = (int) Test0144.fFld;
                }
            } while (++i16 < 5);
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i15 + (b1 ? 1
            : 0) + i16 + i17 + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public int iMeth(int i3) {

        int i4=-73;
        int i5=11404;
        int i6=11;
        int i7=0;
        int i8=-1;
        int i9=27417;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 211);

        for (i4 = 1; i4 < 188; ++i4) {
            for (i6 = 1; i6 < 9; i6++) {
                if (i7 != 0) {
                }
                for (i8 = 1; i8 < 2; i8++) {
                    iArr[i8 - 1] <<= (iArr[i8]++);
                    iArr[i4 + 1] -= (int) (((i5 -= i4) * (Test0144.instanceCount + -12)) * (++i5));
                    iArr[i8 - 1] -= (int) (-54932 + ((--Test0144.fFld) + Integer.reverseBytes(i4)));
                    Test0144.lArrFld[i4] = Long.reverseBytes(Test0144.lArrFld[i8 - 1]);
                    i7 = (int) (++Test0144.instanceCount);
                    switch ((i8 % 9) + 123) {
                    case 123:
                    case 124:
                        iFld = Math.abs((int) ((-(i3 + Test0144.instanceCount)) - lMeth(Test0144.fFld, Test0144.fFld)));
                        break;
                    case 125:
                        i3 += (i8 * i8);
                        i7 *= (int) Test0144.fFld;
                        break;
                    case 126:
                        i3 += (((i8 * i6) + i9) - Test0144.instanceCount);
                        i3 = i3;
                        break;
                    case 127:
                        i9 |= iFld;
                        break;
                    case 128:
                        Test0144.iFld1 = (int) Test0144.fFld;
                    case 129:
                        Test0144.byFld += (byte) (i8 * i8);
                    case 130:
                        i3 = (int) Test0144.lFld;
                    case 131:
                        Test0144.lArrFld[i8 + 1] = 4719;
                        break;
                    default:
                        Test0144.iFld1 <<= i8;
                    }
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-132;
        int i1=-184;
        int i2=5;
        int i18=-207;
        int i19=-6428;
        int i20=-21793;
        int i21=11;
        int[] iArr3 =new int[N];
        long l=-5087507210128313413L, l1=-3114225725L;
        boolean b2=true;
        double[][] dArr =new double[N][N];
        short[] sArr =new short[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(dArr, 17.71947);
        FuzzerUtils.init(iArr3, 17);
        FuzzerUtils.init(sArr, (short)-12998);
        FuzzerUtils.init(byArr, (byte)56);

        Test0144.fFld += Math.min((int) (Test0144.instanceCount + (iFld + Test0144.instanceCount)), -52);
        for (i = 14; i < 335; ++i) {
            Test0144.lArrFld[i + 1] *= (Test0144.instanceCount * Test0144.byFld);
            for (l = 2; l < 78; l++) {
                dArr[i - 1][(int) (l + 1)] = (Integer.reverseBytes((int) (Test0144.fFld * 120L)) * (iMeth(iFld) + Test0144.dFld));
                Test0144.bArrFld[(int) (l - 1)] = b2;
                Test0144.bArrFld[i - 1] = b2;
                for (i18 = 1; i18 < 2; ++i18) {
                    i1 -= sFld;
                    Test0144.lArrFld[i18 + 1] -= Test0144.instanceCount;
                    dArr[(i18 >>> 1) % N][i18] = i1;
                    dArr[i][i + 1] -= Test0144.fFld;
                    try {
                        iFld = (i18 / -18042);
                        iArr3[i18 + 1] = (-94 % iFld);
                        iFld = (i % iArr3[i18 - 1]);
                    } catch (ArithmeticException a_e) {}
                    sFld *= (short) Test0144.iFld1;
                    Test0144.instanceCount -= l;
                }
                sArr[(int)(l + 1)] = (short)-2.904F;
                if (true) {
                    Test0144.iFld1 *= (int) l;
                    Test0144.instanceCount &= Test0144.iFld1;
                    Test0144.fFld += l;
                } else {
                    i1 |= iFld;
                }
                if (true) continue;
                if (b2) continue;
                for (i20 = 1; 2 > i20; ++i20) {
                    i1 += i1;
                    Test0144.lFld = (long) 2.19143;
                    switch ((int)((l % 3) + 86)) {
                    case 86:
                        i21 += (i20 * i19);
                        break;
                    case 87:
                        l1 /= 45;
                        iFld >>= (int) Test0144.lFld;
                        break;
                    case 88:
                        byArr[i] <<= (byte)sFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 l = " + i + "," + i1 + "," + l);
        FuzzerUtils.out.println("i2 b2 i18 = " + i2 + "," + (b2 ? 1 : 0) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("l1 dArr iArr3 = " + l1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("sArr byArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0144.instanceCount Test0144.fFld iFld = " + Test0144.instanceCount + "," +
                Float.floatToIntBits(Test0144.fFld) + "," + iFld);
        FuzzerUtils.out.println("Test0144.byFld Test0144.dFld Test0144.iFld1 = " + Test0144.byFld + "," +
                Double.doubleToLongBits(Test0144.dFld) + "," + Test0144.iFld1);
        FuzzerUtils.out.println("Test0144.lFld sFld Test0144.lArrFld = " + Test0144.lFld + "," + sFld + "," +
                FuzzerUtils.checkSum(Test0144.lArrFld));
        FuzzerUtils.out.println("Test0144.bArrFld = " + FuzzerUtils.checkSum(Test0144.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0144 _instance = new Test0144();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
