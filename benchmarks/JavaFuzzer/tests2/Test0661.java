// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:43 2023
public class Test0661 {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static float fFld=0.360F;
    public byte byFld=43;
    public int iFld=-69;
    public volatile int iFld1=-4;
    public static double dFld=-34.67957;
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0661.iArrFld, 24001);
        FuzzerUtils.init(Test0661.fArrFld, 2.25F);
        FuzzerUtils.init(Test0661.lArrFld, -1351363292L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i6, long l, short s) {

        double d=2.58815, d1=54.108199;
        int i7=-19633, i8=-249, i9=-3, i10=162, i11=-29466, i12=-6;
        boolean b1=true;
        long l1=3L;

        for (d = 3; 150 > d; d++) {
            if (b1) {
                i6 = (int) Test0661.instanceCount;
                if (true) break;
                Test0661.instanceCount += (long) ((long) d ^ i7);
                d1 = i7;
            } else if (b1) {
                i6 += i7;
                if (i7 != 0) {
                    vMeth_check_sum += i6 + l + s + Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + (b1
                        ? 1 : 0) + i8 + i9 + i10 + i11 + l1 + i12;
                    return;
                }
            } else {
                for (i8 = (int)(d); i8 < 11; i8++) {
                    Test0661.fFld += i7;
                }
                for (i10 = (int)(d); i10 < 11; i10++) {
                    l1 = l;
                    Test0661.fFld += Test0661.fFld;
                    i9 ^= (int)l1;
                    i6 = i12;
                }
                vMeth_check_sum += i6 + l + s + Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + (b1 ? 1
                    : 0) + i8 + i9 + i10 + i11 + l1 + i12;
                return;
            }
        }
        vMeth_check_sum += i6 + l + s + Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) +
            i8 + i9 + i10 + i11 + l1 + i12;
    }

    public static int iMeth1(int i3, boolean b) {

        int i4=1, i5=6, i13=-60, i14=38, i15=-62513, i16=-38, i17=-50162;
        short s1=-31092;
        double d2=2.1094;
        float f=94.230F;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (i4 = 160; i4 > 1; i4--) {
            vMeth(i4, Test0661.instanceCount, s1);
            i13 = 1;
            do {
                for (i14 = 1; i14 < 1; i14++) {
                    try {
                        i15 = (-53706 / Test0661.iArrFld[i4]);
                        i15 = (-171 / i4);
                        Test0661.iArrFld[i4] = (-25787 / i13);
                    } catch (ArithmeticException a_e) {}
                    i3 <<= (int) Test0661.instanceCount;
                    bArr[i13] = b;
                    i5 >>= -43;
                    Test0661.instanceCount = (long) d2;
                    Test0661.fFld += -65245;
                    try {
                        i16 = (115 % i14);
                        i3 = (i14 / i15);
                        i5 = (i3 / -217);
                    } catch (ArithmeticException a_e) {}
                    i5 += i14;
                }
                for (f = 1; f < 1; f++) {
                    Test0661.fFld += (f + Test0661.instanceCount);
                    i16 = i13;
                }
            } while (++i13 < 10);
        }
        long meth_res = i3 + (b ? 1 : 0) + i4 + i5 + s1 + i13 + i14 + i15 + Double.doubleToLongBits(d2) + i16 +
            Float.floatToIntBits(f) + i17 + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i2) {

        boolean b2=true;
        boolean[] bArr1 =new boolean[N];
        int i18=0, i19=13;

        FuzzerUtils.init(bArr1, false);

        if (b2) {
            i2 += (i2 + (iMeth1(i2, b2) + byFld));
            Test0661.iArrFld[(i2 >>> 1) % N] += (int) Test0661.fFld;
            i2 *= i2;
            for (i18 = 8; i18 < 162; i18++) {
                bArr1[i18 - 1] = true;
            }
        }
        iFld = i2;
        Test0661.fArrFld[(i19 >>> 1) % N] *= i18;
        long meth_res = i2 + (b2 ? 1 : 0) + i18 + i19 + FuzzerUtils.checkSum(bArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=21220;
        int i1=-12;
        int i20=-12686;
        int i21=36546;
        int[] iArr =new int[N];
        float f1=0.918F;
        short s2=17039;

        FuzzerUtils.init(iArr, 1702);

        for (i = 4; 394 > i; ++i) {
            iMeth(iFld);
            i20 = 1;
            while (++i20 < 65) {
                i21 = 1;
                do {
                    boolean b3=true;
                    i1 += (i21 | (long) Test0661.fFld);
                    Test0661.instanceCount = i1;
                    i1 >>= iFld1;
                    try {
                        i1 = (iFld % -23087);
                        iFld = (i21 / i);
                        Test0661.iArrFld[i21] = (64093 / iFld1);
                    } catch (ArithmeticException a_e) {}
                    switch ((i % 8) + 96) {
                    case 96:
                        Test0661.instanceCount >>= i;
                        iArr[i - 1] = (int) Test0661.instanceCount;
                        f1 = Test0661.instanceCount;
                    case 97:
                        iFld1 = i21;
                        break;
                    case 98:
                        Test0661.lArrFld[i21] += (long) Test0661.fFld;
                        if (false) break;
                        Test0661.instanceCount += (i21 * i21);
                        iFld -= i20;
                        break;
                    case 99:
                        if (b3) {
                            iFld += iFld;
                        }
                        Test0661.iArrFld[i - 1] *= (int) -42.894F;
                        Test0661.iArrFld[i20] = iFld;
                        if (b3) break;
                        break;
                    case 100:
                        iFld1 <<= -56475;
                        byFld >>= (byte)-8;
                        s2 -= (short)i1;
                        break;
                    case 101:
                        s2 *= byFld;
                        i1 >>= i20;
                        Test0661.instanceCount += (-250 + (i21 * i21));
                        Test0661.dFld -= i20;
                    case 102:
                    case 103:
                        b3 = b3;
                        break;
                    default:
                        iFld -= (int) Test0661.instanceCount;
                    }
                } while (++i21 < 1);
            }
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 f1 s2 = " + i21 + "," + Float.floatToIntBits(f1) + "," + s2);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0661.instanceCount Test0661.fFld byFld = " + Test0661.instanceCount + "," +
                Float.floatToIntBits(Test0661.fFld) + "," + byFld);
        FuzzerUtils.out.println("iFld iFld1 Test0661.dFld = " + iFld + "," + iFld1 + "," +
                Double.doubleToLongBits(Test0661.dFld));
        FuzzerUtils.out.println("Test0661.iArrFld Test0661.fArrFld Test0661.lArrFld = " + FuzzerUtils.checkSum(Test0661.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0661.fArrFld)) + "," + FuzzerUtils.checkSum(Test0661.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0661 _instance = new Test0661();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
