// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:26 2023
public class Test0314 {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static volatile double dFld=0.75847;
    public static float fFld=-111.456F;
    public static boolean bFld=true;
    public byte byFld=-99;
    public static int[] iArrFld =new int[N];
    public static short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0314.iArrFld, 7);
        FuzzerUtils.init(Test0314.sArrFld, (short) -9662);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static double dMeth(float f1, long l, int i8) {


        Test0314.dFld = (Test0314.fFld++);
        long meth_res = Float.floatToIntBits(f1) + l + i8;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth(int i2) {

        int i3=159;
        int i4=-6;
        int i5=5;
        int i6=-96;
        int i7=-58089;
        int[] iArr =new int[N];
        float f=1.774F;
        byte by=94;
        long l1=1698831201891007392L;

        FuzzerUtils.init(iArr, -99);

        for (i3 = 14; i3 < 356; ++i3) {
            i4 = Integer.reverseBytes(i4);
            Test0314.instanceCount = ((i4--) << -13);
            Test0314.dFld = i3;
            Test0314.instanceCount += (i3 * Test0314.fFld);
            i2 *= (int) Math.abs(Math.abs(++Test0314.instanceCount));
            i4 = (int) (((i3 - Test0314.instanceCount) * (Test0314.dFld--)) - i2);
            for (f = 1; f < 5; f++) {
                for (i6 = 1; i6 < 2; i6 += 3) {
                    short s=31915;
                    iArr[i6] = (int) (((++s) * dMeth(Test0314.fFld, Test0314.instanceCount, -3062)) * ((Test0314.instanceCount++) *
                        by));
                    Test0314.instanceCount += (-36817 + (i6 * i6));
                }
                Test0314.instanceCount = Math.min((int) ((Test0314.fFld * i3) - (-i2)), i6);
                i2 += (int) (Math.abs(Test0314.instanceCount) + (Test0314.instanceCount--));
                l1 += (long) ((long) f | Test0314.instanceCount);
                i2 |= (int) ((Test0314.instanceCount - (i3 - i6)) - (by + (i3 + Test0314.dFld)));
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + by + l1 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth1(int i20, boolean b1) {

        int i21=-9, i22=-6, i23=-41, i24=-106, i25=19110;

        for (i21 = 11; i21 < 283; i21++) {
            Test0314.instanceCount = 13;
            i20 += i21;
            i23 = 1;
            while (++i23 < 6) {
                for (i24 = 1; 1 > i24; i24++) {
                    i20 *= i20;
                    switch (((i24 >>> 1) % 7) + 13) {
                    case 13:
                        Test0314.instanceCount *= -11;
                        Test0314.fFld -= i24;
                        if (i24 != 0) {
                        }
                        break;
                    case 14:
                        Test0314.iArrFld[i23] *= i20;
                        break;
                    case 15:
                        i20 = i20;
                        Test0314.iArrFld[i23 - 1] = i20;
                        Test0314.sArrFld[i24 - 1] <<= (short) i22;
                        break;
                    case 16:
                    case 17:
                        Test0314.instanceCount = 23;
                        break;
                    case 18:
                        i25 += (int) Test0314.fFld;
                        break;
                    case 19:
                        Test0314.fFld *= i25;
                    }
                }
            }
        }
        long meth_res = i20 + (b1 ? 1 : 0) + i21 + i22 + i23 + i24 + i25;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i11) {

        double d=-1.42325;
        int i12=-12;
        int i13=-38;
        int i14=224;
        int i15=64555;
        int i16=7;
        int i17=22169;
        int i18=127;
        int i19=-1;
        int[][] iArr3 =new int[N][N];
        short s2=-6557;

        FuzzerUtils.init(iArr3, -14);

        i11 = (i11--);
        for (d = 5; d < 327; d++) {
            i12 += (i11 - (--i11));
            i13 = 1;
            do {
                i12 *= (-(~Math.min(i11, i12)));
            } while (++i13 < 5);
            for (i14 = 1; i14 < 5; i14++) {
                if (!Test0314.bFld) continue;
            }
            for (i16 = 1; i16 < 5; ++i16) {
                Test0314.instanceCount += i16;
                Test0314.instanceCount = ((iArr3[(int) (d)][i16]--) * i11);
                for (i18 = 1; i18 < 2; i18++) {
                    i12 += (i18 * i18);
                    Test0314.fFld = iMeth1(-20880, true);
                    i15 *= i12;
                    i19 += (i18 - s2);
                }
            }
        }
        vMeth1_check_sum += i11 + Double.doubleToLongBits(d) + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + s2 +
            FuzzerUtils.checkSum(iArr3);
    }

    public static int iMeth(long l2, int i9) {

        int i10=17;
        int i26=13892;
        int i27=-11;
        int i28=4;
        int[] iArr2 =new int[N];
        boolean b=false;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(iArr2, 8);
        FuzzerUtils.init(fArr, -1.345F);

        i9 = (-(Math.min(i9, i9) << (++i9)));
        i10 = 1;
        do {
            i9 -= (iArr2[i10 - 1]--);
            i9 += (i10 - i10);
        } while (++i10 < 159);
        b = b;
        fArr[(i9 >>> 1) % N] = (fArr[(i9 >>> 1) % N] = (fArr[(i10 >>> 1) % N] = (fArr[(i9 >>> 1) % N] = fArr[(i10 >>>
            1) % N])));
        vMeth1(i9);
        for (i26 = 14; i26 < 233; i26++) {
            switch ((i26 % 1) + 100) {
            case 100:
                Test0314.fFld += (i26 * i26);
                Test0314.bFld = Test0314.bFld;
                i28 = 1;
                while (++i28 < 7) {
                    i27 += (((i28 * i9) + Test0314.fFld) - i26);
                    Test0314.iArrFld[i28 + 1] = i27;
                    i9 += (((i28 * i9) + i28) - Test0314.instanceCount);
                }
                break;
            default:
                Test0314.bFld = Test0314.bFld;
            }
        }
        long meth_res = l2 + i9 + i10 + (b ? 1 : 0) + i26 + i27 + i28 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=3;
        int i1=9;
        int i29=-15900;
        int i30=52684;
        int i31=-11;
        int i32=-125;
        int i33=10;
        int i34=37808;
        int i35=-14;
        int i36=-140;
        int[] iArr1 =new
                    int[N];
        short s1=-14271;
        boolean b2=false;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, 166);
        FuzzerUtils.init(lArr, 6834450609973703366L);

        for (i = 7; i < 350; ++i) {
            vMeth((int) ((iArr1[i]++) * ((i1 - Test0314.instanceCount) - (s1++))));
        }
        i1 -= (iArr1[(i >>> 1) % N]++);
        lArr[(i >>> 1) % N] *= (long) ((--Test0314.dFld) / (iMeth(Test0314.instanceCount, i) | 1));
        Test0314.instanceCount = s1;
        for (i29 = 16; i29 < 332; i29++) {
            i30 = i29;
            for (i31 = 5; i31 < 80; i31++) {
                Test0314.bFld = Test0314.bFld;
                i30 >>>= i;
                i30 += i31;
                Test0314.bFld = false;
                for (i33 = 1; i33 < 2; ++i33) {
                    Test0314.dFld *= i31;
                    Test0314.fFld += (18292 + (i33 * i33));
                    if (b2) break;
                    i1 += i33;
                    byFld -= (byte) Test0314.fFld;
                    Test0314.iArrFld[i29] <<= (int) Test0314.instanceCount;
                    i34 += (i33 * i33);
                }
                for (i35 = 1; 2 > i35; i35++) {
                    Test0314.iArrFld[i29] += i31;
                    switch ((i31 % 4) + 46) {
                    case 46:
                        i1 *= (int) Test0314.fFld;
                        if (b2) break;
                        break;
                    case 47:
                        Test0314.instanceCount += Test0314.instanceCount;
                        i30 -= (int) Test0314.instanceCount;
                        break;
                    case 48:
                        Test0314.instanceCount += (i35 ^ i34);
                        if (Test0314.bFld) continue;
                        Test0314.instanceCount += (((i35 * i33) + Test0314.instanceCount) - Test0314.instanceCount);
                        break;
                    case 49:
                        i30 += (int) Test0314.fFld;
                    default:
                        i32 += i35;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 s1 = " + i + "," + i1 + "," + s1);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 i33 i34 = " + i32 + "," + i33 + "," + i34);
        FuzzerUtils.out.println("b2 i35 i36 = " + (b2 ? 1 : 0) + "," + i35 + "," + i36);
        FuzzerUtils.out.println("iArr1 lArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0314.instanceCount Test0314.dFld Test0314.fFld = " + Test0314.instanceCount + "," +
                Double.doubleToLongBits(Test0314.dFld) + "," + Float.floatToIntBits(Test0314.fFld));
        FuzzerUtils.out.println("Test0314.bFld byFld Test0314.iArrFld = " + (Test0314.bFld ? 1 : 0) + "," + byFld + "," +
                FuzzerUtils.checkSum(Test0314.iArrFld));
        FuzzerUtils.out.println("Test0314.sArrFld = " + FuzzerUtils.checkSum(Test0314.sArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0314 _instance = new Test0314();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
