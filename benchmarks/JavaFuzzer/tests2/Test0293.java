// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:26 2023
public class Test0293 {

    public static final int N = 400;

    public static long instanceCount=2772918603814343300L;
    public static float fFld=-62.628F;
    public static boolean bFld=true;
    public static short sFld=28386;
    public static int iFld=-1;
    public static volatile short[] sArrFld =new short[N];
    public static long[][] lArrFld =new long[N][N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0293.sArrFld, (short) -13013);
        FuzzerUtils.init(Test0293.lArrFld, -177L);
        FuzzerUtils.init(Test0293.iArrFld, -176);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(long l, int i6) {

        int i7=-42867, i8=113, i9=10, i10=15059, i11=-179;
        boolean b=true;
        float f=33.617F;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 0.126290);

        for (i7 = 137; i7 > 4; i7 -= 2) {
            i6 = i7;
        }
        Test0293.instanceCount -= 143;
        i6 = i8;
        Test0293.lArrFld = Test0293.lArrFld;
        if (b) {
            i6 = i8;
        } else {
            i9 = 290;
            do {
                double d1=0.41938;
                Test0293.iArrFld[i9 - 1] = (int) l;
                f -= (float)d1;
            } while ((i9 -= 3) > 0);
            i8 <<= i6;
        }
        for (i10 = 15; i10 < 298; i10++) {
            i8 = (int)l;
            Test0293.instanceCount <<= i7;
            l /= (i8 | 1);
        }
        long meth_res = l + i6 + i7 + i8 + (b ? 1 : 0) + i9 + Float.floatToIntBits(f) + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i5=26913, i12=-115, i13=-7975, i14=4350, i15=3;
        long l1=-15624L, l2=34587L;
        double d2=2.46391;

        i5 = (int) Test0293.instanceCount;
        i5 *= (int) Test0293.instanceCount;
        Test0293.instanceCount *= i5;
        i5 += (i5--);
        i5 ^= (int) lMeth1(Test0293.instanceCount, i5);
        i12 = 172;
        do {
            l1 %= (i12 | 1);
            for (l2 = 1; 9 > l2; ++l2) {
                for (i14 = 1; i14 < 2; ++i14) {
                    Test0293.fFld += -35889;
                    d2 -= 0.166F;
                    Test0293.bFld = Test0293.bFld;
                    i15 += i14;
                    i15 += (i14 * Test0293.sFld);
                    i15 = (int) Test0293.fFld;
                }
            }
        } while (--i12 > 0);
        vMeth_check_sum += i5 + i12 + l1 + l2 + i13 + i14 + i15 + Double.doubleToLongBits(d2);
    }

    public long lMeth() {

        int i=1;
        int i1=-7;
        int i2=-14420;
        int i3=-48;
        int i4=251;
        int[] iArr =new int[N];
        byte by=100;

        FuzzerUtils.init(iArr, -80);

        for (i = 354; i > 3; i -= 3) {
            iArr[i] *= (i - (--Test0293.sArrFld[i - 1]));
        }
        i1 -= (-i2);
        for (i3 = 3; 244 > i3; i3 += 3) {
            vMeth();
            i2 -= i4;
            Test0293.fFld *= -159;
            i1 = i4;
            i2 += (((i3 * i2) + Test0293.fFld) - by);
            Test0293.instanceCount += i3;
            i1 += (i3 * i3);
            Test0293.lArrFld[i3][i3] = by;
        }
        i4 -= i2;
        long meth_res = i + i1 + i2 + i3 + i4 + by + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=-91, i17=85, i18=-60865, i19=-28, i20=-178, i21=170, i22=240, i23=-130, i24=3, i25=-65409, i26=8;
        double d3=-118.31279;

        lMeth();
        Test0293.iFld = (int) Test0293.instanceCount;
        Test0293.lArrFld[(Test0293.iFld >>> 1) % N][(-105 >>> 1) % N] >>>= Test0293.iFld;
        for (i16 = 4; i16 < 167; ++i16) {
            i17 += (int) Test0293.instanceCount;
            i17 += (((i16 * i17) + Test0293.fFld) - i17);
            i18 = 1;
            while (++i18 < 154) {
                switch ((i16 % 3) + 93) {
                case 93:
                    i17 += i17;
                    for (i19 = 1; i19 < 1; ++i19) {
                        Test0293.instanceCount <<= Test0293.instanceCount;
                        Test0293.instanceCount -= i16;
                        Test0293.instanceCount += -5;
                    }
                case 94:
                    i20 = (int) Test0293.fFld;
                    for (i21 = i16; i21 < 1; i21++) {
                        Test0293.instanceCount = Test0293.instanceCount;
                        Test0293.bFld = Test0293.bFld;
                    }
                    switch ((((i21 >>> 1) % 7) * 5) + 14) {
                    case 44:
                        Test0293.instanceCount %= ((long) (Test0293.fFld) | 1);
                    case 42:
                        Test0293.iArrFld[i16 - 1] >>>= i17;
                        break;
                    case 26:
                        for (i23 = i16; i23 < 1; i23++) {
                            if (Test0293.bFld) continue;
                            i22 ^= i18;
                            Test0293.bFld = Test0293.bFld;
                            Test0293.sFld -= (short) i19;
                            i17 += i23;
                        }
                    case 18:
                        i22 = i21;
                        for (i25 = 1; i25 > 1; --i25) {
                            Test0293.iFld -= i25;
                            Test0293.lArrFld[i16][i25 - 1] *= (long) d3;
                        }
                        break;
                    case 38:
                        Test0293.iFld = (int) Test0293.instanceCount;
                    case 25:
                        try {
                            i22 = (Test0293.iArrFld[i16 - 1] / -11);
                            Test0293.iFld = (i24 % -1236991271);
                            i22 = (i17 / i25);
                        } catch (ArithmeticException a_e) {}
                    case 24:
                        i20 *= i17;
                        break;
                    default:
                        Test0293.iArrFld[i18 + 1] += (int) Test0293.instanceCount;
                    }
                    break;
                case 95:
                    Test0293.iArrFld[i18] = i18;
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 d3 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d3));

        FuzzerUtils.out.println("Test0293.instanceCount Test0293.fFld Test0293.bFld = " + Test0293.instanceCount + "," +
                Float.floatToIntBits(Test0293.fFld) + "," + (Test0293.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0293.sFld Test0293.iFld Test0293.sArrFld = " + Test0293.sFld + "," + Test0293.iFld + "," +
                FuzzerUtils.checkSum(Test0293.sArrFld));
        FuzzerUtils.out.println("Test0293.lArrFld Test0293.iArrFld = " + FuzzerUtils.checkSum(Test0293.lArrFld) + "," +
                FuzzerUtils.checkSum(Test0293.iArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0293 _instance = new Test0293();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
