// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:55 2023
public class Test0909 {

    public static final int N = 400;

    public static volatile long instanceCount=-163L;
    public volatile float fFld=-72.16F;
    public short sFld=-14780;
    public static int iFld=-39024;
    public static short sFld1=-17735;
    public double dFld=2.42574;
    public static boolean bFld=false;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0909.lArrFld, -744895706L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(float f) {

        int i3=-68;
        int i4=-4;
        int i5=215;
        int i6=-39653;
        int i7=226;
        int i8=90;
        int i9=-9;
        int[] iArr2 =new int[N];
        byte by=-27;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 41.127219);
        FuzzerUtils.init(iArr2, -137);

        for (i3 = 15; i3 < 369; i3++) {
            Test0909.iFld >>= Test0909.iFld;
            i5 = 5;
            while (--i5 > 0) {
                Test0909.instanceCount = Test0909.instanceCount;
                i4 += i5;
                Test0909.instanceCount += (47140L + (i5 * i5));
                dArr[i3] = i4;
                Test0909.iFld += (((i5 * i5) + i5) - Test0909.instanceCount);
            }
        }
        for (i6 = 17; 273 > i6; i6++) {
            f = i5;
            i8 ^= (int) Test0909.instanceCount;
            iArr2[i6] = i7;
            i9 = 1;
            do {
                Test0909.instanceCount = -75;
            } while (++i9 < 6);
            by += (byte) (i6 + Test0909.instanceCount);
        }
        vMeth2_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + by +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(int i1, int i2, long l) {

        float f1=-72.914F;
        int i11=5, i12=-37822, i13=6, i14=-36, i15=12;
        byte by1=-52;
        double[] dArr1 =new double[N];

        FuzzerUtils.init(dArr1, 20.44468);

        vMeth2(f1);
        for (i11 = 2; i11 < 177; ++i11) {
            dArr1[i11] = i12;
            Test0909.lArrFld[i11 - 1] <<= Test0909.sFld1;
            for (i13 = i11; i13 < 9; ++i13) {
                i14 += (int)4302214593795875773L;
                Test0909.iFld += i13;
                if (i13 != 0) {
                    vMeth1_check_sum += i1 + i2 + l + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + by1 +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                    return;
                }
                Test0909.instanceCount += (long) f1;
                i12 = 77;
                f1 %= (Test0909.sFld1 | 1);
                l += 28937;
            }
            i15 += i11;
        }
        by1 -= (byte)i11;
        dArr1[(-63903 >>> 1) % N] *= Test0909.instanceCount;
        vMeth1_check_sum += i1 + i2 + l + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + by1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public void vMeth() {

        int i16=55248;
        int i17=-61601;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, -14);

        Test0909.iFld -= iArr1[(Test0909.iFld >>> 1) % N];
        vMeth1(Test0909.iFld, Test0909.iFld, Test0909.instanceCount);
        Test0909.iFld = (int) dFld;
        Test0909.iFld += Test0909.iFld;
        Test0909.iFld = (int) fFld;
        Test0909.iFld = (int) dFld;
        Test0909.lArrFld[(Test0909.iFld >>> 1) % N] = Test0909.iFld;
        for (i16 = 8; 388 > i16; ++i16) {
            Test0909.iFld -= i17;
            i17 = (int) Test0909.instanceCount;
            i17 -= Test0909.iFld;
            if (Test0909.bFld) {
                Test0909.lArrFld[i16 - 1] = Test0909.instanceCount;
                vMeth_check_sum += i16 + i17 + FuzzerUtils.checkSum(iArr1);
                return;
            } else if (Test0909.bFld) {
                i17 = i17;
                iArr1[i16 - 1] *= i17;
            }
        }
        vMeth_check_sum += i16 + i17 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i18=-207;
        int i19=-181;
        int[] iArr =new int[N];
        byte by2=-40;

        FuzzerUtils.init(iArr, -230);

        for (int i : iArr) {
            i += (int)(((fFld + fFld) - i) - (iArr[(i >>> 1) % N]++));
        }
        fFld = (((sFld - Test0909.iFld) - (Test0909.instanceCount * Test0909.iFld)) - Test0909.iFld);
        vMeth();
        dFld *= Test0909.iFld;
        Test0909.iFld %= (int) (Test0909.iFld | 1);
        for (i18 = 353; i18 > 2; --i18) {
            Test0909.iFld += (int) dFld;
        }
        fFld *= i19;
        by2 <<= (byte) Test0909.instanceCount;

        FuzzerUtils.out.println("i18 i19 by2 = " + i18 + "," + i19 + "," + by2);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0909.instanceCount fFld sFld = " + Test0909.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + sFld);
        FuzzerUtils.out.println("Test0909.iFld Test0909.sFld1 dFld = " + Test0909.iFld + "," + Test0909.sFld1 + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0909.bFld Test0909.lArrFld = " + (Test0909.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0909.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0909 _instance = new Test0909();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
