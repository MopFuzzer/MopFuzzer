// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:47 2023
public class Test0763 {

    public static final int N = 400;

    public static volatile long instanceCount=7915717831327543613L;
    public static byte byFld=90;
    public static boolean bFld=true;
    public static double dFld=-2.40186;
    public short sFld=-27216;
    public static int[] iArrFld =new int[N];
    public short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0763.iArrFld, -26650);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i2) {

        double d1=0.128965;
        int i3=-196, i4=-14, i5=35308, i6=47891, i7=-228, i8=-4, i9=31, i10=31371;
        float f=-1.350F;
        float[] fArr =new float[N];
        boolean b1=false;

        FuzzerUtils.init(fArr, 1.301F);

        d1 += i2;
        for (i3 = 3; i3 < 135; ++i3) {
            if (b1) {
                Test0763.byFld = (byte) i3;
                i5 = 1;
                do {
                    for (i6 = 1; 1 > i6; i6++) {
                        f *= 7;
                        i7 = i8;
                    }
                    i7 >>>= i7;
                    fArr[i3 - 1] = i4;
                } while (++i5 < 12);
                f = i2;
                for (i9 = 1; 12 > i9; i9++) {
                    i10 = i4;
                    Test0763.instanceCount += (((i9 * i4) + i3) - i3);
                    i8 >>= (int) Test0763.instanceCount;
                }
            } else {
                Test0763.instanceCount <<= i4;
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d1) + i3 + i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 +
            i10 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(long l, long l1) {

        int i1=-14;

        i1 <<= (int)lMeth1(i1);
        l1 = i1;
        vMeth_check_sum += l + l1 + i1;
    }

    public static long lMeth(int i, boolean b) {

        double d=-2.12985;
        float f1=70.174F;
        long l2=-175L;
        int i11=0, i12=25070, i13=131, i14=14, i15=-124;
        short s=-16691;

        i -= (int)(d--);
        vMeth(Test0763.instanceCount, Test0763.instanceCount);
        Test0763.instanceCount -= (long) f1;
        for (l2 = 333; l2 > 18; l2 -= 3) {
            Test0763.iArrFld[(int) (l2 - 1)] = -9736;
            f1 -= (float)d;
            f1 += l2;
            i += (int)(l2 + i11);
            for (i12 = (int)(l2); i12 < 15; ++i12) {
                Test0763.instanceCount <<= i13;
            }
            for (i14 = 15; i14 > 1; i14--) {
                i13 += (int)4125964745386693166L;
                if (b) continue;
                f1 += i14;
                s *= (short)i15;
            }
        }
        long meth_res = i + (b ? 1 : 0) + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + l2 + i11 + i12 + i13
            + i14 + i15 + s;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i16=-2, i17=119, i18=8, i19=-53996, i20=1, i21=-5, i22=-43178, i23=-1;
        float f2=-1.601F;
        long[] lArr =new long[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(lArr, 5901608322157423628L);
        FuzzerUtils.init(bArr, true);

        lMeth(i16, Test0763.bFld);
        for (i17 = 12; i17 < 355; i17++) {
            Test0763.instanceCount += (i17 * i17);
            i18 -= (int)f2;
            try {
                Test0763.iArrFld[i17] = (i18 % i17);
                i16 = (i17 % 1019839151);
                i18 = (-15656 / i17);
            } catch (ArithmeticException a_e) {}
            switch ((i17 % 2) + 67) {
            case 67:
                for (i19 = 1; i19 < 73; i19++) {
                    i21 = 1;
                    while ((i21 += 3) < 2) {
                        Test0763.bFld = Test0763.bFld;
                        Test0763.instanceCount = i19;
                        Test0763.dFld = 0.210F;
                        i16 = i20;
                        lArr[i19 - 1] >>= i21;
                        Test0763.iArrFld[i19] |= (int) Test0763.instanceCount;
                        i16 = Test0763.byFld;
                        bArr[i21 + 1] = Test0763.bFld;
                        i18 -= i17;
                    }
                    Test0763.instanceCount = i16;
                    switch (((i17 >>> 1) % 4) + 107) {
                    case 107:
                        i18 += (i19 * i19);
                        break;
                    case 108:
                        Test0763.iArrFld[i17 - 1] -= i19;
                        break;
                    case 109:
                        i20 = i20;
                        i16 -= 25864;
                    case 110:
                        Test0763.iArrFld[i17 - 1] = i16;
                        sArrFld[i17 + 1] *= Test0763.byFld;
                        Test0763.instanceCount = i16;
                        break;
                    default:
                        Test0763.instanceCount -= Test0763.instanceCount;
                        for (i22 = 1; i22 < 2; ++i22) {
                            i23 += (((i22 * i19) + i17) - i21);
                            i23 |= i17;
                        }
                    }
                }
                break;
            case 68:
                i23 >>= sFld;
            default:
                i20 += (((i17 * i20) + i20) - i17);
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("f2 i19 i20 = " + Float.floatToIntBits(f2) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("lArr bArr = " + FuzzerUtils.checkSum(lArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0763.instanceCount Test0763.byFld Test0763.bFld = " + Test0763.instanceCount + "," + Test0763.byFld +
                "," + (Test0763.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0763.dFld sFld Test0763.iArrFld = " + Double.doubleToLongBits(Test0763.dFld) + "," + sFld +
                "," + FuzzerUtils.checkSum(Test0763.iArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0763 _instance = new Test0763();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
