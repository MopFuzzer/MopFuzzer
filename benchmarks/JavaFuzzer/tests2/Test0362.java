// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:29 2023
public class Test0362 {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static volatile int iFld=81;
    public static boolean bFld=false;
    public static float fFld=-1.141F;
    public volatile long lFld=-3583313428L;
    public static volatile short[] sArrFld =new short[N];
    public static volatile boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0362.sArrFld, (short) -12318);
        FuzzerUtils.init(Test0362.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i10, int i11) {

        int i12=49;
        int i13=-34856;
        int i14=-198;
        int i15=37098;
        int i16=-156;
        int i17=55992;
        int[][] iArr1 =new int[N][N];
        short s=2727;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(iArr1, -12);
        FuzzerUtils.init(fArr1, -100.546F);

        for (i12 = 3; i12 < 270; ++i12) {
            i11 <<= s;
            if (Test0362.bFld) continue;
            i14 = 1;
            do {
                iArr1[i14 - 1][i14] %= (int) (Test0362.instanceCount | 1);
            } while (++i14 < 6);
            s -= (short) Test0362.instanceCount;
            fArr1[i12] += i12;
            for (i15 = 1; i15 < 6; i15++) {
                iArr1[i15 - 1][i15] -= i12;
            }
            i11 -= Test0362.iFld;
            i17 = 1;
            do {
                iArr1[i12 + 1][i12] -= 153;
            } while (++i17 < 6);
            Test0362.iFld &= i15;
        }
        Test0362.sArrFld = Test0362.sArrFld;
        iArr1[(i11 >>> 1) % N][(i14 >>> 1) % N] += i10;
        vMeth_check_sum += i10 + i11 + i12 + i13 + s + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static short sMeth(int i7) {

        int i8=-102;
        int i9=-27;
        int i18=-160;
        int i19=-11;
        int i20=-144;
        int i21=-38216;
        int i22=-16144;
        int i23=-7;
        int i24=-76;
        int[][] iArr2 =new
                    int[N][N];
        double d1=0.61402;

        FuzzerUtils.init(iArr2, 33335);

        for (i8 = 1; i8 < 166; i8++) {
            vMeth(i8, Test0362.iFld);
            for (i18 = 1; 10 > i18; i18 += 3) {
                try {
                    i7 = (iArr2[i8 - 1][i18 + 1] / 1021457954);
                    i19 = (iArr2[i18][i18 + 1] / -28);
                    Test0362.iFld = (i18 % i19);
                } catch (ArithmeticException a_e) {}
            }
            i19 += (int) Test0362.instanceCount;
            for (d1 = 1; d1 < 10; ++d1) {
                i7 += (int) (((d1 * i9) + Test0362.iFld) - i20);
            }
            if (Test0362.bFld) {
                for (i21 = 10; i21 > i8; --i21) {
                    for (i23 = 1; 1 > i23; ++i23) {
                        Test0362.iFld += i22;
                        Test0362.iFld = i19;
                        if (Test0362.bFld) continue;
                        i20 += (int) Test0362.fFld;
                        if (Test0362.bFld) continue;
                    }
                }
            }
        }
        long meth_res = i7 + i8 + i9 + i18 + i19 + Double.doubleToLongBits(d1) + i20 + i21 + i22 + i23 + i24 +
            FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(int i2) {

        int i3=-55128, i4=-11, i5=-57990, i6=123, i25=-206, i26=-134, i27=37708, i28=-34406;
        double d2=127.130609;

        for (i3 = 3; i3 < 176; i3++) {
            for (i5 = 1; i5 < 9; i5++) {
                sMeth(i3);
            }
            for (i25 = 1; i25 < 9; ++i25) {
                i6 += i25;
                for (i27 = 2; i27 > 1; i27 -= 2) {
                    d2 += i4;
                    Test0362.fFld += i27;
                    i4 *= i2;
                    i26 |= i2;
                    d2 -= d2;
                    Test0362.fFld = i6;
                }
                i26 -= (int) Test0362.instanceCount;
                i26 = i2;
                Test0362.bArrFld[i25 + 1] = true;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + i25 + i26 + i27 + i28 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d=100.74769, d3=-1.37713;
        float f=-61.451F;
        float[] fArr =new float[N];
        int i=45550;
        int i1=9;
        int i29=235;
        int i30=161;
        int i31=59427;
        int i32=192;
        int i33=12;
        int[] iArr =new int[N];
        short s1=-6407;
        byte by=59;

        FuzzerUtils.init(fArr, -121.939F);
        FuzzerUtils.init(iArr, 152);

        d = 1;
        do {
            fArr[(int) (d)] = (Test0362.iFld++);
        } while (++d < 154);
        iArr[(Test0362.iFld >>> 1) % N] -= (int) (-((--f) + (Test0362.iFld--)));
        for (i = 5; i < 292; ++i) {
            i1 = (i1 <<= iMeth(i));
        }
        Test0362.instanceCount >>= i;
        s1 = (short)35465;
        iArr[(i1 >>> 1) % N] *= (int)-77.205F;
        Test0362.iFld *= (int) 7730276252218764229L;
        i29 = 1;
        do {
            f += ((long)i29 | (long)f);
            iArr[i29 - 1] = i1;
            i30 = 1;
            do {
                i1 >>>= i;
                Test0362.iFld = -47062;
                Test0362.iFld -= (int) Test0362.instanceCount;
            } while ((i30 += 3) < 79);
            i1 += (((i29 * i29) + f) - i1);
            Test0362.instanceCount = -56894;
            Test0362.iFld = 5941;
            lFld += (-7 + (i29 * i29));
        } while (++i29 < 319);
        by = (byte)i;
        for (d3 = 316; d3 > 13; d3 -= 3) {
            if (false) {
                i31 <<= Test0362.iFld;
                for (i32 = 11; i32 < 248; ++i32) {
                    lFld *= 123;
                    if (Test0362.bFld) continue;
                    by += (byte)i32;
                    i1 += i32;
                    f = i32;
                }
            } else if (Test0362.bFld) {
                i31 = (int) Test0362.instanceCount;
            }
        }

        FuzzerUtils.out.println("d f i = " + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f) + "," + i);
        FuzzerUtils.out.println("i1 s1 i29 = " + i1 + "," + s1 + "," + i29);
        FuzzerUtils.out.println("i30 by d3 = " + i30 + "," + by + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("fArr iArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0362.instanceCount Test0362.iFld Test0362.bFld = " + Test0362.instanceCount + "," + Test0362.iFld +
                "," + (Test0362.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0362.fFld lFld Test0362.sArrFld = " + Float.floatToIntBits(Test0362.fFld) + "," + lFld + "," +
                FuzzerUtils.checkSum(Test0362.sArrFld));
        FuzzerUtils.out.println("Test0362.bArrFld = " + FuzzerUtils.checkSum(Test0362.bArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0362 _instance = new Test0362();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
