// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:37 2023
public class Test0543 {

    public static final int N = 400;

    public static long instanceCount=1534536718L;
    public static long[] lArrFld =new long[N];
    public volatile int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0543.lArrFld, 746509928168569785L);
        FuzzerUtils.init(Test0543.byArrFld, (byte) -88);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7, int i8) {

        int i9=45483;
        int i10=-146;
        int i11=-34074;
        int i12=31393;
        int i13=-18988;
        int[] iArr =new int[N];
        float f1=1.862F;
        byte[] byArr =new byte[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(byArr, (byte)52);
        FuzzerUtils.init(sArr, (short)2543);

        i7 <<= i8;
        for (i9 = 319; i9 > 5; i9 -= 2) {
            iArr[i9] = (int) Test0543.instanceCount;
            byArr[i9 + 1] = (byte) Test0543.instanceCount;
        }
        i11 = 1;
        do {
            iArr[i11 - 1] >>>= -1;
            f1 *= Test0543.instanceCount;
            i7 += i11;
        } while (++i11 < 147);
        for (i12 = 130; 3 < i12; i12 -= 2) {
            sArr[i12] = (short) Test0543.instanceCount;
        }
        vMeth2_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth1(long l, int i4, int i5) {

        int i14=-5407;
        int i15=-12295;
        int i16=213;
        int i17=9;
        int i18=119;
        int[] iArr1 =new int[N];
        short s=30341;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 93.622F);
        FuzzerUtils.init(iArr1, -9);

        vMeth2(141, i4, i4);
        for (i14 = 206; 7 < i14; i14 -= 3) {
            Test0543.instanceCount += i15;
            for (i16 = i14; i16 < 23; ++i16) {
                i15 += i16;
                i4 -= s;
                fArr[i16 - 1] /= (i15 | 1);
                i5 += i16;
                i17 += i16;
                switch (((-208 >>> 1) % 2) + 5) {
                case 5:
                case 6:
                    iArr1[i14] = i14;
                    Test0543.instanceCount += (((i16 * Test0543.instanceCount) + i4) - Test0543.instanceCount);
                    break;
                default:
                    i18 = 1;
                    do {
                        i5 += (49831 + (i18 * i18));
                        i17 += (i18 * i18);
                    } while (++i18 < 1);
                }
            }
        }
        vMeth1_check_sum += l + i4 + i5 + i14 + i15 + i16 + i17 + s + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i2, float f, int i3) {

        int i19=112, i20=-4, i21=-170, i22=-70;
        boolean b=false;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 87.429F);

        iArrFld[(i3 >>> 1) % N] -= (int)(f *= (--f));
        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
        vMeth1(2572322793L, i2, i3);
        f += i3;
        i3 = i3;
        for (i19 = 241; i19 > 9; i19--) {
            for (i21 = 7; i21 > 1; i21 -= 2) {
                i20 = i21;
                i3 = i21;
                b = false;
                b = false;
                fArr1[i19] *= Test0543.instanceCount;
                if (b) break;
                i22 = (int) Test0543.instanceCount;
                iArrFld[i21 - 1] = (int)-234L;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i3 + i19 + i20 + i21 + i22 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=6, i1=9282, i23=-15461, i24=9, i25=-104, i26=165, i27=-14, i28=239, i29=6752, i30=-9369;
        float f2=-25.690F;
        boolean b1=false;
        byte by=-31;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -2.68547);

        i = 1;
        while (++i < 342) {
            Test0543.instanceCount += (i * i);
            i1 += (int) Test0543.lArrFld[i];
            i1 *= (int)dArr[i - 1];
        }
        i1 = (iArrFld[(i >>> 1) % N] - 1652);
        vMeth(i1, f2, 93);
        for (long l1 : Test0543.lArrFld) {
            try {
                i1 = (i1 % i1);
                i1 = (i1 / i);
                i1 = (i1 / i);
            } catch (ArithmeticException a_e) {}
        }
        for (i23 = 4; i23 < 306; i23++) {
            i24 += i23;
            for (i25 = 1; i25 < 83; i25++) {
                for (i27 = 1; i27 < 2; ++i27) {
                    i24 += i1;
                    iArrFld[i25] = i28;
                    i1 >>= (int) Test0543.instanceCount;
                    iArrFld[i25 - 1] = (int) Test0543.instanceCount;
                    if (b1) break;
                }
                f2 += i25;
                switch (((i25 % 8) * 5) + 93) {
                case 126:
                    i28 = -3;
                    switch ((i25 % 2) + 121) {
                    case 121:
                        i28 += (i25 ^ Test0543.instanceCount);
                        break;
                    case 122:
                    default:
                        Test0543.instanceCount -= i24;
                        switch (((i25 % 2) * 5) + 92) {
                        case 98:
                            if (b1) continue;
                            for (i29 = 1; i29 < 2; i29++) {
                                Test0543.byArrFld = FuzzerUtils.byte1array(N, (byte) 103);
                            }
                        case 97:
                            f2 = -44221L;
                            Test0543.instanceCount = i25;
                            break;
                        }
                        i24 -= i29;
                    }
                    break;
                case 124:
                    by = (byte)1492024388L;
                case 116:
                    i28 *= i1;
                    break;
                case 121:
                    if (b1) break;
                    break;
                case 130:
                    if (b1) continue;
                    break;
                case 113:
                case 111:
                    iArrFld[i23 - 1] = i25;
                    break;
                case 133:
                    Test0543.instanceCount += i27;
                default:
                    i1 += (((i25 * i1) + i23) - i);
                }
            }
        }

        FuzzerUtils.out.println("i i1 f2 = " + i + "," + i1 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("b1 i29 i30 = " + (b1 ? 1 : 0) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("by dArr = " + by + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0543.instanceCount Test0543.lArrFld iArrFld = " + Test0543.instanceCount + "," +
                FuzzerUtils.checkSum(Test0543.lArrFld) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0543.byArrFld = " + FuzzerUtils.checkSum(Test0543.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0543 _instance = new Test0543();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
