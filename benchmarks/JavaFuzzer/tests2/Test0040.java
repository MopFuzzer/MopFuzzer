// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:14 2023
public class Test0040 {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static short sFld=11054;
    public byte[][] byArrFld =new byte[N][N];
    public long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0040.iArrFld, 34364);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l1) {

        short s=-31416;

        s += (short)86;
        vMeth2_check_sum += l1 + s;
    }

    public static void vMeth1(int i4, int i5, long l) {

        double d=1.28831;
        boolean b=true;
        int i6=37777;
        int i7=10;
        int i8=-63570;
        int[] iArr =new int[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 62L);
        FuzzerUtils.init(iArr, -29);

        vMeth2(l);
        i4 += (int)d;
        i4 <<= (int) Test0040.instanceCount;
        if (false) {
            b = b;
            for (i6 = 5; i6 < 128; ++i6) {
                switch (((i6 % 4) * 5) + 75) {
                case 81:
                    lArr[i6] += i4;
                    break;
                case 85:
                    i4 ^= (int)29L;
                    i8 = 1;
                    while ((i8 += 2) < 13) {
                        if (b) break;
                        i5 -= i7;
                        Test0040.sFld -= (short) l;
                        i4 >>= i4;
                        i7 += i4;
                    }
                    break;
                case 83:
                    lArr[i6 + 1] = -1;
                    break;
                case 90:
                    b = b;
                }
            }
        } else if (b) {
            iArr[(i8 >>> 1) % N] -= (int)l;
        } else if (b) {
            i7 &= (int)16079L;
        }
        vMeth1_check_sum += i4 + i5 + l + Double.doubleToLongBits(d) + (b ? 1 : 0) + i6 + i7 + i8 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2, int i3, float f) {

        float f1=24.692F;
        float[] fArr =new float[N];
        int i9=-11;
        int[] iArr1 =new int[N];
        int[][] iArr2 =new int[N][N];
        boolean b1=false;
        double[] dArr =new double[N];
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(iArr1, 19201);
        FuzzerUtils.init(dArr, -2.54454);
        FuzzerUtils.init(iArr2, -23);
        FuzzerUtils.init(fArr, 74.549F);
        FuzzerUtils.init(byArr, (byte)73);

        vMeth1(i2, 178, Test0040.instanceCount);
        for (f1 = 202; f1 > 12; f1 -= 2) {
            dArr = dArr;
            b1 = b1;
            i9 -= (int) Test0040.instanceCount;
            iArr2 = iArr2;
            i9 *= i9;
            Test0040.instanceCount >>>= Test0040.instanceCount;
            i2 *= i3;
        }
        iArr1[(i9 >>> 1) % N] = i9;
        iArr1[(i3 >>> 1) % N] = i3;
        Test0040.instanceCount = i3;
        iArr2 = iArr2;
        byArr[(41715 >>> 1) % N][(i9 >>> 1) % N] = (byte)9;
        iArr1[(i2 >>> 1) % N] -= (int)-725779865772463315L;
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i9 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
    }

    public void mainTest(String[] strArr1) {

        int i=2, i1=-10297, i11=-28912, i12=50153, i13=160, i14=-104;
        float f3=1.82F;
        byte by=-108;
        double d1=1.99033;
        boolean b2=false;

        for (i = 8; 214 > i; i++) {
            vMeth(i, i, f3);
            for (i11 = 6; i11 < 122; ++i11) {
                i1 <<= i11;
                i13 = 1;
                do {
                    Test0040.instanceCount += (((i13 * i13) + i11) - i13);
                    Test0040.instanceCount = -10L;
                    by >>= (byte)135;
                    i12 = (int) Test0040.instanceCount;
                    Test0040.sFld += (short) Test0040.instanceCount;
                    by >>= (byte)i13;
                } while (++i13 < 2);
                i1 = -207;
                i1 -= i1;
                i1 += (((i11 * Test0040.instanceCount) + i13) - i1);
                Test0040.instanceCount -= i13;
            }
        }
        byArrFld[(i11 >>> 1) % N][(i >>> 1) % N] -= (byte) Test0040.instanceCount;
        lArrFld[(i11 >>> 1) % N] = i;
        Test0040.instanceCount |= Test0040.instanceCount;
        i1 += (int) Test0040.instanceCount;
        for (d1 = 322; d1 > 4; d1--) {
            if (b2) continue;
            Test0040.iArrFld[(int) (d1)] = -6;
            by *= (byte) Test0040.sFld;
            f3 += -9024535626813496570L;
            i1 += (int) ((long) d1 | Test0040.sFld);
            i1 *= i11;
            f3 += (float)(d1 * d1);
            Test0040.instanceCount += (long) (d1 * d1);
            f3 += i12;
        }
        i1 = i1;

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("by d1 i14 = " + by + "," + Double.doubleToLongBits(d1) + "," + i14);
        FuzzerUtils.out.println("b2 = " + (b2 ? 1 : 0));

        FuzzerUtils.out.println("Test0040.instanceCount Test0040.sFld byArrFld = " + Test0040.instanceCount + "," + Test0040.sFld + ","
            + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("lArrFld Test0040.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
                FuzzerUtils.checkSum(Test0040.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0040 _instance = new Test0040();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
