// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:38 2023
public class Test0568 {

    public static final int N = 400;

    public static long instanceCount=-132L;
    public byte byFld=-7;
    public static volatile int iFld=-29223;
    public static int iFld1=6;
    public static long lFld=-3353225153L;
    public static int iFld2=181;
    public int iFld3=2707;
    public static int iFld4=-23891;
    public static byte[] byArrFld =new byte[N];
    public static int[] iArrFld =new int[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0568.byArrFld, (byte) -68);
        FuzzerUtils.init(Test0568.iArrFld, 35676);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i6) {

        int i7=-14, i8=-13;
        float f1=1.344F;

        i6 = (int) Test0568.instanceCount;
        for (i7 = 9; 296 > i7; ++i7) {
            Test0568.iFld /= (int) (Test0568.instanceCount | 1);
        }
        i8 <<= Test0568.iFld1;
        f1 = Test0568.iFld1;
        long meth_res = i6 + i7 + i8 + Float.floatToIntBits(f1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i5, short s) {

        double d1=2.111433;
        int i9=-52670, i10=0;
        boolean b=false;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -54482L);

        Test0568.byArrFld[(Test0568.iFld >>> 1) % N] &= (byte) ((++Test0568.instanceCount) * lMeth(Test0568.iFld1));
        d1 += Test0568.iFld;
        lArr[(Test0568.iFld >>> 1) % N][(i5 >>> 1) % N] <<= Test0568.iFld;
        Test0568.iFld1 -= Test0568.iFld;
        i5 = i5;
        if (b) {
            i9 = 1;
            do {
                d1 -= Test0568.instanceCount;
                if (true) {
                    lArr[i9 - 1][i9] = Test0568.instanceCount;
                } else if (b) {
                    i10 -= (int) Test0568.instanceCount;
                    Test0568.lFld += (i9 * i9);
                } else {
                    i10 = i5;
                }
                Test0568.instanceCount = i10;
                Test0568.iFld1 += (((i9 * i9) + Test0568.lFld) - i9);
            } while (++i9 < 280);
        } else if (b) {
            i10 += Test0568.iFld;
        }
        vMeth1_check_sum += i5 + s + Double.doubleToLongBits(d1) + i9 + i10 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f) {

        short s1=1527;
        int i11=9963;
        int i12=45940;
        int[] iArr1 =new int[N];
        double d2=2.92198, d3=-68.73802;
        boolean b1=true;

        FuzzerUtils.init(iArr1, -10);

        vMeth1(Test0568.iFld1, s1);
        for (i11 = 8; 233 > i11; ++i11) {
            i12 |= i12;
            d2 = 1;
            do {
                s1 *= (short)i12;
                f += s1;
                Test0568.iFld += (int) (((d2 * i11) + i12) - Test0568.iFld);
                f -= Test0568.iFld1;
                f -= (float)d2;
                Test0568.iFld ^= i11;
                if (b1) break;
            } while (++d2 < 7);
            Test0568.iFld = i12;
            f = Test0568.iFld;
            try {
                Test0568.iFld1 = (Test0568.iFld / Test0568.iFld1);
                Test0568.iFld1 = (-35378 / iArr1[i11 - 1]);
                Test0568.iFld2 = (Test0568.iFld2 % Test0568.iFld2);
            } catch (ArithmeticException a_e) {}
            d3 += i12;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + s1 + i11 + i12 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=2482;
        int i1=-13;
        int i2=-4;
        int i3=6967;
        int i4=-164;
        int i14=10;
        int i15=-59448;
        int i16=-12;
        int i17=-117;
        int[][] iArr =new int[N][N];
        double d=66.122579;
        short s2=-31825;
        float f2=1.71F;
        long l=4L;

        FuzzerUtils.init(iArr, 0);

        i = 1;
        do {
            for (i1 = 4; i1 < 65; ++i1) {
                iArr[i - 1] = (iArr[i1 - 1] = (iArr[i - 1] = iArr[i1 + 1]));
                switch (((i1 % 3) * 5) + 42) {
                case 57:
                    Test0568.instanceCount += (i1 + Test0568.instanceCount);
                    iArr[i1][i] -= (int)(((i2 = (int)d) + (i2 - byFld)) + (iArr[i - 1][i1 - 1] = (i % 62362)));
                    for (i3 = 1; i3 < 2; i3++) {
                        boolean b2=false;
                        byFld = (byte) (Test0568.instanceCount--);
                        vMeth(-48.769F);
                        i4 -= Test0568.iFld2;
                        Test0568.iFld1 = i2;
                        Test0568.iFld2 >>= (int) Test0568.lFld;
                        if (b2) {
                            iFld3 += (i3 ^ Test0568.iFld1);
                            Test0568.iArrFld[i + 1] = byFld;
                            fArrFld[i] += s2;
                            i4 = Test0568.iFld2;
                        } else if (b2) {
                            Test0568.instanceCount &= -30667L;
                        } else {
                            Test0568.iFld4 = Test0568.iFld2;
                            Test0568.iArrFld[i] <<= i4;
                        }
                        i4 >>= (int) Test0568.instanceCount;
                    }
                    for (i14 = 2; i14 > 1; --i14) {
                        i4 >>= i16;
                        f2 -= Test0568.instanceCount;
                        Test0568.iFld1 += (((i14 * Test0568.iFld1) + f2) - i2);
                        Test0568.instanceCount += (i14 * i14);
                        Test0568.iFld = i2;
                        Test0568.instanceCount = Test0568.instanceCount;
                        Test0568.lFld -= s2;
                        try {
                            Test0568.iFld2 = (-21 / Test0568.iFld4);
                            Test0568.iArrFld[i + 1] = (222 / Test0568.iFld4);
                            Test0568.iFld4 = (Test0568.iFld4 % -253);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                case 52:
                    Test0568.iFld ^= i17;
                    break;
                case 48:
                    Test0568.iFld2 >>>= s2;
                    break;
                default:
                    l >>= l;
                }
            }
        } while (++i < 389);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d i3 i4 = " + Double.doubleToLongBits(d) + "," + i3 + "," + i4);
        FuzzerUtils.out.println("s2 i14 i15 = " + s2 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 f2 i17 = " + i16 + "," + Float.floatToIntBits(f2) + "," + i17);
        FuzzerUtils.out.println("l iArr = " + l + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0568.instanceCount byFld Test0568.iFld = " + Test0568.instanceCount + "," + byFld + "," +
                Test0568.iFld);
        FuzzerUtils.out.println("Test0568.iFld1 Test0568.lFld Test0568.iFld2 = " + Test0568.iFld1 + "," + Test0568.lFld + "," + Test0568.iFld2);
        FuzzerUtils.out.println("iFld3 Test0568.iFld4 Test0568.byArrFld = " + iFld3 + "," + Test0568.iFld4 + "," +
                FuzzerUtils.checkSum(Test0568.byArrFld));
        FuzzerUtils.out.println("Test0568.iArrFld fArrFld = " + FuzzerUtils.checkSum(Test0568.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0568 _instance = new Test0568();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
