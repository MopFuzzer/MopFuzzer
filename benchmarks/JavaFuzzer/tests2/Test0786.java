// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0786 {

    public static final int N = 400;

    public static long instanceCount=-39080L;
    public static double dFld=-1.96681;
    public static volatile short sFld=-28462;
    public long[][] lArrFld =new long[N][N];
    public static long[] lArrFld1 =new long[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0786.lArrFld1, 2437981186L);
        FuzzerUtils.init(Test0786.bArrFld, false);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        float f=-104.531F;
        int i8=249;
        int i9=-19582;
        int i10=23081;
        int[] iArr =new int[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-7566);
        FuzzerUtils.init(iArr, 6512);

        f = (float) Test0786.dFld;
        sArr = sArr;
        Test0786.lArrFld1[(i8 >>> 1) % N] = i8;
        i8 = -2;
        if (true) {
            iArr[(i8 >>> 1) % N] = i8;
        } else {
            i8 = (int) Test0786.instanceCount;
            for (i9 = 2; i9 < 198; i9 += 3) {
                i8 >>= (int) Test0786.instanceCount;
            }
            Test0786.instanceCount = Test0786.instanceCount;
            i10 = 40649;
        }
        long meth_res = Float.floatToIntBits(f) + i8 + i9 + i10 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(int i4, double d, int i5) {

        int i6=13, i7=-215, i11=-118, i12=-11, i13=206, i14=-133, i15=73;
        float f1=127.851F;
        boolean b=false;

        for (i6 = 9; i6 < 148; ++i6) {
            i5 -= (Math.max(i5, i5) * sMeth());
            f1 += i5;
            i5 += (((i6 * i4) + i5) - Test0786.instanceCount);
            i4 += (int)114.156F;
            i11 += (((i6 * i4) + i7) - Test0786.sFld);
            i12 = 1;
            do {
                for (i13 = 1; i13 < 1; ++i13) {
                    if (false) continue;
                    i4 = i13;
                    switch ((((-7 >>> 1) % 9) * 5) + 84) {
                    case 91:
                        i7 |= (int) Test0786.instanceCount;
                        i7 += (i13 * i6);
                        Test0786.instanceCount = 14;
                    case 106:
                        i4 -= (int) Test0786.instanceCount;
                    case 86:
                        i14 += (((i13 * Test0786.instanceCount) + i15) - i12);
                        break;
                    case 93:
                        i14 = (int)f1;
                    case 126:
                        Test0786.instanceCount = i12;
                        break;
                    case 119:
                        b = b;
                        break;
                    case 100:
                        Test0786.dFld %= (Test0786.instanceCount | 1);
                    case 120:
                        Test0786.instanceCount = Test0786.instanceCount;
                        break;
                    case 90:
                        i5 = i7;
                        break;
                    }
                }
            } while (++i12 < 11);
        }
        vMeth1_check_sum += i4 + Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i11 + i12 + i13
            + i14 + i15 + (b ? 1 : 0);
    }

    public static void vMeth(int i3) {

        float f2=86.715F;
        int i16=7;
        int i17=-204;
        int i18=5;
        int i19=6501;
        int[] iArr1 =new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr1, -34082);

        vMeth1(-105, Test0786.dFld, i3);
        f2 = Test0786.instanceCount;
        i3 = i3;
        for (i16 = 152; i16 > 5; --i16) {
            i3 = i17;
            Test0786.instanceCount += Test0786.sFld;
            if (i17 != 0) {
                vMeth_check_sum += i3 + Float.floatToIntBits(f2) + i16 + i17 + (b1 ? 1 : 0) + i18 + i19 +
                    FuzzerUtils.checkSum(iArr1);
                return;
            }
            try {
                i17 = (i16 / i17);
                i3 = (51 / iArr1[i16]);
                i17 = (i3 / -258470170);
            } catch (ArithmeticException a_e) {}
            iArr1[i16 - 1] = i16;
            Test0786.instanceCount &= i17;
            if (b1) continue;
            for (i18 = 1; i18 < 11; i18++) {
                i19 = (int) Test0786.instanceCount;
                i19 = i19;
                i19 <<= (int) Test0786.instanceCount;
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f2) + i16 + i17 + (b1 ? 1 : 0) + i18 + i19 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=1, i1=-139, i2=-6, i20=14, i21=4, i22=-5306, i23=41783, i24=-14, i25=-67;
        float f3=0.809F;
        boolean b2=false;

        lArrFld[(i >>> 1) % N][(i >>> 1) % N] ^= (Test0786.instanceCount++);
        for (i1 = 1; i1 < 158; i1++) {
            vMeth(9290);
            if (false) {
                i2 <<= i1;
                for (i20 = 160; i20 > i1; --i20) {
                    f3 += (i20 + i2);
                }
            } else {
                i2 /= (int)(i1 | 1);
                i2 += (((i1 * i) + i21) - Test0786.instanceCount);
                i += i;
                Test0786.instanceCount += i1;
            }
            Test0786.dFld += Test0786.instanceCount;
            i21 = (int) Test0786.instanceCount;
            i21 = i2;
            i21 = i20;
            Test0786.instanceCount = -226;
        }
        i = (int) Test0786.instanceCount;
        for (i22 = 3; i22 < 279; i22++) {
            byte by=63;
            f3 += Test0786.instanceCount;
            i2 = by;
            i23 = (int) Test0786.instanceCount;
            Test0786.instanceCount += i22;
            b2 = true;
            for (i24 = i22; i24 < 91; i24++) {
                switch (((i22 % 6) * 5) + 16) {
                case 42:
                    i25 += i24;
                    i -= 13;
                    break;
                case 28:
                    Test0786.instanceCount = i1;
                    Test0786.instanceCount = Test0786.instanceCount;
                case 25:
                    Test0786.bArrFld[i24 + 1] = b2;
                    break;
                case 34:
                case 44:
                    by -= (byte) Test0786.instanceCount;
                    break;
                case 36:
                    Test0786.instanceCount += i24;
                default:
                    i25 = (int)98.346F;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i20 i21 f3 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i22 i23 b2 = " + i22 + "," + i23 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 = " + i24 + "," + i25);

        FuzzerUtils.out.println("Test0786.instanceCount Test0786.dFld Test0786.sFld = " + Test0786.instanceCount + "," +
                Double.doubleToLongBits(Test0786.dFld) + "," + Test0786.sFld);
        FuzzerUtils.out.println("lArrFld Test0786.lArrFld1 Test0786.bArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
                FuzzerUtils.checkSum(Test0786.lArrFld1) + "," + FuzzerUtils.checkSum(Test0786.bArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0786 _instance = new Test0786();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
