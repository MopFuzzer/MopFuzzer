// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:27 2023
public class Test0332 {

    public static final int N = 400;

    public static long instanceCount=-3852089880L;
    public int iFld=11;
    public static double dFld=-1.23034;
    public static float fFld=0.191F;
    public static short sFld=-12917;
    public int iFld1=31227;
    public static int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0332.iArrFld, -10);
        FuzzerUtils.init(Test0332.lArrFld, -7914545522340650764L);
        FuzzerUtils.init(Test0332.fArrFld, 82.15F);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, boolean b, int i5) {

        int i6=4, i7=-15834, i8=-76, i9=63037, i10=-2, i11=-2;
        long l1=21549L;
        byte by=5;

        for (i6 = 17; i6 < 314; ++i6) {
            i7 <<= i6;
            i8 = 1;
            do {
                i5 += (i8 * i8);
                Test0332.dFld += i7;
            } while (++i8 < 6);
            for (l1 = 1; 6 > l1; ++l1) {
                by = (byte)i7;
                Test0332.fFld = (float) Test0332.dFld;
                for (i10 = 1; i10 < 2; ++i10) {
                    i9 += (((i10 * Test0332.fFld) + i9) - i6);
                    Test0332.fFld += i9;
                    i9 = i8;
                    Test0332.iArrFld[(int) (l1)] += 0;
                    l *= -5146617751776182938L;
                }
                i5 *= (int)l;
            }
        }
        long meth_res = l + (b ? 1 : 0) + i5 + i6 + i7 + i8 + l1 + i9 + by + i10 + i11;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(int i3, int i4) {

        boolean b1=true;
        int i12=-56569;
        int i13=191;
        int i14=-4;
        int i15=9;
        int[] iArr =new int[N];
        byte by1=0;
        byte[] byArr =new byte[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 121);
        FuzzerUtils.init(sArr, (short)-10231);
        FuzzerUtils.init(byArr, (byte)-76);

        i3 -= (i3++);
        Test0332.lArrFld[(i4 >>> 1) % N] -= (long) (((i4 + i4) - lMeth(Test0332.instanceCount, b1, i3)) * Test0332.fFld);
        for (i12 = 18; i12 < 327; ++i12) {
            switch ((i12 % 7) + 119) {
            case 119:
                Test0332.iArrFld[i12] = i12;
                Test0332.instanceCount -= i3;
                i13 = i13;
                break;
            case 120:
                i3 -= by1;
                iArr[i12 - 1] *= -3;
                by1 >>>= (byte)i4;
                for (i14 = 1; i14 < 5; ++i14) {
                    sArr[i12 - 1] %= (short)(i14 | 1);
                    i13 += (((i14 * i15) + i14) - i12);
                }
                break;
            case 121:
                byArr = byArr;
                Test0332.instanceCount += (long) Test0332.fFld;
                break;
            case 122:
            case 123:
                Test0332.instanceCount <<= Test0332.instanceCount;
                break;
            case 124:
                Test0332.instanceCount |= i12;
            case 125:
                i4 += (i12 * i12);
            }
        }
        long meth_res = i3 + i4 + (b1 ? 1 : 0) + i12 + i13 + by1 + i14 + i15 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i, int i1) {

        int i2=-4, i16=53693, i17=212, i18=18646, i19=53003;
        float f=-2.546F;

        i2 = 1;
        do {
            f += Math.min((i1 * i2) - iMeth1(i1, i2), Test0332.instanceCount);
            i += Test0332.sFld;
            for (i16 = 1; i16 < 11; i16++) {
                i1 += i16;
                Test0332.lArrFld[i16 - 1] *= i16;
                for (i18 = 1; i18 < 2; i18 += 2) {
                    Test0332.iArrFld = Test0332.iArrFld;
                    i19 -= i2;
                    i1 = i16;
                    Test0332.instanceCount -= (long) 2.5F;
                    try {
                        i = (112 / Test0332.iArrFld[i2 - 1]);
                        i19 = (i1 % i2);
                        i1 = (i19 % 31366);
                    } catch (ArithmeticException a_e) {}
                    i += (int) Test0332.dFld;
                    Test0332.iArrFld[i16] = (int) 1226617232L;
                    Test0332.instanceCount += (i18 ^ i19);
                }
            }
        } while (++i2 < 140);
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + i16 + i17 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i20=-18144, i21=4, i22=4, i23=-48369, i24=-85, i25=134, i26=-10, i27=12, i28=-45, i29=1, i30=-96, i31=10,
            i32=-152, i33=33961;
        byte by2=51;
        double d=90.27178;
        boolean b2=true;
        short[] sArr1 =new short[N];

        FuzzerUtils.init(sArr1, (short)7925);

        Test0332.iArrFld[(iFld >>> 1) % N] = (int) (((--Test0332.dFld) + (-25125 - iMeth(iFld1, iFld1))) % (iFld | 1));
        for (i20 = 307; i20 > 9; i20--) {
            for (i22 = 2; i22 < 84; i22++) {
                i23 = Test0332.sFld;
                i21 -= (int) Test0332.instanceCount;
                for (i24 = 1; i24 < 2; ++i24) {
                    i25 ^= 24;
                    i25 = 9531;
                }
            }
            sArr1[i20 + 1] >>= (short)i21;
        }
        for (i26 = 5; i26 < 149; ++i26) {
            if (b2) {
                i23 -= (int) Test0332.fFld;
                for (i28 = 174; 2 < i28; i28 -= 3) {
                    by2 >>= (byte) Test0332.instanceCount;
                    i25 += (((i28 * i29) + Test0332.instanceCount) - Test0332.fFld);
                    i25 = -2940;
                    Test0332.fFld -= Test0332.fFld;
                    for (i30 = 1; 4 > i30; i30++) {
                        i25 *= i20;
                        Test0332.instanceCount /= (i28 | 1);
                        iFld += i30;
                        i27 += i29;
                    }
                    Test0332.fArrFld[i28] = Test0332.fFld;
                }
                d = 1;
                while (++d < 174) {
                    Test0332.lArrFld[(int) (d)] = -91;
                    for (i32 = i26; i32 < 1; i32++) {
                        i29 = iFld1;
                        i21 = (int)99L;
                        i29 *= iFld;
                        i33 -= (int) Test0332.instanceCount;
                    }
                }
            } else if (b2) {
                iFld += Test0332.sFld;
            }
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 by2 i30 = " + i29 + "," + by2 + "," + i30);
        FuzzerUtils.out.println("i31 d i32 = " + i31 + "," + Double.doubleToLongBits(d) + "," + i32);
        FuzzerUtils.out.println("i33 b2 sArr1 = " + i33 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test0332.instanceCount iFld Test0332.dFld = " + Test0332.instanceCount + "," + iFld + "," +
                Double.doubleToLongBits(Test0332.dFld));
        FuzzerUtils.out.println("Test0332.fFld Test0332.sFld iFld1 = " + Float.floatToIntBits(Test0332.fFld) + "," + Test0332.sFld +
            "," + iFld1);
        FuzzerUtils.out.println("Test0332.iArrFld Test0332.lArrFld Test0332.fArrFld = " + FuzzerUtils.checkSum(Test0332.iArrFld) + ","
                + FuzzerUtils.checkSum(Test0332.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0332.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0332 _instance = new Test0332();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
