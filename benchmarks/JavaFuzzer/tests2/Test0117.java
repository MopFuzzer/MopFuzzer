// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0117 {

    public static final int N = 400;

    public static volatile long instanceCount=9L;
    public int iFld=1;
    public float fFld=-108.403F;
    public static double dFld=0.49473;
    public static float fFld1=2.921F;
    public static int iFld1=-8;
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];
    public int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0117.iArrFld, 41769);
        FuzzerUtils.init(Test0117.fArrFld, 0.294F);
        FuzzerUtils.init(Test0117.lArrFld, -4092232418L);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static void vMeth(int i, int i1) {

        float f=-49.118F;
        short s=9987;

        f = Math.min(i--, (int) (Test0117.instanceCount + (Test0117.instanceCount * s)));
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + s;
    }

    public static int iMeth2(float f1, int i8) {

        int i9=-220, i10=-121, i11=5, i12=-6, i13=0;
        boolean b1=false;
        double d1=98.2275;
        double[][] dArr =new double[N][N];
        byte by=-60;

        FuzzerUtils.init(dArr, 102.126006);

        for (i9 = 21; 380 > i9; i9++) {
            if (b1) break;
            i11 = 1;
            do {
                Test0117.instanceCount |= 112;
                if (b1) break;
                Test0117.iArrFld[i11 + 1] = i8;
                i10 *= i11;
                Test0117.instanceCount *= (long) d1;
                i8 = 78;
                Test0117.iArrFld[i11 + 1] = -10241;
                for (i12 = 1; 1 > i12; i12++) {
                    dArr[i12][i11 - 1] -= i11;
                    Test0117.instanceCount += (-21735 + (i12 * i12));
                    i10 -= by;
                    i8 = (int) Test0117.instanceCount;
                }
            } while (++i11 < 5);
        }
        long meth_res = Float.floatToIntBits(f1) + i8 + i9 + i10 + (b1 ? 1 : 0) + i11 + Double.doubleToLongBits(d1) +
            i12 + i13 + by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(long l, int i7) {

        boolean b=false;
        float f2=92.490F;
        int i14=26599, i15=0, i16=0, i17=186, i18=-173, i19=43;
        byte by1=-42;
        byte[] byArr =new byte[N];
        short s1=-4052;
        long l1=147L;

        FuzzerUtils.init(byArr, (byte)101);

        b = b;
        Test0117.fArrFld[(i7 >>> 1) % N] = iMeth2(f2, i7);
        i7 += -9;
        for (i14 = 293; i14 > 17; i14 -= 3) {
            for (i16 = 1; i16 < 17; i16++) {
                switch ((i14 % 7) + 102) {
                case 102:
                    i17 /= (int)(i16 | 1);
                    for (i18 = 1; i18 < 2; ++i18) {
                        switch ((((i7 >>> 1) % 10) * 5) + 98) {
                        case 129:
                            by1 <<= (byte)i14;
                            b = b;
                        case 141:
                        case 142:
                            byArr[i18] >>>= (byte) Test0117.instanceCount;
                            i17 -= i15;
                            Test0117.lArrFld[i14] <<= Test0117.instanceCount;
                            break;
                        case 124:
                            s1 *= (short)107;
                            break;
                        case 104:
                            l += l;
                            break;
                        case 145:
                            s1 += (short)i18;
                            break;
                        case 99:
                            if (b) continue;
                            break;
                        case 126:
                            f2 += (i18 * i18);
                        case 118:
                            i17 |= 117;
                        case 138:
                            i15 |= i18;
                        }
                    }
                    break;
                case 103:
                    Test0117.instanceCount -= i17;
                    break;
                case 104:
                    f2 *= i16;
                case 105:
                    Test0117.iArrFld[i14] += (int) Test0117.instanceCount;
                    break;
                case 106:
                    f2 += l1;
                    break;
                case 107:
                    Test0117.dFld += i16;
                    break;
                case 108:
                    l1 = 14913L;
                    break;
                default:
                    Test0117.iArrFld[i14] = i18;
                }
            }
        }
        long meth_res = l + i7 + (b ? 1 : 0) + Float.floatToIntBits(f2) + i14 + i15 + i16 + i17 + i18 + i19 + by1 + s1
            + l1 + FuzzerUtils.checkSum(byArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        int i20=-12, i21=11, i22=84;
        double d2=-61.73246;

        i5 >>>= iMeth1(Test0117.instanceCount, i4);
        i5 = i6;
        i4 = -6;
        for (i20 = 359; i20 > 15; i20--) {
            boolean b2=true;
            for (d2 = 1; d2 < 5; ++d2) {
                Test0117.dFld = i20;
                i22 += (int) (((d2 * i4) + i4) - Test0117.instanceCount);
                i22 *= (int)13102L;
                i22 = (int) Test0117.fFld1;
                Test0117.iArrFld = Test0117.iArrFld;
            }
            Test0117.iArrFld[i20] = (int) Test0117.fFld1;
            i21 += (int) Test0117.instanceCount;
            if (b2) {
                i5 *= i21;
                i22 += (((i20 * i21) + Test0117.instanceCount) - i4);
            }
        }
        long meth_res = i4 + i5 + i6 + i20 + i21 + Double.doubleToLongBits(d2) + i22;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i2=55187, i3=-4, i23=-14, i24=192, i25=-176, i26=-35872, i27=12621, i28=12381, i29=13;
        double d=2.9128;
        byte by2=104;
        short s2=-15438;
        long l2=57307L;

        vMeth((int) (Test0117.instanceCount * ((iFld + Test0117.instanceCount) * Float.intBitsToFloat(iFld))), (int) (iFld -
            (--fFld)));
        for (i2 = 6; i2 < 125; ++i2) {
            i3 -= (int) (Math.abs((int) (-(Test0117.instanceCount - Test0117.instanceCount))) + ((i3--) - (Test0117.instanceCount /
                (i3 | 1))));
            d -= ((Test0117.iArrFld[i2]--) + (iMeth(iFld, i3, i2) + iFld));
            switch ((i2 % 7) + 66) {
            case 66:
                iFld = iFld;
            case 67:
                i3 += by2;
                break;
            case 68:
                i3 >>>= i3;
                s2 <<= (short)iFld;
                for (i23 = 211; i23 > 9; --i23) {
                    i25 += (-34 + (i23 * i23));
                    i24 += i3;
                    i3 *= i24;
                }
                break;
            case 69:
                i25 = i3;
                Test0117.iArrFld[i2] *= i24;
                switch ((i2 % 2) + 50) {
                case 50:
                    iFld += iFld;
                    break;
                case 51:
                    Test0117.iArrFld[i2 - 1] += (int) Test0117.instanceCount;
                    iFld ^= i3;
                    i24 <<= i3;
                    for (i26 = 10; 211 > i26; i26++) {
                        iFld += (64203 + (i26 * i26));
                        for (i28 = 2; i28 > 1; i28 -= 3) {
                            Test0117.instanceCount -= (long) 9.117528;
                            Test0117.instanceCount += (i28 | i27);
                            switch (((i28 % 10) * 5) + 47) {
                            case 65:
                                Test0117.lArrFld[i28 - 1] = i29;
                                i27 += (((i28 * i29) + Test0117.instanceCount) - i2);
                                break;
                            case 50:
                                Test0117.instanceCount = i23;
                                break;
                            case 56:
                                Test0117.iArrFld[i2] = (int) d;
                                break;
                            case 62:
                                Test0117.lArrFld[i26 + 1] = i27;
                                break;
                            case 49:
                                i24 += 3;
                                break;
                            case 74:
                            case 67:
                                Test0117.fArrFld[(i27 >>> 1) % N] *= Test0117.instanceCount;
                                break;
                            case 91:
                                Test0117.iArrFld[i2 - 1] = (int) -248L;
                            case 60:
                                i25 -= (int)l2;
                                break;
                            case 52:
                                Test0117.iFld1 += (i28 * i28);
                                break;
                            }
                        }
                    }
                    break;
                }
            case 70:
                i3 += (((i2 * l2) + i3) - iFld);
                break;
            case 71:
                iArrFld1 = Test0117.iArrFld;
            case 72:
            }
        }

        FuzzerUtils.out.println("i2 i3 d = " + i2 + "," + i3 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("by2 s2 i23 = " + by2 + "," + s2 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l2 = " + l2);

        FuzzerUtils.out.println("Test0117.instanceCount iFld fFld = " + Test0117.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0117.dFld Test0117.fFld1 Test0117.iFld1 = " + Double.doubleToLongBits(Test0117.dFld) + "," +
                Float.floatToIntBits(Test0117.fFld1) + "," + Test0117.iFld1);
        FuzzerUtils.out.println("Test0117.iArrFld Test0117.fArrFld Test0117.lArrFld = " + FuzzerUtils.checkSum(Test0117.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0117.fArrFld)) + "," + FuzzerUtils.checkSum(Test0117.lArrFld));
        FuzzerUtils.out.println("iArrFld1 = " + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0117 _instance = new Test0117();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
