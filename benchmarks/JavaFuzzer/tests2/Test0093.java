// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:16 2023
public class Test0093 {

    public static final int N = 400;

    public static long instanceCount=13L;
    public static byte byFld=94;
    public static short sFld=-8491;
    public static volatile float fFld=0.894F;
    public static volatile double dFld=0.107386;
    public static int[] iArrFld =new int[N];
    public static int[][] iArrFld1 =new int[N][N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0093.iArrFld, 54874);
        FuzzerUtils.init(Test0093.iArrFld1, 112);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7, long l2) {

        int i8=-59866;
        int i9=-8196;
        int i10=-11;
        int i11=0;
        int i12=182;
        int[] iArr =new int[N];
        double d1=0.95370;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, 219);
        FuzzerUtils.init(lArr, 38211L);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 5; i9++) {
                switch ((i9 % 1) + 95) {
                case 95:
                    iArr[i9 - 1] -= i10;
                    for (i11 = 2; i11 > 1; i11--) {
                        lArr = lArr;
                        l2 = i12;
                        i7 -= i6;
                    }
                    iArr = iArr;
                    iArr[i9] >>= Test0093.sFld;
                    break;
                }
                i12 /= (int)1.284F;
                lArr[i9] -= (long) Test0093.fFld;
                d1 -= i9;
                i7 = (int) Test0093.instanceCount;
                i7 += i9;
            }
        } while (++i8 < 339);
        vMeth2_check_sum += i6 + i7 + l2 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l1) {

        int i3=8, i4=12, i5=234, i13=-42, i14=-1, i15=103, i16=-32;
        float f1=2.669F;
        float[][] fArr =new float[N][N];
        boolean b1=false;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(fArr, 0.204F);
        FuzzerUtils.init(lArr1, 180L);

        for (i3 = 5; i3 < 123; i3++) {
            i4 = i4;
            Test0093.instanceCount += (-i5);
            Test0093.fFld = (-((--i5) - (i5--)));
            vMeth2(162, i5, Test0093.instanceCount);
        }
        i5 >>= i4;
        Test0093.iArrFld[(i3 >>> 1) % N] *= Test0093.sFld;
        Test0093.dFld -= Test0093.sFld;
        for (i13 = 10; i13 < 274; i13++) {
            switch (i13 % 10) {
            case 0:
                i15 = 1;
                while (++i15 < 6) {
                    for (f1 = 1; f1 < 1; f1++) {
                        i16 += (-64 + (f1 * f1));
                        i5 += (int)(f1 * i4);
                        if (b1) continue;
                    }
                }
                break;
            case 1:
                fArr[i13][i13] += i3;
                break;
            case 2:
                Test0093.iArrFld[i13] <<= -10;
            case 3:
                i5 += (int) Test0093.fFld;
                break;
            case 4:
                i16 += (int)f1;
            case 5:
                lArr1[i13] = i13;
                break;
            case 6:
                i4 = (int)-1.222F;
                break;
            case 7:
                Test0093.iArrFld = Test0093.iArrFld;
            case 8:
            case 9:
                i14 -= i3;
                break;
            default:
                Test0093.iArrFld[i13 - 1] >>= 143;
            }
        }
        vMeth1_check_sum += l1 + i3 + i4 + i5 + i13 + i14 + i15 + Float.floatToIntBits(f1) + i16 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(long l, boolean b, float f) {

        int i2=-44366;
        double d=94.24488;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, false);

        bArr[(i2 >>> 1) % N] = (i2 <= (d--));
        vMeth1(Test0093.instanceCount);
        i2 <<= (int) Test0093.instanceCount;
        vMeth_check_sum += l + (b ? 1 : 0) + Float.floatToIntBits(f) + i2 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=-11046, i17=-9, i18=-14, i19=13, i20=31, i21=36925;
        boolean b2=true;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -38.97885);

        for (i = 5; 142 > i; i++) {
            i1 += (((i * Test0093.byFld) + i) - Test0093.sFld);
            if (i1 != (i1 + Long.reverseBytes(Math.max(-89L, Test0093.instanceCount)))) break;
            i1 += (((i * i1) + Test0093.instanceCount) - i1);
        }
        vMeth(Test0093.instanceCount, b2, Test0093.fFld);
        i17 = 1;
        do {
            i1 += i;
            Test0093.instanceCount *= Test0093.instanceCount;
        } while (++i17 < 273);
        i1 -= i;
        i18 = 226;
        while (--i18 > 0) {
            for (i19 = 3; i19 < 111; ++i19) {
                i21 = 1;
                do {
                    Test0093.instanceCount += i1;
                    i1 += (i21 * i21);
                } while (++i21 < 2);
                i20 -= i18;
                Test0093.iArrFld[i18 - 1] = 2;
                Test0093.iArrFld1 = Test0093.iArrFld1;
                Test0093.iArrFld[i19] += i;
                switch ((i18 % 3) + 39) {
                case 39:
                    i1 >>>= 9;
                    Test0093.instanceCount += (i19 * i19);
                    switch ((((i18 >>> 1) % 6) * 5) + 85) {
                    case 109:
                        Test0093.sFld = (short) Test0093.instanceCount;
                        dArr[i18 + 1] += i20;
                    case 102:
                        i20 &= i1;
                        break;
                    case 98:
                        fArrFld[i19] -= i;
                        Test0093.instanceCount += i18;
                        i20 += i21;
                        i1 *= (int)-12L;
                    case 89:
                        i1 += (-8 + (i19 * i19));
                        break;
                    case 97:
                        Test0093.instanceCount -= 7;
                        break;
                    case 99:
                        i1 += (i19 * i19);
                        break;
                    default:
                        Test0093.instanceCount >>= Test0093.sFld;
                    }
                    break;
                case 40:
                    i1 *= -52192;
                    break;
                case 41:
                    Test0093.iArrFld1[i19 - 1][i19 + 1] -= i17;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 b2 = " + i + "," + i1 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 dArr = " + i20 + "," + i21 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0093.instanceCount Test0093.byFld Test0093.sFld = " + Test0093.instanceCount + "," + Test0093.byFld +
                "," + Test0093.sFld);
        FuzzerUtils.out.println("Test0093.fFld Test0093.dFld Test0093.iArrFld = " + Float.floatToIntBits(Test0093.fFld) + "," +
                Double.doubleToLongBits(Test0093.dFld) + "," + FuzzerUtils.checkSum(Test0093.iArrFld));
        FuzzerUtils.out.println("Test0093.iArrFld1 fArrFld = " + FuzzerUtils.checkSum(Test0093.iArrFld1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0093 _instance = new Test0093();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
