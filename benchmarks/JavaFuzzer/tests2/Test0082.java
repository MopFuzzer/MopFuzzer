// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0082 {

    public static final int N = 400;

    public static long instanceCount=17050L;
    public static boolean bFld=true;
    public static float fFld=0.276F;
    public static byte[] byArrFld =new byte[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0082.byArrFld, (byte) 78);
        FuzzerUtils.init(Test0082.lArrFld, -12L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i4, int i5, int i6) {

        int i7=10;
        int i8=11;
        int i9=-22366;
        int[][] iArr2 =new int[N][N];
        double d1=124.7630;
        float[] fArr =new float[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(fArr, 0.680F);
        FuzzerUtils.init(iArr2, 14);
        FuzzerUtils.init(lArr, 8344L);

        if (Test0082.bFld) {
            i7 = 1;
            while (++i7 < 325) {
                float f2=-19.715F;
                Test0082.instanceCount = (long) f2;
                fArr[i7 - 1] -= -13;
                iArr2[i7][i7] >>= -3;
                Test0082.byArrFld[i7] >>>= (byte) i6;
                for (i8 = 1; 5 > i8; i8++) {
                    lArr[i7] -= Test0082.instanceCount;
                    i6 = i6;
                    d1 += Test0082.instanceCount;
                    i5 <<= 3;
                    f2 = i9;
                    Test0082.instanceCount *= i9;
                    Test0082.instanceCount -= i5;
                    if (Test0082.bFld) continue;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(long l, float f, float f1) {

        int i2=-10;
        int i3=-135;
        int i10=-78;
        int i11=3;
        int[] iArr1 =new int[N];
        double d=17.13408;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(iArr1, -61525);
        FuzzerUtils.init(fArr1, 22.781F);

        i2 = 1;
        do {
            iArr1[i2 + 1] -= (int)(d--);
            i3 += (int)(--d);
            i3 >>= (-13747 - sMeth(i2, 30, i2));
            f *= i2;
            i3 = i3;
            i10 = 1;
            while (++i10 < 14) {
                iArr1[i2] = i3;
                switch ((((i3 >>> 1) % 10) * 5) + 113) {
                case 123:
                    f += (i10 * i10);
                    switch ((i2 % 7) + 18) {
                    case 18:
                        i3 &= i3;
                        if (i3 != 0) {
                            vMeth1_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 +
                                Double.doubleToLongBits(d) + i3 + i10 + i11 + FuzzerUtils.checkSum(iArr1) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                            return;
                        }
                        i3 = i3;
                        break;
                    case 19:
                        i3 -= (int) Test0082.instanceCount;
                        break;
                    case 20:
                        i3 += (int) Test0082.instanceCount;
                        break;
                    case 21:
                        if (false) break;
                        break;
                    case 22:
                        if (Test0082.bFld) break;
                        break;
                    case 23:
                        i3 += (((i10 * i10) + f1) - f);
                        break;
                    case 24:
                        iArr1[i10] >>= i10;
                    }
                    break;
                case 138:
                    fArr1[i2] *= (float)d;
                    break;
                case 152:
                    i3 ^= (int) Test0082.instanceCount;
                    break;
                case 114:
                    try {
                        i3 = (iArr1[i10 - 1] / i11);
                        i3 = (i3 % -252);
                        i3 = (iArr1[i2 - 1] % iArr1[i10]);
                    } catch (ArithmeticException a_e) {}
                case 146:
                    Test0082.instanceCount -= i11;
                    break;
                case 120:
                    i11 += (((i10 * i2) + i2) - i10);
                    break;
                case 162:
                    l += (((i10 * i10) + Test0082.instanceCount) - i10);
                    break;
                case 144:
                    i11 = (int)f1;
                case 122:
                    iArr1 = iArr1;
                case 133:
                    iArr1[i10] = (int) Test0082.instanceCount;
                    break;
                }
            }
        } while ((i2 += 2) < 220);
        vMeth1_check_sum += l + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 + Double.doubleToLongBits(d) +
            i3 + i10 + i11 + FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vMeth(int i1) {

        int i12=-9;
        int i13=-6;
        int i14=-9324;
        int i15=53102;
        int i16=-168;
        int i17=-18;
        int i18=7;
        int i19=8;
        int[] iArr3 =new int[N];
        double d2=87.115591;
        short s=7900;

        FuzzerUtils.init(iArr3, -17411);

        vMeth1(Test0082.instanceCount, Test0082.fFld, Test0082.fFld);
        for (i12 = 292; i12 > 9; i12 -= 3) {
            for (i14 = 1; i14 < 16; ++i14) {
                i16 = 2;
                while ((i16 -= 2) > 0) {
                    try {
                        i1 = (i14 / i16);
                        i1 = (i15 % -70);
                        i15 = (i16 % iArr3[i12 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i17 += (i16 * i16);
                    i13 |= i14;
                }
                Test0082.lArrFld[i12 - 1] *= i16;
                i17 = i13;
            }
            Test0082.lArrFld[i12] <<= -9;
            i13 = (int)d2;
            i17 <<= s;
            for (i18 = 1; i18 < 16; ++i18) {
                d2 = i18;
                i13 += (i18 * i18);
            }
        }
        vMeth_check_sum += i1 + i12 + i13 + i14 + i15 + i16 + i17 + Double.doubleToLongBits(d2) + s + i18 + i19 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=-13;
        int[][] iArr =new int[N][N];

        FuzzerUtils.init(iArr, 15110);

        i = 1;
        while (++i < 339) {
            Test0082.instanceCount = (((Test0082.instanceCount += i) + Math.abs(i)) * iArr[i][i]);
            vMeth(i);
        }

        FuzzerUtils.out.println("i iArr = " + i + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0082.instanceCount Test0082.bFld Test0082.fFld = " + Test0082.instanceCount + "," + (Test0082.bFld ? 1
                : 0) + "," + Float.floatToIntBits(Test0082.fFld));
        FuzzerUtils.out.println("Test0082.byArrFld Test0082.lArrFld = " + FuzzerUtils.checkSum(Test0082.byArrFld) + "," +
                FuzzerUtils.checkSum(Test0082.lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0082 _instance = new Test0082();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
