// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0236 {

    public static final int N = 400;

    public static long instanceCount=51664L;
    public static int iFld=0;
    public static int iFld1=58352;
    public static double dFld=-101.43;
    public static float fFld=-125.236F;
    public short sFld=-7743;
    public static volatile byte byFld=-23;
    public static int iFld2=-11;
    public static float[] fArrFld =new float[N];
    public double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0236.fArrFld, 1.45F);
        FuzzerUtils.init(Test0236.iArrFld, -54866);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(long l, double d) {

        float f=-1.102F;
        int i=9;

        f = i;
        Test0236.instanceCount &= (long) ((f--) + i);
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i;
    }

    public static long lMeth() {

        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -4);

        Test0236.iFld = (Test0236.iFld--);
        Test0236.fArrFld[(Test0236.iFld >>> 1) % N] = ((iArr[(Test0236.iFld >>> 1) % N] - (Test0236.iFld * Test0236.iFld)) -
                Integer.reverseBytes(Math.max(Test0236.iFld, Test0236.iFld1)));
        long meth_res = FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i2=120, i3=121, i4=-82, i5=-5, i6=-1;
        double d1=-2.127164;
        long l1=42950L;
        short s=2862;

        vSmallMeth(Test0236.instanceCount, Test0236.dFld);
        for (i2 = 7; i2 < 139; i2++) {
            for (d1 = 1; d1 < 12; d1++) {
                Test0236.iFld = i3;
                Test0236.fFld = Test0236.iFld1;
                i5 = 1;
                while (++i5 < 2) {
                    Test0236.iFld1 >>>= i2;
                    Test0236.instanceCount = i5;
                    i4 = -6;
                }
                Test0236.fFld -= (float) Test0236.dFld;
                for (l1 = 1; l1 < 2; l1++) {
                    switch (((i2 % 8) * 5) + 121) {
                    case 148:
                        Test0236.iArrFld = Test0236.iArrFld;
                        Test0236.instanceCount += i6;
                        break;
                    case 146:
                        Test0236.iFld1 |= s;
                        break;
                    case 160:
                        Test0236.iFld1 &= Test0236.iFld;
                        break;
                    case 151:
                        if (true) continue;
                        break;
                    case 147:
                        Test0236.iFld -= (int) Test0236.fFld;
                    case 159:
                        Test0236.iFld *= (int) Test0236.instanceCount;
                    case 161:
                        Test0236.instanceCount *= -51;
                    case 129:
                        Test0236.fFld += 73.607F;
                    default:
                        Test0236.instanceCount += (l1 * l1);
                    }
                }
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d1) + i4 + i5 + l1 + i6 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(boolean b) {

        int i1=-56508;
        int i7=124;
        int i8=147;
        int i9=-61236;
        int[] iArr1 =new int[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -64206);
        FuzzerUtils.init(lArr, 1074419157L);

        vSmallMeth((++iArr1[(Test0236.iFld1 >>> 1) % N]) - (Test0236.iFld++), Test0236.dFld);
        i1 = 1;
        do {
            Test0236.instanceCount = Math.max(Test0236.iFld1, (int) ((i1 - -6L) - Math.abs(Test0236.fFld)));
            vSmallMeth((long) (((-(--Test0236.iFld)) * Test0236.instanceCount) + (Test0236.fFld++)), dArrFld[i1]--);
            vSmallMeth((long) (lArr[i1] + ((-8 - iMeth()) * Test0236.fFld)), 1.45700);
            for (i7 = 1; 10 > i7; ++i7) {
                i9 = 1;
                do {
                    Test0236.iFld >>>= Test0236.iFld;
                    Test0236.instanceCount -= Test0236.instanceCount;
                    Test0236.iFld = (int) Test0236.fFld;
                    if (i9 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + i1 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    Test0236.iFld1 -= (int) Test0236.dFld;
                    Test0236.iFld = -17271;
                    lArr[i1 - 1] = i8;
                    sFld += sFld;
                } while (++i9 < 2);
            }
        } while (++i1 < 158);
        vMeth_check_sum += (b ? 1 : 0) + i1 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        float f1=69.255F;
        boolean b1=false;
        int i10=3753, i11=3;
        double d2=104.81772;

        for (int smallinvoc = 0; smallinvoc < 511; smallinvoc++) vSmallMeth(lMeth(), --Test0236.dFld);
        f1 = 1;
        do {
            vSmallMeth(Math.min((Test0236.iFld + Test0236.iFld) + (Test0236.instanceCount * -2), Test0236.instanceCount), Test0236.dFld);
            Test0236.dFld -= Float.intBitsToFloat(Math.max((int) (Test0236.instanceCount * Test0236.iFld), Test0236.iFld1 / (Test0236.iFld |
                1)));
            Test0236.iFld += (int) ((long) f1 ^ Test0236.iFld1);
        } while (++f1 < 388);
        vMeth(b1);
        Test0236.dFld -= Test0236.byFld;
        i10 = 1;
        while (++i10 < 346) {
            Test0236.iFld1 -= Test0236.iFld1;
            Test0236.iFld1 += (i10 * i10);
            for (d2 = 2; d2 < 73; ++d2) {
                sFld <<= (short)-12;
                Test0236.iFld += Test0236.iFld;
                i11 = Test0236.iFld1;
                Test0236.iArrFld[i10 - 1] >>= Test0236.iFld2;
                Test0236.instanceCount %= (i11 | 1);
                sFld >>= (short) Test0236.instanceCount;
                Test0236.dFld = i10;
                switch ((i10 % 2) + 97) {
                case 97:
                    Test0236.instanceCount += (long) ((long) d2 ^ Test0236.instanceCount);
                    Test0236.iFld2 += (int) (d2 - f1);
                    if (true) break;
                    switch ((i10 % 10) + 91) {
                    case 91:
                        Test0236.iFld1 = i10;
                    case 92:
                        Test0236.iArrFld[i10 - 1] = Test0236.iFld;
                        b1 = b1;
                        break;
                    case 93:
                        switch ((i10 % 8) + 77) {
                        case 77:
                            Test0236.iFld1 = Test0236.iFld;
                            Test0236.iFld1 += 36551;
                            Test0236.dFld -= f1;
                            break;
                        case 78:
                            Test0236.iFld = Test0236.iFld1;
                            break;
                        case 79:
                            Test0236.iFld2 += (int) (((d2 * Test0236.fFld) + i11) - i10);
                            break;
                        case 80:
                            Test0236.iFld1 += (int) (((d2 * i10) + Test0236.iFld1) - i10);
                            break;
                        case 81:
                            Test0236.iFld1 += (int) (-3537490933L + (d2 * d2));
                            break;
                        case 82:
                            Test0236.iFld2 += (int) (((d2 * Test0236.iFld2) + Test0236.iFld1) - Test0236.iFld1);
                            break;
                        case 83:
                            i11 <<= (int) Test0236.instanceCount;
                            break;
                        case 84:
                            Test0236.dFld += i10;
                        default:
                            Test0236.instanceCount -= Test0236.iFld2;
                        }
                        break;
                    case 94:
                        i11 += i10;
                        break;
                    case 95:
                        Test0236.iFld = i10;
                        break;
                    case 96:
                        Test0236.iFld2 -= -13;
                        break;
                    case 97:
                        Test0236.fFld += i11;
                    case 98:
                    case 99:
                    case 100:
                        Test0236.fFld = Test0236.iFld2;
                        break;
                    }
                    break;
                case 98:
                    i11 += (int) (d2 * Test0236.iFld2);
                    break;
                }
            }
        }

        FuzzerUtils.out.println("f1 b1 i10 = " + Float.floatToIntBits(f1) + "," + (b1 ? 1 : 0) + "," + i10);
        FuzzerUtils.out.println("d2 i11 = " + Double.doubleToLongBits(d2) + "," + i11);

        FuzzerUtils.out.println("Test0236.instanceCount Test0236.iFld Test0236.iFld1 = " + Test0236.instanceCount + "," + Test0236.iFld +
                "," + Test0236.iFld1);
        FuzzerUtils.out.println("Test0236.dFld Test0236.fFld sFld = " + Double.doubleToLongBits(Test0236.dFld) + "," +
                Float.floatToIntBits(Test0236.fFld) + "," + sFld);
        FuzzerUtils.out.println("Test0236.byFld Test0236.iFld2 Test0236.fArrFld = " + Test0236.byFld + "," + Test0236.iFld2 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0236.fArrFld)));
        FuzzerUtils.out.println("dArrFld Test0236.iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) +
                "," + FuzzerUtils.checkSum(Test0236.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0236 _instance = new Test0236();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
