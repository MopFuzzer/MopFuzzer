// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0169 {

    public static final int N = 400;

    public static long instanceCount=9193753649183552799L;
    public static volatile boolean bFld=false;
    public long lFld=5690427022610055451L;
    public double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0169.iArrFld, -5);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static int iMeth() {

        int i4=-6, i5=-59405;

        for (i4 = 10; i4 < 171; ++i4) {
            i5 = (int) (((i5--) + (Test0169.instanceCount << Test0169.instanceCount)) + (i5++));
        }
        long meth_res = i4 + i5;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i10=-7;
        int i11=-176;
        int i12=-11928;
        int i13=95;
        int[] iArr1 =new int[N];
        double d1=-31.126997;
        float f1=-18.65F;
        long l1=29681L;
        short s=-5182;
        boolean b=true;

        FuzzerUtils.init(iArr1, -14088);

        i10 = 1;
        do {
            for (i11 = 1; i11 < 5; ++i11) {
                d1 -= i12;
                i12 %= (int) (Test0169.instanceCount | 1);
                f1 -= f1;
                l1 = i10;
                f1 = l1;
                if (b) {
                    i12 += i11;
                    i13 = 1;
                    do {
                        iArr1[i13 + 1] += (int)108.841F;
                        s = (short)i13;
                        Test0169.instanceCount += (i13 - i10);
                        s = (short)-6;
                        iArr1[(i10 >>> 1) % N] <<= -167;
                    } while (++i13 < 2);
                } else {
                    d1 += -1498981436L;
                }
            }
        } while (++i10 < 335);
        long meth_res = i10 + i11 + i12 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l1 + i13 + s + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(double d) {

        int i8=2;
        int i9=-172;
        int i14=-24153;
        int i15=241;
        int[] iArr =new int[N];
        byte by=33;

        FuzzerUtils.init(iArr, 1);

        for (i8 = 20; i8 < 391; i8++) {
            iArr[i8 + 1] = (int)lMeth();
            d *= 51772L;
            for (i14 = 1; i14 < 5; i14++) {
                float f2=-2.1009F;
                Test0169.bFld = Test0169.bFld;
                Test0169.instanceCount += (i14 + f2);
                Test0169.instanceCount -= i9;
                iArr = iArr;
                i15 = i9;
                Test0169.instanceCount <<= -61846;
                i15 = i14;
                switch ((i14 % 9) + 40) {
                case 40:
                    by *= (byte)d;
                    i15 += (-4 + (i14 * i14));
                    break;
                case 41:
                    i9 = i8;
                case 42:
                    i15 = (int) Test0169.instanceCount;
                    break;
                case 43:
                    Test0169.instanceCount >>>= Test0169.instanceCount;
                    break;
                case 44:
                    i15 /= (int) (Test0169.instanceCount | 1);
                    break;
                case 45:
                    Test0169.instanceCount |= i9;
                case 46:
                    iArr[i14 + 1] *= i14;
                    break;
                case 47:
                    i15 |= 5;
                    break;
                case 48:
                    iArr[i14] -= 2;
                default:
                    i9 += (i14 * i15);
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i8 + i9 + i14 + i15 + by + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth1() {

        int i6=-12;
        int i7=-7;
        int i16=-12;
        int[] iArr2 =new int[N];
        float f=-14.812F;
        double d2=112.70452;
        byte by1=-64;

        FuzzerUtils.init(iArr2, 159);

        i6 >>= (((i6 - i6) + 39760) - (i6--));
        i6 += (int)((i6 >>> (long)(f + 147)) - (++i6));
        i7 = 1;
        while (++i7 < 358) {
            i6 *= (int)fMeth(d2);
            i16 = 1;
            do {
                Test0169.instanceCount *= -60;
                Test0169.instanceCount += i16;
                i6 += i6;
                i6 = (int)f;
            } while (++i16 < 5);
            if (true) {
                i6 = (int)d2;
                Test0169.instanceCount += 10;
                iArr2[i7] <<= i7;
                by1 += (byte)i7;
            } else {
                i6 = i6;
            }
        }
        long meth_res = i6 + Float.floatToIntBits(f) + i7 + Double.doubleToLongBits(d2) + i16 + by1 +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l=3252723178559925875L;
        int i=132, i1=-169, i2=209, i3=1268, i18=64, i19=-15738;
        float f3=2.935F;
        float[][] fArr =new float[N][N];
        byte by2=98;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(fArr, -105.892F);
        FuzzerUtils.init(bArr, true);

        l = 1;
        do {
            for (i = 3; i < 154; ++i) {
                i1 = (int) (Test0169.instanceCount = (--i1));
                for (i2 = 1; 2 > i2; ++i2) {
                    dArrFld[(int)(l - 1)] *= (-(iMeth() % (((long)(i3 * 0.200F)) | 1)));
                    i3 = (int)(((i3 + i3) * (i2 - i1)) - ((40203 * (-iMeth1())) + l));
                    fArr[(int)(l)][i2] = i3;
                    switch ((i % 1) + 73) {
                    case 73:
                        Test0169.instanceCount += (-1076874337L + (i2 * i2));
                    }
                    Test0169.iArrFld[i] = i;
                    i3 += i3;
                }
                f3 = -8;
                i3 += (int)lFld;
                for (i18 = 1; i18 < 2; i18++) {
                    double d3=-102.15680;
                    i3 += (((i18 * f3) + f3) - i3);
                    if (Test0169.bFld) break;
                    switch (((243 >>> 1) % 7) + 60) {
                    case 60:
                        lFld += (i18 - l);
                        switch (((i18 % 1) * 5) + 73) {
                        case 76:
                            switch ((i18 % 8) + 104) {
                            case 104:
                                i1 >>= i1;
                            case 105:
                                Test0169.iArrFld[i18 + 1] -= (int) f3;
                                break;
                            case 106:
                                lFld += (((i18 * i) + i2) - i1);
                                i3 += (int)f3;
                                break;
                            case 107:
                                Test0169.iArrFld = Test0169.iArrFld;
                            case 108:
                                i19 += (i18 * i18);
                                i19 += i19;
                                Test0169.iArrFld[i] -= (int) Test0169.instanceCount;
                                break;
                            case 109:
                                lFld = -233;
                            case 110:
                                i19 -= i19;
                                break;
                            case 111:
                            default:
                                i1 = (int)lFld;
                            }
                            break;
                        default:
                            f3 += (i18 + by2);
                        }
                    case 61:
                        i19 *= 9;
                        break;
                    case 62:
                        fArr[i18 - 1][i18] = i2;
                        break;
                    case 63:
                        f3 = i3;
                        break;
                    case 64:
                        i19 = i;
                    case 65:
                        i19 = (int)d3;
                    case 66:
                        lFld += i2;
                        break;
                    default:
                        bArr[(int) (l)] = Test0169.bFld;
                    }
                }
            }
        } while (++l < 163);

        FuzzerUtils.out.println("l i i1 = " + l + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 f3 = " + i2 + "," + i3 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i18 i19 by2 = " + i18 + "," + i19 + "," + by2);
        FuzzerUtils.out.println("fArr bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0169.instanceCount Test0169.bFld lFld = " + Test0169.instanceCount + "," + (Test0169.bFld ? 1 : 0)
            + "," + lFld);
        FuzzerUtils.out.println("dArrFld Test0169.iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) +
                "," + FuzzerUtils.checkSum(Test0169.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0169 _instance = new Test0169();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 mainTest
//DEBUG  fMeth ->  fMeth iMeth1 mainTest
//DEBUG  lMeth ->  lMeth fMeth iMeth1 mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
