// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:22 2023
public class Test0213 {

    public static final int N = 400;

    public static long instanceCount=-10L;
    public static float fFld=-1.352F;
    public static double dFld=110.22216;
    public static volatile short sFld=2552;
    public static int iFld=-8;
    public static long lFld=-13L;
    public boolean bFld=false;
    public float[][] fArrFld =new float[N][N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0213.iArrFld, -165);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, double d) {

        int i5=-39622, i6=46629, i7=-64461, i8=0, i9=1, i10=207, i11=-40002;
        long l1=-3909420650726187712L;
        short s1=27607;
        short[] sArr =new short[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 97.234F);
        FuzzerUtils.init(sArr, (short)23266);

        i5 <<= (int)l1;
        for (i6 = 10; i6 < 254; i6 += 3) {
            b = b;
            for (i8 = 1; i8 < 19; i8++) {
                i5 = i9;
                if (false) continue;
            }
            for (i10 = 19; i10 > 1; i10--) {
                i7 += i10;
                Test0213.instanceCount ^= i11;
                fArr[i10 - 1] *= i11;
                i5 %= (int)(i5 | 1);
                switch (((i10 % 10) * 5) + 109) {
                case 153:
                    l1 -= i10;
                    i5 -= i11;
                    break;
                case 119:
                    sArr[i10 - 1] = (short)-42005;
                case 155:
                    i11 = i9;
                    break;
                case 120:
                    s1 += (short)i10;
                    break;
                case 126:
                    i5 += (int)l1;
                    break;
                case 131:
                    if (i7 != 0) {
                        vMeth2_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i5 + l1 + i6 + i7 + i8 + i9 +
                            i10 + i11 + s1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                            FuzzerUtils.checkSum(sArr);
                        return;
                    }
                    break;
                case 154:
                    i9 += s1;
                    break;
                case 151:
                    i5 += i7;
                    break;
                case 145:
                    l1 += (i10 * i10);
                case 144:
                    if (b) break;
                default:
                    if (b) break;
                }
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + Double.doubleToLongBits(d) + i5 + l1 + i6 + i7 + i8 + i9 + i10 + i11 + s1 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth1(long l) {

        short s=22100;
        byte by=-105;
        int i3=-197, i4=8, i12=-146, i13=-217;
        boolean b1=false;
        float f2=-1.574F;
        float[][] fArr1 =new float[N][N];
        double[] dArr =new double[N];
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(fArr1, 0.530F);
        FuzzerUtils.init(dArr, -1.56669);
        FuzzerUtils.init(lArr, 4808377633995241225L);

        s -= by;
        for (i3 = 10; i3 < 162; ++i3) {
            vMeth2(b1, Test0213.dFld);
            f2 = 1;
            while (++f2 < 10) {
                l = (long) Test0213.dFld;
                i4 |= i4;
                fArr1[i3 + 1][(int) (f2 + 1)] += Test0213.sFld;
                i4 *= (int) Test0213.dFld;
                i4 -= -83;
                i4 *= i3;
            }
            l += i4;
            dArr = dArr;
            for (i12 = 1; 10 > i12; i12++) {
                lArr[i3][i3 + 1] = Test0213.iFld;
                Test0213.iFld ^= (int) Test0213.instanceCount;
            }
        }
        vMeth1_check_sum += l + s + by + i3 + i4 + (b1 ? 1 : 0) + Float.floatToIntBits(f2) + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr))
            + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(float f, float f1) {

        double d1=-1.47660;
        int i14=10, i15=4, i16=5, i17=35, i18=-63693;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -63142L);

        vMeth1(Test0213.instanceCount);
        Test0213.iFld = (int) Test0213.instanceCount;
        for (d1 = 165; d1 > 10; d1--) {
            for (i15 = 10; i15 > 1; --i15) {
                i14 += i14;
                i16 = 198;
                i16 *= (int) Test0213.instanceCount;
                switch (((-128 >>> 1) % 9) + 71) {
                case 71:
                    if (false) break;
                    break;
                case 72:
                    for (i17 = 1; i17 < 2; ++i17) {
                        i14 -= i16;
                        try {
                            i14 = (Test0213.iArrFld[i17 + 1] % -104278015);
                            i16 = (-92 % i15);
                            i18 = (42432 / Test0213.iArrFld[(i15 >>> 1) % N]);
                        } catch (ArithmeticException a_e) {}
                        Test0213.instanceCount = i17;
                    }
                    lArr1[i15] = (long)f1;
                    Test0213.instanceCount = i16;
                case 73:
                    Test0213.fFld = Test0213.instanceCount;
                    break;
                case 74:
                    i18 += i15;
                    break;
                case 75:
                    i14 += 2;
                    break;
                case 76:
                    Test0213.iFld = (int) Test0213.instanceCount;
                    break;
                case 77:
                    lArr1[(int)(d1)] = i15;
                    break;
                case 78:
                    Test0213.iFld *= (int) -171560783307906087L;
                    break;
                case 79:
                    i16 >>>= (int) Test0213.instanceCount;
                    break;
                default:
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i14 + i15
            + i16 + i17 + i18 + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-24;
        int i1=-61440;
        int i2=-9;
        int i19=-63174;
        int i20=-214;
        int i21=-45364;
        int i22=-57;
        int i23=36422;
        int i24=-18004;
        int[] iArr =new
                    int[N];
        short[] sArr1 =new short[N];

        FuzzerUtils.init(iArr, -187);
        FuzzerUtils.init(sArr1, (short)12303);

        iArr[(i >>> 1) % N] = (--i);
        for (i1 = 11; i1 < 192; i1++) {
            Test0213.fFld += (float) ((iArr[i1] + (2.197F * (2 + (Test0213.fFld++)))) + (Test0213.dFld++));
            i2 = (int) (((i - i2) + (i2 - 61084)) - ((--fArrFld[i1 + 1][i1 - 1]) + (Test0213.fFld + Test0213.instanceCount)));
            vMeth(Test0213.fFld, Test0213.fFld);
            if (bFld) {
                for (i19 = 139; i19 > i1; --i19) {
                    Test0213.instanceCount -= i2;
                    Test0213.sFld <<= (short) -19142;
                    i = i19;
                    i = i;
                    i += (i19 * i19);
                }
                i *= (int) Test0213.fFld;
                Test0213.instanceCount += Test0213.instanceCount;
                for (i21 = 6; 139 > i21; i21++) {
                    Test0213.lFld += i21;
                    i22 = i2;
                    i20 >>= Test0213.iFld;
                    Test0213.dFld -= Test0213.instanceCount;
                    i2 += (i21 ^ (long) Test0213.fFld);
                    sArr1[i21] -= (short)1220;
                    switch ((i1 % 2) + 34) {
                    case 34:
                        i22 -= (int) Test0213.fFld;
                        Test0213.instanceCount = i;
                        if (bFld) break;
                        sArr1[i1] -= (short) Test0213.instanceCount;
                    case 35:
                        for (i23 = 1; 2 > i23; ++i23) {
                            Test0213.iFld += i2;
                        }
                        break;
                    }
                }
            }
            i24 += (i1 * i1);
        }
        Test0213.fFld -= Test0213.fFld;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr sArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test0213.instanceCount Test0213.fFld Test0213.dFld = " + Test0213.instanceCount + "," +
                Float.floatToIntBits(Test0213.fFld) + "," + Double.doubleToLongBits(Test0213.dFld));
        FuzzerUtils.out.println("Test0213.sFld Test0213.iFld Test0213.lFld = " + Test0213.sFld + "," + Test0213.iFld + "," + Test0213.lFld);
        FuzzerUtils.out.println("bFld fArrFld Test0213.iArrFld = " + (bFld ? 1 : 0) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test0213.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0213 _instance = new Test0213();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
