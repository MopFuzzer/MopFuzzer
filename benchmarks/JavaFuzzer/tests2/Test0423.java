// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0423 {

    public static final int N = 400;

    public static long instanceCount=-7174532897244588027L;
    public static double dFld=-33.54821;
    public static float fFld=1.292F;
    public static boolean bFld=false;
    public byte byFld=83;
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0423.fArrFld, -2.531F);
        FuzzerUtils.init(Test0423.lArrFld, 1448181335599202L);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth(float f, long l) {

        int i6=-2;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 4671413675689452697L);

        for (long l1 : lArr1) {
            i6 &= i6;
            l1 <<= (i6 - i6);
        }
        long meth_res = Float.floatToIntBits(f) + l + i6 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i8) {

        int i9=0;
        int i10=-19926;
        int i11=64332;
        int i12=-213;
        int i13=-2;
        int[] iArr =new int[N];
        byte by1=-81;
        float f1=107.360F;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-17301);
        FuzzerUtils.init(iArr, -111);

        sArr[(i8 >>> 1) % N] = (short)i8;
        i8 *= (int) Test0423.instanceCount;
        for (i9 = 10; i9 < 341; i9++) {
            i10 -= 0;
            Test0423.instanceCount = -5431;
            i8 += by1;
            i8 -= (int) Test0423.dFld;
            switch (((i8 >>> 1) % 7) + 65) {
            case 65:
                i11 = 1;
                while (++i11 < 5) {
                    try {
                        iArr[i9] = (-245 / i10);
                        i8 = (i10 / -238);
                        iArr[i9] = (i10 / 1583047982);
                    } catch (ArithmeticException a_e) {}
                    if (false) break;
                    for (i12 = 1; i12 < 1; ++i12) {
                        i13 = i10;
                        by1 += (byte)(i12 * i12);
                        by1 += (byte) (((i12 * i9) + Test0423.instanceCount) - i11);
                    }
                }
            case 66:
                iArr[i9] = (int) Test0423.instanceCount;
                break;
            case 67:
                i8 ^= i13;
                break;
            case 68:
                Test0423.instanceCount = 5666;
                break;
            case 69:
                Test0423.lArrFld[i9] = i8;
                break;
            case 70:
                i8 += (14 + (i9 * i9));
            case 71:
                f1 *= -212;
                break;
            }
        }
        long meth_res = i8 + i9 + i10 + by1 + i11 + i12 + i13 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth() {

        int i7=5;
        int i14=53;
        int i15=-11551;
        int i16=0;
        int i17=7;
        int i18=-13;
        int i19=-36131;
        int[] iArr1 =new int[N];
        int[] iArr2 =new int[N];
        short s1=19984;

        FuzzerUtils.init(iArr1, 25394);
        FuzzerUtils.init(iArr2, 3);

        i7 -= (int) (((618281230L - (++Test0423.instanceCount)) + (-4553 & (245 - (-(-33355 + (Test0423.instanceCount * s1))))))
            * ((i7 - i7) - iMeth1(i7)));
        iArr1[(i7 >>> 1) % N] -= (int) Test0423.instanceCount;
        for (i14 = 2; i14 < 224; i14++) {
            i15 -= i7;
            Test0423.instanceCount >>= Test0423.instanceCount;
            i15 -= i7;
            for (i16 = 1; i16 < 7; ++i16) {
                i7 = i14;
                i7 += i7;
                for (i18 = 1; i18 < 2; i18++) {
                    iArr1[i18 + 1] /= (int)(i17 | 1);
                    Test0423.instanceCount += (i18 - i16);
                    Test0423.fFld *= i7;
                    iArr2[i16 - 1] <<= i14;
                    Test0423.instanceCount = Test0423.instanceCount;
                }
            }
        }
        long meth_res = i7 + s1 + i14 + i15 + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth(int i2) {

        int i3=12, i4=24660, i5=-32403, i20=-7, i21=1;
        byte by=-65;
        short s=5775;
        long[] lArr =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr, 1350534705138702683L);
        FuzzerUtils.init(dArr, 1.34095);

        Test0423.instanceCount -= (i2++);
        i3 = 236;
        while (--i3 > 0) {
            Test0423.instanceCount += (-29440 + (i3 * i3));
            i2 = (i3 - ((i3 + 29) * (++i2)));
            lArr[i3 - 1] = i3;
            for (i4 = 7; i4 > 1; i4--) {
                i2 += (((i4 * i5) + i5) - i3);
                Test0423.fArrFld[i3] -= by;
                dArr[i3] = iMeth((Test0423.instanceCount = s) - (i4 + 46458579L), (long) ((Test0423.instanceCount + 25.596F) +
                    (43 + lArr[i4 + 1])));
            }
            Test0423.instanceCount -= sMeth();
            if (Test0423.bFld) break;
        }
        for (i20 = 12; i20 < 330; i20++) {
            i2 -= i21;
            i21 += (int) Test0423.instanceCount;
            Test0423.dFld -= -2;
        }
        long meth_res = i2 + i3 + i4 + i5 + by + s + i20 + i21 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-36154;
        int i1=9;
        int i22=-253;
        int i23=9228;
        int i24=-220;
        int i25=-18843;
        int i26=-6;
        int[] iArr3 =new int[N];
        short s2=-13648;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr3, -6189);
        FuzzerUtils.init(bArr, true);

        for (i = 12; i < 228; i++) {
            Test0423.instanceCount = lMeth(i);
            iArr3[i] %= (int)(i1 | 1);
            i1 += (((i * i1) + Test0423.instanceCount) - i);
            for (i22 = 4; 116 > i22; ++i22) {
                switch ((i % 1) + 69) {
                case 69:
                    i23 += i22;
                    if (Test0423.bFld) break;
                    i1 += (((i22 * s2) + i) - Test0423.instanceCount);
                    break;
                default:
                    i23 -= i23;
                    Test0423.fArrFld[i - 1] = (float) Test0423.dFld;
                }
                i23 = (int) Test0423.instanceCount;
                i1 = -29934;
                Test0423.instanceCount = -1;
                i23 = byFld;
                i23 -= -206;
                i23 = i23;
                i1 -= i23;
                for (i24 = 1; 2 > i24; ++i24) {
                    bArr[i + 1] = Test0423.bFld;
                    s2 *= (short)i1;
                    i1 -= -4;
                    i1 += (int) Test0423.instanceCount;
                    switch (((i22 >>> 1) % 2) + 23) {
                    case 23:
                        if (Test0423.bFld) continue;
                        i23 += i24;
                        Test0423.fFld += (i24 * i24);
                        break;
                    case 24:
                        try {
                            i23 = (-62 / i26);
                            iArr3[i] = (i22 / i1);
                            i26 = (i25 / iArr3[i22]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    default:
                        i1 >>= -1;
                    }
                    Test0423.dFld += 59;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("i23 s2 i24 = " + i23 + "," + s2 + "," + i24);
        FuzzerUtils.out.println("i25 i26 iArr3 = " + i25 + "," + i26 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0423.instanceCount Test0423.dFld Test0423.fFld = " + Test0423.instanceCount + "," +
                Double.doubleToLongBits(Test0423.dFld) + "," + Float.floatToIntBits(Test0423.fFld));
        FuzzerUtils.out.println("Test0423.bFld byFld Test0423.fArrFld = " + (Test0423.bFld ? 1 : 0) + "," + byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0423.fArrFld)));
        FuzzerUtils.out.println("Test0423.lArrFld = " + FuzzerUtils.checkSum(Test0423.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0423 _instance = new Test0423();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
