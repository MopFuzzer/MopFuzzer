// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:44 2023
public class Test0702 {

    public static final int N = 400;

    public static long instanceCount=-6231408908524029949L;
    public static byte byFld=-77;
    public static volatile float fFld=2.658F;
    public static int[] iArrFld =new int[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0702.iArrFld, -34901);
        FuzzerUtils.init(Test0702.dArrFld, 0.101717);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static void vSmallMeth(int i, long l) {

        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 0);

        l = ((++iArr[(i >>> 1) % N]) + Integer.reverseBytes(iArr[(-42520 >>> 1) % N]));
        vSmallMeth_check_sum += i + l + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth2(float f, long l1, double d) {

        int i2=190, i3=50460, i4=31675, i5=-14, i6=129;
        short s=-22582;

        Test0702.byFld = (byte) i2;
        for (i3 = 124; i3 > 7; i3--) {
            i2 += (i3 ^ i3);
            switch ((i3 % 5) + 80) {
            case 80:
                i5 = 13;
                do {
                    Test0702.instanceCount += (((i5 * f) + f) - i2);
                    Test0702.iArrFld[i5 - 1] += i2;
                    f += (float)d;
                    i6 = 1;
                    while (++i6 < 2) {
                        try {
                            i2 = (-20652 / i4);
                            Test0702.iArrFld[i5 - 1] = (Test0702.iArrFld[i5 + 1] / -44083);
                            Test0702.iArrFld[i3 + 1] = (i5 % 1884716634);
                        } catch (ArithmeticException a_e) {}
                        i2 = i5;
                        i4 %= (int)(l1 | 1);
                        i4 += (int)f;
                        if (i6 != 0) {
                        }
                        i2 &= (int) Test0702.instanceCount;
                    }
                } while ((i5 -= 2) > 0);
                break;
            case 81:
                i2 = (int)54L;
                break;
            case 82:
                i4 = i3;
                break;
            case 83:
                Test0702.byFld += (byte) f;
                break;
            case 84:
                Test0702.dArrFld[i3 + 1] = s;
                break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + l1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + i6 + s;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        float f1=2.831F, f2=36.298F;
        double d1=2.54761;
        int i7=-11155, i8=-9, i9=-28, i10=-9;

        Test0702.instanceCount <<= iMeth2(f1, Test0702.instanceCount, d1);
        i7 = (int) Test0702.instanceCount;
        if (false) {
            for (f2 = 6; 323 > f2; ++f2) {
                f1 -= i7;
            }
            for (i9 = 12; i9 < 211; i9++) {
                boolean b=true;
                f1 += i9;
                b = true;
                Test0702.instanceCount >>>= i9;
                Test0702.byFld += (byte) i9;
                f1 += i7;
                i7 = -38599;
                i7 -= (int)-3L;
                Test0702.instanceCount >>= i9;
            }
            d1 *= i9;
        }
        long meth_res = Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i7 + Float.floatToIntBits(f2) + i8 +
            i9 + i10;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i1=-12, i11=-50, i12=-57236, i13=-50211, i14=-43698, i15=24799, i16=-13;
        short s1=22501;
        float f3=18.845F;
        boolean b1=false;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 4112290486L);

        lArr[(i1 >>> 1) % N] += iMeth1();
        i1 /= (int) (Test0702.instanceCount | 1);
        for (i11 = 125; 2 < i11; i11--) {
            i1 <<= s1;
            i12 += i12;
            Test0702.instanceCount += -18;
            f3 = Test0702.instanceCount;
            for (i13 = 1; i13 < 13; i13++) {
                if (b1) {
                    for (i15 = 1; i15 < 2; i15++) {
                        i12 >>= (int) Test0702.instanceCount;
                        i1 += i15;
                        i12 -= i12;
                        f3 += (2 + (i15 * i15));
                        i16 = (int) Test0702.instanceCount;
                    }
                } else if (b1) {
                    lArr = lArr;
                } else {
                    i12 -= i15;
                }
            }
        }
        long meth_res = i1 + i11 + i12 + s1 + Float.floatToIntBits(f3) + i13 + i14 + i15 + i16 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17=-58909, i18=-3468, i19=-13, i20=-62922, i21=34566, i22=-10;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-27828);

        for (int smallinvoc = 0; smallinvoc < 980; smallinvoc++) vSmallMeth(iMeth(), Test0702.instanceCount);
        Test0702.instanceCount = Test0702.instanceCount;
        Test0702.iArrFld[(i17 >>> 1) % N] -= i17;
        for (i18 = 253; i18 > 15; --i18) {
            i20 = 1;
            while (++i20 < 106) {
                sArr = sArr;
                try {
                    Test0702.iArrFld[i20 - 1] = (-27459 % i19);
                    i19 = (49208139 / i17);
                    i19 = (Test0702.iArrFld[i20 - 1] / -1206905328);
                } catch (ArithmeticException a_e) {}
                for (i21 = 1; i21 < 1; ++i21) {
                    i19 = (int) Test0702.fFld;
                    i17 = i18;
                    Test0702.iArrFld[i18 + 1] += (int) Test0702.fFld;
                    Test0702.instanceCount <<= Test0702.instanceCount;
                    Test0702.fFld -= Test0702.instanceCount;
                    i19 <<= i19;
                    Test0702.instanceCount += (i21 * i21);
                }
            }
            i19 *= i18;
            try {
                i22 = (i19 % -56121);
                i22 = (-131 % i20);
                Test0702.iArrFld[i18] = (1182480569 / i21);
            } catch (ArithmeticException a_e) {}
            i17 *= -105;
        }
        Test0702.instanceCount = i22;

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0702.instanceCount Test0702.byFld Test0702.fFld = " + Test0702.instanceCount + "," + Test0702.byFld +
                "," + Float.floatToIntBits(Test0702.fFld));
        FuzzerUtils.out.println("Test0702.iArrFld Test0702.dArrFld = " + FuzzerUtils.checkSum(Test0702.iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0702.dArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0702 _instance = new Test0702();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
