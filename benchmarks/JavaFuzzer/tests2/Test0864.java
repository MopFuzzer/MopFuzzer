// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:52 2023
public class Test0864 {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public int iFld=31;
    public static double dFld=110.1580;
    public static float fFld=-39.274F;
    public static byte byFld=6;
    public static boolean bFld=false;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0864.iArrFld, -7310);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth() {

        byte by=52;
        int i=-206;

        by = (byte) (Test0864.iArrFld[(i >>> 1) % N]--);
        vSmallMeth_check_sum += by + i;
    }

    public static void vMeth(int i10, int i11) {

        int i12=-34476, i13=4, i14=31;
        short s=22033;
        boolean b1=false;

        i10 = (int)-1782729073364546713L;
        Test0864.instanceCount -= Test0864.instanceCount;
        i12 = 1;
        while (++i12 < 313) {
            s += (short)(6 + (i12 * i12));
            Test0864.iArrFld[i12 + 1] &= i11;
            Test0864.fFld = Test0864.fFld;
            i10 = (int) Test0864.instanceCount;
            Test0864.iArrFld[i12] += (int) Test0864.fFld;
            i10 *= Test0864.byFld;
            Test0864.iArrFld[i12 + 1] = i12;
            s += (short) (((i12 * Test0864.fFld) + i10) - i11);
        }
        for (i13 = 10; i13 < 163; ++i13) {
            i14 += (int) Test0864.fFld;
            i10 = (int) Test0864.dFld;
            if (b1) continue;
        }
        vMeth_check_sum += i10 + i11 + i12 + s + i13 + i14 + (b1 ? 1 : 0);
    }

    public static int iMeth1(int i7, int i8, boolean b) {

        int i9=-3, i15=-4092, i16=-11;
        double d=-68.57328;

        i9 = 1;
        while (++i9 < 182) {
            vMeth(i9, i8);
            i15 = 1;
            do {
                for (d = 1; d > i9; d--) {
                    Test0864.byFld *= (byte) Test0864.dFld;
                    i7 = (int) Test0864.instanceCount;
                    Test0864.instanceCount = (long) Test0864.fFld;
                    Test0864.instanceCount = (long) Test0864.fFld;
                    switch (((i15 >>> 1) % 3) + 59) {
                    case 59:
                        i8 += (int) ((long) d ^ Test0864.instanceCount);
                        b = b;
                        i7 >>= i7;
                        i16 += (int)(d * d);
                    case 60:
                        Test0864.byFld += (byte) (d * d);
                        i7 >>= i7;
                        break;
                    case 61:
                        Test0864.fFld -= i15;
                        break;
                    }
                }
            } while (++i15 < 9);
        }
        long meth_res = i7 + i8 + (b ? 1 : 0) + i9 + i15 + Double.doubleToLongBits(d) + i16;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i1=21088, i2=170, i3=61022, i4=150, i5=-7, i6=12;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, -79.38F);

        vSmallMeth();
        for (i1 = 8; i1 < 166; i1++) {
            for (i3 = 1; i3 < 10; i3++) {
                for (i5 = 1; 2 > i5; i5++) {
                    fArr[i1][i3 + 1] += (float) Math.sqrt(Test0864.dFld);
                    vSmallMeth();
                    Test0864.iArrFld = (Test0864.iArrFld = (Test0864.iArrFld = (Test0864.iArrFld = Test0864.iArrFld)));
                    Test0864.dFld += (Math.max(--Test0864.instanceCount, --Test0864.instanceCount) - ((i6--) - (i2 +
                            Test0864.instanceCount)));
                    if (i5 != 0) {
                    }
                    i6 -= (i5 * i6);
                }
                i4 = ((i6--) + (iMeth1(i3, i4, Test0864.bFld) - -31332));
                Test0864.instanceCount -= -11;
                Test0864.iArrFld[i3] = (int) Test0864.instanceCount;
                i6 %= (int)(i4 | 1);
                Test0864.dFld = 34;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.694F;
        int i17=254, i18=31070, i19=-48, i20=13, i21=-175;
        short s1=-6550;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -3670960055L);

        for (int smallinvoc=0; smallinvoc<481; smallinvoc++) vSmallMeth();
        iFld = (int) (((iFld * Test0864.instanceCount) + f) - (iFld + (iFld * -95)));
        vSmallMeth();
        iFld += (int) (iMeth() >> Test0864.instanceCount);
        iFld |= (int) Test0864.instanceCount;
        iFld += iFld;
        iFld -= iFld;
        iFld -= (int)f;
        for (i17 = 13; i17 < 298; ++i17) {
            for (i19 = 1; i19 < 88; ++i19) {
                Test0864.instanceCount = Test0864.instanceCount;
                Test0864.dFld = i17;
                switch (((i17 % 7) * 5) + 118) {
                case 144:
                    i20 += (i19 * i19);
                    try {
                        iFld = (i18 / i18);
                        i20 = (-62965 / i20);
                        i20 = (-4 % i17);
                    } catch (ArithmeticException a_e) {}
                    Test0864.instanceCount += (i19 + i17);
                case 153:
                    i21 = 1;
                    while (++i21 < 2) {
                        Test0864.instanceCount += (104L + (i21 * i21));
                        if (true) {
                            Test0864.iArrFld[i19 + 1] = 130;
                            if (Test0864.bFld) {
                                try {
                                    i20 = (111 / i18);
                                    iFld = (iFld / -214);
                                    Test0864.iArrFld[i21] = (71 / Test0864.iArrFld[i21 - 1]);
                                } catch (ArithmeticException a_e) {}
                            }
                            Test0864.instanceCount |= s1;
                            Test0864.iArrFld[i19 - 1] -= i19;
                        } else if (Test0864.bFld) {
                            i20 -= i21;
                            Test0864.instanceCount += (long) Test0864.dFld;
                            Test0864.iArrFld[i19 + 1] *= i20;
                        } else if (Test0864.bFld) {
                            i20 += iFld;
                            Test0864.iArrFld[i17] = i18;
                        }
                        iFld <<= i21;
                    }
                case 132:
                    i18 = iFld;
                    break;
                case 138:
                    i20 <<= (int) Test0864.instanceCount;
                    break;
                case 119:
                    Test0864.fFld = i21;
                case 150:
                    iFld += i19;
                    break;
                case 142:
                    Test0864.dFld += i21;
                default:
                    Test0864.iArrFld[i17 - 1] += -14;
                }
            }
        }

        FuzzerUtils.out.println("f i17 i18 = " + Float.floatToIntBits(f) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("s1 lArr = " + s1 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0864.instanceCount iFld Test0864.dFld = " + Test0864.instanceCount + "," + iFld + "," +
                Double.doubleToLongBits(Test0864.dFld));
        FuzzerUtils.out.println("Test0864.fFld Test0864.byFld Test0864.bFld = " + Float.floatToIntBits(Test0864.fFld) + "," +
                Test0864.byFld + "," + (Test0864.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0864.iArrFld = " + FuzzerUtils.checkSum(Test0864.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0864 _instance = new Test0864();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
