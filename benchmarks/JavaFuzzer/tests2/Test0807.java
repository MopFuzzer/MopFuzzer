// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0807 {

    public static final int N = 400;

    public static long instanceCount=254L;
    public static double dFld=50.67401;
    public static boolean bFld=true;
    public static volatile short sFld=26402;
    public float fFld=-66.842F;
    public static volatile byte[] byArrFld =new byte[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0807.byArrFld, (byte) -16);
        FuzzerUtils.init(Test0807.iArrFld, -13);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(long l, long l1, int i4) {

        short s=4719;
        int i5=-178;
        int i6=14;
        int i7=8;
        int i8=13;
        int i9=0;
        int i10=-8793;
        int[] iArr =new int[N];
        float f=1.975F;
        long[] lArr =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr, 668759052L);
        FuzzerUtils.init(iArr, 52136);
        FuzzerUtils.init(dArr, -25.77265);

        Test0807.dFld *= (s + (l--));
        i5 = 1;
        while (++i5 < 280) {
            i4 += (int)(-10L + (i5 * i5));
            for (i6 = 1; i6 < 6; ++i6) {
                if (i6 != 0) {
                }
                f += i6;
                switch ((i5 % 2) + 93) {
                case 93:
                    i7 >>= (int) (((--lArr[i5 + 1]) | (long) (Test0807.dFld - l)) * (--Test0807.dFld));
                    break;
                case 94:
                    if (Test0807.bFld = (f != (i8 = i4))) continue;
                    if (i5 != 0) {
                    }
                    for (i9 = 2; i9 > 1; i9 -= 3) {
                        i7 <<= (iArr[i5 + 1]++);
                        l -= ((long) ((f + 1771) + dArr[i6 + 1]) & (long) ((32 - (i8 - Test0807.instanceCount)) - Test0807.dFld));
                        Test0807.instanceCount -= iArr[i9];
                        Test0807.byArrFld[i5] = (byte) (i4--);
                    }
                    break;
                default:
                    try {
                        i7 = (i8 / 184);
                        i4 = (i4 / i8);
                        i4 = (13751 / i7);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = l + l1 + i4 + s + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(int i19, int i20) {

        float f2=1.354F;
        byte by=107;
        int i21=53639;
        int i22=-36348;
        int i23=5;
        int[] iArr1 =new int[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 26506L);
        FuzzerUtils.init(iArr1, 1);

        lArr1[(i20 >>> 1) % N] += i20;
        f2 -= i19;
        by = (byte) Test0807.sFld;
        Test0807.bFld = Test0807.bFld;
        i21 = 1;
        while (++i21 < 347) {
            Test0807.bFld = Test0807.bFld;
            f2 -= Test0807.instanceCount;
            switch (((i21 % 2) * 5) + 50) {
            case 51:
                i20 = i20;
                Test0807.instanceCount += Test0807.instanceCount;
                iArr1[i21 + 1] = i19;
                break;
            case 54:
                for (i22 = 1; i22 < 5; i22++) {
                    Test0807.instanceCount += i22;
                    Test0807.dFld += Test0807.instanceCount;
                }
                if (Test0807.bFld) break;
                break;
            default:
                i20 = (int) Test0807.instanceCount;
            }
        }
        vMeth2_check_sum += i19 + i20 + Float.floatToIntBits(f2) + by + i21 + i22 + i23 + FuzzerUtils.checkSum(lArr1) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i17, int i18, long l2) {

        int i24=-2;
        int i25=-61734;
        int i26=-11;
        int i27=-11;
        int i28=-218;
        int i29=35837;
        int[] iArr2 =new int[N];
        byte by1=21;
        float f3=0.771F;
        float f4=0.549F;
        float f5=0.838F;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr2, -191);
        FuzzerUtils.init(fArr, 56.688F);

        vMeth2(i17, i17);
        for (i24 = 259; i24 > 12; --i24) {
            by1 |= (byte)i25;
            f3 = 1;
            do {
                iArr2[i24 + 1] *= i24;
            } while (++f3 < 7);
            for (i26 = 1; 7 > i26; i26++) {
                for (f4 = 1; f4 < 2; f4++) {
                    i27 += (int)((long)f4 | i24);
                    i25 += (int)f4;
                    i17 = i28;
                    if (Test0807.bFld) continue;
                    f5 = i29;
                    i18 %= (int)(l2 | 1);
                    i29 += (int)f4;
                    fArr[(int)(f4 - 1)] -= i26;
                }
            }
        }
        vMeth1_check_sum += i17 + i18 + l2 + i24 + i25 + by1 + Float.floatToIntBits(f3) + i26 + i27 +
            Float.floatToIntBits(f4) + i28 + Float.floatToIntBits(f5) + i29 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i) {

        int i1=-87;
        int i2=55612;
        int i3=-41273;
        int i11=-5;
        int i12=-139;
        int i13=-24371;
        int i14=17561;
        int i15=11;
        int i16=7;
        int[] iArr3 =new int[N];
        double d=-51.104372;
        float f1=85.394F;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr3, -196);

        i1 = 1;
        do {
            for (i2 = i1; i2 < 10; i2++) {
                i = (int) (Test0807.byArrFld[i2] - ((i1 + Test0807.instanceCount) - d));
            }
            i3 = ((i2 + -91) - ((i--) * iMeth(-12L, Test0807.instanceCount, i1)));
        } while (++i1 < 158);
        for (i11 = 4; i11 < 190; i11++) {
            for (i13 = 1; i13 < 9; ++i13) {
                for (i15 = 2; i15 > 1; i15--) {
                    i12 += (i15 - f1);
                    Test0807.instanceCount += (108 + (i15 * i15));
                    vMeth1(i14, i12, -5L);
                    Test0807.instanceCount += (-12L + (i15 * i15));
                    bArr[i11 - 1] = Test0807.bFld;
                    i12 += (i15 * i13);
                    i14 >>= (int)-26444L;
                }
                iArr3 = iArr3;
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + i16 +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i30=-4, i31=10167, i32=61424, i33=-136, i34=24218, i35=4, i36=-58062, i37=50716;
        float f6=-112.770F;
        float f7=1.654F;
        float[] fArr1 =new float[N];
        long[] lArr2 =new long[N];

        FuzzerUtils.init(fArr1, 2.860F);
        FuzzerUtils.init(lArr2, -5196449617755384995L);

        vMeth(7);
        Test0807.instanceCount -= i30;
        Test0807.instanceCount *= i30;
        fArr1[(i30 >>> 1) % N] *= fFld;
        Test0807.instanceCount += i30;
        i31 = 1;
        do {
            try {
                i30 = (-40 % Test0807.iArrFld[(-133 >>> 1) % N]);
                i30 = (-9912 % i30);
                i30 = (Test0807.iArrFld[i31] % 14990);
            } catch (ArithmeticException a_e) {}
            if (Test0807.bFld) break;
            i30 += (i31 * i30);
            Test0807.instanceCount -= 43802;
            f6 = 1;
            do {
                i30 = -23399;
                Test0807.instanceCount *= (long) Test0807.dFld;
            } while (++f6 < 87);
            for (i32 = 2; i32 < 87; i32++) {
                switch ((i31 % 4) + 37) {
                case 37:
                    Test0807.iArrFld[i32 + 1] += i32;
                    fArr1[i31 - 1] -= f7;
                    i33 += i32;
                    break;
                case 38:
                    Test0807.iArrFld[i31 + 1] &= (int) Test0807.instanceCount;
                    for (i34 = i31; i34 < 2; ++i34) {
                        Test0807.instanceCount += (long) f6;
                        try {
                            i30 = (i30 % Test0807.iArrFld[i32]);
                            Test0807.iArrFld[i32] = (7898 / i34);
                            i30 = (i34 % i31);
                        } catch (ArithmeticException a_e) {}
                        fFld += i34;
                        Test0807.instanceCount >>>= Test0807.instanceCount;
                        Test0807.iArrFld[i34 - 1] >>= (int) Test0807.instanceCount;
                        i33 += (-44609 + (i34 * i34));
                        i36 += (int) Test0807.instanceCount;
                        try {
                            i35 = (i31 / -54531);
                            i30 = (-524 % i33);
                            i35 = (i32 % -120);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test0807.instanceCount &= i30;
                    lArr2 = lArr2;
                    break;
                case 39:
                    i30 *= (int) Test0807.instanceCount;
                    break;
                case 40:
                    i37 = (int)-129L;
                    break;
                default:
                    fFld += i32;
                }
            }
        } while (++i31 < 289);

        FuzzerUtils.out.println("i30 i31 f6 = " + i30 + "," + i31 + "," + Float.floatToIntBits(f6));
        FuzzerUtils.out.println("i32 i33 f7 = " + i32 + "," + i33 + "," + Float.floatToIntBits(f7));
        FuzzerUtils.out.println("i34 i35 i36 = " + i34 + "," + i35 + "," + i36);
        FuzzerUtils.out.println("i37 fArr1 lArr2 = " + i37 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))
            + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0807.instanceCount Test0807.dFld Test0807.bFld = " + Test0807.instanceCount + "," +
                Double.doubleToLongBits(Test0807.dFld) + "," + (Test0807.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0807.sFld fFld Test0807.byArrFld = " + Test0807.sFld + "," + Float.floatToIntBits(fFld) + ","
                + FuzzerUtils.checkSum(Test0807.byArrFld));
        FuzzerUtils.out.println("Test0807.iArrFld = " + FuzzerUtils.checkSum(Test0807.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0807 _instance = new Test0807();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
