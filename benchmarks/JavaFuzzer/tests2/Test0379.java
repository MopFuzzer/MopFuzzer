// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:29 2023
public class Test0379 {

    public static final int N = 400;

    public static long instanceCount=-7L;
    public static double dFld=97.115792;
    public static float fFld=1.643F;
    public static boolean bFld=true;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0379.iArrFld, -238);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f) {

        int i4=-7;

        i4 *= (int)-55883L;
        i4 >>= i4;
        Test0379.dFld = f;
        vMeth1_check_sum += Float.floatToIntBits(f) + i4;
    }

    public static int iMeth(double d) {

        int i6=4;
        int i7=26;
        int[] iArr =new int[N];
        byte by1=82;
        long l=-709008137L;
        double d1=0.9656;

        FuzzerUtils.init(iArr, 14);

        vMeth1(Test0379.fFld);
        for (int i5 : Test0379.iArrFld) {
            for (i6 = 1; 4 > i6; i6++) {
                by1 *= (byte) Test0379.instanceCount;
                i5 = i7;
                Test0379.instanceCount = -6090128635206182960L;
                i7 += i6;
                l = 1;
                do {
                    i7 += (int) Test0379.fFld;
                    i7 -= (int)l;
                } while (++l < 2);
                Test0379.iArrFld = iArr;
            }
            i7 += -7353;
            i7 /= (int)((long)(d1) | 1);
            by1 += (byte) Test0379.fFld;
            iArr[(6 >>> 1) % N] = i7;
        }
        long meth_res = Double.doubleToLongBits(d) + i6 + i7 + by1 + l + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        byte by=-53;
        int i8=-40, i9=-17750, i10=14, i11=220;
        short s=5678;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -53.106489);

        Test0379.dFld *= (i2 = (int) (by >> Test0379.instanceCount));
        i3 <<= iMeth(Test0379.dFld);
        for (i8 = 10; i8 < 189; i8++) {
            Test0379.instanceCount += (long) Test0379.dFld;
            s -= (short)i8;
            i1 -= (int)-1667517520835179640L;
            Test0379.iArrFld = FuzzerUtils.int1array(N, (int) 11);
            for (i10 = 9; i10 > 1; --i10) {
                i11 ^= i9;
                i3 += (int)(6L + (i10 * i10));
            }
        }
        Test0379.instanceCount = s;
        i9 ^= i1;
        if (Test0379.bFld) {
            i2 = i9;
            Test0379.instanceCount |= i2;
        } else {
            i1 += (int) Test0379.instanceCount;
        }
        vMeth_check_sum += i1 + i2 + i3 + by + i8 + i9 + s + i10 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i=31, i12=75, i13=21203, i14=-7, i15=8, i16=48737, i17=-41630, i18=-159, i19=-5, i20=13714, i21=17156;
        float f1=16.940F;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, 1701967053L);

        i = 1;
        while ((i += 2) < 287) {
            vMeth(i, i, i);
            i12 = 175;
            while (--i12 > 0) {
                for (f1 = 1; f1 < 1; ++f1) {
                    Test0379.bFld = true;
                    i13 += (int) (f1 + Test0379.instanceCount);
                }
            }
            Test0379.fFld *= -236;
        }
        i13 *= i12;
        Test0379.instanceCount *= i;
        lArr[(i >>> 1) % N][(i12 >>> 1) % N] = Test0379.instanceCount;
        i14 = 176;
        while (--i14 > 0) {
            i13 = i;
            Test0379.instanceCount = 62;
            Test0379.instanceCount = i14;
            i13 -= i14;
            for (i15 = 2; i15 < 143; i15++) {
                i16 += 6;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test0379.iArrFld = Test0379.iArrFld;
                    try {
                        i13 = (i % -52);
                        i16 = (i12 / i12);
                        i19 = (i15 % i13);
                    } catch (ArithmeticException a_e) {}
                    Test0379.instanceCount = i14;
                    Test0379.fFld /= (i19 | 1);
                    i18 <<= i13;
                }
                Test0379.iArrFld[i15] = (int) Test0379.instanceCount;
                Test0379.instanceCount = Test0379.instanceCount;
                Test0379.instanceCount += (((i15 * Test0379.instanceCount) + i14) - Test0379.instanceCount);
                for (i20 = 1; 2 > i20; ++i20) {
                    i21 = (int) Test0379.instanceCount;
                    i21 = i13;
                    i16 = i17;
                }
            }
        }

        FuzzerUtils.out.println("i i12 f1 = " + i + "," + i12 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0379.instanceCount Test0379.dFld Test0379.fFld = " + Test0379.instanceCount + "," +
                Double.doubleToLongBits(Test0379.dFld) + "," + Float.floatToIntBits(Test0379.fFld));
        FuzzerUtils.out.println("Test0379.bFld Test0379.iArrFld = " + (Test0379.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0379.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0379 _instance = new Test0379();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
