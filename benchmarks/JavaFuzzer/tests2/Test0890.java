// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0890 {

    public static final int N = 400;

    public static long instanceCount=-619525575L;
    public static double dFld=-40.64534;
    public boolean bFld=false;
    public volatile byte byFld=-37;
    public static volatile int iFld=-91;
    public static int iFld1=1761;
    public long[] lArrFld =new long[N];
    public volatile int[] iArrFld =new int[N];

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public void vMeth1() {

        int i4=-36, i5=-45660, i6=-101, i7=14, i8=-13;
        boolean b=false;
        byte by=50;
        short s=27534;

        for (i4 = 17; i4 < 332; ++i4) {
            Test0890.instanceCount ^= -34301;
            if (b) break;
            if (i4 != 0) {
                vMeth1_check_sum += i4 + i5 + (b ? 1 : 0) + i6 + by + i7 + i8 + s;
                return;
            }
            i5 <<= i4;
        }
        i6 = 1;
        do {
            i5 = i4;
            by -= (byte) Test0890.instanceCount;
            i5 /= -3;
            iArrFld[i6] %= (int)(i6 | 1);
            for (i7 = 1; i7 < 5; ++i7) {
                float f=122.136F;
                i8 += (int) Test0890.instanceCount;
                f += i5;
                Test0890.instanceCount = i7;
                Test0890.instanceCount = s;
            }
        } while (++i6 < 335);
        vMeth1_check_sum += i4 + i5 + (b ? 1 : 0) + i6 + by + i7 + i8 + s;
    }

    public float fMeth(int i2, long l, int i3) {

        long l1=10067L;
        int i9=14, i10=-42517, i11=9925, i12=30, i13=-39980;
        byte by1=61;

        vMeth1();
        for (l1 = 16; l1 < 262; ++l1) {
            i3 -= i3;
            switch ((((i3 >>> 1) % 1) * 5) + 50) {
            case 52:
                i9 ^= i9;
            }
            if (bFld) {
                for (i10 = 1; i10 < 7; i10 += 3) {
                    for (i12 = (int)(l1); i12 < 4; i12++) {
                        double d=15.71172;
                        i9 += (i12 * i12);
                        Test0890.instanceCount = -6;
                        try {
                            i2 = (i3 / 1873865543);
                            i9 = (i12 % i10);
                            i11 = (i13 % i10);
                        } catch (ArithmeticException a_e) {}
                        i9 *= (int)d;
                        i9 -= (int)28.360F;
                        if (bFld) continue;
                        by1 -= by1;
                    }
                }
            } else if (bFld) {
                l -= (long)-2.105F;
            } else {
                i13 += 13;
            }
        }
        long meth_res = i2 + l + i3 + l1 + i9 + i10 + i11 + i12 + i13 + by1;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i, int i1) {

        int i14=-39, i15=-33330, i16=-14, i17=2, i18=-14558, i19=55569;
        float f1=0.1002F;

        lArrFld[(i >>> 1) % N] *= ((long) (Math.sqrt(Test0890.dFld) - fMeth(i1, Test0890.instanceCount, i)) >> i);
        for (i14 = 3; i14 < 302; ++i14) {
            for (i16 = 1; i16 < 6; ++i16) {
                for (i18 = 2; i18 > 1; i18--) {
                    i15 += (((i18 * Test0890.instanceCount) + byFld) - i15);
                    i15 += i1;
                    iArrFld[i16 + 1] = i1;
                    Test0890.instanceCount = byFld;
                }
                Test0890.instanceCount = Test0890.instanceCount;
                f1 = Test0890.instanceCount;
                if (true) break;
                iArrFld[i14 - 1] <<= i15;
                i1 -= i14;
            }
            if (bFld) break;
            if (bFld) continue;
        }
        vMeth_check_sum += i + i1 + i14 + i15 + i16 + i17 + i18 + i19 + Float.floatToIntBits(f1);
    }

    public void mainTest(String[] strArr1) {

        long l2=-10L;
        int i20=97, i21=-204, i22=50500;
        float f2=0.519F;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -2.81481);

        vMeth(Test0890.iFld, Test0890.iFld);
        Test0890.instanceCount = -61671;
        l2 = 1;
        while (++l2 < 303) {
            Test0890.iFld = (int) l2;
            Test0890.iFld |= (int) Test0890.instanceCount;
            for (i20 = 83; i20 > 5; i20 -= 3) {
                i21 = (int)f2;
                if (bFld) break;
                i21 = 175;
                Test0890.iFld *= -10;
                i21 += i20;
                try {
                    Test0890.iFld = (Test0890.iFld / i21);
                    Test0890.iFld = (i20 % 14099);
                    Test0890.iFld = (iArrFld[i20] / Test0890.iFld);
                } catch (ArithmeticException a_e) {}
                i22 = 1;
                while (++i22 < 4) {
                    Test0890.iFld1 = 2;
                    i21 = (int) Test0890.instanceCount;
                    if (true) {
                        Test0890.dFld -= Test0890.iFld;
                        Test0890.iFld <<= (int) -6559353128785789288L;
                        i21 -= i22;
                    } else {
                        switch (((i22 >>> 1) % 5) + 98) {
                        case 98:
                            if (bFld) {
                                Test0890.instanceCount = (long) f2;
                                switch ((int)((l2 % 8) + 34)) {
                                case 34:
                                    Test0890.iFld1 += i22;
                                    Test0890.iFld1 >>= -5;
                                    Test0890.iFld >>= (int) Test0890.instanceCount;
                                    break;
                                case 35:
                                    dArr[i22 + 1] -= f2;
                                    i21 += i22;
                                    iArrFld = FuzzerUtils.int1array(N, (int)161);
                                    Test0890.instanceCount *= (long) Test0890.dFld;
                                    break;
                                case 36:
                                    Test0890.iFld += i22;
                                    break;
                                case 37:
                                    Test0890.iFld1 = i21;
                                    break;
                                case 38:
                                    Test0890.iFld1 = (int) 5342072826885369715L;
                                    break;
                                case 39:
                                    f2 += -12147;
                                    break;
                                case 40:
                                    try {
                                        i21 = (Test0890.iFld % 65099);
                                        iArrFld[i22 + 1] = (i21 / Test0890.iFld);
                                        Test0890.iFld = (20619 % i22);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                case 41:
                                    Test0890.iFld1 = (int) f2;
                                    break;
                                default:
                                    i21 += (i22 * i22);
                                }
                            }
                        case 99:
                            i21 += (i22 | i22);
                        case 100:
                            if (bFld) break;
                        case 101:
                            iArrFld[i20 - 1] >>>= i22;
                            break;
                        case 102:
                            Test0890.iFld1 += (i22 + f2);
                            break;
                        default:
                            f2 -= i22;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("l2 i20 i21 = " + l2 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("f2 i22 dArr = " + Float.floatToIntBits(f2) + "," + i22 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0890.instanceCount Test0890.dFld bFld = " + Test0890.instanceCount + "," +
                Double.doubleToLongBits(Test0890.dFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld Test0890.iFld Test0890.iFld1 = " + byFld + "," + Test0890.iFld + "," + Test0890.iFld1);
        FuzzerUtils.out.println("lArrFld iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0890 _instance = new Test0890();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
