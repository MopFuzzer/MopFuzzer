// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:39 2023
public class Test0587 {

    public static final int N = 400;

    public static long instanceCount=7709148871266234491L;
    public int iFld=4694;
    public volatile float fFld=76.862F;
    public double dFld=-2.58761;
    public short sFld=-12202;
    public int[][] iArrFld =new int[N][N];
    public static long[] lArrFld =new long[N];
    public int[] iArrFld1 =new int[N];
    public static volatile double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0587.lArrFld, -6363862855228757464L);
        FuzzerUtils.init(Test0587.dArrFld, -23.120271);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public void vMeth() {

        int i8=29, i9=11, i10=14, i11=9, i12=58550, i13=249, i14=54550;
        float f=21.533F;
        double d=89.117879;
        double[] dArr =new double[N];
        boolean b=true;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(dArr, -1.618);
        FuzzerUtils.init(bArr, true);

        for (i8 = 2; i8 < 136; ++i8) {
            for (i10 = 1; i10 < 12; i10++) {
                short s1=30925;
                iFld += (i10 - i8);
                i11 = i9;
                switch (i8 + 93) {
                case 93:
                    switch ((i8 % 3) + 86) {
                    case 86:
                        i11 = i9;
                        Test0587.instanceCount = i11;
                        f += i10;
                        i12 = 2;
                        while (--i12 > 0) {
                            iFld += (((i12 * f) + Test0587.instanceCount) - i11);
                        }
                        break;
                    case 87:
                        iArrFld[i10 + 1] = iArrFld[i8 + 1];
                        dArr[i8] += 11;
                        i9 >>= i8;
                        break;
                    case 88:
                        iArrFld[i8][(i12 >>> 1) % N] -= iFld;
                        break;
                    }
                    break;
                case 94:
                    f *= i11;
                    break;
                case 95:
                    i9 >>= -11;
                    break;
                case 96:
                case 97:
                    i11 = -75;
                    break;
                case 98:
                    Test0587.lArrFld[i10] += i8;
                    break;
                case 99:
                    d += i9;
                    break;
                case 100:
                    Test0587.instanceCount = i12;
                    break;
                case 101:
                    iFld += i10;
                    break;
                case 102:
                    iFld = i13;
                    break;
                case 103:
                    i11 = iFld;
                    break;
                case 104:
                    Test0587.instanceCount |= i8;
                    break;
                case 105:
                    i9 += (int) Test0587.instanceCount;
                    break;
                case 106:
                    f += Test0587.instanceCount;
                    break;
                case 107:
                    i13 <<= (int) Test0587.instanceCount;
                    break;
                case 108:
                    d -= i11;
                    break;
                case 109:
                    Test0587.instanceCount |= i9;
                    break;
                case 110:
                case 111:
                    iArrFld[i10][i10 - 1] %= (int)(i14 | 1);
                    break;
                case 112:
                    iFld -= i12;
                case 113:
                    iArrFld[i8 - 1][i8] = (int) Test0587.instanceCount;
                    break;
                case 114:
                    try {
                        i13 = (i9 / iArrFld[i8][i10 + 1]);
                        i9 = (-23035 / i9);
                        i13 = (243 / i10);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 115:
                    if (b) continue;
                case 116:
                    Test0587.instanceCount *= i13;
                    break;
                case 117:
                    i9 = i13;
                case 118:
                    bArr[i8 - 1] = b;
                    break;
                case 119:
                    d -= i8;
                case 120:
                    if (b) break;
                    break;
                case 121:
                    iArrFld[i8][i10] = i11;
                    break;
                case 122:
                    i9 += (i10 * i10);
                    break;
                case 123:
                    Test0587.lArrFld[i8 + 1] *= (long) 1.95960;
                    break;
                case 124:
                    i13 += i13;
                    break;
                case 125:
                    if (b) continue;
                    break;
                case 126:
                    i13 -= (int)-53.632F;
                    break;
                case 127:
                    if (b) break;
                    break;
                case 128:
                    Test0587.instanceCount >>= i12;
                    break;
                case 129:
                    i11 -= (int) Test0587.instanceCount;
                case 130:
                    if (b) continue;
                    break;
                case 131:
                    i9 += i10;
                    break;
                case 132:
                    i11 &= (int) Test0587.instanceCount;
                case 133:
                    try {
                        i14 = (43733 % iArrFld[i10 + 1][i8]);
                        iArrFld[i10 + 1][i10 + 1] = (i13 / iArrFld[i10 + 1][i8 + 1]);
                        i14 = (i10 / i12);
                    } catch (ArithmeticException a_e) {}
                case 134:
                    i9 = (int) Test0587.instanceCount;
                    break;
                case 135:
                    i9 -= i14;
                    break;
                case 136:
                    d = i11;
                    break;
                case 137:
                    try {
                        iArrFld[i8][i8] = (-93 % i10);
                        iArrFld[i10 - 1][i10 + 1] = (iArrFld[i10 - 1][i10 - 1] % iArrFld1[i8 - 1]);
                        iArrFld1[i8 - 1] = (i12 % iFld);
                    } catch (ArithmeticException a_e) {}
                case 138:
                    i11 = 4223;
                case 139:
                    iArrFld1[i10 - 1] -= (int) Test0587.instanceCount;
                    break;
                case 140:
                    f = (float)d;
                    break;
                case 141:
                    iArrFld1[i10] -= -26007;
                    break;
                case 142:
                    iArrFld1[i10 + 1] = -26179;
                    break;
                case 143:
                case 144:
                    i14 <<= (int) Test0587.instanceCount;
                    break;
                case 145:
                    d = -222;
                    break;
                case 146:
                    i11 -= i12;
                    break;
                case 147:
                    i13 = i9;
                    break;
                case 148:
                case 149:
                    i9 *= (int) Test0587.instanceCount;
                    break;
                case 150:
                    d = 1.206F;
                    break;
                case 151:
                    Test0587.instanceCount %= (Test0587.instanceCount | 1);
                case 152:
                    s1 <<= (short)50969;
                case 153:
                    i13 *= (int) Test0587.instanceCount;
                case 154:
                    iFld = i12;
                    break;
                case 155:
                    Test0587.instanceCount = i13;
                    break;
                case 156:
                    Test0587.lArrFld[i10] = i10;
                case 157:
                    b = b;
                    break;
                case 158:
                    try {
                        i9 = (-5537 % i14);
                        iArrFld[i8 + 1][i8] = (iArrFld[i8][i8] % i10);
                        i11 = (i14 / iArrFld1[i8]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 159:
                    i13 = i9;
                    break;
                case 160:
                    i9 -= i13;
                    break;
                case 161:
                    i13 = (int)14L;
                    break;
                case 162:
                    dArr[i8] += i8;
                    break;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 + Double.doubleToLongBits(d) + i13 + i14
            + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(bArr);
    }

    public int iMeth1(int i7) {

        int i15=-78, i16=-28, i18=-99;
        short s2=-17633;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 2.1011F);

        vMeth();
        try {
            Test0587.dArrFld[(i7 >>> 1) % N] -= Test0587.instanceCount;
            for (i15 = 12; i15 < 296; ++i15) {
                iFld >>= -64738;
                fArr[i15] *= -11348;
                i18 = 1;
                while ((i18 += 3) < 6) {
                    fFld = i16;
                    Test0587.instanceCount += (i18 - i16);
                    fFld -= i16;
                    Test0587.lArrFld = FuzzerUtils.long1array(N, (long) 21250L);
                    Test0587.instanceCount += i18;
                }
                fFld -= i15;
            }
            i7 += (int) Test0587.instanceCount;
            iArrFld[(i18 >>> 1) % N][(i16 >>> 1) % N] %= -6;
        }
        catch (UserDefinedExceptionTest exc1) {
            dFld = -9;
        }
        finally {
            iArrFld[(i18 >>> 1) % N][(139 >>> 1) % N] -= s2;
        }
        long meth_res = i7 + i15 + i16 + i18 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(int i2) {

        int i3=6, i4=-239, i5=63119, i6=-24236, i19=194;
        short s=-26521;

        for (i3 = 11; i3 < 245; i3++) {
            for (i5 = 1; 7 > i5; i5++) {
                s += (short)iMeth1(47);
                i2 = (int)6L;
                i4 += (int) Test0587.instanceCount;
                i6 += (i5 * i2);
                Test0587.instanceCount += i5;
                Test0587.instanceCount += i5;
            }
            iArrFld1[i3 - 1] &= i2;
            i6 += (((i3 * Test0587.instanceCount) + i4) - s);
            iFld -= (int)fFld;
            i6 = 3;
        }
        i19 = 1;
        while (++i19 < 146) {
            Test0587.instanceCount = (long) fFld;
            i4 -= i2;
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + s + i19;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7, i1=-53045, i20=6, i21=62887, i22=192, i23=-12, i24=-134, i25=-51;
        byte by=-80;
        boolean b1=true;
        double d1=63.31773;

        for (i = 3; i < 179; ++i) {
            iFld -= iMeth(i20);
            iFld += (((i * fFld) + Test0587.instanceCount) - i);
            fFld = -94;
            i1 += by;
        }
        i21 = 280;
        while ((i21 -= 2) > 0) {
            i1 += (i21 * iFld);
            iArrFld1[i21 - 1] >>= (int) Test0587.instanceCount;
            Test0587.instanceCount -= i21;
            i1 = (int) Test0587.instanceCount;
            Test0587.instanceCount = i;
        }
        Test0587.instanceCount /= -20020;
        Test0587.instanceCount = -27391;
        iFld >>>= i;
        for (i22 = 11; i22 < 227; ++i22) {
            iFld *= sFld;
            if (b1) {
                i23 >>= i21;
                Test0587.instanceCount = (long) fFld;
                sFld /= (short)(i21 | 1);
            }
            by <<= (byte)i22;
            i23 = i20;
            i1 += (2 + (i22 * i22));
            i1 -= (int) Test0587.instanceCount;
            for (d1 = 6; d1 < 116; ++d1) {
                i25 = 1;
                while ((i25 += 3) < 2) {
                    fFld -= by;
                    i1 += (i25 - i25);
                    fFld *= i24;
                    i1 += (i25 + by);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("by i21 i22 = " + by + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 b1 d1 = " + i23 + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i24 i25 = " + i24 + "," + i25);

        FuzzerUtils.out.println("Test0587.instanceCount iFld fFld = " + Test0587.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("dFld sFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0587.lArrFld iArrFld1 Test0587.dArrFld = " + FuzzerUtils.checkSum(Test0587.lArrFld) + "," +
                FuzzerUtils.checkSum(iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0587.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0587 _instance = new Test0587();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
