// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0870 {

    public static final int N = 400;

    public static volatile long instanceCount=1104212977979220485L;
    public static boolean bFld=true;
    public static short sFld=5134;
    public int[] iArrFld =new int[N];
    public long[][] lArrFld =new long[N][N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(long l, int i9) {

        int i10=-38, i11=53466, i12=-14, i13=-36151, i14=-13;
        long l1=7L, l2=36365L;
        float f1=-104.161F;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, -65.67F);

        fArr[(i9 >>> 1) % N][(i9 >>> 1) % N] += l;
        for (i10 = 7; i10 < 242; i10 += 2) {
            if (Test0870.bFld) {
                i11 += (i10 + i10);
            } else {
                l1 = 1;
                do {
                    i9 *= i10;
                    if (Test0870.bFld) break;
                    Test0870.instanceCount -= l1;
                } while (++l1 < 13);
                for (i12 = 1; i12 < 13; i12++) {
                    for (l2 = 1; l2 < 2; l2++) {
                        short s=-6098;
                        i9 += (int)(l2 * f1);
                        s >>= (short) Test0870.instanceCount;
                    }
                    i9 -= i13;
                    i13 += (i12 - i11);
                    i11 >>= i10;
                }
            }
        }
        long meth_res = l + i9 + i10 + i11 + l1 + i12 + i13 + l2 + i14 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(float f, int i6, int i7) {

        int i8=87;
        int i15=11;
        int i16=12464;
        int i17=-4;
        int i18=18010;
        int i19=-81;
        int[] iArr =new int[N];
        byte by=18;
        float f2=0.335F;
        short s1=11159;
        short[][] sArr =new short[N][N];

        FuzzerUtils.init(iArr, 120);
        FuzzerUtils.init(sArr, (short)7416);

        iArr = (iArr = (iArr = iArr));
        i8 = 139;
        do {
            i6 += (int) (i8 * Test0870.instanceCount);
            sArr[i8 + 1][i8 + 1] = (short) iMeth(Test0870.instanceCount, i7);
            Test0870.instanceCount = by;
            i7 *= (int) Test0870.instanceCount;
            for (i15 = 2; i15 < 32; ++i15) {
                Test0870.instanceCount += i7;
            }
            for (f2 = 2; f2 < 32; ++f2) {
                Test0870.instanceCount += (long) (((f2 * i15) + Test0870.instanceCount) - i16);
                for (i18 = 1; i18 < 2; i18++) {
                    i19 = s1;
                    Test0870.instanceCount = -236;
                    by *= (byte)2.535F;
                }
                s1 = (short)i6;
            }
        } while ((i8 -= 3) > 0);
        vMeth1_check_sum += Float.floatToIntBits(f) + i6 + i7 + i8 + by + i15 + i16 + Float.floatToIntBits(f2) + i17 +
            i18 + i19 + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void vMeth(int i) {

        int i1=210, i2=-27284, i3=-10, i4=-12, i5=130, i20=22019, i21=14;
        double d=0.26561;
        double[] dArr =new double[N];
        float f3=37.854F;
        short s2=-674;

        FuzzerUtils.init(dArr, 0.40455);

        for (i1 = 11; i1 < 224; ++i1) {
            iArrFld[i1 + 1] -= ((++i) - (i2++));
        }
        for (i3 = 4; 170 > i3; i3++) {
            for (d = 1; d < 10; d++) {
                vMeth1(f3, i, i1);
                dArr[(int)(d + 1)] += d;
                i2 <<= (int) Test0870.instanceCount;
                f3 %= -254;
                i4 += (int) Test0870.instanceCount;
                i += (int)(d * d);
                i4 |= i;
                for (i20 = 1; i20 < 2; i20++) {
                    i2 += (i20 | i4);
                    i5 = s2;
                    i2 += (int)f3;
                }
            }
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + Float.floatToIntBits(f3) + i20 +
            i21 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i22=-41, i23=47564, i25=76, i26=17729, i27=9, i28=-5, i29=65267, i30=-20456, i31=-3;
        long l3=70L;
        byte by1=0;
        double d1=0.74666;
        double[] dArr1 =new double[N];
        float f4=0.695F;

        FuzzerUtils.init(dArr1, -48.19235);

        vMeth(i22);
        iArrFld = FuzzerUtils.int1array(N, (int)45173);
        for (l3 = 1; l3 < 295; ++l3) {
            Test0870.sFld *= by1;
            switch ((int)((l3 % 4) + 73)) {
            case 73:
                for (i25 = 2; i25 < 86; i25++) {
                    d1 = 49330;
                    i22 += (int) Test0870.instanceCount;
                    i23 = i25;
                    Test0870.instanceCount += Test0870.instanceCount;
                    Test0870.bFld = Test0870.bFld;
                    Test0870.sFld += (short) (i25 * i25);
                    for (i27 = 1; i27 < 2; ++i27) {
                        iArrFld[(int)(l3)] += -12;
                        i22 += (int) Test0870.instanceCount;
                        iArrFld[i27] = i27;
                        i26 |= i26;
                        d1 *= f4;
                    }
                    i28 += i26;
                }
                try {
                    iArrFld[(int)(l3 + 1)] = (i28 / i26);
                    i26 = (i25 % -292935577);
                    i28 = (iArrFld[(int)(l3)] % i26);
                } catch (ArithmeticException a_e) {}
                dArr1[(int)(l3)] = l3;
                break;
            case 74:
                for (i29 = 4; 86 > i29; i29++) {
                    i30 = i22;
                    i31 = 2;
                    do {
                        i22 -= i31;
                        i22 = (int)5399521022684740197L;
                        Test0870.instanceCount -= -9064;
                    } while ((i31 -= 3) > 0);
                    lArrFld[i29][(int) (l3)] = Test0870.sFld;
                    i23 >>= (int)0L;
                    try {
                        i23 = (179 / i27);
                        i22 = (i29 % i26);
                        i23 = (169 / iArrFld[(int)(l3)]);
                    } catch (ArithmeticException a_e) {}
                }
                break;
            case 75:
                Test0870.instanceCount = i30;
                break;
            case 76:
                Test0870.instanceCount = Test0870.instanceCount;
                break;
            }
        }

        FuzzerUtils.out.println("i22 l3 i23 = " + i22 + "," + l3 + "," + i23);
        FuzzerUtils.out.println("by1 i25 i26 = " + by1 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d1 i27 i28 = " + Double.doubleToLongBits(d1) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("f4 i29 i30 = " + Float.floatToIntBits(f4) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 dArr1 = " + i31 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0870.instanceCount Test0870.bFld Test0870.sFld = " + Test0870.instanceCount + "," + (Test0870.bFld ? 1
                : 0) + "," + Test0870.sFld);
        FuzzerUtils.out.println("iArrFld lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0870 _instance = new Test0870();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
