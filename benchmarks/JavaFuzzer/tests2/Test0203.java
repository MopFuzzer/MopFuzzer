// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:21 2023
public class Test0203 {

    public static final int N = 400;

    public static long instanceCount=-79L;
    public static int iFld=-49576;
    public volatile short sFld=-4001;
    public static byte byFld=-117;
    public static int[] iArrFld =new int[N];
    public long[] lArrFld =new long[N];
    public boolean[] bArrFld =new boolean[N];
    public static long[] lArrFld1 =new long[N];

    static {
        FuzzerUtils.init(Test0203.iArrFld, 5);
        FuzzerUtils.init(Test0203.lArrFld1, -2040037766L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth() {

        byte by=-95;

        Test0203.iArrFld[(Test0203.iFld >>> 1) % N] |= ((Test0203.iFld = (by + -10)) + ((197 + (Test0203.iFld - Test0203.iFld)) -
                Math.min(Test0203.iFld, Test0203.iFld)));
        vSmallMeth_check_sum += by;
    }

    public static void vMeth1(int i2, float f, byte by1) {

        int i3=-8, i4=-7, i5=-14, i6=-8, i7=-12, i8=56164;
        double d=0.44090;
        short s1=-13986;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 181L);

        for (i3 = 19; i3 < 362; i3++) {
            i2 += -232;
            Test0203.iFld = -6;
            for (i5 = 5; 1 < i5; i5--) {
                for (i7 = i5; i7 < 2; i7++) {
                    i4 -= i5;
                    d *= i2;
                    f -= i2;
                }
                i4 *= (int)-26077L;
                Test0203.iFld >>= i5;
                f -= s1;
                i6 -= i2;
                i2 = i2;
                Test0203.iArrFld[i3] ^= i5;
                lArr1[i5 + 1] *= 56331;
            }
        }
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + by1 + i3 + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(d) + s1 + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth() {

        float f1=-105.993F;
        byte by2=71;
        int i9=-36, i10=-41955, i11=-198, i12=-6, i13=62, i14=164, i15=1, i16=-4;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(lArr2, -12L);

        vMeth1(Test0203.iFld, f1, by2);
        for (i9 = 7; 194 > i9; i9++) {
            f1 += (((i9 * Test0203.iFld) + i10) - i9);
            Test0203.iFld += (((i9 * i10) + i10) - Test0203.iFld);
            lArr2[i9 - 1] = i9;
            Test0203.iFld += (2 + (i9 * i9));
            for (i11 = 1; i11 < 9; i11++) {
                i12 ^= i9;
                Test0203.iFld += (i11 * i11);
            }
            for (i13 = 1; i13 < 9; i13++) {
                i15 = i9;
                try {
                    i15 = (i13 % -82);
                    i14 = (-920063114 / i13);
                    i10 = (i9 / i10);
                } catch (ArithmeticException a_e) {}
                Test0203.iFld = i15;
                i14 = i16;
                by2 = (byte)-1545413839L;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + by2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(lArr2);
    }

    public static int iMeth(long l) {

        short s=28852;
        short[] sArr =new short[N];
        int i17=-2, i18=250, i19=-155, i20=13, i21=3;
        boolean b=true;
        long l1=4219185119L;

        FuzzerUtils.init(sArr, (short)-8863);

        vSmallMeth();
        s *= (short) Test0203.iFld;
        vMeth();
        i17 = 1;
        while (++i17 < 309) {
            switch ((i17 % 5) + 27) {
            case 27:
                if (b) continue;
                Test0203.iFld = s;
                for (i18 = 1; i18 < 5; ++i18) {
                    Test0203.instanceCount += l1;
                    Test0203.iFld = (int) l1;
                    if (b) break;
                    for (i20 = 1; i20 < 2; i20++) {
                        i21 += (((i20 * i18) + i17) - s);
                        if (b) continue;
                        Test0203.lArrFld1[i17] = Test0203.iFld;
                    }
                }
                break;
            case 28:
            case 29:
                sArr[i17 + 1] += (short)i21;
                break;
            case 30:
                Test0203.iFld += i17;
            case 31:
                Test0203.iFld >>= (int) l;
                break;
            default:
                Test0203.iArrFld[i17] *= Test0203.iFld;
            }
        }
        long meth_res = l + s + i17 + (b ? 1 : 0) + i18 + i19 + l1 + i20 + i21 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i1=4, i22=-10, i23=9, i24=-51568, i25=225, i26=-5, i27=-43329, i28=-11;
        float f2=0.982F;
        float[] fArr =new float[N];
        short s2=8566;
        double d1=29.100815;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, 8L);
        FuzzerUtils.init(fArr, -80.767F);

        Test0203.iFld = (int) (((Test0203.iFld--) + Test0203.iFld) + (++lArr[(Test0203.iFld >>> 1) % N][(Test0203.iFld >>> 1) % N]));
        for (int smallinvoc=0; smallinvoc<271; smallinvoc++) vSmallMeth();
        Test0203.iFld += (int) (-((--Test0203.iFld) - lArrFld[(Test0203.iFld >>> 1) % N]));
        lArrFld = (lArr[(Test0203.iFld >>> 1) % N] = lArr[(Test0203.iFld >>> 1) % N]);
        sFld *= (short) (Test0203.instanceCount++);
        i = 1;
        do {
            Test0203.iFld |= (int) ((Test0203.iArrFld[i - 1] = (int) (Test0203.instanceCount % 3L)) ^ (-(Test0203.instanceCount >>
                    Test0203.iFld)));
            i1 = 70;
            do {
                bArrFld[i - 1] = (iMeth(Test0203.instanceCount) > Test0203.instanceCount);
                f2 -= Test0203.byFld;
                fArr[i - 1] = Test0203.iFld;
                Test0203.iFld = (int) Test0203.instanceCount;
                Test0203.byFld += (byte) (((i1 * sFld) + i1) - i);
            } while ((i1 -= 3) > 0);
            for (i22 = 2; i22 < 70; ++i22) {
                Test0203.iArrFld[i22 + 1] *= i;
                i23 += (((i22 * i1) + f2) - i22);
                for (i24 = 1; i24 < 2; i24++) {
                    boolean b1=true;
                    Test0203.iFld += (int) f2;
                    try {
                        i25 = (i / 41);
                        Test0203.iArrFld[i - 1] = (i24 % i26);
                        i26 = (141 % Test0203.iArrFld[i22 - 1]);
                    } catch (ArithmeticException a_e) {}
                    Test0203.instanceCount -= -86;
                    i26 += (i24 + sFld);
                    Test0203.instanceCount *= i26;
                    if (b1) continue;
                    i25 <<= (int)4706L;
                    s2 = (short)i26;
                }
                switch ((i % 9) + 51) {
                case 51:
                    Test0203.iFld -= i24;
                case 52:
                    for (i27 = i22; i27 < 2; i27++) {
                        Test0203.instanceCount = i23;
                        Test0203.iArrFld = Test0203.iArrFld;
                    }
                    break;
                case 53:
                    bArrFld[i22] = false;
                case 54:
                    Test0203.iArrFld[i + 1] *= i25;
                case 55:
                    sFld = (short)87;
                    break;
                case 56:
                    f2 += (((i22 * Test0203.instanceCount) + sFld) - i27);
                case 57:
                    d1 *= -92;
                    break;
                case 58:
                    Test0203.iArrFld[i22 + 1] = i23;
                    break;
                case 59:
                    Test0203.byFld |= (byte) -39888L;
                    break;
                default:
                    Test0203.byFld += (byte) (((i22 * Test0203.instanceCount) + i25) - i25);
                }
            }
        } while (++i < 361);

        FuzzerUtils.out.println("i i1 f2 = " + i + "," + i1 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 s2 = " + i25 + "," + i26 + "," + s2);
        FuzzerUtils.out.println("i27 i28 d1 = " + i27 + "," + i28 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("lArr fArr = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0203.instanceCount Test0203.iFld sFld = " + Test0203.instanceCount + "," + Test0203.iFld + "," +
            sFld);
        FuzzerUtils.out.println("Test0203.byFld Test0203.iArrFld lArrFld = " + Test0203.byFld + "," +
                FuzzerUtils.checkSum(Test0203.iArrFld) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("bArrFld Test0203.lArrFld1 = " + FuzzerUtils.checkSum(bArrFld) + "," +
                FuzzerUtils.checkSum(Test0203.lArrFld1));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0203 _instance = new Test0203();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
