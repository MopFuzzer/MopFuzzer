// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0788 {

    public static final int N = 400;

    public static volatile long instanceCount=-11L;
    public static int iFld=7801;
    public static byte byFld=21;
    public volatile double dFld=47.102500;
    public short sFld=-7688;
    public volatile int[][] iArrFld =new int[N][N];
    public static byte[] byArrFld =new byte[N];
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld1 =new int[N];
    public static short[] sArrFld =new short[N];
    public int[] iArrFld2 =new int[N];

    static {
        FuzzerUtils.init(Test0788.byArrFld, (byte) -20);
        FuzzerUtils.init(Test0788.dArrFld, 87.112643);
        FuzzerUtils.init(Test0788.iArrFld1, 13);
        FuzzerUtils.init(Test0788.sArrFld, (short) -27939);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i8=-111, i9=-2, i10=1, i11=-6, i12=-2, i13=42103, i14=8410;
        boolean b=false;

        i8 = 1;
        while (++i8 < 240) {
            for (i9 = 1; i9 < 7; i9++) {
                float f2=-1.927F;
                switch ((i9 % 10) + 76) {
                case 76:
                    if (b) break;
                    break;
                case 77:
                    Test0788.instanceCount += (i9 ^ Test0788.byFld);
                    Test0788.instanceCount -= Test0788.iFld;
                    for (i11 = 1; i11 < 2; ++i11) {
                        i10 = i10;
                    }
                    break;
                case 78:
                    Test0788.iFld -= (int) Test0788.instanceCount;
                    for (i13 = 1; 2 > i13; i13++) {
                        i14 += (int)(-2.870F + (i13 * i13));
                        Test0788.byFld = (byte) i10;
                        Test0788.iFld <<= i12;
                        if (b) continue;
                        i14 += (7 + (i13 * i13));
                    }
                case 79:
                    i14 = (int)f2;
                    break;
                case 80:
                    f2 -= i9;
                    break;
                case 81:
                    Test0788.byFld *= (byte) 21913;
                    break;
                case 82:
                    i12 = Test0788.iFld;
                    break;
                case 83:
                    Test0788.iFld = i14;
                    break;
                case 84:
                case 85:
                    i10 += (int) Test0788.instanceCount;
                    break;
                default:
                    i12 += i9;
                }
            }
        }
        long meth_res = i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + i13 + i14;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(short s, int i1, float f1) {

        int i2=-4, i3=-34816, i4=33, i5=-45742, i6=51890, i7=12057, i15=-184, i16=-14;
        boolean b1=true;

        for (i2 = 263; i2 > 7; i2 -= 2) {
            f1 %= (i1 | 1);
            Test0788.byFld <<= (byte) ((i1 -= (++i1)) * ((++i3) - (i3 + Test0788.iFld)));
        }
        for (i4 = 8; 208 > i4; ++i4) {
            for (i6 = 1; i6 < 8; i6++) {
                Test0788.iArrFld1[i4 - 1] -= (--Test0788.iFld);
                i1 -= (int)(-lMeth());
                Test0788.dArrFld[i4] *= i1;
                for (i15 = i6; i15 < 2; ++i15) {
                    Test0788.sArrFld[i6] = (short) i16;
                    Test0788.iArrFld1[i6] ^= i16;
                    Test0788.iArrFld1[i4 - 1] <<= i16;
                    i5 += i15;
                    b1 = b1;
                }
                i3 = i4;
            }
        }
        vMeth_check_sum += s + i1 + Float.floatToIntBits(f1) + i2 + i3 + i4 + i5 + i6 + i7 + i15 + i16 + (b1 ? 1 : 0);
    }

    public static void vSmallMeth(double d, double d1) {

        short s1=-13649;

        vMeth(s1, Test0788.iFld, 0.61F);
        Test0788.iFld += -149;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + s1;
    }

    public void mainTest(String[] strArr1) {

        float f=-70.460F;
        int i=-224, i17=-214, i18=4, i19=-11, i20=-27981, i21=11430, i22=51427;
        boolean b2=true;

        f *= ((-iArrFld[(i >>> 1) % N][(9 >>> 1) % N]) * f);
        Test0788.byArrFld[(i >>> 1) % N] *= (byte) (iArrFld[(i >>> 1) % N][(Test0788.iFld >>> 1) % N]--);
        i = (int) (((f++) - (Test0788.instanceCount + i)) - (Test0788.instanceCount - Test0788.dArrFld[(Test0788.iFld >>> 1) % N]));
        switch (((((i >> Test0788.iFld) >>> 1) % 2) * 5) + 48) {
        case 50:
            for (int smallinvoc=0; smallinvoc<905; smallinvoc++) vSmallMeth(dFld, dFld);
            Test0788.iFld = i;
            i = 61;
            Test0788.iFld = Test0788.iFld;
            break;
        case 52:
        default:
            f = i;
            i |= 47598;
            for (i17 = 15; i17 < 368; ++i17) {
                f *= Test0788.instanceCount;
            }
        }
        if (false) {
            f = i;
            Test0788.iFld = -89;
            Test0788.instanceCount %= (i | 1);
        } else {
            sFld += (short)i;
        }
        Test0788.byFld += (byte) Test0788.instanceCount;
        iArrFld2[(-127 >>> 1) % N] = (int) Test0788.instanceCount;
        Test0788.iFld += i17;
        iArrFld[(Test0788.iFld >>> 1) % N][(63441 >>> 1) % N] >>>= Test0788.byFld;
        for (i19 = 14; i19 < 374; ++i19) {
            b2 = b2;
            Test0788.iArrFld1[i19 + 1] += i18;
            sFld -= (short) Test0788.instanceCount;
            i20 += i19;
            for (i21 = 3; 70 > i21; ++i21) {
                f -= i20;
            }
            f += (((i19 * Test0788.instanceCount) + i17) - Test0788.instanceCount);
            i >>= sFld;
        }

        FuzzerUtils.out.println("f i i17 = " + Float.floatToIntBits(f) + "," + i + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("b2 i21 i22 = " + (b2 ? 1 : 0) + "," + i21 + "," + i22);

        FuzzerUtils.out.println("Test0788.instanceCount Test0788.iFld Test0788.byFld = " + Test0788.instanceCount + "," + Test0788.iFld +
                "," + Test0788.byFld);
        FuzzerUtils.out.println("dFld sFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + sFld + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0788.byArrFld Test0788.dArrFld Test0788.iArrFld1 = " + FuzzerUtils.checkSum(Test0788.byArrFld) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0788.dArrFld)) + "," +
                FuzzerUtils.checkSum(Test0788.iArrFld1));
        FuzzerUtils.out.println("Test0788.sArrFld iArrFld2 = " + FuzzerUtils.checkSum(Test0788.sArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld2));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0788 _instance = new Test0788();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
