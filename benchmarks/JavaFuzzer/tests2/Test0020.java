// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0020 {

    public static final int N = 400;

    public static volatile long instanceCount=-5L;
    public static double dFld=21.104696;
    public static long lFld=980L;
    public static byte byFld=-73;
    public static long[] lArrFld =new long[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0020.lArrFld, -2921405370L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i9=7;
        int i10=185;
        int i11=-33770;
        int i12=1;
        int i13=-10;
        int[] iArr2 =new int[N];
        float f=-10.287F, f1=-61.302F;
        short s=26870;
        boolean b=true;

        FuzzerUtils.init(iArr2, -29200);

        Test0020.instanceCount = Test0020.instanceCount;
        i9 = 1;
        do {
            i10 += (i9 * i9);
            for (i11 = 1; i11 < 6; i11++) {
                for (f = 1; f < 2; ++f) {
                    i12 *= (int) Test0020.instanceCount;
                    s = (short)i9;
                    i12 = i13;
                    switch ((int)(((f % 1) * 5) + 86)) {
                    case 90:
                        iArr2[(int)(f - 1)] = (int)f;
                        s <<= (short)i11;
                        if (b) continue;
                        Test0020.lArrFld[i9] ^= -248;
                        break;
                    default:
                        i13 >>= i11;
                        f1 = Test0020.instanceCount;
                    }
                }
            }
        } while (++i9 < 251);
        vMeth2_check_sum += i9 + i10 + i11 + i12 + Float.floatToIntBits(f) + i13 + s + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth1(int i6, int i7, long l) {

        double d=-28.61888;
        double[][] dArr =new double[N][N];
        float f2=0.804F;
        float[] fArr =new float[N];
        int i14=7;
        int i15=108;
        int[][] iArr =new int[N][N];
        int[] iArr1 =new int[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr, 23412);
        FuzzerUtils.init(fArr, 21.288F);
        FuzzerUtils.init(dArr, -2.113843);
        FuzzerUtils.init(iArr1, 67);
        FuzzerUtils.init(byArr, (byte)57);

        d = 1;
        do {
            i6 = (int)((++iArr[(int)(d + 1)][(int)(d - 1)]) ^ (long)(fArr[(int)(d)] + dArr[(int)(d + 1)][(int)(d -
                1)]));
            iArr[(int)(d)][(int)(d - 1)] -= i6;
            i7 = (++i7);
            if ((i6 - ((--i6) * (i6 - -9.889F))) != iArr[(int)(d - 1)][(int)(d - 1)]) continue;
            if (i7 != 0) {
                vMeth1_check_sum += i6 + i7 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i14 + i15 +
                    FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                    Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
                    FuzzerUtils.checkSum(byArr);
                return;
            }
        } while (++d < 257);
        for (int i8 : iArr1) {
            i6 ^= (int) Test0020.instanceCount;
            vMeth2();
        }
        byArr[(i7 >>> 1) % N] = (byte)16;
        i6 -= (int)f2;
        Test0020.lArrFld[(64794 >>> 1) % N] = (long) d;
        for (i14 = 214; i14 > 6; --i14) {
            i6 = i14;
            f2 *= (float)d;
        }
        vMeth1_check_sum += i6 + i7 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + i14 + i15 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(int i2, int i3) {

        int i4=230;
        int i5=-47963;
        int i17=-57195;
        int[] iArr3 =new int[N];
        byte by=11;
        float f3=-1.969F;

        FuzzerUtils.init(iArr3, 23503);

        for (i4 = 244; i4 > 8; i4 -= 2) {
            vMeth1(i3, i2, 31068L);
            i2 += (((i4 * i3) + Test0020.instanceCount) - by);
            Test0020.instanceCount *= Test0020.instanceCount;
            Test0020.instanceCount += Test0020.instanceCount;
            Test0020.instanceCount *= i2;
        }
        Test0020.dFld += f3;
        i17 = 1;
        do {
            by = (byte)i3;
            i5 += (((i17 * Test0020.instanceCount) + Test0020.instanceCount) - i4);
            i2 = i17;
            i2 = (int)-42006L;
            iArr3[i17 + 1] *= (int) Test0020.instanceCount;
        } while (++i17 < 219);
        i2 -= i2;
        Test0020.lFld += i2;
        vMeth_check_sum += i2 + i3 + i4 + i5 + by + Float.floatToIntBits(f3) + i17 + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=12;
        int i1=6;
        int i18=79;
        int i19=135;
        int i20=9;
        int i21=-2;
        int[] iArr4 =new int[N];
        float f4=120.822F;
        long l1=-307102766L;
        boolean b1=false;
        short s1=16927;

        FuzzerUtils.init(iArr4, 208);

        for (i = 2; i < 225; ++i) {
            vMeth(i, -108);
            Test0020.instanceCount ^= i;
            i18 = 1;
            do {
                i1 += (((i18 * Test0020.instanceCount) + Test0020.lFld) - f4);
                for (l1 = 1; l1 > 1; --l1) {
                    i1 ^= i18;
                    if (b1) {
                        i1 += (int) (l1 + Test0020.lFld);
                        i1 <<= i1;
                    }
                    f4 = l1;
                    switch ((i % 2) + 118) {
                    case 118:
                        if (false) continue;
                        f4 += Test0020.instanceCount;
                        i1 = Test0020.byFld;
                        iArr4[(int)(l1 - 1)] = -19991;
                        break;
                    case 119:
                        if (b1) continue;
                        i19 += -7;
                        Test0020.byFld += (byte) l1;
                        break;
                    default:
                        f4 += (l1 * i18);
                        i1 = (int)1.95880;
                        s1 <<= (short)l1;
                        i19 -= (int) Test0020.lFld;
                    }
                    f4 -= Test0020.lFld;
                    b1 = b1;
                }
            } while (++i18 < 113);
        }
        i1 = -55;
        f4 *= l1;
        for (i20 = 123; 5 < i20; i20--) {
            i1 = 174;
            fArrFld[i20 - 1] -= Test0020.instanceCount;
        }

        FuzzerUtils.out.println("i i1 i18 = " + i + "," + i1 + "," + i18);
        FuzzerUtils.out.println("f4 l1 i19 = " + Float.floatToIntBits(f4) + "," + l1 + "," + i19);
        FuzzerUtils.out.println("b1 s1 i20 = " + (b1 ? 1 : 0) + "," + s1 + "," + i20);
        FuzzerUtils.out.println("i21 iArr4 = " + i21 + "," + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test0020.instanceCount Test0020.dFld Test0020.lFld = " + Test0020.instanceCount + "," +
                Double.doubleToLongBits(Test0020.dFld) + "," + Test0020.lFld);
        FuzzerUtils.out.println("Test0020.byFld Test0020.lArrFld fArrFld = " + Test0020.byFld + "," +
                FuzzerUtils.checkSum(Test0020.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0020 _instance = new Test0020();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
