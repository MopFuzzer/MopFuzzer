// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:23 2023
public class Test0243 {

    public static final int N = 400;

    public static long instanceCount=62L;
    public int iFld=5;
    public static byte byFld=41;
    public static volatile boolean bFld=true;
    public static double[] dArrFld =new double[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0243.dArrFld, -1.6317);
        FuzzerUtils.init(Test0243.fArrFld, -117.739F);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i7, double d1, int i8) {

        int i9=200;
        int i10=36169;
        int i11=-227;
        int i12=-181;
        int i13=-14;
        int i14=36251;
        int i15=-17;
        int i16=45838;
        int[] iArr1 =new int[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(lArr, -20495L);

        iArr1[(i8 >>> 1) % N] <<= i8;
        lArr[(i8 >>> 1) % N] = i7;
        Test0243.instanceCount |= Test0243.instanceCount;
        for (i9 = 12; 392 > i9; ++i9) {
            d1 *= Test0243.instanceCount;
        }
        iArr1[(i7 >>> 1) % N] *= (int)1.989F;
        for (i11 = 2; i11 < 198; ++i11) {
            i12 += (((i11 * Test0243.instanceCount) + i11) - i8);
            for (i13 = 1; 8 > i13; i13++) {
                i12 |= Test0243.byFld;
                i7 -= i13;
                for (i15 = 1; i15 < 2; i15++) {
                    iArr1 = iArr1;
                    Test0243.bFld = Test0243.bFld;
                }
                if (Test0243.bFld) continue;
            }
        }
        long meth_res = i7 + Double.doubleToLongBits(d1) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i1, int i2, int i3) {

        int i4=34;
        int i5=25267;
        int i6=11535;
        int i17=-230;
        int i18=-154;
        int[] iArr2 =new int[N];
        byte by=82;
        double d2=2.2095;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr2, 171);
        FuzzerUtils.init(sArr, (short)-19785);

        i4 = 273;
        do {
            by = (byte) (((Test0243.instanceCount <<= i3) % (Math.min(Test0243.instanceCount, Test0243.instanceCount) | 1)) +
                    Double.longBitsToDouble(Test0243.instanceCount >>= Test0243.instanceCount));
            i2 = i3;
            i2 += i4;
            for (i5 = 6; i5 > i4; i5--) {
                i3 = (int) Test0243.instanceCount;
                i6 = (i5 - iMeth1(i1, d2, i4));
                for (i17 = 1; i17 < 1; i17++) {
                    iArr2[i17 + 1] = i4;
                    i1 -= i4;
                    Test0243.instanceCount *= by;
                    sArr[i4] = Test0243.byFld;
                    Test0243.instanceCount = i6;
                    Test0243.instanceCount += Test0243.instanceCount;
                    d2 = i3;
                }
            }
        } while (--i4 > 0);
        long meth_res = i1 + i2 + i3 + i4 + by + i5 + i6 + Double.doubleToLongBits(d2) + i17 + i18 +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        double d=-92.9536;
        int i=4032;
        int i19=55818;
        int i20=11;
        int i21=-5;
        int i22=-16905;
        int[] iArr =new int[N];
        float f=125.65F;
        long[][] lArr1 =new long[N][N];

        FuzzerUtils.init(iArr, 65282);
        FuzzerUtils.init(lArr1, 506127143L);

        for (d = 21; d < 347; d++) {
            iArr[(int)(d)] = (--i);
            Test0243.instanceCount -= (long) ((++i) - ((-2 - (f = 97.204F)) * i));
            f += iMeth(0, i, i);
            Test0243.instanceCount = i;
            for (i19 = 1; i19 < 5; i19++) {
                i20 *= i19;
                for (i21 = 1; i21 < 2; i21++) {
                    i -= (int)f;
                    lArr1[i19 - 1][i19] = i19;
                    Test0243.instanceCount += (i21 + f);
                }
                Test0243.instanceCount = Test0243.instanceCount;
                Test0243.dArrFld[i19] = i20;
                if (Test0243.bFld) continue;
                Test0243.bFld = Test0243.bFld;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + Float.floatToIntBits(f) + i19 + i20 + i21 + i22 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        float f1=34.971F;
        int i23=1;
        int i24=-36783;
        int i25=-248;
        int i26=-4;
        int i27=-12;
        int i28=141;
        int i29=-84;
        int[] iArr3 =new int[N];
        short s=18706;
        double d3=94.37535, d4=0.104150;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(iArr3, -5);
        FuzzerUtils.init(lArr2, -409243256297837070L);

        iFld |= Integer.reverseBytes((232 - (iFld += iFld)) + (iFld - iFld));
        vMeth();
        switch (((iFld >>> 1) % 10) + 47) {
        case 47:
            f1 -= iFld;
            i23 = 1;
            do {
                if (Test0243.bFld) break;
                try {
                    iFld = (-13 % i23);
                    iArr3[i23 - 1] = (i23 / iFld);
                    iArr3[i23] = (52 % iFld);
                } catch (ArithmeticException a_e) {}
                iFld += i23;
                Test0243.instanceCount = 8;
                f1 *= f1;
                i24 = 1;
                do {
                    Test0243.instanceCount <<= s;
                    iFld += (int) Test0243.instanceCount;
                } while (++i24 < 78);
                Test0243.instanceCount -= i23;
                if (Test0243.bFld) {
                    iFld = (int)d3;
                } else if (false) {
                    iFld += i24;
                    for (i25 = 2; 78 > i25; ++i25) {
                        iFld += i26;
                        iFld *= i26;
                        lArr2[i23] -= i24;
                        for (d4 = 1; d4 < 2; d4++) {
                            f1 += iFld;
                        }
                        try {
                            iFld = (239 / i23);
                            iFld = (iArr3[i25 + 1] % i26);
                            iArr3[i25 - 1] = (i27 % 1444728225);
                        } catch (ArithmeticException a_e) {}
                    }
                    f1 += -6.695F;
                } else {
                    for (i28 = 78; 4 < i28; i28--) {
                        if (Test0243.bFld) break;
                        Test0243.instanceCount += (i28 * i28);
                        iArr3[i28 + 1] -= 86;
                        i29 += (i28 + i28);
                    }
                }
            } while (++i23 < 324);
        case 48:
            Test0243.instanceCount += i25;
            break;
        case 49:
            Test0243.fArrFld[(28206 >>> 1) % N] = Test0243.instanceCount;
            break;
        case 50:
            Test0243.instanceCount *= (long) f1;
            break;
        case 51:
        case 52:
            iFld -= i25;
            break;
        case 53:
            Test0243.instanceCount >>= Test0243.instanceCount;
            break;
        case 54:
            iFld -= i23;
            break;
        case 55:
        case 56:
            iFld = (int)f1;
            break;
        }

        FuzzerUtils.out.println("f1 i23 i24 = " + Float.floatToIntBits(f1) + "," + i23 + "," + i24);
        FuzzerUtils.out.println("s d3 i25 = " + s + "," + Double.doubleToLongBits(d3) + "," + i25);
        FuzzerUtils.out.println("i26 d4 i27 = " + i26 + "," + Double.doubleToLongBits(d4) + "," + i27);
        FuzzerUtils.out.println("i28 i29 iArr3 = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0243.instanceCount iFld Test0243.byFld = " + Test0243.instanceCount + "," + iFld + "," +
                Test0243.byFld);
        FuzzerUtils.out.println("Test0243.bFld Test0243.dArrFld Test0243.fArrFld = " + (Test0243.bFld ? 1 : 0) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0243.dArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0243.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0243 _instance = new Test0243();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
