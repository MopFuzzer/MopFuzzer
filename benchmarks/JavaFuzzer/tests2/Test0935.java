// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0935 {

    public static final int N = 400;

    public static long instanceCount=-8L;
    public float fFld=2.330F;
    public static byte byFld=92;
    public double dFld=-8.99981;
    public static int iFld=106;
    public volatile int[] iArrFld =new int[N];

    public static long iMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        float f1=-72.769F;
        int i8=-223;
        int i9=-60;
        int i10=37;
        int i11=24290;
        int i12=18447;
        int i13=-13;
        int i14=9317;
        int[] iArr1 =new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, -204);

        f1 = i8;
        for (i9 = 7; i9 < 343; i9++) {
            i10 += (i9 | (long)f1);
            i10 -= (int) Test0935.instanceCount;
            iArr1 = iArr1;
            i11 = 1;
            while (++i11 < 5) {
                for (i12 = 1; 1 > i12; ++i12) {
                    Test0935.byFld += (byte) (-29 + (i12 * i12));
                    i8 += i13;
                    iArr1[i11 - 1] = i11;
                    i13 = Test0935.byFld;
                    i8 -= (int)9L;
                    i8 *= i14;
                    if (b) break;
                    i8 &= i9;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth() {

        int i4=-2;
        int i5=-11;
        int i6=195;
        int i7=193;
        int i15=120;
        int i16=36416;
        int[] iArr =new int[N];
        byte by1=-77;
        float f=2.898F;
        short s1=-19041;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, -236);
        FuzzerUtils.init(lArr, 6L);

        for (i4 = 1; i4 < 398; i4++) {
            for (i6 = 1; i6 < 4; i6++) {
                iArr[i4 - 1] -= (int) Test0935.instanceCount;
                lArr[i4 + 1] += by1;
                f *= (i5--);
                vMeth();
                switch (((i6 % 2) * 5) + 9) {
                case 16:
                    if (false) break;
                    break;
                case 17:
                }
                lArr[i6] <<= 47560;
                i7 += (((i6 * Test0935.instanceCount) + s1) - f);
                i7 -= -7037;
                i7 = i6;
            }
            for (i15 = 1; i15 < 4; ++i15) {
                i16 *= i16;
            }
            iArr[i4 - 1] /= (int)(i15 | 1);
        }
        long meth_res = i4 + i5 + i6 + i7 + by1 + Float.floatToIntBits(f) + s1 + i15 + i16 + FuzzerUtils.checkSum(iArr)
            + FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public int iMeth() {

        int i1=-26643, i2=-227, i3=2, i17=-62270, i18=5060;
        byte by=31;
        short s=24063;
        long l=5L;
        boolean b1=true;

        i1 &= ((i1 + (i1 * i1)) * (--by));
        i1 += (((-iArrFld[(i1 >>> 1) % N]) - i1) * Short.reverseBytes((short)(-s)));
        i1 += i1;
        i2 = 1;
        while (++i2 < 373) {
            Test0935.instanceCount *= (long) (((fFld - fFld) + Test0935.instanceCount) + (Math.max(-197, i1) +
                    (Test0935.instanceCount - 209)));
            i3 = 5;
            do {
                fFld = i2;
            } while (--i3 > 0);
            l -= (byMeth() | i2);
            i1 += i3;
            i1 = (int)dFld;
        }
        if (b1) {
            iArrFld[(i3 >>> 1) % N] = -5;
            for (i17 = 3; i17 < 268; i17++) {
                i1 += i17;
                i1 += (i17 - i17);
            }
        }
        long meth_res = i1 + by + s + i2 + i3 + l + i17 + i18 + (b1 ? 1 : 0);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=62227, i19=2, i21=-59708, i22=-47887, i23=-233, i24=0, i25=-249, i26=-26094;
        boolean b2=false, b3=false;
        short[] sArr =new short[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(sArr, (short)32288);
        FuzzerUtils.init(lArr1, -14L);

        i = 143;
        while ((i -= 2) > 0) {
            sArr[i - 1] = (short) ((iMeth() - -13) + Test0935.instanceCount);
            i19 -= 87;
            i19 += (((i * i19) + Test0935.instanceCount) - i19);
            Test0935.instanceCount = i19;
            i21 = 1;
            while (++i21 < 348) {
                Test0935.byFld = (byte) 160406400325027190L;
                i19 += (i21 * i21);
                fFld *= -5L;
                b2 = b3;
                for (i22 = 1; i22 < 1; i22++) {
                    fFld += (i22 * i23);
                    i19 = -185;
                    fFld -= i24;
                    iArrFld = FuzzerUtils.int1array(N, (int)0);
                    fFld = i21;
                    i24 -= (int)fFld;
                    if (b2) continue;
                    iArrFld[i22 - 1] >>= -41431;
                    Test0935.instanceCount -= i25;
                    lArr1[i] += Test0935.instanceCount;
                }
            }
            switch (((i25 >>> 1) % 2) + 108) {
            case 108:
                i23 = (int)fFld;
                i26 = 1;
                do {
                    Test0935.iFld += i26;
                    i25 /= (int) (Test0935.iFld | 1);
                    Test0935.iFld = -14;
                    if (b3) continue;
                    dFld -= dFld;
                    iArrFld[i - 1] = i19;
                } while (++i26 < 348);
                break;
            case 109:
                i25 <<= -7;
            }
        }

        FuzzerUtils.out.println("i i19 i21 = " + i + "," + i19 + "," + i21);
        FuzzerUtils.out.println("b2 b3 i22 = " + (b2 ? 1 : 0) + "," + (b3 ? 1 : 0) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 sArr lArr1 = " + i26 + "," + FuzzerUtils.checkSum(sArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0935.instanceCount fFld Test0935.byFld = " + Test0935.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Test0935.byFld);
        FuzzerUtils.out.println("dFld Test0935.iFld iArrFld = " + Double.doubleToLongBits(dFld) + "," + Test0935.iFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0935 _instance = new Test0935();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  byMeth ->  byMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
