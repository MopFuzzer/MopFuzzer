// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:21 2023
public class Test0202 {

    public static final int N = 400;

    public static long instanceCount=-35302L;
    public static int iFld=16187;
    public static boolean bFld=false;
    public float fFld=2.813F;
    public static int[] iArrFld =new int[N];
    public static short[] sArrFld =new short[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0202.iArrFld, 229);
        FuzzerUtils.init(Test0202.sArrFld, (short) -22000);
        FuzzerUtils.init(Test0202.lArrFld, 170L);
    }

    public static long fMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i11, long l, long l1) {

        int i12=-248, i13=-12, i14=27622, i15=6566;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 112.566F);

        Test0202.iFld ^= i11;
        for (i12 = 1; i12 < 202; i12++) {
            i13 = Test0202.iFld;
        }
        Test0202.iArrFld[(i13 >>> 1) % N] = i13;
        for (float f2 : fArr1) {
            Test0202.iFld += i12;
            for (i14 = 1; i14 < 4; i14++) {
                i11 -= i13;
                f2 = Test0202.iFld;
                Test0202.iFld = (int) l1;
                i11 += (((i14 * i15) + i15) - i13);
                fArr1[i14 - 1] -= (float)-2.52957;
                Test0202.iArrFld[i14 + 1] = i13;
                Test0202.iArrFld[i14 + 1] <<= i14;
                i13 = i13;
            }
        }
        long meth_res = i11 + l + l1 + i12 + i13 + i14 + i15 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth() {

        int i7=-60290, i8=-68, i9=6, i10=-10;
        short s=21941;
        double d1=2.25597;
        float f1=3.1001F;
        float[] fArr =new float[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(fArr, -93.420F);
        FuzzerUtils.init(lArr, 1878097661L);

        i7 = 1;
        while (++i7 < 203) {
            s = (short)d1;
            fArr[i7 + 1] -= (lArr[i7]--);
            f1 = 1;
            while (++f1 < 8) {
                Test0202.iFld *= (int) f1;
                Test0202.iFld = (int) (Test0202.instanceCount - (Test0202.iFld = (int) (Test0202.iFld - Test0202.instanceCount)));
                Test0202.iFld += (int) f1;
            }
        }
        for (i8 = 3; i8 < 376; ++i8) {
            lArr[i8] <<= (++lArr[i8 - 1]);
        }
        i10 = 1;
        do {
            Test0202.iFld += (i10 ^ i9);
        } while (++i10 < 301);
        if (Test0202.bFld) {
            Test0202.iArrFld[(Test0202.iFld >>> 1) % N] >>= (Test0202.iArrFld[(i8 >>> 1) % N] = iMeth(i9, -54804L,
                    Test0202.instanceCount));
            i9 = i7;
        } else if (true) {
            Test0202.iFld += (int) f1;
        }
        long meth_res = i7 + s + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i8 + i9 + i10 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static float fMeth(int i1, double d, int i2) {

        int i3=-56342, i4=-154, i5=12, i6=0, i16=3, i17=249;
        float f=-3.127F;
        float[] fArr2 =new float[N];
        byte by=23;
        short s1=-8449;
        long l2=-63L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(fArr2, 0.626F);
        FuzzerUtils.init(lArr1, 5566199623636650557L);

        for (i3 = 15; i3 < 344; ++i3) {
            i4 += (((i3 * i2) + f) - i4);
            i2 = (--i4);
            i1 *= (int)(((++i4) - i3) * 3L);
            for (i5 = 1; i5 < 5; i5++) {
                Test0202.instanceCount -= (long) dMeth();
                by += (byte) (((i5 * Test0202.instanceCount) + Test0202.instanceCount) - i1);
                switch (((i6 >>> 1) % 9) + 28) {
                case 28:
                    Test0202.sArrFld[i3 + 1] >>= (short) i1;
                case 29:
                    i2 %= -6285;
                    s1 = by;
                    i6 += (i5 ^ i1);
                    for (i16 = 2; i16 > 1; i16 -= 3) {
                        fArr2[i16] -= i4;
                        lArr1[i16 - 1] = 3952237786884004087L;
                    }
                    break;
                case 30:
                    i17 += i6;
                    break;
                case 31:
                    i1 += (59472 + (i5 * i5));
                case 32:
                    Test0202.instanceCount = i1;
                    break;
                case 33:
                    Test0202.instanceCount &= i17;
                case 34:
                    i1 = i3;
                case 35:
                    i4 += (i5 | l2);
                case 36:
                    try {
                        Test0202.iFld = (Test0202.iArrFld[i5 + 1] / 43794);
                        Test0202.iArrFld[i5 - 1] = (Test0202.iArrFld[i5 - 1] % -1410431127);
                        i6 = (-1031883365 / i6);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    Test0202.iArrFld[i3] /= (int) ((long) (f) | 1);
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + by + s1 +
            i16 + i17 + l2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i18=-11574;
        int i19=-60642;
        int i20=-12;
        int i21=0;
        int[] iArr =new int[N];
        byte by1=51;
        short s2=27335;
        double d2=-78.96991;
        float[] fArr3 =new float[N];

        FuzzerUtils.init(iArr, -30);
        FuzzerUtils.init(fArr3, 80.730F);

        for (int i : iArr) {
            i -= (int) Test0202.instanceCount;
            fMeth(i, 56.32906, i);
            Test0202.bFld = Test0202.bFld;
            Test0202.lArrFld = FuzzerUtils.long1array(N, (long) -2L);
            i18 = i;
            if (Test0202.bFld) continue;
            i -= Test0202.iFld;
            switch (((i18 >>> 1) % 2) + 103) {
            case 103:
                switch (((Test0202.iFld >>> 1) % 10) + 34) {
                case 34:
                    Test0202.instanceCount += by1;
                    Test0202.instanceCount = Test0202.iFld;
                    Test0202.iArrFld[(Test0202.iFld >>> 1) % N] = Test0202.iFld;
                    i18 -= 12;
                    break;
                case 35:
                    i19 = 1;
                    do {
                        i18 += (i19 * i19);
                        for (i20 = 1; i20 < 1; ++i20) {
                            Test0202.instanceCount += i20;
                            i21 += (int)(31318L + (i20 * i20));
                            i = (int)fFld;
                            Test0202.lArrFld = Test0202.lArrFld;
                            iArr[i20] *= i21;
                            if (Test0202.bFld) continue;
                            s2 = (short)-2470102532L;
                            Test0202.bFld = Test0202.bFld;
                            fArr3[i19 + 1] = Test0202.instanceCount;
                            i21 += (int)135L;
                        }
                        Test0202.iFld &= (int) Test0202.instanceCount;
                        Test0202.iFld += (i19 - i19);
                        Test0202.lArrFld[i19 + 1] = -180;
                    } while (++i19 < 63);
                    break;
                case 36:
                    i18 += (int) Test0202.instanceCount;
                case 37:
                    iArr[(i21 >>> 1) % N] = 3;
                    break;
                case 38:
                    Test0202.instanceCount += i18;
                    break;
                case 39:
                    Test0202.instanceCount = (long) d2;
                case 40:
                    Test0202.iArrFld[(-8802 >>> 1) % N] <<= Test0202.iFld;
                    break;
                case 41:
                    i >>= Test0202.iFld;
                    break;
                case 42:
                    fFld = i20;
                    break;
                case 43:
                    Test0202.instanceCount >>>= i19;
                }
            case 104:
                Test0202.instanceCount = i21;
                break;
            }
        }

        FuzzerUtils.out.println("i18 by1 i19 = " + i18 + "," + by1 + "," + i19);
        FuzzerUtils.out.println("i20 i21 s2 = " + i20 + "," + i21 + "," + s2);
        FuzzerUtils.out.println("d2 iArr fArr3 = " + Double.doubleToLongBits(d2) + "," + FuzzerUtils.checkSum(iArr) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr3)));

        FuzzerUtils.out.println("Test0202.instanceCount Test0202.iFld Test0202.bFld = " + Test0202.instanceCount + "," + Test0202.iFld +
                "," + (Test0202.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test0202.iArrFld Test0202.sArrFld = " + Float.floatToIntBits(fFld) + "," +
                FuzzerUtils.checkSum(Test0202.iArrFld) + "," + FuzzerUtils.checkSum(Test0202.sArrFld));
        FuzzerUtils.out.println("Test0202.lArrFld = " + FuzzerUtils.checkSum(Test0202.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0202 _instance = new Test0202();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  dMeth ->  dMeth fMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
