// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:26 2023
public class Test0302 {

    public static final int N = 400;

    public static long instanceCount=-8374788389188773594L;
    public static double dFld=0.107246;
    public double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];
    public long[] lArrFld =new long[N];
    public static volatile byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0302.iArrFld, -53558);
        FuzzerUtils.init(Test0302.byArrFld, (byte) -66);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, long l, int i5) {

        int i6=-28615, i7=-23, i8=-246, i9=-1, i10=31504, i11=-49739;
        byte by1=119;
        boolean b=true;

        for (i6 = 3; 207 > i6; ++i6) {
            f1 -= l;
            for (i8 = i6; i8 < 8; ++i8) {
                f1 = by1;
            }
            for (i10 = 8; i10 > 1; --i10) {
                i5 = by1;
            }
            if (b) continue;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + l + i5 + i6 + i7 + i8 + i9 + by1 + i10 + i11 + (b ? 1 : 0);
    }

    public static int iMeth() {

        float f2=1.403F;
        int i12=-6;
        int i13=13023;
        int i14=19848;
        int i15=-2;
        int i16=8;
        int i17=-126;
        int[] iArr1 =new int[N];
        byte by2=-118;
        boolean b1=false;

        FuzzerUtils.init(iArr1, 175);

        vMeth1(f2, Test0302.instanceCount, i12);
        for (i13 = 1; i13 < 160; ++i13) {
            f2 -= Test0302.instanceCount;
            i12 += i12;
            Test0302.instanceCount = Test0302.instanceCount;
            for (i15 = 1; i15 < 10; i15++) {
                i14 += (i15 * i15);
                i14 ^= -4;
                f2 += by2;
            }
        }
        f2 -= (float) Test0302.dFld;
        Test0302.dFld = i12;
        iArr1[(4 >>> 1) % N] = (int)-9L;
        i17 = 1;
        do {
            if (b1) continue;
            i14 = (int) Test0302.instanceCount;
        } while (++i17 < 347);
        long meth_res = Float.floatToIntBits(f2) + i12 + i13 + i14 + i15 + i16 + by2 + i17 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i, int i1) {

        int i2=53853;
        int i3=-7470;
        int i4=0;
        int i18=12;
        int i19=207;
        int[][] iArr =new int[N][N];
        float f=1.587F;
        byte by=68;
        boolean b3=false;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr, -124);
        FuzzerUtils.init(bArr, false);

        i = (int) Test0302.instanceCount;
        i2 = 1;
        do {
            for (i3 = 1; i3 < 6; i3++) {
                iArr[i3 + 1][i3] *= (int)f;
                iArr[i2 + 1][i3 - 1] = (int) ((13 + (by / (i3 | 1))) * ((Test0302.dFld - i2) * (i++)));
                Test0302.dFld = iMeth();
                for (i18 = 1; 2 > i18; ++i18) {
                    boolean b2=true;
                    bArr[i2 - 1] = b2;
                    f = -210;
                    iArr[i3][i18 + 1] *= -58;
                    try {
                        i4 = (64074 / i19);
                        iArr[i3][i3 - 1] = (193 % i1);
                        i = (i % -58260);
                    } catch (ArithmeticException a_e) {}
                    i4 = i;
                }
            }
            i4 -= i4;
            b3 = b3;
            Test0302.instanceCount -= Test0302.instanceCount;
        } while (++i2 < 254);
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + by + i18 + i19 + (b3 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i20=100, i21=-13, i22=-14, i23=-42910, i24=-4803, i25=31526, i26=-17944, i27=-29203, i28=-162;
        float f3=-15.508F;
        float[] fArr =new float[N];
        boolean b4=false;
        long l2=-1L;

        FuzzerUtils.init(fArr, 0.443F);

        vMeth(i20, i20);
        i20 = i20;
        for (i21 = 4; 254 > i21; ++i21) {
            i22 += i21;
            i20 += (int) Test0302.instanceCount;
            i22 = 234;
            dArrFld[i21] += i21;
            i22 &= i20;
            dArrFld[i21 + 1] = f3;
            if (b4) {
                Test0302.instanceCount += i20;
                i20 -= 10;
            } else {
                Test0302.iArrFld[i21 - 1] += (int) f3;
                i20 = (int) Test0302.instanceCount;
            }
        }
        i23 = 1;
        while (++i23 < 294) {
            i22 += (i23 | i20);
        }
        Test0302.dFld += 47.754F;
        switch ((((-157 >>> 1) % 5) * 5) + 118) {
        case 137:
            fArr = fArr;
            for (i24 = 6; i24 < 142; ++i24) {
                Test0302.dFld = f3;
                switch (((i24 % 2) * 5) + 40) {
                case 41:
                    lArrFld[i24] = Test0302.instanceCount;
                case 45:
                    i22 >>= i24;
                    switch ((i24 % 5) + 38) {
                    case 38:
                        for (i26 = 184; i26 > 5; i26--) {
                            i22 = (int)-1453615806L;
                            for (l2 = 1; l2 < 2; l2++) {
                                i22 -= (int)f3;
                                Test0302.instanceCount = i23;
                            }
                        }
                        break;
                    case 39:
                        Test0302.iArrFld[i24] *= i23;
                    case 40:
                        i22 -= -43;
                        break;
                    case 41:
                        Test0302.dFld += -10474;
                        break;
                    case 42:
                        Test0302.byArrFld[i24] = (byte) i27;
                        break;
                    }
                    break;
                default:
                    Test0302.iArrFld[i24 - 1] *= i21;
                }
            }
            break;
        case 136:
        case 129:
            lArrFld[(i25 >>> 1) % N] <<= Test0302.instanceCount;
            break;
        case 141:
            f3 *= i25;
            break;
        case 140:
            i27 = i25;
            break;
        default:
            Test0302.instanceCount &= i21;
        }

        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("f3 b4 i23 = " + Float.floatToIntBits(f3) + "," + (b4 ? 1 : 0) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 l2 i28 = " + i27 + "," + l2 + "," + i28);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0302.instanceCount Test0302.dFld dArrFld = " + Test0302.instanceCount + "," +
                Double.doubleToLongBits(Test0302.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test0302.iArrFld lArrFld Test0302.byArrFld = " + FuzzerUtils.checkSum(Test0302.iArrFld) + "," +
                FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(Test0302.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0302 _instance = new Test0302();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
