// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0023 {

    public static final int N = 400;

    public static long instanceCount=84L;
    public static volatile boolean bFld=true;
    public static int iFld=-24901;
    public static short sFld=18914;
    public static double dFld=20.25731;
    public float fFld=41.0F;
    public static volatile int[] iArrFld =new int[N];
    public long[][] lArrFld =new long[N][N];

    static {
        FuzzerUtils.init(Test0023.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i9, int i10, int i11) {

        int i12=-3, i13=237, i14=10, i15=15816, i16=39955, i17=11302, i18=-9;
        byte by=-67;
        double d2=2.79301;
        float f1=0.43F;

        for (i12 = 3; i12 < 213; i12++) {
            for (i14 = 1; i14 < 8; i14++) {
                by = (byte)i9;
            }
            for (i16 = 1; i16 < 8; i16++) {
                i18 = 1;
                while (++i18 < 2) {
                    Test0023.instanceCount <<= 19893;
                    i15 -= (int) Test0023.instanceCount;
                    i11 -= i13;
                    d2 = f1;
                    i15 = i14;
                    i9 = (int) Test0023.instanceCount;
                    i15 = -30430;
                    i17 = (int)f1;
                    if (Test0023.bFld) break;
                }
                i17 += (i16 ^ i9);
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + by + i16 + i17 + i18 + Double.doubleToLongBits(d2) +
            Float.floatToIntBits(f1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(long l1, double d1) {

        int i8=-248;
        int i19=-49550;
        int[] iArr1 =new int[N];
        float f2=-70.37F;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr1, 1593);
        FuzzerUtils.init(dArr, 1.84637);

        i8 *= (int)((sMeth(i8, i8, i8) + -1802690674174782429L) & i8);
        i8 += i8;
        i8 += i8;
        i8 = i8;
        i19 = 316;
        while ((i19 -= 2) > 0) {
            Test0023.instanceCount >>= i8;
            i8 = 57093;
            f2 = f2;
            i8 ^= i19;
            if (Test0023.bFld) {
                i8 = (int) Test0023.instanceCount;
            } else {
                if (Test0023.bFld) {
                    iArr1[i19 + 1] *= i8;
                    Test0023.iFld *= (int) -84.3022;
                    Test0023.iFld <<= Test0023.sFld;
                } else if (Test0023.bFld) {
                    Test0023.instanceCount += (((i19 * Test0023.iFld) + i8) - Test0023.iFld);
                } else if (Test0023.bFld) {
                    Test0023.iFld = (int) 2.332F;
                } else {
                    iArr1 = iArr1;
                }
            }
        }
        long meth_res = l1 + Double.doubleToLongBits(d1) + i8 + i19 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, double d) {

        float f=2.262F;
        int i7=-5, i20=-27711, i21=3909, i22=-133, i23=117, i24=-40, i25=-162, i26=58309, i27=245;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -2711475986L);

        f = Math.abs((int) ((-53820 % (((long) (i7 - d)) | 1)) * iMeth(Test0023.instanceCount, d)));
        for (i20 = 7; i20 < 184; i20++) {
            for (i22 = 1; i22 < 9; ++i22) {
                f += i22;
                for (i24 = 1; i24 < 2; ++i24) {
                    Test0023.iArrFld[i22 + 1] -= i7;
                    lArr = lArr;
                    lArr[i22 + 1] -= Test0023.instanceCount;
                    if (Test0023.bFld) continue;
                    Test0023.instanceCount <<= i21;
                    Test0023.iFld <<= i23;
                }
                for (i26 = 1; 2 > i26; i26++) {
                    lArr[i20 - 1] = -8;
                    i21 -= i27;
                    Test0023.iFld = (int) l;
                }
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i7 + i20 + i21 + i22 + i23 + i24
            + i25 + i26 + i27 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=2;
        int i1=66;
        int i2=-6;
        int i3=9;
        int i4=-51773;
        int i5=-253;
        int i6=-23222;
        int i28=-2;
        int i29=-5;
        int i30=-9;
        int i31=57946;
        int[] iArr =new
                    int[N];
        int[] iArr2 =new int[N];
        boolean[] bArr =new boolean[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr, 14);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, -47.222F);
        FuzzerUtils.init(iArr2, 16314);

        for (i = 2; i < 166; ++i) {
            i1 += (i * i);
            i1 += iArr[i + 1];
            i1 ^= (i1++);
            for (i2 = i; i2 < 153; i2++) {
                iArr[i2] -= Math.abs((int)(6L - (i3 * i3)));
                bArr = (bArr = bArr);
                for (i4 = 1; 1 < i4; --i4) {
                    i3 -= (i1++);
                    i1 = i6;
                    i3 = i4;
                    vMeth(Test0023.instanceCount, Test0023.dFld);
                    lArrFld[i4][i2] *= Test0023.iFld;
                    Test0023.iArrFld[i4 - 1] |= 43730;
                    fArr[i2] -= i;
                }
                Test0023.iArrFld[i2 + 1] -= i28;
                iArr2[i2 - 1] = i1;
                lArrFld[i + 1][i] = (long) Test0023.dFld;
                i29 = 1;
                do {
                    i1 *= (int) Test0023.instanceCount;
                    i1 += (i29 - Test0023.iFld);
                    i6 -= i6;
                } while (++i29 < 1);
                for (i30 = i; 1 > i30; i30++) {
                    i3 ^= i30;
                    switch (((i30 % 2) * 5) + 35) {
                    case 42:
                        if (Test0023.bFld) break;
                        Test0023.iArrFld[i + 1] = i29;
                        Test0023.instanceCount -= Test0023.instanceCount;
                    case 44:
                        fFld %= (Test0023.instanceCount | 1);
                        i6 -= i2;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 i28 i29 = " + i6 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 iArr = " + i30 + "," + i31 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("bArr fArr iArr2 = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0023.instanceCount Test0023.bFld Test0023.iFld = " + Test0023.instanceCount + "," + (Test0023.bFld ? 1
                : 0) + "," + Test0023.iFld);
        FuzzerUtils.out.println("Test0023.sFld Test0023.dFld fFld = " + Test0023.sFld + "," + Double.doubleToLongBits(Test0023.dFld) +
            "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0023.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test0023.iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0023 _instance = new Test0023();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
