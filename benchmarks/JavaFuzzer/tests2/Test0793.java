// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0793 {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static volatile boolean bFld=true;
    public static byte byFld=-127;
    public volatile double dFld=2.13091;
    public static byte[] byArrFld =new byte[N];
    public static long[] lArrFld =new long[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0793.byArrFld, (byte) -119);
        FuzzerUtils.init(Test0793.lArrFld, -5578059639328485933L);
    }

    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static int iMeth() {

        int i4=-11;

        Test0793.instanceCount += (((--i4) * (i4 - Test0793.instanceCount)) + ((Test0793.byArrFld[(i4 >>> 1) % N]--) - i4));
        long meth_res = i4;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i10, int i11, int i12) {

        int i13=51769;
        int i14=-51830;
        int i15=-30526;
        int i16=-7;
        int[] iArr =new int[N];
        float f1=-2.1011F;
        byte by=123;
        short s1=-16085;
        boolean b=true;
        double d=0.130218;
        long l1=-15231L;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(iArr, 157);
        FuzzerUtils.init(lArr, -150L);

        i13 = 1;
        while (++i13 < 275) {
            i11 = (int) Test0793.instanceCount;
            switch ((i13 % 5) + 55) {
            case 55:
                f1 = i11;
                Test0793.instanceCount += Test0793.instanceCount;
                i10 *= (int)-1.6651;
                break;
            case 56:
                i12 += (((i13 * i12) + i12) - by);
                try {
                    i12 = (-63358 % iArr[i13]);
                    iArr[i13 - 1] = (i10 / i11);
                    i11 = (i12 / -1282425007);
                } catch (ArithmeticException a_e) {}
                break;
            case 57:
                lArr[i13 + 1][i13] = -208L;
            case 58:
            case 59:
                i11 += (((i13 * i13) + i13) - i11);
                i12 += (((i13 * i11) + i10) - s1);
            }
        }
        for (i14 = 7; i14 < 383; ++i14) {
            try {
                i16 = (i10 % -126);
                i16 = (i14 % 163);
                i10 = (i10 / i11);
            } catch (ArithmeticException a_e) {}
            if (b) break;
            d = l1;
        }
        vMeth_check_sum += i10 + i11 + i12 + i13 + Float.floatToIntBits(f1) + by + s1 + i14 + i15 + i16 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + l1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(long l, int i7) {

        int i8=13;
        int i9=-93;
        int i17=-6;
        int i18=-4;
        int i19=12;
        int i20=-10;
        int i21=11;
        int[] iArr1 =new int[N];
        long l2=55028L;
        double d1=33.27436;

        FuzzerUtils.init(iArr1, 77);

        for (i8 = 243; i8 > 5; i8--) {
            vMeth(i17, i8, i9);
            l2 = 1;
            do {
                i18 -= i18;
                i7 = (int)l2;
                for (i19 = 1; i19 < 1; ++i19) {
                    if (Test0793.bFld) continue;
                    if (Test0793.bFld) {
                        i20 <<= i7;
                        iArr1[i8] += i19;
                    } else if (Test0793.bFld) {
                        switch ((int)((l2 % 1) + 19)) {
                        case 19:
                            Test0793.instanceCount -= i8;
                            if (Test0793.bFld) {
                                i7 <<= i17;
                                i17 += (((i19 * l2) + i21) - i7);
                            } else if (false) {
                                if (i8 != 0) {
                                }
                            } else {
                                d1 = i21;
                            }
                        }
                    }
                }
            } while (++l2 < 7);
        }
        long meth_res = l + i7 + i8 + i9 + i17 + l2 + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth(int i6) {

        short s=-22360;
        int i22=-60641, i23=-28427, i24=-224;
        float f2=2.71F;
        double d2=0.120524;

        s = (short)iMeth1(67L, i6);
        i6 = i6;
        i6 = i22;
        f2 -= Test0793.byFld;
        for (i23 = 11; i23 < 284; i23++) {
            Test0793.instanceCount += (((i23 * i22) + i23) - f2);
            i6 += i23;
            i24 = (int) Test0793.instanceCount;
            Test0793.instanceCount = i23;
            i24 *= (int)d2;
        }
        long meth_res = i6 + s + i22 + Float.floatToIntBits(f2) + i23 + i24 + Double.doubleToLongBits(d2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0;
        int i1=1;
        int i2=-9;
        int i3=14;
        int i5=-5;
        int i25=-4;
        int i26=-76;
        int i27=143;
        int[][] iArr2 =new int[N][N];
        float f=-126.526F;
        short s2=-1701;
        byte[][] byArr =new byte[N][N];
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr2, -6);
        FuzzerUtils.init(byArr, (byte)50);
        FuzzerUtils.init(dArr, 71.117307);

        for (i = 5; i < 139; ++i) {
            for (i2 = i; i2 < 187; i2++) {
                i3 = iMeth();
                for (f = 1; 1 > f; ++f) {
                    i1 *= (int) Math.abs((float) (Test0793.instanceCount + Double.longBitsToDouble(Test0793.instanceCount)));
                    i5 ^= (int)-1760942593324235989L;
                    i5 = (int)fMeth(i1);
                    iArr2[i + 1][i2] = i1;
                    Test0793.instanceCount += (-36 + (f * f));
                    i5 += (int)((long)f | (long)f);
                    i1 = 6;
                    Test0793.instanceCount >>>= 8;
                }
                byArr[i2][i2 - 1] = (byte)-41388;
                i3 &= 12;
                i1 -= (int)96.134F;
                Test0793.lArrFld[i2] <<= i5;
            }
            i5 += (i * Test0793.instanceCount);
            fArrFld[i + 1] -= s2;
            i25 = 187;
            while (--i25 > 0) {
                for (i26 = i25; i26 < 1; i26++) {
                    iArr2[i26 + 1][i - 1] = i26;
                }
                if (true) break;
                i3 = i26;
                Test0793.instanceCount += (long) f;
                iArr2[i25 - 1][i] *= (int) Test0793.instanceCount;
                i5 += i26;
                i27 = 9059;
                Test0793.instanceCount -= Test0793.instanceCount;
            }
            i27 += (86 + (i * i));
            dFld = i3;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f i5 = " + i3 + "," + Float.floatToIntBits(f) + "," + i5);
        FuzzerUtils.out.println("s2 i25 i26 = " + s2 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 iArr2 byArr = " + i27 + "," + FuzzerUtils.checkSum(iArr2) + "," +
            FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0793.instanceCount Test0793.bFld Test0793.byFld = " + Test0793.instanceCount + "," + (Test0793.bFld ?
                1 : 0) + "," + Test0793.byFld);
        FuzzerUtils.out.println("dFld Test0793.byArrFld Test0793.lArrFld = " + Double.doubleToLongBits(dFld) + "," +
                FuzzerUtils.checkSum(Test0793.byArrFld) + "," + FuzzerUtils.checkSum(Test0793.lArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0793 _instance = new Test0793();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 fMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
