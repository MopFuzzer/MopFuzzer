// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0188 {

    public static final int N = 400;

    public static long instanceCount=160L;
    public static boolean bFld=false;
    public static short sFld=-20724;
    public int[][] iArrFld =new int[N][N];
    public static long[] lArrFld =new long[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0188.lArrFld, 4545892391712408871L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(double d, int i1, int i2) {

        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -243854146L);

        Test0188.instanceCount <<= (++lArr[(134 >>> 1) % N][(i2 >>> 1) % N]);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i1 + i2 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i8, int i9, int i10) {

        double d1=23.110282;
        int i11=-4, i12=10, i13=14, i14=12860;
        long l1=2258005431L;
        float f=0.753F;
        short s=4836;
        byte by=-127;

        d1 = 157;
        do {
            for (i11 = (int)(d1); i11 < 10; ++i11) {
                i8 *= (int) Test0188.instanceCount;
                i9 *= i9;
                i9 -= i8;
                Test0188.instanceCount += l1;
                Test0188.lArrFld[(int) (d1 - 1)] *= (long) f;
                f += (((i11 * s) + i9) - i10);
                Test0188.lArrFld[(int) (d1)] <<= i12;
                i12 -= (int) Test0188.instanceCount;
                Test0188.instanceCount -= i10;
            }
        } while (--d1 > 0);
        i10 = (int)d1;
        for (i13 = 17; i13 < 346; i13++) {
            i9 = by;
        }
        Test0188.bFld = Test0188.bFld;
        vMeth1_check_sum += i8 + i9 + i10 + Double.doubleToLongBits(d1) + i11 + i12 + l1 + Float.floatToIntBits(f) + s
            + i13 + i14 + by;
    }

    public static void vMeth(int i6, int i7) {

        int i15=20345;
        int i16=-55121;
        int i17=11860;
        int i18=41088;
        int[] iArr =new int[N];
        float f1=0.144F;
        short s1=-26803;
        double d2=-68.83707;

        FuzzerUtils.init(iArr, 57494);

        vMeth1(i7, i7, i6);
        i15 = 1;
        do {
            f1 += f1;
            f1 += (i15 + s1);
            i6 += i15;
            i7 = (int)d2;
            for (i16 = i15; i16 < 5; i16++) {
                switch ((i16 % 2) + 70) {
                case 70:
                    i7 += (((i16 * i17) + f1) - Test0188.instanceCount);
                    i7 = i16;
                    i6 = i15;
                    i17 = i18;
                    break;
                case 71:
                    s1 = (short)44165;
                    break;
                default:
                    i17 += (i16 - i7);
                    iArr[i15] = (int) Test0188.instanceCount;
                }
            }
        } while (++i15 < 331);
        vMeth_check_sum += i6 + i7 + i15 + Float.floatToIntBits(f1) + s1 + Double.doubleToLongBits(d2) + i16 + i17 +
            i18 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, int i3) {

        int i4=-14;
        int i5=-43709;
        int[] iArr1 =new int[N];
        byte by1=-67;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -1207);

        for (i4 = 11; i4 < 347; i4++) {
            switch ((i4 % 1) + 26) {
            case 26:
                vMeth(i4, i4);
                i3 = i3;
                break;
            }
            switch ((i4 % 2) + 13) {
            case 13:
                i5 ^= i4;
                bArr[i4 - 1] = Test0188.bFld;
                Test0188.lArrFld[i4 - 1] *= Test0188.instanceCount;
                break;
            case 14:
                i5 = i3;
                i3 += (((i4 * i4) + i5) - by1);
                i5 += 237;
                break;
            }
            if (Test0188.bFld) break;
            iArr1[i4 - 1] += (int)l;
            i3 += i4;
            if (Test0188.bFld) continue;
        }
        long meth_res = l + i3 + i4 + i5 + by1 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=136;
        int i19=-63;
        int i20=2;
        int i21=43265;
        int i23=127;
        int i24=220;
        int i25=-10;
        int i26=14;
        int i27=167;
        int i28=12;
        int[] iArr2 =new int[N];
        double d3=-96.114678;
        float f2=83.999F;
        byte by3=92;

        FuzzerUtils.init(iArr2, 3);

        i = iArrFld[(i >>> 1) % N][(i >>> 1) % N];
        for (int smallinvoc = 0; smallinvoc < 165; smallinvoc++)
            vSmallMeth(((Test0188.instanceCount * 151) + Math.max(179, i))
                    * iMeth(Test0188.instanceCount, i), -19616, i);
        for (d3 = 8; d3 < 239; d3++) {
            byte by2=-6;
            Test0188.instanceCount = i19;
            i -= Test0188.sFld;
            for (i20 = 6; 109 > i20; i20++) {
                f2 = Test0188.instanceCount;
                Test0188.instanceCount >>= Test0188.instanceCount;
            }
            iArrFld[(int)(d3 - 1)][(int)(d3 - 1)] += i20;
            iArrFld[(int)(d3 - 1)][(int)(d3 + 1)] -= by2;
            Test0188.lArrFld[(int) (d3 + 1)] = Test0188.instanceCount;
            if (Test0188.bFld) {
                f2 -= -11714;
                fArrFld[(int) (d3 - 1)] = Test0188.instanceCount;
                Test0188.instanceCount -= (long) d3;
            } else {
                if (false) break;
                i19 *= i20;
            }
        }
        i19 = (int) Test0188.instanceCount;
        i -= i20;
        for (i23 = 16; i23 < 378; ++i23) {
            switch ((i23 % 4) + 109) {
            case 109:
                if (Test0188.bFld) break;
                for (i25 = 70; i25 > 2; i25 -= 3) {
                    fArrFld[(i24 >>> 1) % N] = by3;
                    for (i27 = i23; i27 < 4; ++i27) {
                        Test0188.instanceCount -= i19;
                        i26 = (int) Test0188.instanceCount;
                        iArrFld[i23 + 1][i25 + 1] = (int)-4306520013504376784L;
                        Test0188.instanceCount = i28;
                        i28 -= (int)44182721L;
                    }
                }
                break;
            case 110:
                Test0188.lArrFld[i23] = Test0188.instanceCount;
                break;
            case 111:
                f2 = f2;
                break;
            case 112:
                i21 = i24;
                break;
            }
        }

        FuzzerUtils.out.println("i d3 i19 = " + i + "," + Double.doubleToLongBits(d3) + "," + i19);
        FuzzerUtils.out.println("i20 i21 f2 = " + i20 + "," + i21 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by3 i27 = " + i26 + "," + by3 + "," + i27);
        FuzzerUtils.out.println("i28 iArr2 = " + i28 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0188.instanceCount Test0188.bFld Test0188.sFld = " + Test0188.instanceCount + "," + (Test0188.bFld ? 1
                : 0) + "," + Test0188.sFld);
        FuzzerUtils.out.println("iArrFld Test0188.lArrFld fArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0188.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0188 _instance = new Test0188();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
