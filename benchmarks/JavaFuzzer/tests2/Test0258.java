// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:24 2023
public class Test0258 {

    public static final int N = 400;

    public static long instanceCount=-20335L;
    public byte byFld=-109;
    public static boolean bFld=true;
    public volatile long[] lArrFld =new long[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(double d) {

        int i12=124, i13=162, i14=-147, i15=-13456;
        long l1=-6474969496436102094L;
        long[][] lArr =new long[N][N];
        double d1=1.19724;
        boolean[] bArr =new boolean[N];
        float[] fArr2 =new float[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr2, -58.1022F);
        FuzzerUtils.init(lArr, 40870L);

        Test0258.instanceCount -= i12;
        i12 += (int)d;
        switch ((((i12 >>> 1) % 4) * 5) + 24) {
        case 41:
            for (i13 = 8; i13 < 377; ++i13) {
                Test0258.bFld = Test0258.bFld;
                i14 += (i13 | i14);
                for (l1 = i13; l1 < 5; l1++) {
                    bArr[i13] = Test0258.bFld;
                }
            }
            Test0258.instanceCount += i15;
            Test0258.instanceCount = i13;
            break;
        case 43:
            i15 = i15;
            d1 = 220;
            do {
                if (i12 != 0) {
                }
                i14 >>= i15;
                i15 += -4;
            } while (--d1 > 0);
            break;
        case 28:
            fArr2[(i13 >>> 1) % N] *= -12;
            break;
        case 35:
            lArr[(i12 >>> 1) % N] = lArr[(-52992 >>> 1) % N];
            break;
        }
        long meth_res = Double.doubleToLongBits(d) + i12 + i13 + i14 + l1 + i15 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i6=-81;
        int i7=212;
        int i8=-61958;
        int i9=24281;
        int i10=8906;
        int i11=197;
        int i16=-13670;
        int i17=-8;
        int[] iArr1 =new int[N];
        float f1=-2.36F;
        float[] fArr1 =new float[N];
        byte by=19;
        byte[] byArr =new byte[N];
        double d2=1.20438;

        FuzzerUtils.init(fArr1, 1.91F);
        FuzzerUtils.init(iArr1, -3);
        FuzzerUtils.init(byArr, (byte)63);

        Test0258.bFld = ((Test0258.bFld = (-12908 >= (2.128041 * (i6 * Test0258.instanceCount)))) & (!Test0258.bFld));
        for (i7 = 4; i7 < 237; i7++) {
            for (i9 = 1; i9 < 7; i9++) {
                switch ((i7 % 10) + 38) {
                case 38:
                    i11 = 1;
                    do {
                        f1 = (fArr1[i11]++);
                        iArr1[i9 - 1] = iMeth(83.46073);
                        i10 -= by;
                        i16 *= (int) Test0258.instanceCount;
                        d2 = -38.40307;
                        i6 = i9;
                        if (i8 != 0) {
                            vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + by + i16 +
                                Double.doubleToLongBits(d2) + i17 +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1) +
                                FuzzerUtils.checkSum(byArr);
                            return;
                        }
                        i16 = (int) Test0258.instanceCount;
                    } while (++i11 < 2);
                    break;
                case 39:
                    by = (byte)i11;
                    by <<= (byte)i6;
                    break;
                case 40:
                    i8 ^= 53152;
                    break;
                case 41:
                    i17 += (14 + (i9 * i9));
                    break;
                case 42:
                    i17 = (int) Test0258.instanceCount;
                    break;
                case 43:
                    iArr1[i7] = i6;
                    break;
                case 44:
                    Test0258.instanceCount *= i17;
                    break;
                case 45:
                    d2 = 2;
                    break;
                case 46:
                    i10 -= (int)50960L;
                    break;
                case 47:
                    byArr[i9] |= (byte)i16;
                    break;
                }
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f1) + by + i16 +
            Double.doubleToLongBits(d2) + i17 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(int i4, int i5, long l) {

        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, -39.984F);

        i4 += (int)fArr[(i5 >>> 1) % N][(-54567 >>> 1) % N];
        vMeth();
        vSmallMeth_check_sum += i4 + i5 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i=-71;
        int i1=-168;
        int i2=-8;
        int i3=-8;
        int i18=163;
        int i19=-45163;
        int i20=-48123;
        int[] iArr =new int[N];
        float f=94.828F;
        short s=8926;
        double d3=-103.123796;
        boolean[] bArr1 =new boolean[N];

        FuzzerUtils.init(iArr, -65);
        FuzzerUtils.init(bArr1, false);

        for (i = 5; i < 307; ++i) {
            Test0258.instanceCount -= (--i1);
            for (i2 = 2; i2 < 83; ++i2) {
                f *= ((f = Math.min(i, -1067)) + (byFld = (byte)(i3--)));
                s += (short)(iArr[i2 - 1]++);
                i1 += ((i3 + i3) + -9);
            }
            for (int smallinvoc = 0; smallinvoc < 62; smallinvoc++) vSmallMeth(i3, i1, Test0258.instanceCount);
            iArr = iArr;
            try {
                i1 = (i % -188);
                i3 = (i1 / -1300257878);
                i3 = (9584 % i1);
            } catch (ArithmeticException a_e) {}
            for (i18 = 5; i18 < 83; ++i18) {
                i20 = 1;
                while (++i20 < 2) {
                    i19 = (int) Test0258.instanceCount;
                    iArr = iArr;
                    i3 -= (int) Test0258.instanceCount;
                    switch ((i18 % 3) + 1) {
                    case 1:
                        d3 += 27475;
                        break;
                    case 2:
                        bArr1[i - 1] = Test0258.bFld;
                        break;
                    case 3:
                        Test0258.bFld = Test0258.bFld;
                        i1 += (((i20 * i2) + f) - i18);
                        break;
                    default:
                        Test0258.instanceCount -= i2;
                        i1 |= (int)146L;
                    }
                    iArr[i + 1] <<= i18;
                    Test0258.instanceCount -= Test0258.instanceCount;
                }
                Test0258.instanceCount += i18;
                i3 <<= byFld;
            }
            i1 = i20;
            i19 = i3;
        }
        Test0258.instanceCount *= i3;
        lArrFld[(143 >>> 1) % N] = (long)f;
        i19 -= i3;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f s = " + i3 + "," + Float.floatToIntBits(f) + "," + s);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d3 iArr bArr1 = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(iArr) +
            "," + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test0258.instanceCount byFld Test0258.bFld = " + Test0258.instanceCount + "," + byFld + "," +
                (Test0258.bFld ? 1 : 0));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0258 _instance = new Test0258();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
