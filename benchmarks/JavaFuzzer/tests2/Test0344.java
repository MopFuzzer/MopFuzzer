// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:28 2023
public class Test0344 {

    public static final int N = 400;

    public static long instanceCount=-58693L;
    public static boolean bFld=true;
    public static short sFld=-9921;
    public static float fFld=2.268F;
    public static volatile double dFld=-2.73053;
    public static volatile float[] fArrFld =new float[N];
    public static int[][] iArrFld =new int[N][N];
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0344.fArrFld, -91.541F);
        FuzzerUtils.init(Test0344.iArrFld, -16084);
        FuzzerUtils.init(Test0344.dArrFld, 89.129199);
        FuzzerUtils.init(Test0344.iArrFld1, 33313);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3, long l1) {

        int i4=-14, i5=-128, i6=145;
        float f1=2.84F;
        short s1=-29390;
        short[] sArr =new short[N];
        double d1=0.71697;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -9022315696830771839L);
        FuzzerUtils.init(sArr, (short)28266);

        i3 >>= i3;
        Test0344.iArrFld[(i3 >>> 1) % N][(i3 >>> 1) % N] = -8802;
        i4 = 1;
        while (++i4 < 246) {
            i3 += (i4 - i3);
            if (i4 != 0) {
                vMeth1_check_sum += i3 + l1 + i4 + Float.floatToIntBits(f1) + s1 + i5 + i6 +
                    Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                return;
            }
            f1 += s1;
        }
        if (false) {
            lArr[(i3 >>> 1) % N] = i3;
        } else {
            switch ((((5 >>> 1) % 10) * 5) + 53) {
            case 82:
                for (i5 = 16; i5 < 314; ++i5) {
                    i3 = (int)d1;
                    sArr[i5 + 1] <<= (short)i6;
                    i3 += (((i5 * i4) + i6) - i6);
                    i6 += (((i5 * Test0344.instanceCount) + i5) - l1);
                    i6 = (int) Test0344.instanceCount;
                }
                break;
            case 70:
                i3 /= (int)(i5 | 1);
                break;
            case 74:
                f1 = i4;
                break;
            case 76:
                Test0344.iArrFld[(i4 >>> 1) % N][(i6 >>> 1) % N] = i6;
                break;
            case 96:
                i3 = 95;
                break;
            case 93:
                i3 = i4;
                break;
            case 103:
                l1 += i6;
                break;
            case 98:
                d1 = i5;
                break;
            case 75:
                Test0344.iArrFld[(i4 >>> 1) % N][(i3 >>> 1) % N] = i5;
                break;
            case 78:
                i3 = i3;
                break;
            default:
                f1 += 89.968F;
            }
        }
        vMeth1_check_sum += i3 + l1 + i4 + Float.floatToIntBits(f1) + s1 + i5 + i6 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(float f, int i1) {

        int i2=10;
        int[] iArr1 =new int[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr1, 129);
        FuzzerUtils.init(lArr1, -5016587379287234095L);

        i2 = 1;
        while (++i2 < 270) {
            i1 += (((i2 * i1) + f) - i2);
            Test0344.bFld = (i2 != (++i1));
            iArr1 = (iArr1 = (iArr1 = iArr1));
            Test0344.fArrFld = (Test0344.fArrFld = (Test0344.fArrFld = FuzzerUtils.float1array(N, (float) 2.54F)));
        }
        i1 += i1;
        vMeth1(i2, Test0344.instanceCount);
        lArr1[(i1 >>> 1) % N] = Test0344.instanceCount;
        i1 >>= Test0344.sFld;
        Test0344.iArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] = i1;
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1);
    }

    public static void vSmallMeth(short s, double d, long l) {

        int i=45331;
        int[][] iArr =new int[N][N];

        FuzzerUtils.init(iArr, 11650);

        iArr[(1 >>> 1) % N][(i >>> 1) % N] = i;
        vMeth(Test0344.fFld, i);
        vSmallMeth_check_sum += s + Double.doubleToLongBits(d) + l + i + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i8=-49126, i9=46, i10=3, i11=-12, i12=39147, i13=4, i14=-2, i15=-10, i16=1, i17=35725;
        byte by=-25;
        float f2=59.319F;

        for (int smallinvoc = 0; smallinvoc < 415; smallinvoc++)
            vSmallMeth(Test0344.sFld, Test0344.dFld, Test0344.instanceCount);
        for (i8 = 4; i8 < 161; i8++) {
            Test0344.iArrFld1[i8] &= i9;
            by *= (byte) Test0344.instanceCount;
            if (Test0344.bFld) {
                if (Test0344.bFld) {
                    for (i10 = 10; i10 < 160; ++i10) {
                        for (i12 = 1; i12 < 2; ++i12) {
                            i9 = (int) Test0344.dFld;
                            i9 += (i12 | i8);
                            i11 >>>= (int) Test0344.instanceCount;
                            Test0344.dFld -= i12;
                            Test0344.iArrFld[i10][i10 - 1] <<= i12;
                            i14 += (((i12 * i9) + i14) - i11);
                            Test0344.iArrFld[i10 - 1][i10] = (int) Test0344.instanceCount;
                            i15 += (i12 * i12);
                            Test0344.fFld *= Test0344.instanceCount;
                        }
                        i13 = (int) Test0344.instanceCount;
                        Test0344.instanceCount *= (long) Test0344.dFld;
                        Test0344.dArrFld[i8] += -69;
                        for (f2 = 1; f2 < 2; ++f2) {
                            i9 = i12;
                            i9 <<= (int) Test0344.instanceCount;
                            i9 += (int) (((f2 * Test0344.instanceCount) + Test0344.sFld) - i16);
                            if (Test0344.bFld) break;
                            i17 += (int) (((f2 * Test0344.instanceCount) + i9) - i15);
                            switch (((i8 % 4) * 5) + 72) {
                            case 86:
                                Test0344.fFld = f2;
                                break;
                            case 76:
                            case 83:
                                Test0344.instanceCount += (-3 + (f2 * f2));
                                i13 += (int)(((f2 * i11) + i15) - i12);
                                break;
                            case 84:
                                i17 += Test0344.sFld;
                                break;
                            }
                        }
                    }
                } else {
                    by = (byte)164;
                }
            }
        }

        FuzzerUtils.out.println("i8 i9 by = " + i8 + "," + i9 + "," + by);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("f2 i16 i17 = " + Float.floatToIntBits(f2) + "," + i16 + "," + i17);

        FuzzerUtils.out.println("Test0344.instanceCount Test0344.bFld Test0344.sFld = " + Test0344.instanceCount + "," + (Test0344.bFld ? 1
                : 0) + "," + Test0344.sFld);
        FuzzerUtils.out.println("Test0344.fFld Test0344.dFld Test0344.fArrFld = " + Float.floatToIntBits(Test0344.fFld) + "," +
                Double.doubleToLongBits(Test0344.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0344.fArrFld)));
        FuzzerUtils.out.println("Test0344.iArrFld Test0344.dArrFld Test0344.iArrFld1 = " + FuzzerUtils.checkSum(Test0344.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0344.dArrFld)) + "," + FuzzerUtils.checkSum(Test0344.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0344 _instance = new Test0344();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
