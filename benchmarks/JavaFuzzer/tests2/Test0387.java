// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:30 2023
public class Test0387 {

    public static final int N = 400;

    public static long instanceCount=3071335061L;
    public static volatile int iFld=119;
    public static double dFld=17.101641;
    public static volatile boolean bFld=false;
    public static float fFld=2.79F;
    public static long[] lArrFld =new long[N];
    public int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0387.lArrFld, -1930244326L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i) {

        short s=-32736;
        double d=0.42442;

        s += (short)-124;
        i = (int)((i + (d * 3L)) + i);
        vSmallMeth_check_sum += l + i + s + Double.doubleToLongBits(d);
    }

    public static void vMeth(int i7, short s2, long l3) {

        int i8=225, i9=-44951, i10=-44549, i11=-15180, i12=-1, i13=-44523;
        long l4=-128L;
        double d1=1.104019;
        boolean b=true;

        for (i8 = 18; 288 > i8; i8++) {
            Test0387.lArrFld[i8] -= i9;
            i7 += (int)(-1.362F + (i8 * i8));
            l4 -= 9;
            i7 -= (int)l4;
        }
        for (i10 = 13; 348 > i10; i10++) {
            Test0387.instanceCount = 250;
            i11 = i7;
            i12 = 1;
            do {
                float f1=10.310F;
                Test0387.iFld *= (int) f1;
                for (d1 = 1; d1 < 1; d1++) {
                    Test0387.instanceCount -= -235;
                    Test0387.dFld -= i9;
                    Test0387.dFld -= -55647;
                    if (b) break;
                }
            } while (++i12 < 5);
        }
        vMeth_check_sum += i7 + s2 + l3 + i8 + i9 + l4 + i10 + i11 + i12 + Double.doubleToLongBits(d1) + i13 + (b ? 1 :
            0);
    }

    public static long lMeth(int i4, long l1, int i5) {

        long l2=-2934676976L;
        int i6=10;
        int i14=-59461;
        int i15=-8838;
        int i16=-3;
        int[] iArr1 =new int[N];
        float f=0.747F, f2=107.979F;
        short s3=26215;

        FuzzerUtils.init(iArr1, 1);

        for (l2 = 11; 178 > l2; l2++) {
            f += (l2 + i6);
            iArr1[(int) (l2 - 1)] *= (Test0387.iFld++);
            vMeth(i4, s3, Test0387.instanceCount);
            Test0387.iFld += i5;
            for (i14 = 1; i14 < 9; i14++) {
                iArr1[(int)(l2 + 1)] >>>= (int)l2;
                Test0387.iFld += (i14 * i14);
                try {
                    i4 = (iArr1[i14] % i4);
                    iArr1[(int)(l2)] = (i14 / i16);
                    i5 = (110 % i14);
                } catch (ArithmeticException a_e) {}
                i4 = i16;
                i4 *= 12;
                f2 += i14;
                Test0387.iFld = (int) f2;
                i16 <<= Test0387.iFld;
            }
            if (Test0387.bFld) continue;
        }
        long meth_res = i4 + l1 + i5 + l2 + i6 + Float.floatToIntBits(f) + s3 + i14 + i15 + i16 +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth() {

        int i17=-12;
        int i18=131;
        int i19=16133;
        int[] iArr =new int[N];
        float f3=-22.945F;
        byte by=-88;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 29623);
        FuzzerUtils.init(sArr, (short)-19612);

        vSmallMeth((long) ((Test0387.iFld++) * Float.intBitsToFloat(Test0387.iFld)), iArr[(-8 >>> 1) % N]++);
        lMeth(Test0387.iFld, Test0387.instanceCount, Test0387.iFld);
        i17 = 1;
        do {
            Test0387.iFld -= (int) Test0387.dFld;
            for (i18 = 1; i18 < 9; ++i18) {
                iArr[i18] -= (int)f3;
                Test0387.instanceCount -= Test0387.instanceCount;
                iArr = iArr;
            }
            Test0387.instanceCount -= 60;
            sArr[i17 + 1] -= (short)-15720;
            Test0387.iFld = (int) -58878L;
            if (i19 != 0) {
            }
            Test0387.instanceCount = Test0387.iFld;
        } while (++i17 < 177);
        Test0387.iFld += by;
        iArr[(i19 >>> 1) % N] >>>= (int) Test0387.instanceCount;
        long meth_res = i17 + i18 + i19 + Float.floatToIntBits(f3) + by + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=11, i2=44, i3=-204, i20=-2, i21=-35, i22=-43, i23=-11, i24=7, i25=0, i26=-34292;
        short s1=10303;
        byte by1=-36;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 11.481F);

        for (int smallinvoc=0; smallinvoc<114; smallinvoc++) vSmallMeth(2592951324L, i1++);
        for (i2 = 17; i2 < 329; ++i2) {
            switch (((i2 % 2) * 5) + 76) {
            case 82:
                s1 = (short)iMeth();
            case 83:
            }
            Test0387.instanceCount += i3;
            iArrFld[i2] -= (int)-122.924F;
        }
        Test0387.iFld >>= i1;
        Test0387.fFld = i3;
        for (i20 = 11; i20 < 397; i20++) {
            i22 = 65;
            do {
                Test0387.iFld -= (int) Test0387.instanceCount;
                if (Test0387.bFld) {
                    i3 -= (int) Test0387.fFld;
                    for (i23 = 1; i23 < 1; ++i23) {
                        s1 <<= (short)i1;
                        i1 += i23;
                    }
                    Test0387.bFld = Test0387.bFld;
                } else {
                    Test0387.instanceCount = (long) Test0387.dFld;
                    i24 <<= i20;
                }
                for (i25 = 1; i25 > 1; i25 -= 3) {
                    i21 *= s1;
                }
                Test0387.instanceCount = -19141;
                by1 *= (byte)i20;
            } while (--i22 > 0);
            if (Test0387.bFld) continue;
            i26 += i20;
            fArr[i20 + 1] %= (i1 | 1);
        }
        i1 -= (int) Test0387.fFld;
        Test0387.instanceCount = i26;
        i26 = i1;
        Test0387.lArrFld[(i23 >>> 1) % N] -= (long) Test0387.dFld;

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("s1 i20 i21 = " + s1 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 by1 = " + i25 + "," + i26 + "," + by1);
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0387.instanceCount Test0387.iFld Test0387.dFld = " + Test0387.instanceCount + "," + Test0387.iFld +
                "," + Double.doubleToLongBits(Test0387.dFld));
        FuzzerUtils.out.println("Test0387.bFld Test0387.fFld Test0387.lArrFld = " + (Test0387.bFld ? 1 : 0) + "," +
                Float.floatToIntBits(Test0387.fFld) + "," + FuzzerUtils.checkSum(Test0387.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0387 _instance = new Test0387();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
