// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:25 2023
public class Test0273 {

    public static final int N = 400;

    public static long instanceCount=-3125620925L;
    public static float fFld=-12.886F;
    public int iFld=-11;
    public volatile byte byFld=115;
    public static volatile double dFld=97.62403;
    public int iFld1=-39138;
    public int iFld2=-34398;
    public short sFld=11941;
    public static long[] lArrFld =new long[N];
    public int[] iArrFld =new int[N];
    public double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0273.lArrFld, -696277481504770459L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i11, short s, int i12) {

        int i13=13;
        int i14=0;
        int i15=11;
        int[][] iArr2 =new int[N][N];
        double d1=79.116831;
        float f1=18.296F;

        FuzzerUtils.init(iArr2, 5);

        for (i13 = 1; i13 < 218; ++i13) {
            Test0273.instanceCount += i14;
        }
        i14 += (int)d1;
        i14 = (int)-63424L;
        i15 = 1;
        do {
            d1 = Test0273.instanceCount;
            Test0273.instanceCount = i11;
            switch ((((i11 >>> 1) % 6) * 5) + 119) {
            case 131:
                iArr2[i15 - 1][i15 - 1] += i14;
                i12 += i15;
                i14 = 62408;
                break;
            case 147:
                Test0273.instanceCount += i13;
                Test0273.instanceCount *= Test0273.instanceCount;
                i14 += i15;
                i11 += (((i15 * i13) + i11) - Test0273.instanceCount);
                break;
            case 138:
                i14 = i12;
                break;
            case 146:
                i12 >>>= i11;
                break;
            case 123:
                i14 += (((i15 * f1) + Test0273.instanceCount) - i15);
            case 125:
                i11 += i15;
                break;
            }
        } while (++i15 < 333);
        long meth_res = i11 + s + i12 + i13 + i14 + Double.doubleToLongBits(d1) + i15 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i3, boolean b, double d) {

        int i4=-39057;
        int i5=-79;
        int i6=-111;
        int i7=4;
        int i8=20;
        int i9=52824;
        int i10=12;
        int[] iArr1 =new int[N];
        float f=79.559F;
        float[][] fArr =new float[N][N];
        byte by=30;
        short s1=-3196;

        FuzzerUtils.init(iArr1, 40297);
        FuzzerUtils.init(fArr, 85.415F);

        for (i4 = 15; i4 < 284; i4++) {
            f -= Math.max(++i5, (int) ((i4 + -4L) + (Test0273.instanceCount + 0.87416)));
            d -= ((i5--) - (-25594 * (i6 - 2813728662L)));
            for (i7 = 1; 6 > i7; ++i7) {
                Test0273.lArrFld[i4 + 1] = iArr1[i7];
                for (i9 = 1; i9 < 2; ++i9) {
                    i10 += i9;
                    by = (byte)(i10--);
                    iArr1[i9 - 1] *= (int)(((80.919F * Math.abs(f)) * Math.max(i5, i9)) - fMeth(-87, s1, i7));
                    Test0273.instanceCount <<= i3;
                    fArr[i4 + 1][i7] -= by;
                    i3 = -57491;
                    iArr1[i9 + 1] += i3;
                    Test0273.instanceCount = Test0273.instanceCount;
                    i10 += (((i9 * i3) + Test0273.instanceCount) - i3);
                }
            }
        }
        vMeth1_check_sum += i3 + (b ? 1 : 0) + Double.doubleToLongBits(d) + i4 + i5 + Float.floatToIntBits(f) + i6 + i7
            + i8 + i9 + i10 + by + s1 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i) {

        int i1=-1;
        int i2=6;
        int i16=-27;
        int i17=6;
        int[] iArr =new int[N];
        int[][] iArr3 =new int[N][N];
        long l=-4L;
        long[] lArr =new long[N];
        boolean b1=false;
        double d2=-37.125119;
        byte by1=21;
        short s3=26171;

        FuzzerUtils.init(lArr, 136L);
        FuzzerUtils.init(iArr, -42);
        FuzzerUtils.init(iArr3, 10);

        i >>= (-i);
        for (i1 = 170; i1 > 4; i1--) {
            l = 1;
            do {
                switch ((i1 % 8) + 96) {
                case 96:
                    Test0273.instanceCount = (lArr[i1]++);
                case 97:
                    Test0273.instanceCount %= ((++iArr[(int) (l - 1)]) | 1);
                    break;
                case 98:
                    vMeth1(i, b1, d2);
                case 99:
                    iArr[(int)(l)] <<= (int)l;
                    Test0273.fFld = i;
                    for (i16 = (int)(l); i16 < 1; i16++) {
                        short s2=5205;
                        i *= (int) Test0273.instanceCount;
                        switch ((i16 % 10) + 66) {
                        case 66:
                            i2 >>>= (int)l;
                            break;
                        case 67:
                            iArr3 = iArr3;
                            i17 = i1;
                            break;
                        case 68:
                            Test0273.instanceCount += (((i16 * i16) + i1) - i2);
                            break;
                        case 69:
                            s2 = by1;
                            break;
                        case 70:
                            s2 += (short) Test0273.instanceCount;
                            break;
                        case 71:
                            Test0273.instanceCount >>= i17;
                            break;
                        case 72:
                            i2 |= i16;
                            break;
                        case 73:
                            if (b1) continue;
                            break;
                        case 74:
                            i2 &= i2;
                            break;
                        case 75:
                            i2 += (int) Test0273.fFld;
                            break;
                        default:
                            i2 = i1;
                        }
                    }
                    break;
                case 100:
                    iArr3[i1] = iArr3[i1 + 1];
                    break;
                case 101:
                    Test0273.instanceCount = s3;
                    break;
                case 102:
                    Test0273.instanceCount = i16;
                case 103:
                    Test0273.lArrFld[i1] <<= i2;
                    break;
                default:
                    iArr3[(int) (l + 1)][(int) (l - 1)] = (int) Test0273.instanceCount;
                }
            } while (++l < 10);
        }
        vMeth_check_sum += i + i1 + i2 + l + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i16 + i17 + by1 + s3 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i18=43747, i19=-27, i20=32843, i21=0, i22=-1, i23=50402, i24=1, i25=-173, i26=-3, i27=-56865;
        boolean b2=true;
        float[] fArr1 =new float[N];
        short[] sArr =new short[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(fArr1, 53.281F);
        FuzzerUtils.init(sArr, (short)-9536);
        FuzzerUtils.init(byArr, (byte)-86);

        vMeth(iFld);
        iFld = iFld;
        Test0273.fFld = Test0273.fFld;
        for (i18 = 137; i18 > 4; i18 -= 3) {
            byFld <<= (byte)-16373;
        }
        for (i20 = 6; i20 < 256; ++i20) {
            for (i22 = 3; i22 < 101; ++i22) {
                iFld &= (int) Test0273.instanceCount;
                Test0273.instanceCount += (((i22 * i22) + byFld) - i19);
                b2 = b2;
                for (i24 = 1; i24 < 2; ++i24) {
                    i23 -= -14;
                    Test0273.instanceCount -= -125;
                    i19 >>>= (int) Test0273.instanceCount;
                    Test0273.dFld = -202;
                    b2 = true;
                    if (b2) continue;
                    i21 <<= (int) Test0273.instanceCount;
                    Test0273.lArrFld[i20 + 1] += (long) Test0273.dFld;
                    switch (i20 + 56) {
                    case 56:
                        iFld += (int) Test0273.instanceCount;
                        Test0273.instanceCount = i22;
                        break;
                    case 57:
                        iFld += (((i24 * i25) + Test0273.instanceCount) - byFld);
                        try {
                            i23 = (iArrFld[i22 - 1] / i21);
                            i21 = (i24 % iArrFld[i22]);
                            iArrFld[i20 - 1] = (i22 / 29447);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 58:
                        if (b2) continue;
                        break;
                    case 59:
                        switch (((i20 % 9) * 5) + 30) {
                        case 56:
                            fArr1[i22 + 1] = i22;
                            b2 = b2;
                            break;
                        case 44:
                        case 47:
                            Test0273.fFld = iFld;
                            iFld = 94;
                            break;
                        case 63:
                            i25 += (((i24 * i23) + i18) - Test0273.instanceCount);
                            break;
                        case 70:
                            iArrFld = FuzzerUtils.int1array(N, (int)-154);
                            break;
                        case 72:
                            i25 += (int) Test0273.instanceCount;
                        case 36:
                            i23 >>= iFld;
                            break;
                        case 31:
                            Test0273.instanceCount += i19;
                            break;
                        case 50:
                            i26 &= (int) Test0273.instanceCount;
                        }
                        break;
                    case 60:
                        Test0273.fFld += i24;
                        break;
                    case 61:
                        i25 = (int) Test0273.instanceCount;
                        break;
                    case 62:
                        if (b2) continue;
                    case 63:
                    case 64:
                        iFld = iFld1;
                        break;
                    case 65:
                        if (b2) continue;
                    case 66:
                        iFld = i23;
                        break;
                    case 67:
                        sArr[i24] = (short)i20;
                        break;
                    case 68:
                        if (true) break;
                    case 69:
                        Test0273.instanceCount *= i18;
                        break;
                    case 70:
                        Test0273.dFld *= Test0273.instanceCount;
                        break;
                    case 71:
                        i21 -= iFld;
                        break;
                    case 72:
                        Test0273.instanceCount = i22;
                        break;
                    case 73:
                        i26 = (int) Test0273.instanceCount;
                        break;
                    case 74:
                        iArrFld[i24] += 46;
                        break;
                    case 75:
                        i19 += (-36 + (i24 * i24));
                        break;
                    case 76:
                    case 77:
                        i21 *= i25;
                        break;
                    case 78:
                        Test0273.instanceCount += (i24 * i24);
                        break;
                    case 79:
                        if (b2) break;
                        break;
                    case 80:
                        i25 = (int) Test0273.instanceCount;
                        break;
                    case 81:
                        fArr1[i20 + 1] += i24;
                        break;
                    case 82:
                        Test0273.fFld += i27;
                        break;
                    case 83:
                        iFld += iFld2;
                        break;
                    case 84:
                        fArr1[i24 + 1] += i27;
                        break;
                    case 85:
                        iFld2 = (int) Test0273.instanceCount;
                    case 86:
                        i23 = i25;
                        break;
                    case 87:
                        i25 = byFld;
                    case 88:
                        i21 -= -28029;
                        break;
                    case 89:
                    case 90:
                        i27 = (int) Test0273.instanceCount;
                        break;
                    case 91:
                        Test0273.instanceCount = iFld1;
                    case 92:
                        iFld1 ^= i18;
                        break;
                    case 93:
                        iFld += (i24 * i24);
                        break;
                    case 94:
                        Test0273.lArrFld[i22] -= 3438856240L;
                    case 95:
                        iFld2 += (-57 + (i24 * i24));
                        break;
                    case 96:
                        byArr[i20 - 1] += (byte) Test0273.fFld;
                        break;
                    case 97:
                        Test0273.fFld = -12;
                        break;
                    case 98:
                        Test0273.fFld += (((i24 * i20) + i18) - i24);
                    case 99:
                        i25 &= i18;
                    case 100:
                        Test0273.fFld *= iFld;
                        break;
                    case 101:
                        i19 = (int) Test0273.instanceCount;
                        break;
                    case 102:
                    case 103:
                        i25 += (((i24 * sFld) + i18) - Test0273.instanceCount);
                        break;
                    case 104:
                        iFld1 += i23;
                        break;
                    case 105:
                        Test0273.instanceCount += (i24 * i24);
                        break;
                    case 106:
                        Test0273.dFld *= iFld;
                    case 107:
                        Test0273.fFld *= Test0273.instanceCount;
                        break;
                    case 108:
                        i19 = i26;
                    case 109:
                    case 110:
                        Test0273.instanceCount += i24;
                    case 111:
                    case 112:
                        iFld2 |= i20;
                    case 113:
                    case 114:
                        iFld = i27;
                        break;
                    case 115:
                        if (b2) break;
                    case 116:
                        Test0273.instanceCount *= i26;
                        break;
                    case 117:
                        Test0273.dFld += i23;
                        break;
                    case 118:
                        Test0273.fFld -= i23;
                        break;
                    case 119:
                        iArrFld[i20] = i19;
                        break;
                    case 120:
                        Test0273.fFld += (-10L + (i24 * i24));
                        break;
                    case 121:
                        byFld += (byte)iFld;
                        break;
                    case 122:
                        Test0273.instanceCount += (((i24 * i26) + i27) - Test0273.instanceCount);
                        break;
                    case 123:
                        dArrFld[i22 + 1] *= iFld1;
                        break;
                    case 124:
                        i26 *= (int) Test0273.instanceCount;
                        break;
                    case 125:
                    }
                }
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("b2 i24 i25 = " + (b2 ? 1 : 0) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 fArr1 = " + i26 + "," + i27 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("sArr byArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0273.instanceCount Test0273.fFld iFld = " + Test0273.instanceCount + "," +
                Float.floatToIntBits(Test0273.fFld) + "," + iFld);
        FuzzerUtils.out.println("byFld Test0273.dFld iFld1 = " + byFld + "," + Double.doubleToLongBits(Test0273.dFld) + "," +
            iFld1);
        FuzzerUtils.out.println("iFld2 sFld Test0273.lArrFld = " + iFld2 + "," + sFld + "," +
                FuzzerUtils.checkSum(Test0273.lArrFld));
        FuzzerUtils.out.println("iArrFld dArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0273 _instance = new Test0273();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
