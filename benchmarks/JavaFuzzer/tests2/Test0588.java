// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:39 2023
public class Test0588 {

    public static final int N = 400;

    public static long instanceCount=14733L;
    public static float fFld=29.778F;
    public static short sFld=12832;
    public static double[] dArrFld =new double[N];
    public boolean[] bArrFld =new boolean[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0588.dArrFld, 1.99898);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(double d, int i6) {

        int i7=104;
        int i8=-2;
        int i9=215;
        int i10=8;
        int i11=19688;
        int[] iArr =new int[N];
        boolean b=false;

        FuzzerUtils.init(iArr, -17);

        i7 = 1;
        while ((i7 += 3) < 144) {
            i6 = -24;
            i6 -= i6;
            i6 += i7;
        }
        d = i7;
        if (b) {
            for (i8 = 5; 309 > i8; i8++) {
                i9 *= i7;
                Test0588.instanceCount /= 5;
                i6 = i8;
                Test0588.instanceCount += i8;
            }
        } else {
            i10 = 1;
            while (++i10 < 131) {
                i11 = 1;
                while (++i11 < 12) {
                    i9 = (int)d;
                    iArr[i11] -= i9;
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + (b ? 1 : 0) + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i5) {

        byte by=-19;
        double d1=0.9671;
        boolean b1=true;
        long l=25102L;
        long[] lArr =new long[N];
        int i12=-19547, i13=-130, i14=193, i15=-7;

        FuzzerUtils.init(lArr, -89L);

        if (b1) {
            Test0588.dArrFld[(i5 >>> 1) % N] = (by--);
        } else if (b1) {
            lArr[(i5 >>> 1) % N] -= ((i5 + (Test0588.instanceCount * i5)) + iMeth1(d1, i5));
            Test0588.instanceCount &= i5;
        }
        switch (((i5 >>> 1) % 3) + 78) {
        case 78:
            l = 1;
            do {
                for (i12 = (int)(l); i12 < 6; i12++) {
                    for (i14 = 1; i14 < 1; i14++) {
                        by -= (byte)4;
                        Test0588.instanceCount *= i13;
                        i5 *= (int)l;
                        if (true) {
                            Test0588.instanceCount -= i13;
                            Test0588.instanceCount -= i13;
                            Test0588.instanceCount -= l;
                        } else {
                            i15 += (int)-219L;
                        }
                    }
                }
            } while (++l < 283);
            break;
        case 79:
            b1 = b1;
            break;
        case 80:
            i5 = i12;
            break;
        }
        long meth_res = i5 + by + Double.doubleToLongBits(d1) + (b1 ? 1 : 0) + l + i12 + i13 + i14 + i15 +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i2, float f) {

        int i3=145;
        int i4=-4;
        int i16=53598;
        int i17=-14128;
        int i18=-205;
        int i19=-16667;
        int i20=-180;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, 5);

        for (i3 = 8; i3 < 144; i3++) {
            iMeth(0);
            iArr1[i3] = i4;
            i2 *= -13;
        }
        i16 = 1;
        do {
            i4 -= 9;
            for (i17 = 1; 10 > i17; ++i17) {
                iArr1 = iArr1;
            }
            for (i19 = 1; i19 < 10; i19++) {
                Test0588.instanceCount = i17;
                Test0588.instanceCount = -223;
                f -= Test0588.instanceCount;
                i20 -= (int) Test0588.instanceCount;
                i4 += (-29746 + (i19 * i19));
                f -= i17;
            }
        } while (++i16 < 161);
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i4 + i16 + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-2;
        int i1=13;
        int i21=-5;
        int i22=1;
        int i23=6;
        int[] iArr2 =new int[N];
        double d2=118.11561, d3=2.121602;
        long l1=-4705359393792556353L;
        boolean b2=false;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.443F);
        FuzzerUtils.init(iArr2, -37665);

        for (i = 278; i > 16; i -= 3) {
            i1 *= (int)-1283741966392890428L;
            dMeth(i, 59.335F);
            for (i21 = 12; i21 < 288; i21++) {
                i23 = 2;
                do {
                    double d4=-99.126216;
                    i1 >>>= (int) Test0588.instanceCount;
                    i22 ^= i1;
                    d2 -= d3;
                    if (false) {
                        Test0588.instanceCount += 9;
                        Test0588.fFld = (float) d4;
                        i1 += (((i23 * Test0588.instanceCount) + i) - i);
                    } else if (false) {
                        i1 = -52;
                        Test0588.instanceCount = l1;
                        i1 += (187 + (i23 * i23));
                        i22 -= (int)-3769L;
                    } else {
                        fArr[i23] += Test0588.fFld;
                        switch ((((i22 >>> 1) % 5) * 5) + 86) {
                        case 94:
                            iArr2[i23 - 1] ^= (int) Test0588.instanceCount;
                            if (b2) break;
                            break;
                        case 99:
                            Test0588.sFld += (short) (i23 + i1);
                            l1 = Test0588.instanceCount;
                            i1 = i1;
                            break;
                        case 103:
                            iArr2[i - 1] += (int)l1;
                            break;
                        case 108:
                            bArrFld[i] = true;
                            Test0588.fFld -= Test0588.instanceCount;
                            Test0588.instanceCount += (i23 * i);
                            break;
                        case 98:
                            d3 = d2;
                            lArrFld[i23 + 1] -= (long) Test0588.fFld;
                        default:
                            i1 = i22;
                        }
                    }
                } while (--i23 > 0);
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 d2 = " + i22 + "," + i23 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("d3 l1 b2 = " + Double.doubleToLongBits(d3) + "," + l1 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("fArr iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0588.instanceCount Test0588.fFld Test0588.sFld = " + Test0588.instanceCount + "," +
                Float.floatToIntBits(Test0588.fFld) + "," + Test0588.sFld);
        FuzzerUtils.out.println("Test0588.dArrFld bArrFld lArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0588.dArrFld)) + "," + FuzzerUtils.checkSum(bArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0588 _instance = new Test0588();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
