// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:46 2023
public class Test0720 {

    public static final int N = 400;

    public static long instanceCount=-1630067591675922994L;
    public short sFld=19996;
    public static short sFld1=17311;
    public static volatile int iFld=1668;
    public boolean bFld=true;
    public static double dFld=105.60469;
    public boolean bFld1=true;
    public static volatile int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0720.iArrFld, 53972);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, int i7) {

        int i8=8;
        int i9=8;
        int i10=-10;
        int i11=0;
        int i12=-10;
        int i13=-124;
        int[] iArr1 =new int[N];
        byte by=-50;
        float f1=-27.189F;
        long l1=2344758141L;
        long[] lArr1 =new long[N];
        double d1=0.53422;
        boolean b=true;

        FuzzerUtils.init(iArr1, 214);
        FuzzerUtils.init(lArr1, -1047959720L);

        for (i8 = 3; i8 < 154; i8++) {
            i9 += (((i8 * i9) + i8) - Test0720.sFld1);
        }
        iArr1[(i7 >>> 1) % N] *= Test0720.iFld;
        if (b) {
            for (i10 = 1; i10 < 302; i10++) {
                by = (byte) Test0720.instanceCount;
                f1 *= 0.28F;
                lArr1[i10] -= i7;
                for (l1 = 1; l1 < 5; l1++) {
                    for (d1 = 1; 2 > d1; d1++) {
                        i9 >>>= -6;
                        i6 += (int)(d1 + i12);
                        Test0720.instanceCount <<= l1;
                        i7 += 61482;
                        f1 += (float)(d1 * i13);
                    }
                }
            }
            vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + by + Float.floatToIntBits(f1) + l1 + i12 +
                Double.doubleToLongBits(d1) + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                FuzzerUtils.checkSum(lArr1);
            return;
        }
        vMeth1_check_sum += i6 + i7 + i8 + i9 + i10 + i11 + by + Float.floatToIntBits(f1) + l1 + i12 +
            Double.doubleToLongBits(d1) + i13 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth(int i5, double d) {

        boolean b1=true;
        boolean[] bArr =new boolean[N];
        float f2=0.185F;

        FuzzerUtils.init(bArr, false);

        vMeth1(i5, Test0720.iFld);
        Test0720.instanceCount = Test0720.instanceCount;
        Test0720.iFld <<= Test0720.iFld;
        bArr[(i5 >>> 1) % N] = b1;
        if (true) {
            f2 += i5;
        }
        Test0720.iFld >>>= 42936;
        d = i5;
        vMeth_check_sum += i5 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(bArr);
    }

    public static int iMeth(long l) {

        double d2=0.44558;
        float f3=85.237F, f4=0.840F;
        int i14=-13, i15=-221, i16=0, i17=655;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(lArr2, 0L);

        vMeth(Test0720.iFld, d2);
        for (f3 = 228; f3 > 10; --f3) {
            Test0720.iFld %= (int) (l | 1);
            f4 += i14;
            i14 += (int)(f3 * f3);
            Test0720.sFld1 /= (short) (i14 | 1);
            l |= Test0720.iFld;
            l >>>= l;
            d2 -= Test0720.iFld;
            switch (((i14 >>> 1) % 3) + 83) {
            case 83:
                for (i15 = 7; i15 > f3; i15--) {
                    l = i17;
                    i16 = (int)f4;
                    i14 ^= Test0720.iFld;
                    Test0720.iArrFld[i15 - 1] *= (int) f4;
                }
                break;
            case 84:
                lArr2 = lArr2;
            case 85:
                try {
                    Test0720.iArrFld[(int) (f3 + 1)] = (Test0720.iArrFld[(i16 >>> 1) % N] % -37819);
                    i17 = (1786 / Test0720.iArrFld[(int) (f3 - 1)]);
                    Test0720.iArrFld[(int) (f3)] = (Test0720.iFld % -644350154);
                } catch (ArithmeticException a_e) {}
                break;
            }
        }
        long meth_res = l + Double.doubleToLongBits(d2) + Float.floatToIntBits(f3) + i14 + Float.floatToIntBits(f4) +
            i15 + i16 + i17 + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-42986;
        int i1=-56;
        int i2=-190;
        int i3=-2;
        int i4=-29;
        int[] iArr =new int[N];
        float f=-2.1003F;
        byte by1=-16;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(iArr, 49379);
        FuzzerUtils.init(lArr, -37477L);

        for (i = 11; i < 308; ++i) {
            for (i2 = 85; i2 > i; i2--) {
                i4 = 1;
                do {
                    i1 -= (60772 * i3);
                    i1 -= (++iArr[i + 1]);
                    switch ((i4 % 10) + 70) {
                    case 70:
                        lArr[i2 + 1][i2] >>= Test0720.instanceCount;
                        iArr[i] = (int) (i2 + (127.832F * Test0720.instanceCount));
                        lArr[i2][i - 1] -= (long)(lArr[i2 - 1][i + 1] - ((sFld + -4390) + (f++)));
                        break;
                    case 71:
                    case 72:
                        if (bFld) {
                            if ((-iMeth(Test0720.instanceCount)) >= i3) {
                                Test0720.instanceCount = (i1++);
                            }
                            i1 -= (int) Test0720.instanceCount;
                        } else if (bFld) {
                            Test0720.iFld = (int) Test0720.instanceCount;
                            Test0720.iFld += (int) Test0720.instanceCount;
                        } else if (bFld) {
                            if (false) break;
                            i1 = (int) Test0720.instanceCount;
                        } else {
                            Test0720.dFld += i4;
                            i1 += (i4 * i4);
                            if (bFld) continue;
                            i1 = i1;
                        }
                        break;
                    case 73:
                        i1 += (i4 * i4);
                        break;
                    case 74:
                        Test0720.instanceCount += (-40713 + (i4 * i4));
                        bFld = bFld;
                        break;
                    case 75:
                        Test0720.instanceCount += i;
                        break;
                    case 76:
                        i1 <<= by1;
                        f += (((i4 * i) + i4) - f);
                        break;
                    case 77:
                        Test0720.instanceCount += (i4 + Test0720.instanceCount);
                        Test0720.instanceCount = i2;
                        i1 = (int) Test0720.instanceCount;
                        break;
                    case 78:
                        Test0720.iFld >>= i4;
                    case 79:
                        bFld = bFld1;
                        break;
                    default:
                        try {
                            iArr[i4 - 1] = (Test0720.iArrFld[i4 - 1] % i2);
                            i1 = (-146 % i);
                            Test0720.iArrFld[i] = (-9774 % iArr[i4 + 1]);
                        } catch (ArithmeticException a_e) {}
                    }
                } while (++i4 < 1);
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 f = " + i3 + "," + i4 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("by1 iArr lArr = " + by1 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0720.instanceCount sFld Test0720.sFld1 = " + Test0720.instanceCount + "," + sFld + "," +
                Test0720.sFld1);
        FuzzerUtils.out.println("Test0720.iFld bFld Test0720.dFld = " + Test0720.iFld + "," + (bFld ? 1 : 0) + "," +
                Double.doubleToLongBits(Test0720.dFld));
        FuzzerUtils.out.println("bFld1 Test0720.iArrFld = " + (bFld1 ? 1 : 0) + "," + FuzzerUtils.checkSum(Test0720.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0720 _instance = new Test0720();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
