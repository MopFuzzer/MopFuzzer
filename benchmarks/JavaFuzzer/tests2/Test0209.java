// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:22 2023
public class Test0209 {

    public static final int N = 400;

    public static long instanceCount=51584L;
    public static float fFld=61.377F;
    public boolean bFld=true;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0209.lArrFld, 56645L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(double d1, short s, int i5) {

        int i6=-13722;
        int i7=-64783;
        int[] iArr1 =new int[N];
        byte by=100;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)-60);
        FuzzerUtils.init(iArr1, 6);

        try {
            i6 = 1;
            while (++i6 < 258) {
                i5 -= i6;
                by = (byte)i6;
                i7 = 1;
                do {
                    switch (((i7 % 8) * 5) + 94) {
                    case 99:
                        iArr1[i7] -= -27800;
                        i5 -= i7;
                    case 100:
                        s *= (short)d1;
                        Test0209.instanceCount -= 156;
                        Test0209.fFld = i5;
                        break;
                    case 103:
                        i5 -= i7;
                        i5 += (i7 - Test0209.fFld);
                        i5 <<= s;
                    case 112:
                        d1 += Test0209.fFld;
                        break;
                    case 123:
                        byArr[i6 - 1] &= (byte)-210;
                        break;
                    case 105:
                        i5 = (int) Test0209.instanceCount;
                        break;
                    case 97:
                        Test0209.instanceCount &= i7;
                        break;
                    case 130:
                        byArr[i7] += (byte) Test0209.fFld;
                        break;
                    default:
                        Test0209.instanceCount += 7;
                    }
                } while (++i7 < 6);
            }
        }
        catch (ArithmeticException exc1) {
            d1 = i6;
        }
        finally {
            i5 *= i7;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + s + i5 + i6 + by + i7 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth1(int i4) {

        double d2=-2.86025;
        short s1=-22810;
        int i8=-11;
        int i9=-3;
        int i10=-28;
        int i11=-13;
        int[] iArr2 =new int[N];
        byte by2=72;
        boolean[][] bArr =new boolean[N][N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr2, 0);

        vMeth(d2, s1, i4);
        for (i8 = 4; i8 < 176; i8++) {
            switch ((i8 % 8) + 6) {
            case 6:
                d2 *= i4;
                break;
            case 7:
                for (i10 = 1; i10 < 9; i10++) {
                    boolean b=false;
                    switch (((i10 >>> 1) % 4) + 79) {
                    case 79:
                        by2 += (byte) Test0209.instanceCount;
                        break;
                    case 80:
                        if (b) continue;
                        bArr[i8 - 1][i8] = b;
                    case 81:
                        i11 += i10;
                        break;
                    case 82:
                        b = b;
                        i11 += i10;
                        i4 += i11;
                        break;
                    }
                    i9 += (i10 * i11);
                }
                Test0209.instanceCount += (i8 | i8);
                break;
            case 8:
                try {
                    i11 = (i9 / iArr2[i8]);
                    i11 = (-121 / i10);
                    i9 = (54871 / i11);
                } catch (ArithmeticException a_e) {}
                break;
            case 9:
                Test0209.fFld -= i4;
                break;
            case 10:
                Test0209.fFld += ((long) i8 ^ (long) Test0209.instanceCount);
                break;
            case 11:
                Test0209.fFld = Test0209.instanceCount;
                break;
            case 12:
                Test0209.fFld = -213;
            case 13:
                i9 = (int) Test0209.instanceCount;
            default:
                Test0209.fFld += i10;
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d2) + s1 + i8 + i9 + i10 + i11 + by2 + FuzzerUtils.checkSum(bArr)
            + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i2=-49003;
        int i3=-230;
        int i14=2;
        int i15=8;
        int i16=-34;
        int[][] iArr3 =new int[N][N];

        FuzzerUtils.init(iArr3, 43798);

        for (i2 = 18; i2 < 300; ++i2) {
            Test0209.lArrFld[i2 + 1] = iMeth1(i2);
            Test0209.fFld = i2;
            Test0209.instanceCount -= Test0209.instanceCount;
            for (i14 = 6; 1 < i14; --i14) {
                Test0209.instanceCount += (i14 * i14);
            }
            Test0209.fFld += i3;
        }
        Test0209.instanceCount <<= i14;
        Test0209.lArrFld = Test0209.lArrFld;
        iArr3[(7 >>> 1) % N][(i14 >>> 1) % N] = i14;
        i15 = i2;
        i16 = 346;
        do {
            i15 = i15;
            Test0209.instanceCount += i3;
            i15 = i15;
        } while (--i16 > 0);
        long meth_res = i2 + i3 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=0.681F;
        int i=-33523;
        int i1=44556;
        int i17=-4;
        int i18=129;
        int i19=-79;
        int i20=-266;
        int i21=-3943;
        int[] iArr =new int[N];
        double d=1.126864;
        byte by3=-58;

        FuzzerUtils.init(iArr, 58900);

        f = (Test0209.instanceCount + (Test0209.instanceCount--));
        for (i = 3; i < 244; ++i) {
            switch ((((i1--) >>> 1) % 2) + 18) {
            case 18:
                f += (float)((d++) * (-(--f)));
                break;
            case 19:
                iArr[i - 1] += (int) (((i1 |= i1) * i1) - (++Test0209.instanceCount));
                Test0209.lArrFld[i - 1] /= ((long) (d) | 1);
            default:
                iArr[i] = (int)(((i1--) - (i + -11)) - (d + iMeth()));
                i1 += i1;
                for (i17 = i; i17 < 104; i17 += 3) {
                    for (i19 = 1; i19 < 1; i19++) {
                        short s2=14189;
                        i18 += (30892 + (i19 * i19));
                        by3 = (byte) Test0209.instanceCount;
                        i20 = i18;
                        Test0209.instanceCount = Test0209.instanceCount;
                        by3 += (byte)(i19 + i20);
                        switch (((i18 >>> 1) % 1) + 17) {
                        case 17:
                            s2 -= s2;
                            Test0209.instanceCount += (53452L + (i19 * i19));
                            i1 += (((i19 * i18) + i19) - i20);
                            Test0209.instanceCount += i19;
                        default:
                            Test0209.instanceCount += i19;
                        }
                        i1 >>= by3;
                    }
                    i18 = i20;
                    if (bFld) break;
                    if (bFld) break;
                    i1 += (((i17 * f) + i19) - Test0209.instanceCount);
                    i18 += i17;
                }
            }
            i21 = 1;
            do {
                i20 *= (int) Test0209.instanceCount;
                Test0209.instanceCount -= (long) f;
            } while (++i21 < 104);
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("d i17 i18 = " + Double.doubleToLongBits(d) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by3 = " + i19 + "," + i20 + "," + by3);
        FuzzerUtils.out.println("i21 iArr = " + i21 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0209.instanceCount Test0209.fFld bFld = " + Test0209.instanceCount + "," +
                Float.floatToIntBits(Test0209.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0209.lArrFld = " + FuzzerUtils.checkSum(Test0209.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0209 _instance = new Test0209();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
