// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0446 {

    public static final int N = 400;

    public static volatile long instanceCount=-110809052992386038L;
    public static float fFld=2.481F;
    public static volatile byte byFld=-39;
    public static byte[] byArrFld =new byte[N];
    public static long[][] lArrFld =new long[N][N];
    public volatile long[] lArrFld1 =new long[N];

    static {
        FuzzerUtils.init(Test0446.byArrFld, (byte) -95);
        FuzzerUtils.init(Test0446.lArrFld, -10L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(float f, int i6) {

        int i7=-14, i8=-14, i9=6, i10=-226;
        double d2=0.104598;
        short s2=-25572;
        boolean b=false;

        i6 += (int) Test0446.instanceCount;
        Test0446.instanceCount = (long) f;
        Test0446.fFld += i6;
        i6 = (int)f;
        i6 = (int)11L;
        i6 += i6;
        for (i7 = 3; i7 < 195; i7++) {
            for (i9 = 1; i9 < 8; i9++) {
                d2 = 1;
                while (++d2 < 2) {
                    Test0446.byArrFld[i7 - 1] <<= (byte) Test0446.instanceCount;
                    Test0446.instanceCount = s2;
                    if (b) {
                        Test0446.lArrFld[i7 + 1][i9 + 1] += -138;
                        i8 = (int)f;
                    }
                    i6 += (int) Test0446.fFld;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d2) + s2 + (b ? 1 :
            0);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1(int i2, int i3, int i4) {

        double d=10.41446, d1=24.35841;
        short s1=-7735;
        int i5=1;
        int i11=-129;
        int i12=49014;
        int[] iArr =new int[N];
        long l=-138L;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -635276461L);
        FuzzerUtils.init(iArr, 0);

        lArr[(i3 >>> 1) % N] *= (long)Math.abs(d);
        if (Double.longBitsToDouble((i2 * i3) + i3) != i4) {
            Test0446.fFld += (Test0446.byArrFld[(i4 >>> 1) % N] += (byte) (Test0446.byFld + i2));
        } else {
            s1 |= (short) (((-163L - (++Test0446.fFld)) + (i4 - i2)) - (++Test0446.fFld));
        }
        for (d1 = 133; d1 > 4; d1 -= 3) {
            Test0446.instanceCount += (long) fMeth(Test0446.fFld, i4);
        }
        i11 = 1;
        while (++i11 < 311) {
            Test0446.instanceCount <<= i11;
            i3 = (int)-238L;
            lArr[i11 - 1] >>>= Test0446.instanceCount;
            for (l = 1; l < 5; ++l) {
                iArr[i11 - 1] = 1;
                i4 = (int)d1;
                i2 += (int)(l ^ i4);
                i4 >>= i2;
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d) + s1 + Double.doubleToLongBits(d1) + i5 + i11 + l
            + i12 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(short s) {

        int i=0, i1=-249, i13=4, i14=188, i15=21805, i16=9261;
        double d3=-1.106999;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, 2.521F);

        for (i = 4; 178 > i; i++) {
            vMeth1(i1, i1, i);
            i1 += (((i * i) + i1) - i1);
            d3 = i1;
            for (i13 = 1; i13 < 9; ++i13) {
                i1 += (int) Test0446.fFld;
            }
            i14 -= (int) Test0446.instanceCount;
            i14 += (i ^ (long) Test0446.fFld);
            i14 &= i13;
            Test0446.fFld += i14;
        }
        i14 = i1;
        fArr[(i14 >>> 1) % N][(i14 >>> 1) % N] = -9;
        for (i15 = 8; 254 > i15; i15++) {
            i1 *= (int)10L;
            Test0446.instanceCount += (long) Test0446.fFld;
        }
        vMeth_check_sum += s + i + i1 + Double.doubleToLongBits(d3) + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        short s3=18038;
        double d4=1.22965, d5=1.71920;
        int i17=-6;
        int i18=-9;
        int i19=-17477;
        int i20=-20219;
        int i21=-138;
        int i22=14;
        int i23=73;
        int i24=8;
        int i25=29518;
        int i26=5;
        int[][] iArr1 =new
                    int[N][N];
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 2.155F);
        FuzzerUtils.init(iArr1, -9);

        vMeth(s3);
        d4 = 1;
        do {
            i17 = 1;
            do {
                i18 = i18;
                for (i19 = i17; i19 < 1; i19++) {
                    i20 += (i19 * Test0446.fFld);
                    i20 += (((i19 * i17) + i19) - i20);
                    i20 -= i17;
                    i18 <<= (int) Test0446.instanceCount;
                    d5 %= (i20 | 1);
                }
                for (i21 = i17; i21 < 1; ++i21) {
                    fArr1[i17 - 1] *= i21;
                    Test0446.lArrFld[(int) (d4 + 1)][i17] = Test0446.instanceCount;
                    Test0446.instanceCount += i21;
                    try {
                        iArr1[(int)(d4)][(int)(d4)] = (-38595994 / i21);
                        i22 = (i18 % i20);
                        i18 = (i20 / -2024066470);
                    } catch (ArithmeticException a_e) {}
                    Test0446.fFld -= i19;
                }
                i20 = i18;
                i18 = i17;
                i22 -= i21;
                for (i23 = 1; i23 < 1; i23 += 3) {
                    i18 += (((i23 * i24) + i20) - i21);
                }
            } while (++i17 < 105);
            switch ((int)((d4 % 5) + 22)) {
            case 22:
                Test0446.instanceCount += (long) d5;
            case 23:
                i24 -= i20;
            case 24:
                i20 -= i24;
                i25 = 1;
                while (++i25 < 105) {
                    Test0446.lArrFld[i25 + 1][(int) (d4 - 1)] = 34665;
                }
                i26 = 1;
                while (++i26 < 105) {
                    Test0446.instanceCount = i19;
                    d5 = Test0446.fFld;
                }
                break;
            case 25:
                iArr1[(int)(d4 - 1)][(int)(d4 + 1)] *= i25;
            case 26:
                Test0446.instanceCount += (long) Test0446.fFld;
            }
        } while (++d4 < 240);

        FuzzerUtils.out.println("s3 d4 i17 = " + s3 + "," + Double.doubleToLongBits(d4) + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d5 i21 i22 = " + Double.doubleToLongBits(d5) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 fArr1 iArr1 = " + i26 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))
            + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0446.instanceCount Test0446.fFld Test0446.byFld = " + Test0446.instanceCount + "," +
                Float.floatToIntBits(Test0446.fFld) + "," + Test0446.byFld);
        FuzzerUtils.out.println("Test0446.byArrFld Test0446.lArrFld lArrFld1 = " + FuzzerUtils.checkSum(Test0446.byArrFld) + "," +
                FuzzerUtils.checkSum(Test0446.lArrFld) + "," + FuzzerUtils.checkSum(lArrFld1));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0446 _instance = new Test0446();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
