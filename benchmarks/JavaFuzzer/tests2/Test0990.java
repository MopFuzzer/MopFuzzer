// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:58 2023
public class Test0990 {

    public static final int N = 400;

    public static long instanceCount=1051836892L;
    public static boolean bFld=false;
    public static byte byFld=3;
    public static float fFld=-71.676F;

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i10, long l1) {

        float f2=24.17F;
        float[] fArr =new float[N];
        double d1=2.97579;
        int i11=-12032;
        int i12=45;
        int i13=53934;
        int[] iArr =new int[N];
        boolean[] bArr =new boolean[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, -165);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 3758443171267695991L);
        FuzzerUtils.init(fArr, 77.808F);

        i10 = (int)f2;
        iArr[(i10 >>> 1) % N] = i10;
        d1 = Test0990.byFld;
        for (i11 = 162; i11 > 1; i11--) {
            iArr[i11 + 1] = -124;
            i12 -= i10;
            i12 += i11;
            d1 = 7396;
            l1 = l1;
            switch ((i11 % 5) + 10) {
            case 10:
                i12 *= (int) Test0990.instanceCount;
                i13 = 1;
                while (++i13 < 10) {
                    bArr[i11 - 1] = true;
                    lArr[i13 + 1] <<= -33682;
                    fArr[i11 - 1] = i13;
                }
            case 11:
                i10 += (((i11 * i12) + i10) - i13);
                break;
            case 12:
                lArr[i11 + 1] <<= i12;
                break;
            case 13:
                d1 = i10;
                break;
            case 14:
            default:
                if (Test0990.bFld) continue;
            }
        }
        long meth_res = i10 + l1 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5, float f1, long l) {

        int i6=35, i7=146, i8=-184, i9=64477, i14=-4, i15=-166, i16=6;

        for (i6 = 8; i6 < 387; ++i6) {
            for (i8 = 1; i8 < 4; ++i8) {
                i5 -= i7;
                i9 = i8;
                i9 >>>= (int)(i9 * ((l * i5) + iMeth(-181, l)));
                i9 += (-238 + (i8 * i8));
                i7 += (((i8 * i8) + i9) - f1);
            }
            for (i14 = i6; 4 > i14; ++i14) {
                i5 += (((i14 * i14) + Test0990.instanceCount) - Test0990.instanceCount);
                i15 += (((i14 * i5) + Test0990.instanceCount) - i8);
                i16 = 1;
                do {
                    i9 += i16;
                    l = 62346;
                } while (++i16 < 1);
                i15 -= i5;
                i5 -= i6;
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + l + i6 + i7 + i8 + i9 + i14 + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(double d, int i3, int i4) {

        float f=-120.787F;
        int i17=63178;
        int i18=-7461;
        int i19=8909;
        int i20=-50390;
        int[] iArr1 =new int[N];
        short s=14027;

        FuzzerUtils.init(iArr1, 15791);

        Test0990.bFld = ((-(i3 ^= i3)) != ((i3--) % ((long) (f) | 1)));
        Test0990.instanceCount = (lMeth(i3, -1.217F, Test0990.instanceCount) + Test0990.instanceCount);
        for (i17 = 15; 386 > i17; ++i17) {
            Test0990.instanceCount += i17;
            f += 26246;
            s += (short)i17;
            for (i19 = 1; 5 > i19; ++i19) {
                if (i4 != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f) + i17 + i18 + s +
                        i19 + i20 + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                iArr1[i19] *= i3;
                f = -2206166173L;
                switch ((i17 % 1) + 85) {
                case 85:
                    i20 <<= (int) Test0990.instanceCount;
                    i20 = (int) Test0990.instanceCount;
                    i3 >>= i3;
                    break;
                default:
                    Test0990.instanceCount += (i19 | i17);
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i3 + i4 + Float.floatToIntBits(f) + i17 + i18 + s + i19 + i20 +
            FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=153;
        int i1=-181;
        int i2=-7;
        int i21=-10;
        int i22=-14;
        int i23=-9;
        int i24=-12;
        int i25=-26355;
        int i26=-228;
        int i27=-191;
        int i28=-7111;
        int i29=3;
        int i30=46;
        int[] iArr2 =new int[N];
        double d2=39.95951;
        float f3=0.998F;
        float[] fArr1 =new float[N];
        byte by=-55;

        FuzzerUtils.init(fArr1, -17.766F);
        FuzzerUtils.init(iArr2, 91);

        for (i = 9; i < 319; i++) {
            i1 |= (-(i2--));
            i2 -= i1;
            vMeth(d2, i1, 2);
            i2 += i2;
            for (f3 = 4; f3 < 81; f3++) {
                i2 -= i;
                for (i22 = 2; i22 > f3; i22 -= 2) {
                    Test0990.instanceCount = Test0990.instanceCount;
                }
                Test0990.fFld *= 12783;
                fArr1 = FuzzerUtils.float1array(N, (float)-77.211F);
                Test0990.instanceCount = by;
                for (i24 = 1; i24 < 2; ++i24) {
                    i25 *= (int)175L;
                    iArr2[(int)(f3)] = i;
                    d2 = f3;
                    Test0990.fFld = Test0990.instanceCount;
                    iArr2[i - 1] >>= i22;
                    Test0990.instanceCount += (i24 * i24);
                    i23 += i1;
                    Test0990.instanceCount += i24;
                    iArr2[i + 1] >>= i24;
                    iArr2[(int)(f3)] -= by;
                }
                i2 += i1;
                i23 += i25;
            }
            for (i26 = 4; i26 < 81; i26++) {
                i25 *= (int) Test0990.instanceCount;
                for (i28 = 1; i28 < 2; ++i28) {
                    i29 *= i1;
                    i2 += (i28 ^ i30);
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d2 f3 i21 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f3) + "," +
            i21);
        FuzzerUtils.out.println("i22 i23 by = " + i22 + "," + i23 + "," + by);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 fArr1 iArr2 = " + i30 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1))
            + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0990.instanceCount Test0990.bFld Test0990.byFld = " + Test0990.instanceCount + "," + (Test0990.bFld ?
                1 : 0) + "," + Test0990.byFld);
        FuzzerUtils.out.println("Test0990.fFld = " + Float.floatToIntBits(Test0990.fFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0990 _instance = new Test0990();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
