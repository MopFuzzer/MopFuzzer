// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0068 {

    public static final int N = 400;

    public static volatile long instanceCount=-3522042957L;
    public static short sFld=-14667;
    public static float fFld=-2.1003F;
    public static double dFld=-2.88371;
    public static int iFld=0;
    public static float[][] fArrFld =new float[N][N];
    public static int[][] iArrFld =new int[N][N];

    static {
        FuzzerUtils.init(Test0068.fArrFld, 2.788F);
        FuzzerUtils.init(Test0068.iArrFld, 28645);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(boolean b, int i6) {

        int i7=-45261;
        int i8=-118;
        int i9=6;
        int i10=7;
        int i11=11;
        int i12=3;
        int i13=7;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, -9);

        i7 = 139;
        while (--i7 > 0) {
            i6 += i7;
            Test0068.instanceCount = i6;
            i8 <<= 182;
            if (i7 != 0) {
            }
            i6 += (i7 + i8);
        }
        i9 = 1;
        while (++i9 < 209) {
            switch (((i8 >>> 1) % 7) + 20) {
            case 20:
                for (i10 = 1; 8 > i10; ++i10) {
                    for (i12 = i9; i12 < 2; i12++) {
                        i8 = i8;
                        switch (((-18991 >>> 1) % 2) + 34) {
                        case 34:
                            i8 *= 2671;
                            break;
                        case 35:
                            i11 = i7;
                            break;
                        }
                        iArr1[i10] += i7;
                    }
                }
                break;
            case 21:
                i6 <<= (int) Test0068.instanceCount;
                break;
            case 22:
                i8 += (i9 + i7);
                break;
            case 23:
                b = b;
                break;
            case 24:
                Test0068.instanceCount <<= i9;
                break;
            case 25:
                Test0068.instanceCount += (((i9 * Test0068.instanceCount) + i9) - Test0068.sFld);
                break;
            case 26:
                Test0068.instanceCount ^= 5;
            }
        }
        long meth_res = (b ? 1 : 0) + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1() {

        double d=-18.61866;
        int i4=39161, i5=106, i15=11226, i16=2;
        float f=0.800F;
        boolean b1=false;

        for (d = 3; d < 179; d += 3) {
            i4 += (int) Test0068.instanceCount;
            i4 += (int) (d * Test0068.sFld);
        }
        for (f = 16; f < 377; ++f) {
            Test0068.instanceCount <<= (lMeth(b1, i4) - i5);
            for (i15 = 1; i15 < 5; i15++) {
                Test0068.instanceCount += (i15 | Test0068.instanceCount);
                Test0068.instanceCount += (((i15 * Test0068.sFld) + Test0068.instanceCount) - i15);
                Test0068.fFld += i16;
                Test0068.fFld *= i16;
                Test0068.fArrFld[(int) (f)][i15] *= i15;
                i5 += (i15 * i15);
            }
            Test0068.instanceCount += (long) (((f * Test0068.instanceCount) + i5) - Test0068.instanceCount);
            b1 = b1;
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f) + i5 + (b1 ? 1 : 0) + i15 + i16;
    }

    public static void vMeth() {

        int i2=-2, i3=39401, i17=-197, i18=-161, i19=31386;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -702856843L);

        for (i2 = 7; i2 < 358; i2++) {
            Test0068.instanceCount *= ((-Test0068.instanceCount) + Test0068.instanceCount);
            vMeth1();
            Test0068.dFld += Test0068.instanceCount;
            for (i17 = i2; i17 < 5; ++i17) {
                i19 = 1;
                do {
                    lArr[i2 + 1] = i19;
                    Test0068.instanceCount *= 8;
                    Test0068.iArrFld[i19 + 1] = FuzzerUtils.int1array(N, (int) 57125);
                    i3 += (i19 * i19);
                    Test0068.fFld -= i19;
                    i3 += (i19 - Test0068.instanceCount);
                } while (++i19 < 1);
                Test0068.instanceCount = i18;
                Test0068.instanceCount += i3;
                Test0068.iArrFld[i17][i2] = 6;
            }
        }
        vMeth_check_sum += i2 + i3 + i17 + i18 + i19 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-46927;
        int i1=-212;
        int i20=-3;
        int i21=-9;
        int i22=-90;
        int i23=151;
        int i24=7;
        int i25=-4;
        int i26=12;
        int i27=-3957;
        int[] iArr =new int[N];
        boolean b2=false;
        float f1=3.189F;
        byte by=126;
        byte[] byArr =new byte[N];
        long l=-165L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, -4);
        FuzzerUtils.init(lArr1, 11L);
        FuzzerUtils.init(byArr, (byte)86);

        for (i = 3; i < 208; i++) {
            i1 += (((i * Test0068.instanceCount) + Test0068.sFld) - Test0068.instanceCount);
            iArr = (iArr = (iArr = (iArr = iArr)));
        }
        vMeth();
        for (i20 = 7; i20 < 124; i20++) {
            for (i22 = 10; i22 < 214; i22++) {
                Test0068.instanceCount -= i;
                i1 = (int) Test0068.fFld;
                i1 += i22;
                i23 -= (int) Test0068.fFld;
                try {
                    i23 = (-1232912749 % i22);
                    i21 = (i22 / -3210);
                    i1 = (Test0068.iArrFld[i22 + 1][i20 + 1] / 299744564);
                } catch (ArithmeticException a_e) {}
                lArr1[i22] -= i;
                i1 += i22;
            }
            if (b2) {
                for (i24 = i20; i24 < 214; ++i24) {
                    i21 += (i24 - Test0068.instanceCount);
                    iArr[(i22 >>> 1) % N] += (int) Test0068.fFld;
                    byArr[i24] = (byte)41846;
                }
                b2 = b2;
            }
        }
        for (f1 = 2; f1 < 273; ++f1) {
            byArr[(int) (f1 + 1)] *= (byte) Test0068.iFld;
            Test0068.fFld -= (float) Test0068.dFld;
            iArr[(int)(f1)] += by;
            if (b2) break;
            for (l = 5; l < 93; ++l) {
                i23 /= (int) (Test0068.instanceCount | 1);
                Test0068.fFld = i27;
            }
            if (b2) continue;
            i26 += (int)(0.723F + (f1 * f1));
            try {
                Test0068.iArrFld[(int) (f1 + 1)][(int) (f1 + 1)] = (i23 / i24);
                iArr[(int)(f1 - 1)] = (i23 / i1);
                i23 = (-94 % i21);
            } catch (ArithmeticException a_e) {}
        }

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 b2 = " + i24 + "," + i25 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("f1 i26 by = " + Float.floatToIntBits(f1) + "," + i26 + "," + by);
        FuzzerUtils.out.println("l i27 iArr = " + l + "," + i27 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 byArr = " + FuzzerUtils.checkSum(lArr1) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0068.instanceCount Test0068.sFld Test0068.fFld = " + Test0068.instanceCount + "," + Test0068.sFld +
                "," + Float.floatToIntBits(Test0068.fFld));
        FuzzerUtils.out.println("Test0068.dFld Test0068.iFld Test0068.fArrFld = " + Double.doubleToLongBits(Test0068.dFld) + "," +
                Test0068.iFld + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0068.fArrFld)));
        FuzzerUtils.out.println("Test0068.iArrFld = " + FuzzerUtils.checkSum(Test0068.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0068 _instance = new Test0068();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
