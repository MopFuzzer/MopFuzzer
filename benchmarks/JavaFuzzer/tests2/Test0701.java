// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:44 2023
public class Test0701 {

    public static final int N = 400;

    public static long instanceCount=-575L;
    public int iFld=-207;
    public double dFld=1.83219;
    public static int iFld1=11;
    public static int iFld2=-3;
    public static boolean bFld=true;
    public static volatile double dFld1=-2.18171;
    public int[] iArrFld =new int[N];
    public static int[][] iArrFld1 =new int[N][N];

    static {
        FuzzerUtils.init(Test0701.iArrFld1, -8);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static void vSmallMeth(double d, int i) {


        Test0701.instanceCount /= 4;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i;
    }

    public static double dMeth(float f4, int i5, long l) {

        int i6=-142, i7=-214, i8=29827, i9=24943, i10=64375, i11=87, i12=75, i13=38821;
        byte by1=-86;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 629483269L);

        for (i6 = 5; 266 > i6; i6++) {
            i8 = 1;
            while (++i8 < 6) {
                i7 += Test0701.iFld1;
            }
        }
        i9 = 1;
        while (++i9 < 166) {
            Test0701.instanceCount = (long) f4;
            for (i10 = 1; i10 < 10; i10++) {
                Test0701.iFld1 -= i11;
                l *= i6;
                Test0701.iArrFld1[i9] = FuzzerUtils.int1array(N, (int) 0);
                i7 <<= Test0701.iFld1;
                Test0701.iArrFld1[i10 - 1][i9 - 1] *= (int) l;
            }
            lArr[i9 - 1] = i11;
        }
        for (i12 = 3; i12 < 244; i12++) {
            f4 *= l;
            f4 += by1;
        }
        long meth_res = Float.floatToIntBits(f4) + i5 + l + i6 + i7 + i8 + i9 + i10 + i11 + i12 + i13 + by1 +
            FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static short sMeth() {

        float f2=5.178F, f3=0.478F;
        int i1=57159, i2=-102, i3=62948, i4=-24496, i14=-14;
        short s1=-32473;
        byte by=64;
        boolean b=false;
        long l1=-174L;

        for (f2 = 3; f2 < 388; f2++) {
            i1 &= (s1++);
            i2 = 1;
            do {
                for (i3 = i2; i3 < 1; i3++) {
                    f3 += by;
                    dMeth(f3, i2, Test0701.instanceCount);
                    Test0701.instanceCount += (i3 * i3);
                    f3 += (11 + (i3 * i3));
                    Test0701.iFld1 = Test0701.iFld2;
                    Test0701.iArrFld1[(int) (f2 - 1)][i2] = Test0701.iFld1;
                    Test0701.iFld1 += (i3 | i1);
                    switch ((i2 % 8) + 68) {
                    case 68:
                        i14 >>= (int) Test0701.instanceCount;
                        if (b) continue;
                        i14 += (i3 * i3);
                        break;
                    case 69:
                        i4 >>= (int) Test0701.instanceCount;
                    case 70:
                        if (b) break;
                    case 71:
                        i1 += i3;
                        break;
                    case 72:
                        b = b;
                        break;
                    case 73:
                        i14 += i3;
                    case 74:
                        Test0701.instanceCount += l1;
                        break;
                    case 75:
                        Test0701.iArrFld1[i2 - 1][i2 - 1] *= 19673;
                        break;
                    default:
                        i1 = 43;
                    }
                }
            } while (++i2 < 4);
        }
        long meth_res = Float.floatToIntBits(f2) + i1 + s1 + i2 + i3 + i4 + Float.floatToIntBits(f3) + by + i14 + (b ?
            1 : 0) + l1;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static long lMeth(float f, float f1) {

        int i15=-153, i16=3, i17=125, i18=251, i19=3732, i20=36019, i21=-12;
        short s2=-22459;
        long[] lArr1 =new long[N];
        float[] fArr =new float[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr1, -7L);
        FuzzerUtils.init(fArr, 22.486F);
        FuzzerUtils.init(dArr, 2.28900);

        sMeth();
        for (i15 = 12; i15 < 267; ++i15) {
            Test0701.iFld1 = Test0701.iFld1;
            switch ((i15 % 1) + 47) {
            case 47:
                lArr1[i15 + 1] += Test0701.iFld2;
                break;
            }
            for (i17 = 1; i17 < 6; i17 += 3) {
                i16 += i16;
                Test0701.instanceCount >>= i17;
            }
            i19 = 1;
            do {
                i18 += i19;
                for (i20 = 1; 1 > i20; i20++) {
                    switch ((((i17 >>> 1) % 7) * 5) + 11) {
                    case 28:
                        Test0701.iArrFld1[i20 + 1] = Test0701.iArrFld1[i20];
                        fArr[i19] += Test0701.instanceCount;
                        i16 = Test0701.iFld2;
                    case 32:
                        Test0701.iArrFld1[i20 - 1][i20 + 1] -= Test0701.iFld1;
                        break;
                    case 26:
                        i21 = (int) Test0701.instanceCount;
                        break;
                    case 42:
                        dArr[i19 - 1] *= Test0701.instanceCount;
                        break;
                    case 23:
                        if (Test0701.bFld) continue;
                        break;
                    case 43:
                        s2 = (short) Test0701.dFld1;
                        break;
                    case 40:
                        Test0701.instanceCount -= (long) f1;
                    }
                }
            } while (++i19 < 6);
        }
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + i19 + i20 + i21 +
            s2 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=28306;
        float f5=-34.951F;
        int i22=151;
        int i23=-17091;
        int i24=-30;
        int i25=3;
        int i26=-210;
        int i27=8;
        int i28=-57167;
        int[] iArr =new int[N];
        long l2=32728764109932083L;

        FuzzerUtils.init(iArr, -41);

        iFld = iFld;
        Test0701.instanceCount -= iArrFld[(iFld >>> 1) % N];
        for (int smallinvoc=0; smallinvoc<746; smallinvoc++) vSmallMeth(dFld = (iArrFld[(iFld >>> 1) % N] +
                (-(Test0701.instanceCount * s))), (int) (lMeth(f5, f5) * Test0701.iFld1));
        for (i22 = 2; i22 < 345; i22++) {
            Test0701.dFld1 += i22;
            for (i24 = i22; 73 > i24; i24++) {
                Test0701.iFld2 += i24;
                i25 += (i24 ^ Test0701.iFld1);
                Test0701.instanceCount = 52828;
                try {
                    i23 = (i24 % -801031235);
                    Test0701.iFld2 = (iFld % -711597691);
                    Test0701.iFld2 = (Test0701.iArrFld1[i22 + 1][i22] % i22);
                } catch (ArithmeticException a_e) {}
                switch ((i22 % 3) + 56) {
                case 56:
                    iFld *= i25;
                    switch (((i24 % 2) * 5) + 51) {
                    case 59:
                        i23 = iFld;
                        for (i26 = 1; i26 < 1; ++i26) {
                            Test0701.instanceCount = Test0701.iFld1;
                            Test0701.iArrFld1[(-166 >>> 1) % N][i26] *= 36;
                            i27 -= i24;
                            f5 -= i27;
                            switch (((i26 % 2) * 5) + 79) {
                            case 88:
                                Test0701.iFld1 -= i26;
                                Test0701.instanceCount -= i26;
                            case 82:
                                Test0701.instanceCount += (i26 ^ Test0701.iFld2);
                                if (false) break;
                            }
                            i23 -= i22;
                            f5 += i23;
                        }
                        dFld += i26;
                        break;
                    case 55:
                        for (l2 = 1; l2 > 1; --l2) {
                            iArrFld[i22 + 1] += (int)f5;
                            iArr[(int)(l2)] += (int)f5;
                        }
                        break;
                    }
                case 57:
                    dFld %= (i27 | 1);
                    break;
                case 58:
                    try {
                        iFld = (iArr[i22] / -19133);
                        Test0701.iFld2 = (i25 / i24);
                        Test0701.iFld1 = (iArr[i24 + 1] / 79);
                    } catch (ArithmeticException a_e) {}
                    break;
                }
            }
        }

        FuzzerUtils.out.println("s f5 i22 = " + s + "," + Float.floatToIntBits(f5) + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 l2 = " + i26 + "," + i27 + "," + l2);
        FuzzerUtils.out.println("i28 iArr = " + i28 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0701.instanceCount iFld dFld = " + Test0701.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0701.iFld1 Test0701.iFld2 Test0701.bFld = " + Test0701.iFld1 + "," + Test0701.iFld2 + "," + (Test0701.bFld
            ? 1 : 0));
        FuzzerUtils.out.println("Test0701.dFld1 iArrFld Test0701.iArrFld1 = " + Double.doubleToLongBits(Test0701.dFld1) + "," +
                FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test0701.iArrFld1));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0701 _instance = new Test0701();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  sMeth ->  sMeth lMeth mainTest
//DEBUG  dMeth ->  dMeth sMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
