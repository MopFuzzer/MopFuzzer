// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:26 2023
public class Test0299 {

    public static final int N = 400;

    public static long instanceCount=-2470211995L;
    public static boolean bFld=true;
    public static short sFld=24744;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vSmallMeth(float f) {

        int i=3;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 3);

        iArr[(i >>> 1) % N] *= iArr[(i >>> 1) % N];
        Test0299.instanceCount = (++i);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth2(boolean b, long l1) {

        float f1=1.59F;
        int i4=-58055;
        int i5=57953;
        int i6=-47;
        int i7=9;
        int i8=42539;
        int i9=-25945;
        int i10=13;
        int i11=168;
        int[] iArr1 =new int[N];
        double d=-1.84489;
        byte by=-65;

        FuzzerUtils.init(iArr1, -2);

        f1 += i4;
        i4 *= (int) Test0299.instanceCount;
        f1 *= (float)d;
        for (i5 = 340; i5 > 7; i5--) {
            l1 = i5;
            try {
                i6 = (i4 % 1542295592);
                i4 = (i4 % iArr1[i5 - 1]);
                iArr1[i5 - 1] = (iArr1[i5] % 49461);
            } catch (ArithmeticException a_e) {}
            for (i7 = 1; 5 > i7; i7++) {
                l1 -= i4;
                i4 += (i7 - by);
                i4 = i4;
            }
            i4 |= (int) Test0299.instanceCount;
            for (i9 = 1; 5 > i9; i9++) {
                d += i11;
                iArr1 = FuzzerUtils.int1array(N, (int)13);
                iArr1[i9 - 1] *= i7;
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + l1 + Float.floatToIntBits(f1) + i4 + Double.doubleToLongBits(d) + i5 + i6 +
            i7 + i8 + by + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i2, int i3, long l) {

        int i12=5;
        int i13=-131;
        int i14=24443;
        int i15=41382;
        int i16=206;
        int i17=38484;
        int[] iArr2 =new int[N];
        byte by1=-120;
        float f2=44.846F;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr2, -253);
        FuzzerUtils.init(sArr, (short)-21239);

        vMeth2(Test0299.bFld, Test0299.instanceCount);
        iArr2[(46 >>> 1) % N] = (int) Test0299.instanceCount;
        iArr2[(i3 >>> 1) % N] += -189;
        i3 += i3;
        if (Test0299.bFld) {
            for (i12 = 288; i12 > 1; i12 -= 2) {
                i13 += i12;
                for (i14 = 1; i14 < 11; ++i14) {
                    i3 = i2;
                    Test0299.instanceCount *= by1;
                    Test0299.sFld += (short) i14;
                    switch (((i14 % 2) * 5) + 110) {
                    case 116:
                        for (i16 = 1; i16 < 2; i16++) {
                            i17 += (i16 | Test0299.sFld);
                        }
                        if (Test0299.bFld) break;
                        break;
                    case 117:
                        iArr2[i12] = (int)f2;
                        break;
                    default:
                        sArr[i12 + 1] *= (short)i15;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + l + i12 + i13 + i14 + i15 + by1 + i16 + i17 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(int i1) {

        int i18=-228, i19=-20091, i20=-158, i21=22142, i22=0, i23=-10;
        double d1=-1.97145;

        vMeth1(i1, i1, 6L);
        for (i18 = 18; i18 < 352; ++i18) {
            for (i20 = 5; i20 > 1; i20--) {
                switch ((i20 % 7) + 113) {
                case 113:
                    i21 += (((i20 * i20) + i21) - i1);
                    Test0299.bFld = false;
                    break;
                case 114:
                    i19 += (int) Test0299.instanceCount;
                case 115:
                    i19 |= i21;
                    i1 >>= i18;
                    break;
                case 116:
                    Test0299.bFld = Test0299.bFld;
                    for (i22 = 1; i22 < 2; ++i22) {
                        i19 = i20;
                        i1 -= i21;
                        Test0299.instanceCount += (i22 * i22);
                        d1 = Test0299.instanceCount;
                    }
                    break;
                case 117:
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + i18 + i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d1);
                        return;
                    }
                    break;
                case 118:
                    d1 -= 10L;
                    break;
                case 119:
                    i23 = i19;
                default:
                    i19 += (((i20 * i22) + i20) - Test0299.instanceCount);
                }
            }
        }
        vMeth_check_sum += i1 + i18 + i19 + i20 + i21 + i22 + i23 + Double.doubleToLongBits(d1);
    }

    public void mainTest(String[] strArr1) {

        int i24=17187;

        for (int smallinvoc=0; smallinvoc<507; smallinvoc++) vSmallMeth(-1.880F);
        vMeth(i24);

        FuzzerUtils.out.println("i24 = " + i24);

        FuzzerUtils.out.println("Test0299.instanceCount Test0299.bFld Test0299.sFld = " + Test0299.instanceCount + "," + (Test0299.bFld ? 1
                : 0) + "," + Test0299.sFld);

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0299 _instance = new Test0299();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
