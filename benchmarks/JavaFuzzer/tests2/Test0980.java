// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:58 2023
public class Test0980 {

    public static final int N = 400;

    public static volatile long instanceCount=11L;
    public static volatile int iFld=-13;
    public static double dFld=1.16876;
    public static int iFld1=18225;
    public static boolean bFld=false;
    public static volatile int iFld2=-65;
    public static float fFld=-13.369F;
    public static volatile int iFld3=252;
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0980.iArrFld, 54);
        FuzzerUtils.init(Test0980.fArrFld, -46.195F);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, int i3, int i4) {

        int i5=52, i6=129, i7=9, i8=59432, i9=-8, i10=-242, i11=241;

        for (i5 = 10; i5 < 353; i5++) {
            for (i7 = 1; i7 < 5; ++i7) {
                Test0980.fArrFld[i7 - 1] -= 146;
                i9 = 1;
                do {
                    Test0980.iFld1 ^= i4;
                    i6 += Test0980.iFld;
                    Test0980.iFld1 &= i8;
                } while (++i9 < 2);
                f += (-26069 + (i7 * i7));
                for (i10 = i5; i10 < 2; ++i10) {
                    if (Test0980.bFld) {
                        i11 = (int)f;
                        f = Test0980.instanceCount;
                    } else {
                        i6 = i8;
                        Test0980.iArrFld[i5 - 1] *= 177;
                        try {
                            i11 = (245532228 % Test0980.iArrFld[i10 + 1]);
                            Test0980.iArrFld[i5 - 1] = (43593 / Test0980.iFld2);
                            Test0980.iArrFld[i10 - 1] = (Test0980.iFld2 % 20088);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11;
    }

    public static void vMeth(long l2, int i1, int i2) {


        vMeth1(Test0980.fFld, i1, i2);
        vMeth_check_sum += l2 + i1 + i2;
    }

    public double dMeth(long l, int i, long l1) {

        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -102.43F);

        fArr[(i >>> 1) % N] *= (++Test0980.iFld);
        vMeth(Test0980.instanceCount, Test0980.iFld2, 153);
        long meth_res = l + i + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l3=107L;
        int i12=-12, i13=-62783, i14=-7, i15=1, i16=-43439, i17=53464, i19=-2462, i20=-4, i21=-59, i22=-12;
        short s=10026;
        short[][] sArr =new short[N][N];
        double[] dArr =new double[N];

        FuzzerUtils.init(sArr, (short)23490);
        FuzzerUtils.init(dArr, -1.736);

        Test0980.iFld += (int) (Test0980.instanceCount + (Test0980.dFld + (Test0980.iFld >> Test0980.iFld)));
        Test0980.iArrFld[(-54 >>> 1) % N] -= (int) (sArr[(Test0980.iFld >>> 1) % N][(Test0980.iFld >>> 1) % N] * ((Test0980.iFld + -2) +
                dMeth(Test0980.instanceCount, Test0980.iFld, l3)));
        dArr[(Test0980.iFld >>> 1) % N] %= -4;
        for (i12 = 6; i12 < 244; i12++) {
            for (i14 = i12; i14 < 106; i14++) {
                Test0980.dFld *= Test0980.iFld;
                Test0980.instanceCount -= i14;
                lArrFld[i12 + 1] <<= -46476;
                Test0980.iArrFld[i14 + 1] = 67;
            }
        }
        lArrFld[(47 >>> 1) % N] = i12;
        for (i16 = 12; i16 < 207; i16 += 3) {
            s += (short)-11390;
            Test0980.iFld *= s;
            dArr[i16 - 1] %= (Test0980.iFld2 | 1);
            for (i19 = 5; i19 < 385; ++i19) {
                for (i21 = 1; i21 < 2; ++i21) {
                    i22 <<= i17;
                    Test0980.iFld = Test0980.iFld2;
                    i17 -= (int) Test0980.fFld;
                    i22 = (int) Test0980.instanceCount;
                    Test0980.iArrFld[i19 + 1] -= i16;
                    Test0980.instanceCount ^= i22;
                    Test0980.bFld = false;
                    Test0980.iFld += (i21 + l3);
                    Test0980.iArrFld[i16 - 1] -= Test0980.iFld3;
                    l3 >>>= Test0980.iFld;
                }
                Test0980.iFld3 |= i19;
                Test0980.iArrFld[i16 + 1] %= (int) ((long) (Test0980.fFld) | 1);
                Test0980.instanceCount += (i19 * i19);
                i20 <<= i19;
            }
        }

        FuzzerUtils.out.println("l3 i12 i13 = " + l3 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 s i19 = " + i17 + "," + s + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("sArr dArr = " + FuzzerUtils.checkSum(sArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0980.instanceCount Test0980.iFld Test0980.dFld = " + Test0980.instanceCount + "," + Test0980.iFld +
                "," + Double.doubleToLongBits(Test0980.dFld));
        FuzzerUtils.out.println("Test0980.iFld1 Test0980.bFld Test0980.iFld2 = " + Test0980.iFld1 + "," + (Test0980.bFld ? 1 : 0) + "," +
                Test0980.iFld2);
        FuzzerUtils.out.println("Test0980.fFld Test0980.iFld3 Test0980.iArrFld = " + Float.floatToIntBits(Test0980.fFld) + "," +
                Test0980.iFld3 + "," + FuzzerUtils.checkSum(Test0980.iArrFld));
        FuzzerUtils.out.println("Test0980.fArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0980.fArrFld))
            + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0980 _instance = new Test0980();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
