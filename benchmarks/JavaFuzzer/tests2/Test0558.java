// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:38 2023
public class Test0558 {

    public static final int N = 400;

    public static long instanceCount=-5759697922266774567L;
    public static boolean bFld=false;
    public static short sFld=-15016;
    public boolean[] bArrFld =new boolean[N];
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0558.fArrFld, 48.27F);
        FuzzerUtils.init(Test0558.lArrFld, 8455L);
        FuzzerUtils.init(Test0558.iArrFld, 9);
    }

    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i9) {

        float f1=0.740F;
        int i10=11;
        int i11=-152;
        int i12=-12;
        int i13=-175;
        int i14=220;
        int i15=-13;
        int i16=236;
        int[] iArr1 =new int[N];
        byte by=-28;
        short s=-23203;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -15744);
        FuzzerUtils.init(lArr, -16179L);

        f1 = i9;
        f1 = i9;
        i9 += (int)60380L;
        if (Test0558.bFld) {
            for (i10 = 2; i10 < 179; i10 += 3) {
                by += (byte)i10;
                switch ((i10 % 10) + 35) {
                case 35:
                    for (i12 = 1; i12 < 26; i12 += 2) {
                        i9 = i13;
                        for (i14 = 1; i14 < 3; i14++) {
                            iArr1 = FuzzerUtils.int1array(N, (int)235);
                            iArr1[i12] <<= i12;
                            iArr1[i10 - 1] = 87;
                            f1 += (i14 - i11);
                            i9 += i14;
                        }
                    }
                    break;
                case 36:
                    i16 = i9;
                case 37:
                    i11 += (i10 * i10);
                    break;
                case 38:
                    iArr1[i10] -= i15;
                    break;
                case 39:
                    try {
                        i16 = (i10 % i11);
                        i9 = (-52 / iArr1[i10]);
                        i15 = (i12 % 840756135);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 40:
                    Test0558.fArrFld[i10] = i11;
                case 41:
                    Test0558.instanceCount &= i12;
                    break;
                case 42:
                    i13 *= (int) Test0558.instanceCount;
                    break;
                case 43:
                    if (Test0558.bFld) continue;
                    break;
                case 44:
                    s &= (short)i10;
                }
            }
        } else if (Test0558.bFld) {
            Test0558.instanceCount = i10;
        }
        long meth_res = i9 + Float.floatToIntBits(f1) + i10 + i11 + by + i12 + i13 + i14 + i15 + i16 + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i4) {

        int i5=136;
        int i6=11;
        int i7=68;
        int i8=145;
        int i17=194;
        int i18=55931;
        int i19=-39944;
        int[] iArr =new int[N];
        double d=-61.70173;
        float f2=0.917F;
        byte by1=-22;
        long[][] lArr1 =new long[N][N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr1, -2910672227697596904L);

        for (i5 = 4; i5 < 124; ++i5) {
            for (i7 = 1; i7 < 13; i7++) {
                i4 = (-((iArr[i5]--) + (-3 + iMeth1(i8))));
            }
            iArr[i5 - 1] += i5;
            d = Test0558.sFld;
            i17 = 1;
            while (++i17 < 13) {
                if (Test0558.bFld) {
                    f2 += (-3695 + (i17 * i17));
                } else {
                    for (i18 = 1; 1 > i18; ++i18) {
                        if (i7 != 0) {
                        }
                        Test0558.instanceCount &= by1;
                        if (Test0558.bFld) {
                            iArr[i5] += (int) Test0558.instanceCount;
                        } else {
                            lArr1[(i17 >>> 1) % N] = lArr1[i5];
                            i6 += (i18 | Test0558.instanceCount);
                        }
                    }
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i17 + Float.floatToIntBits(f2) + i18 +
            i19 + by1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth(int i2, float f, boolean b) {

        long l=12L;
        int i3=-15642, i20=-12, i21=-10, i22=-247;
        byte by2=42;
        double d1=0.85496;

        for (l = 258; l > 16; --l) {
            i2 = iMeth(i3);
            switch ((int)((l % 9) + 2)) {
            case 2:
            case 3:
                if (i3 != 0) {
                    return ((int)(i2 + Float.floatToIntBits(f) + (b ? 1 : 0) + l + i3 + i20 + by2 +
                        Double.doubleToLongBits(d1) + i21 + i22)) % 2 > 0;
                }
                f = l;
                i3 -= -127;
                i2 = i2;
                break;
            case 4:
                i2 = i2;
                i20 = 7;
                while (--i20 > 0) {
                    i2 >>= i3;
                }
                by2 = (byte)i20;
            case 5:
                for (d1 = l; 7 > d1; d1++) {
                    Test0558.instanceCount = by2;
                    Test0558.instanceCount -= i21;
                    i2 = i20;
                }
                break;
            case 6:
                i22 *= i20;
                break;
            case 7:
                i2 *= i22;
                break;
            case 8:
                i21 *= i22;
                break;
            case 9:
                Test0558.lArrFld[(int) (l - 1)] &= i20;
                break;
            case 10:
                Test0558.sFld = (short) Test0558.instanceCount;
                break;
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + (b ? 1 : 0) + l + i3 + i20 + by2 + Double.doubleToLongBits(d1) +
            i21 + i22;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        int i=-54869, i1=5, i23=60642, i24=-19506, i25=7, i26=245;
        float f3=-2.1010F;
        byte by3=-61;
        double d2=69.23260;

        for (i = 19; i < 313; i++) {
            bArrFld[i + 1] = ((bArrFld[i + 1] = bMeth(i, f3, Test0558.bFld)) & false);
            Test0558.fArrFld[i + 1] += Test0558.sFld;
            for (i23 = 5; i23 < 86; ++i23) {
                i24 = i24;
                i24 += (int)(2.149F + (i23 * i23));
                Test0558.instanceCount += i23;
                i24 = i24;
                i24 <<= by3;
                i25 = 1;
                while (++i25 < 2) {
                    bArrFld[i25 - 1] = false;
                    i24 += by3;
                    i24 = i24;
                    i1 += (int)(-50909L + (i25 * i25));
                    Test0558.iArrFld[(i >>> 1) % N] -= i;
                    switch ((((i25 >>> 1) % 1) * 5) + 117) {
                    case 119:
                        Test0558.iArrFld[i] = i24;
                        i1 += (int)2197973340L;
                    }
                }
                i26 = 1;
                do {
                    i24 = i1;
                    d2 = -4L;
                    i24 -= (int) Test0558.instanceCount;
                    i1 = i;
                    switch ((i26 % 7) + 43) {
                    case 43:
                        i24 ^= i;
                        i1 += (i26 ^ Test0558.instanceCount);
                        Test0558.bFld = Test0558.bFld;
                        Test0558.bFld = true;
                        break;
                    case 44:
                        Test0558.instanceCount %= 1;
                        f3 += (i26 * i26);
                        break;
                    case 45:
                        Test0558.iArrFld[i] = i25;
                        break;
                    case 46:
                        Test0558.instanceCount = Test0558.instanceCount;
                        break;
                    case 47:
                        Test0558.iArrFld[i] <<= i26;
                        break;
                    case 48:
                        Test0558.iArrFld[i] *= -8;
                        break;
                    case 49:
                        i1 = i26;
                    default:
                        i24 += i24;
                    }
                } while (++i26 < 2);
            }
        }

        FuzzerUtils.out.println("i i1 f3 = " + i + "," + i1 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 by3 = " + i23 + "," + i24 + "," + by3);
        FuzzerUtils.out.println("i25 i26 d2 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d2));

        FuzzerUtils.out.println("Test0558.instanceCount Test0558.bFld Test0558.sFld = " + Test0558.instanceCount + "," + (Test0558.bFld ? 1
                : 0) + "," + Test0558.sFld);
        FuzzerUtils.out.println("bArrFld Test0558.fArrFld Test0558.lArrFld = " + FuzzerUtils.checkSum(bArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0558.fArrFld)) + "," + FuzzerUtils.checkSum(Test0558.lArrFld));
        FuzzerUtils.out.println("Test0558.iArrFld = " + FuzzerUtils.checkSum(Test0558.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0558 _instance = new Test0558();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
