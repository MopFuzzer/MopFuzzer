// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0074 {

    public static final int N = 400;

    public static long instanceCount=0L;
    public static int iFld=7;
    public static boolean bFld=true;
    public byte byFld=-22;
    public boolean[] bArrFld =new boolean[N];
    public static volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0074.lArrFld, -670676924L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i3) {

        int i4=-45027;
        int i5=29;
        int i6=242;
        int i7=-7595;
        int i8=-29100;
        int i9=-35;
        int i10=23880;
        int[] iArr1 =new int[N];
        double d1=1.50158, d2=1.55973;
        byte by=-47;
        short s=18710;
        long[] lArr1 =new long[N];
        boolean[] bArr1 =new boolean[N];

        FuzzerUtils.init(lArr1, -128L);
        FuzzerUtils.init(iArr1, 101);
        FuzzerUtils.init(bArr1, false);

        i4 = 1;
        while (++i4 < 177) {
            Test0074.iFld += (((i4 * i4) + Test0074.instanceCount) - Test0074.iFld);
        }
        Test0074.instanceCount *= i3;
        for (i5 = 8; 164 > i5; i5++) {
            if (Test0074.bFld) continue;
            Test0074.instanceCount <<= -8L;
            d1 = 1;
            do {
                for (i7 = 1; i7 > 1; i7 -= 3) {
                    d2 = by;
                    lArr1 = FuzzerUtils.long1array(N, (long)-1300085443864629562L);
                    i6 += (12 + (i7 * i7));
                }
                iArr1[i5] += (int)d2;
            } while (++d1 < 10);
            for (i9 = i5; i9 < 10; i9++) {
                bArr1[i5] = true;
                iArr1[i5 - 1] = s;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + Double.doubleToLongBits(d1) + i7 + i8 + Double.doubleToLongBits(d2) + by +
            i9 + i10 + s + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(boolean b, int i, int i1) {

        int i2=149;
        int i11=1;
        int i12=14;
        int i13=205;
        int i14=29081;
        int i15=43267;
        int i16=-26837;
        int[] iArr2 =new int[N];
        float f=-2.365F;
        double d3=26.12791;
        byte by1=-126;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -8681L);
        FuzzerUtils.init(iArr2, -60);

        lArr[(i >>> 1) % N][(i2 >>> 1) % N] = (Math.max((long) (f * Test0074.iFld), lArr[(i >>> 1) % N][(i1 >>> 1) % N]) +
            lMeth(i));
        d3 -= d3;
        f += i2;
        for (i11 = 10; i11 < 204; ++i11) {
            Test0074.instanceCount -= (long) f;
        }
        for (i13 = 8; i13 < 159; i13++) {
            Test0074.iFld += (i13 ^ Test0074.instanceCount);
            switch ((i13 % 9) + 85) {
            case 85:
                i12 -= (int) Test0074.instanceCount;
                by1 >>>= (byte)i;
                f = -162L;
                break;
            case 86:
                iArr2[i13 + 1] -= i2;
                for (i15 = i13; i15 < 10; ++i15) {
                    f = 36;
                    Test0074.bFld = b;
                }
                break;
            case 87:
                d3 -= Test0074.instanceCount;
                break;
            case 88:
                iArr2[i13] = (int)162L;
                break;
            case 89:
                d3 -= Test0074.instanceCount;
                break;
            case 90:
                iArr2[i13] += (int)f;
                break;
            case 91:
                by1 >>= (byte) Test0074.iFld;
            case 92:
                i14 -= (int)2639010707L;
                break;
            case 93:
                i16 /= -220;
                break;
            default:
                f = f;
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i + i1 + i2 + Float.floatToIntBits(f) + Double.doubleToLongBits(d3) + i11 +
            i12 + i13 + i14 + by1 + i15 + i16 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(double d) {

        boolean[] bArr =new boolean[N];
        int[] iArr =new int[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr, 22583);

        bArr[(Test0074.iFld >>> 1) % N] = ((--Test0074.iFld) != ((--iArr[(238 >>> 1) % N]) - (iArr[(Test0074.iFld >>> 1) % N]++)));
        vMeth1(Test0074.bFld, Test0074.iFld, Test0074.iFld);
        vMeth_check_sum += Double.doubleToLongBits(d) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d4=1.100597;
        int i17=-240;
        int i18=-12151;
        int i19=112;
        int i20=-131;
        int i21=-58404;
        int i22=2;
        int i23=6;
        int i24=-116;
        int i25=47391;
        int i26=-5;
        int i27=-14;
        int[] iArr3 =new int[N];
        float f1=-2.284F;

        FuzzerUtils.init(iArr3, -39852);

        vMeth(d4);
        byFld = (byte) Test0074.instanceCount;
        try {
            Test0074.iFld -= 3;
            for (i17 = 12; i17 < 214; ++i17) {
                for (i19 = i17; 124 > i19; i19++) {
                    iArr3[i17] <<= (int) Test0074.instanceCount;
                }
                Test0074.instanceCount = i17;
                i18 -= (int)d4;
                for (i21 = 7; i21 < 124; i21++) {
                    bArrFld[i17] = Test0074.bFld;
                    Test0074.iFld += 65412;
                    iArr3[i17] = i19;
                    i23 += (184 + (i21 * i21));
                    Test0074.instanceCount += Test0074.iFld;
                    for (i24 = i17; i24 < 2; ++i24) {
                        i20 += (((i24 * Test0074.iFld) + i24) - Test0074.iFld);
                        i23 = i20;
                        Test0074.lArrFld[i24 + 1] = (long) f1;
                        f1 = Test0074.instanceCount;
                        i20 += (int)(4048388200345398803L + (i24 * i24));
                        if (true) continue;
                        d4 *= -36768;
                        byFld *= (byte)i18;
                        i20 += (int)f1;
                        Test0074.iFld /= (int) (i22 | 1);
                    }
                    for (i26 = 1; i26 < 2; i26++) {
                        Test0074.instanceCount += i22;
                        i18 = i20;
                        i18 += (53530 + (i26 * i26));
                    }
                }
            }
        }
        catch (NullPointerException exc1) {
            Test0074.instanceCount = -235;
        }

        FuzzerUtils.out.println("d4 i17 i18 = " + Double.doubleToLongBits(d4) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 f1 i26 = " + i25 + "," + Float.floatToIntBits(f1) + "," + i26);
        FuzzerUtils.out.println("i27 iArr3 = " + i27 + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0074.instanceCount Test0074.iFld Test0074.bFld = " + Test0074.instanceCount + "," + Test0074.iFld +
                "," + (Test0074.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld bArrFld Test0074.lArrFld = " + byFld + "," + FuzzerUtils.checkSum(bArrFld) + "," +
                FuzzerUtils.checkSum(Test0074.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0074 _instance = new Test0074();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
