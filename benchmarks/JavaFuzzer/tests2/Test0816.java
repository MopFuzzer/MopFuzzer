// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0816 {

    public static final int N = 400;

    public static long instanceCount=-17612L;
    public static byte byFld=-53;
    public static short sFld=-15073;
    public static int iFld=242;
    public float fFld=-10.396F;
    public static boolean bFld=true;
    public static float[] fArrFld =new float[N];
    public static volatile int[] iArrFld =new int[N];
    public short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0816.fArrFld, 0.507F);
        FuzzerUtils.init(Test0816.iArrFld, 9);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i8, int i9) {

        int i10=176, i11=-245, i12=-167;
        long l2=59502L;
        float f2=-2.274F;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-2152);

        Test0816.byFld += (byte) i9;
        for (i10 = 7; i10 < 359; ++i10) {
            for (l2 = 1; l2 < 5; ++l2) {
                sArr[(int)(l2 + 1)] &= (short)l2;
                i12 = (int) Test0816.instanceCount;
                i11 += -10699;
                i9 = (int) Test0816.instanceCount;
                Test0816.instanceCount = i12;
                i8 = (int)1.109774;
                Test0816.byFld ^= (byte) i12;
                Test0816.iArrFld[(int) (l2 + 1)] += i10;
            }
            i9 = i11;
            f2 += i10;
            i12 <<= i10;
            Test0816.instanceCount += (((i10 * Test0816.sFld) + i9) - i9);
        }
        vMeth2_check_sum += i8 + i9 + i10 + i11 + l2 + i12 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth1(int i4, int i5, int i6) {

        float f1=2.276F;
        int i7=50, i13=2, i14=3, i15=-33187;
        short s=32661;

        if (true) {
            f1 = 379;
            while (--f1 > 0) {
                i7 = 1;
                while ((i7 += 2) < 4) {
                    s = (short) Test0816.instanceCount;
                    Test0816.fArrFld[(int) (f1 - 1)] -= (Test0816.iArrFld[(int) (f1)] >>= (--i4));
                }
                vMeth2(i6, i5);
                i4 = (int)f1;
                i13 = 1;
                while (++i13 < 4) {
                    double d1=-121.118686;
                    Test0816.iArrFld[(int) (f1)] = (int) Test0816.instanceCount;
                    d1 += i7;
                    for (i14 = 1; i14 < 1; i14++) {
                        Test0816.instanceCount *= i4;
                        i5 <<= i13;
                        Test0816.instanceCount = i5;
                        i5 += (i14 * i14);
                    }
                }
            }
            vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + s + i13 + i14 + i15;
            return;
        } else {
            i15 <<= i7;
        }
        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + s + i13 + i14 + i15;
    }

    public static void vMeth(int i1, long l, long l1) {

        int i2=10, i3=11, i16=11, i17=175, i18=-168;
        double d=30.75237;
        float f=-1.757F;
        boolean b=false;

        for (i2 = 3; i2 < 249; ++i2) {
            d += (((f - -86.713F) * (++l)) + ((i1 + i2) % (((long)(i3 + d)) | 1)));
            vMeth1(i1, i1, -4684);
            i3 *= i3;
            Test0816.iArrFld[i2 - 1] -= i2;
            for (i16 = i2; i16 < 7; ++i16) {
                f -= i1;
                b = b;
            }
        }
        i1 += (int)f;
        i17 = (int)d;
        l *= i16;
        i18 = 1;
        do {
            i17 -= 150;
            i3 += i2;
            l1 *= i17;
        } while (++i18 < 338);
        vMeth_check_sum += i1 + l + l1 + i2 + i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i16 + i17 +
            (b ? 1 : 0) + i18;
    }

    public void mainTest(String[] strArr1) {

        int i=5674, i19=-4, i20=5, i21=-250, i22=229, i23=217, i24=-53075, i25=-137, i26=141;

        i = (int) (++Test0816.instanceCount);
        vMeth(Test0816.iFld, 12L, Test0816.instanceCount);
        for (i19 = 5; i19 < 161; ++i19) {
            switch (((i19 % 8) * 5) + 22) {
            case 29:
                i21 = 1;
                do {
                    i20 *= -24580;
                    i20 *= i19;
                    i20 -= (int)fFld;
                } while (++i21 < 161);
                switch (((i19 % 5) * 5) + 88) {
                case 109:
                case 103:
                    i20 <<= i20;
                    i += 13115;
                case 91:
                    Test0816.instanceCount += (i19 - Test0816.instanceCount);
                    break;
                case 93:
                    i22 = 1;
                    while (++i22 < 161) {
                        Test0816.instanceCount >>>= 4192985092L;
                        Test0816.iArrFld[i19 - 1] = 195;
                        Test0816.instanceCount += i;
                        if (Test0816.bFld) continue;
                        for (i23 = 1; i23 > 1; --i23) {
                            Test0816.iFld <<= i19;
                            i24 *= i20;
                            sArrFld[i22] = (short)i23;
                            i24 &= i20;
                        }
                    }
                    Test0816.instanceCount += i19;
                    break;
                case 110:
                    i += (((i19 * Test0816.instanceCount) + Test0816.iFld) - fFld);
                    Test0816.iArrFld[i19 + 1] = i24;
                default:
                    Test0816.iFld <<= i24;
                    fFld = i19;
                    for (i25 = 3; i25 < 161; ++i25) {
                        i += (int) Test0816.instanceCount;
                        Test0816.instanceCount += Test0816.instanceCount;
                    }
                }
                break;
            case 33:
                Test0816.instanceCount *= Test0816.instanceCount;
                break;
            case 58:
            case 46:
            case 41:
                Test0816.sFld >>>= (short) i19;
                break;
            case 35:
                Test0816.iFld /= (int) (i21 | 1);
                break;
            case 28:
                i26 |= i23;
                break;
            case 31:
                Test0816.bFld = Test0816.bFld;
                break;
            default:
                i26 &= (int) Test0816.instanceCount;
            }
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);

        FuzzerUtils.out.println("Test0816.instanceCount Test0816.byFld Test0816.sFld = " + Test0816.instanceCount + "," + Test0816.byFld +
                "," + Test0816.sFld);
        FuzzerUtils.out.println("Test0816.iFld fFld Test0816.bFld = " + Test0816.iFld + "," + Float.floatToIntBits(fFld) + "," +
                (Test0816.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0816.fArrFld Test0816.iArrFld sArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0816.fArrFld)) + "," + FuzzerUtils.checkSum(Test0816.iArrFld) +
            "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0816 _instance = new Test0816();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
