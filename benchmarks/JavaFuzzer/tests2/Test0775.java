// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:48 2023
public class Test0775 {

    public static final int N = 400;

    public static long instanceCount=570498332L;
    public static float fFld=1.22F;
    public static double dFld=-105.122142;
    public static volatile short sFld=-15576;
    public static volatile int[] iArrFld =new int[N];
    public static volatile float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0775.iArrFld, -54);
        FuzzerUtils.init(Test0775.fArrFld, -2.659F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i8) {

        int i9=11182, i10=39, i11=-235, i12=6, i13=12;
        boolean b=true;
        byte by1=64;

        for (i9 = 4; i9 < 212; i9++) {
            if (b) {
                i10 = i8;
            }
            i11 = 1;
            do {
                Test0775.iArrFld[i9] += i9;
                for (i12 = i11; i12 < 1; i12 += 3) {
                    if (b) {
                        by1 += (byte)-45415;
                    }
                    Test0775.fFld += i12;
                    i10 = (int) Test0775.dFld;
                    i13 += (i12 * i12);
                    Test0775.instanceCount -= Test0775.instanceCount;
                }
                Test0775.instanceCount += (-17000 + (i11 * i11));
                i8 = i9;
                i10 >>= (int) Test0775.instanceCount;
            } while (++i11 < 8);
        }
        long meth_res = i8 + i9 + i10 + (b ? 1 : 0) + i11 + i12 + i13 + by1;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i2, int i3) {

        int i4=64;
        int i5=237;
        int i6=-3600;
        int i7=-108;
        int[] iArr =new int[N];
        long l1=50146L;
        long[] lArr =new long[N];
        double d3=0.111916;
        byte by=-14;
        boolean b1=false;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(sArr, (short)11927);
        FuzzerUtils.init(lArr, 129L);

        for (i4 = 12; i4 < 271; ++i4) {
            for (l1 = 1; 6 > l1; l1 += 2) {
                d3 = iArr[(int)(l1 - 1)];
                i3 <<= iArr[(int)(l1 + 1)];
                i5 -= (int) Test0775.fFld;
                i6 = ((i3 - sArr[(int)(l1)]) + (++iArr[(int)(l1 + 1)]));
                i7 = 3;
                while (--i7 > 0) {
                    Test0775.instanceCount += i7;
                    switch (((i7 % 3) * 5) + 80) {
                    case 89:
                    case 83:
                        if (b1) {
                            by -= (byte)((15 - (i5 * 41.105602)) + ((--iArr[i4 - 1]) >> (i3 + i2)));
                            switch (((((int)(181 + (-2 - (i5 + d3)))) >>> 1) % 5) + 105) {
                            case 105:
                            case 106:
                                i5 <<= (iArr[i4 + 1] = Integer.reverseBytes(iMeth1(i3)));
                                break;
                            case 107:
                                l += i5;
                                Test0775.sFld += (short) (i7 + l);
                                break;
                            case 108:
                                b1 = b1;
                                break;
                            case 109:
                                i6 = i3;
                                break;
                            }
                        } else if (b1) {
                            i3 += i3;
                        } else {
                            lArr[(int)(l1 + 1)] += l1;
                        }
                        break;
                    case 93:
                        try {
                            i6 = (40181 % i2);
                            i6 = (i6 % -145);
                            i5 = (i6 / -60343);
                        } catch (ArithmeticException a_e) {}
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += l + i2 + i3 + i4 + i5 + l1 + i6 + Double.doubleToLongBits(d3) + i7 + by + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(double d2) {

        int i14=-5, i15=-92, i16=5, i17=-203, i18=14, i19=209, i20=1;
        float f=-110.48F;
        byte by2=34;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -2576914003L);

        vMeth(Test0775.instanceCount, i14, i14);
        for (f = 10; f < 183; f++) {
            Test0775.iArrFld[(int) (f - 1)] -= (int) Test0775.dFld;
        }
        i16 = 1;
        do {
            Test0775.fFld -= i16;
            Test0775.fArrFld = Test0775.fArrFld;
            i15 ^= i15;
        } while (++i16 < 241);
        lArr1[(i16 >>> 1) % N] %= ((long) (Test0775.fFld) | 1);
        by2 -= (byte) Test0775.dFld;
        for (i17 = 11; i17 < 190; i17 += 2) {
            lArr1[(i17 >>> 1) % N] = (long) Test0775.dFld;
        }
        Test0775.dFld -= Test0775.instanceCount;
        for (i19 = 2; i19 < 184; i19++) {
            i20 -= i20;
            i14 += (i19 - i20);
        }
        long meth_res = Double.doubleToLongBits(d2) + i14 + Float.floatToIntBits(f) + i15 + i16 + by2 + i17 + i18 + i19
            + i20 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i=-34013, i1=-3, i21=-4, i23=-13, i24=-254, i25=-14691, i26=-2, i27=-11076, i28=-248, i29=1526;
        double d=1.44567, d1=0.124147;
        short[] sArr1 =new short[N];
        long[] lArr2 =new long[N];

        FuzzerUtils.init(sArr1, (short)-4949);
        FuzzerUtils.init(lArr2, 11L);

        i *= (int)Math.abs(d);
        for (d1 = 336; d1 > 21; d1 -= 2) {
            i = iMeth(Test0775.dFld);
        }
        i21 = 1;
        do {
            boolean b2=false;
            Test0775.instanceCount += Test0775.instanceCount;
            Test0775.dFld = i1;
            sArr1[i21 - 1] += (short)d;
            Test0775.dFld -= i;
            if (b2) {
                i += (int)d1;
                for (i23 = 5; i23 < 121; ++i23) {
                    i1 += i23;
                    lArr2[i21 - 1] += (long) Test0775.dFld;
                }
                i24 += i;
                Test0775.instanceCount -= i23;
            }
            for (i25 = 2; i25 < 121; ++i25) {
                for (i27 = i25; i27 < 2; i27++) {
                    i28 += i25;
                    switch ((((9 >>> 1) % 2) * 5) + 9) {
                    case 14:
                        Test0775.instanceCount >>>= -204;
                        Test0775.instanceCount -= Test0775.instanceCount;
                        Test0775.dFld *= i21;
                        Test0775.instanceCount += (-7566 + (i27 * i27));
                        break;
                    case 10:
                        i += (-6887 + (i27 * i27));
                        Test0775.instanceCount += (i27 * i27);
                        lArr2[i21] -= i;
                    }
                    Test0775.instanceCount -= Test0775.instanceCount;
                }
                Test0775.dFld += i29;
                Test0775.iArrFld[i25] = i23;
                i24 += (i25 * i25);
            }
        } while (++i21 < 207);

        FuzzerUtils.out.println("i d d1 = " + i + "," + Double.doubleToLongBits(d) + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i1 i21 i23 = " + i1 + "," + i21 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("sArr1 lArr2 = " + FuzzerUtils.checkSum(sArr1) + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0775.instanceCount Test0775.fFld Test0775.dFld = " + Test0775.instanceCount + "," +
                Float.floatToIntBits(Test0775.fFld) + "," + Double.doubleToLongBits(Test0775.dFld));
        FuzzerUtils.out.println("Test0775.sFld Test0775.iArrFld Test0775.fArrFld = " + Test0775.sFld + "," +
                FuzzerUtils.checkSum(Test0775.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0775.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test0775 _instance = new Test0775();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
