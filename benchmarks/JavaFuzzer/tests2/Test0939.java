// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0939 {

    public static final int N = 400;

    public static long instanceCount=352781477L;
    public static float fFld=0.901F;
    public static int iFld=-50713;
    public static short sFld=17383;
    public static double dFld=84.8433;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0939.iArrFld, 105);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l1) {

        int i8=-2;
        int i9=0;
        int i10=-17;
        int i11=-7;
        int i13=44;
        int i14=8997;
        int i15=44119;
        int i16=19880;
        int[] iArr1 =new int[N];
        double d1=0.114269;

        FuzzerUtils.init(iArr1, -19622);

        for (i8 = 2; i8 < 192; ++i8) {
            for (i10 = 1; i10 < 8; ++i10) {
                Test0939.fFld -= Test0939.instanceCount;
                Test0939.instanceCount >>= i9;
                Test0939.fFld += 7.910F;
            }
            Test0939.fFld += i10;
            i11 += (((i8 * i8) + Test0939.instanceCount) - Test0939.fFld);
            l1 >>>= l1;
            switch ((i8 % 2) + 48) {
            case 48:
                for (i13 = 8; 1 < i13; i13--) {
                    for (i15 = 1; i15 < 2; ++i15) {
                        i9 += (i15 | i11);
                        i11 -= (int)50562L;
                        iArr1[i8 + 1] -= i8;
                        Test0939.fFld += i14;
                    }
                }
                break;
            case 49:
                i16 *= (int)d1;
            }
        }
        long meth_res = l1 + i8 + i9 + i10 + i11 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth() {

        int i17=236;
        int i18=39008;
        int[] iArr2 =new int[N];

        FuzzerUtils.init(iArr2, -6);

        Test0939.iFld += (int) fMeth(Test0939.instanceCount);
        for (i17 = 8; i17 < 297; i17++) {
            iArr2[i17] = i18;
        }
        long meth_res = i17 + i18 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l) {

        int i2=211;
        int i3=-75;
        int i4=-65;
        int i5=-10609;
        int i6=-9;
        int i7=-20319;
        int[] iArr =new int[N];
        byte by=10;
        double d=0.24063;
        double[] dArr =new double[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(dArr, 59.22194);
        FuzzerUtils.init(lArr1, -4249492792L);

        i2 = 1;
        do {
            try {
                iArr[i2 - 1] = (i2 % i2);
                i3 = (i2 / 54);
                Test0939.iFld = (i2 % -78);
            } catch (ArithmeticException a_e) {}
            Test0939.iFld -= by;
            i3 = (int)l;
            for (i4 = 1; i4 < 6; ++i4) {
                i5 += (int)((dArr[i4 + 1]++) * ((i5 * i4) * Math.min(-7, -200)));
                for (i6 = i2; i6 < 2; i6 += 2) {
                    Test0939.iFld += (0 + (i6 * i6));
                    i5 = (--Test0939.iFld);
                    Test0939.instanceCount += (--i3);
                    Test0939.sFld += (short) Long.reverseBytes(l);
                    Test0939.iFld += (i6 ^ i7);
                    i3 -= (int) ((lArr1[i4] *= (l + i6)) - (Test0939.fFld--));
                }
                d = (iMeth() + d);
                i3 -= (int) Test0939.fFld;
            }
        } while (++i2 < 285);
        vMeth_check_sum += l + i2 + i3 + by + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=229, i1=-41, i19=-66, i20=-12478, i21=-7, i22=2, i23=30517, i24=-122;
        byte by1=113;
        boolean b=false;
        long[] lArr =new long[N];
        float[] fArr =new float[N];
        double[] dArr1 =new double[N];

        FuzzerUtils.init(lArr, -64L);
        FuzzerUtils.init(fArr, 3.265F);
        FuzzerUtils.init(dArr1, 25.2427);

        for (i = 6; i < 123; i++) {
            i1 += (((i * i1) + Test0939.instanceCount) - Test0939.fFld);
        }
        lArr[(i1 >>> 1) % N] -= i;
        vMeth(Test0939.instanceCount);
        for (i19 = 15; i19 < 375; ++i19) {
            Test0939.iFld = (int) Test0939.instanceCount;
            Test0939.fFld = (float) 116.33198;
            by1 <<= (byte)-4186;
            for (i21 = i19; i21 < 70; i21++) {
                i20 = i21;
                Test0939.instanceCount >>= -10;
                if (b) break;
                i22 = Test0939.iFld;
                if (b) continue;
                i20 = -45;
                for (i23 = 1; 1 < i23; i23 -= 2) {
                    i24 += (int)(11388L + (i23 * i23));
                    fArr[i21] *= i21;
                    fArr[i19 + 1] += i22;
                    Test0939.sFld = (short) i21;
                    i1 %= -55258;
                    Test0939.iFld = i1;
                    if (b) {
                        Test0939.instanceCount += (7 + (i23 * i23));
                        Test0939.iArrFld[i21 + 1] = Test0939.iFld;
                        Test0939.instanceCount -= -16488;
                        switch (((Test0939.iFld >>> 1) % 6) + 42) {
                        case 42:
                            i20 = i1;
                            Test0939.instanceCount = i20;
                            Test0939.iArrFld[i21] = i20;
                            break;
                        case 43:
                            Test0939.iFld += (int) Test0939.fFld;
                        case 44:
                            Test0939.instanceCount += (long) Test0939.fFld;
                            break;
                        case 45:
                        case 46:
                            i24 = i;
                            break;
                        case 47:
                            Test0939.iArrFld[i23 - 1] -= i;
                            break;
                        }
                    } else if (b) {
                        dArr1[i19 - 1] = i20;
                    } else {
                        i1 *= (int) Test0939.dFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i19 = " + i + "," + i1 + "," + i19);
        FuzzerUtils.out.println("i20 by1 i21 = " + i20 + "," + by1 + "," + i21);
        FuzzerUtils.out.println("i22 b i23 = " + i22 + "," + (b ? 1 : 0) + "," + i23);
        FuzzerUtils.out.println("i24 lArr fArr = " + i24 + "," + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("dArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0939.instanceCount Test0939.fFld Test0939.iFld = " + Test0939.instanceCount + "," +
                Float.floatToIntBits(Test0939.fFld) + "," + Test0939.iFld);
        FuzzerUtils.out.println("Test0939.sFld Test0939.dFld Test0939.iArrFld = " + Test0939.sFld + "," +
                Double.doubleToLongBits(Test0939.dFld) + "," + FuzzerUtils.checkSum(Test0939.iArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0939 _instance = new Test0939();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
