// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:58 2023
public class Test0987 {

    public static final int N = 400;

    public static long instanceCount=-114L;
    public static volatile double dFld=0.93863;
    public float fFld=0.534F;
    public static boolean bFld=false;
    public int iFld=-45723;
    public static volatile int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0987.iArrFld, 63500);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(long l, int i) {

        byte by=89;
        long l1=845284214L;
        float f=36.9F;

        Test0987.dFld *= (((Test0987.iArrFld[(i >>> 1) % N]++) + (by++)) - ((i + l1) * (f + Test0987.dFld)));
        i <<= Test0987.iArrFld[(i >>> 1) % N];
        vSmallMeth_check_sum += l + i + by + l1 + Float.floatToIntBits(f);
    }

    public static long lMeth(long l2, int i11, int i12) {

        int i13=32595, i14=60, i15=40951, i16=39, i17=-8, i18=-204, i19=7;
        float f1=1.738F;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -9127L);

        for (i13 = 1; i13 < 328; ++i13) {
            i14 -= i13;
            i12 += (-7 + (i13 * i13));
            i12 -= (int)f1;
            Test0987.iArrFld[i13 + 1] -= i12;
            switch ((i13 % 1) + 112) {
            case 112:
                i11 += i14;
                i11 -= i13;
            }
            for (i15 = 1; i15 < 5; i15++) {
                if (Test0987.bFld) {
                    if (true) {
                        for (i17 = 2; i17 > 1; i17--) {
                            l2 >>= i18;
                            Test0987.dFld *= 494836961L;
                        }
                        i18 += (i15 ^ l2);
                    } else if (Test0987.bFld) {
                        lArr1 = lArr1;
                    }
                } else if (true) {
                    i19 += (int)l2;
                }
            }
        }
        long meth_res = l2 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f1) + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i8) {

        int i9=-3794, i10=-14671, i20=-54092, i21=11, i22=-59258, i23=11;
        float f2=0.264F;
        float[] fArr =new float[N];
        byte by2=20;
        long l3=-15613L;

        FuzzerUtils.init(fArr, 0.176F);

        for (i9 = 186; i9 > 7; i9 -= 3) {
            Test0987.iArrFld[i9] |= (int) (((i8 = i10) + (++fArr[i9])) + ((11 + lMeth(Test0987.instanceCount, i10, i9)) +
                    Test0987.instanceCount));
            f2 = 58L;
            i8 = i10;
            i8 >>= (int)-4988320703618963708L;
            by2 -= (byte)i10;
            Test0987.instanceCount += (i9 - Test0987.instanceCount);
            i8 += (((i9 * Test0987.instanceCount) + i10) - i9);
            if (Test0987.bFld) {
                for (i20 = i9; i20 < 26; ++i20) {
                    Test0987.iArrFld[i9 - 1] = i8;
                }
                for (i22 = 1; 26 > i22; ++i22) {
                    i23 = i21;
                    Test0987.iArrFld[i22 + 1] *= i22;
                    Test0987.iArrFld[i22] += (int) l3;
                }
            }
        }
        vMeth_check_sum += i8 + i9 + i10 + Float.floatToIntBits(f2) + by2 + i20 + i21 + i22 + i23 + l3 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public int iMeth() {

        long l4=141953090925709110L;
        long[] lArr2 =new long[N];
        int i24=174;
        byte by3=-124;

        FuzzerUtils.init(lArr2, -2640068863L);

        vMeth(iFld);
        for (l4 = 7; l4 < 259; ++l4) {
            Test0987.instanceCount *= by3;
        }
        lArr2 = FuzzerUtils.long1array(N, (long)-253L);
        i24 += (int) Test0987.instanceCount;
        Test0987.instanceCount = iFld;
        long meth_res = l4 + i24 + by3 + FuzzerUtils.checkSum(lArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-13, i2=-50413, i3=-32946, i4=-31385, i5=139, i6=212, i7=189, i26=-13, i27=16777, i28=129, i29=64949;
        byte by1=-79;
        short s=31911;
        float f3=-67.501F;
        double d=63.97427;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -129L);

        for (int smallinvoc=0; smallinvoc<397; smallinvoc++) vSmallMeth((i1 - lArr[(56 >>> 1) % N]) + by1, i1);
        for (i2 = 9; i2 < 217; i2 += 2) {
            for (i4 = 1; i4 < 241; i4++) {
                i1 += (i4 * i4);
                if ((--i3) < ((Test0987.iArrFld[i4]++) + Test0987.instanceCount)) break;
            }
            for (i6 = 12; 241 > i6; i6++) {
                fFld += (((i6 * fFld) + s) - i4);
            }
            vSmallMeth((long) ((fFld--) * fFld), (int) (((-(Test0987.instanceCount + Test0987.dFld)) + iMeth()) * f3));
            Test0987.iArrFld = FuzzerUtils.int1array(N, (int) 64355);
            Test0987.instanceCount -= i7;
            if (Test0987.bFld) continue;
            if (Test0987.bFld) {
                i3 *= i4;
                Test0987.iArrFld[i2 - 1] += (int) fFld;
            }
        }
        Test0987.instanceCount *= 7;
        Test0987.iArrFld = Test0987.iArrFld;
        for (i26 = 6; i26 < 164; ++i26) {
            i28 = 1;
            while (++i28 < 159) {
                Test0987.instanceCount += (long) 120.969F;
                if (true) continue;
                i5 = (int)-478947229L;
                if (Test0987.bFld) {
                    iFld += i6;
                    for (d = 1; d < 1; d++) {
                        switch (((i7 >>> 1) % 1) + 98) {
                        case 98:
                            if (false) continue;
                            s = (short) Test0987.instanceCount;
                            iFld += (-87 + (d * d));
                            break;
                        }
                        if (false) break;
                        lArr[i26 - 1] &= i1;
                    }
                } else {
                    Test0987.dFld = i7;
                }
            }
        }

        FuzzerUtils.out.println("i1 by1 i2 = " + i1 + "," + by1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 i7 s = " + i6 + "," + i7 + "," + s);
        FuzzerUtils.out.println("f3 i26 i27 = " + Float.floatToIntBits(f3) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 d i29 = " + i28 + "," + Double.doubleToLongBits(d) + "," + i29);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0987.instanceCount Test0987.dFld fFld = " + Test0987.instanceCount + "," +
                Double.doubleToLongBits(Test0987.dFld) + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0987.bFld iFld Test0987.iArrFld = " + (Test0987.bFld ? 1 : 0) + "," + iFld + "," +
                FuzzerUtils.checkSum(Test0987.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0987 _instance = new Test0987();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
