// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0936 {

    public static final int N = 400;

    public static long instanceCount=-3977571580707323044L;
    public static double dFld=1.110930;
    public static volatile boolean bFld=true;
    public float fFld=1.1014F;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0936.iArrFld, 16);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i4, int i5) {

        boolean b=true;

        for (int i6 : Test0936.iArrFld) {
            float f1=-11.440F;
            i5 -= (int)f1;
            if (b) continue;
            switch ((((i6 >>> 1) % 2) * 5) + 77) {
            case 87:
                i6 >>>= i5;
                Test0936.dFld -= i5;
                i4 = i5;
                break;
            case 79:
                i4 += 166;
                Test0936.iArrFld[(i4 >>> 1) % N] <<= i4;
                i4 += i6;
                Test0936.instanceCount = (long) f1;
            default:
                Test0936.instanceCount = i6;
                Test0936.instanceCount = -49078L;
                Test0936.instanceCount -= i4;
                i4 = i6;
            }
        }
        long meth_res = i4 + i5 + (b ? 1 : 0);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(int i2) {

        float f=0.596F, f2=-50.233F;
        int i3=10, i7=60925, i8=-11, i9=-34138;
        boolean b1=true;

        for (f = 2; f < 258; f++) {
            i3 = sMeth(i3, i3);
            i2 = i2;
            Test0936.dFld += Test0936.instanceCount;
            f2 += (1507114498292948833L + (f * f));
            for (i7 = 1; i7 < 6; i7++) {
                switch ((i7 % 7) + 56) {
                case 56:
                    if (b1) {
                        i2 = (int) Test0936.dFld;
                    }
                    Test0936.instanceCount += (i7 * i7);
                    break;
                case 57:
                    Test0936.instanceCount |= i8;
                    if (i8 != 0) {
                        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f2) + i7 + i8 +
                            (b1 ? 1 : 0) + i9;
                        return;
                    }
                    break;
                case 58:
                case 59:
                    i9 = 1;
                    while (++i9 < 2) {
                        i8 *= 9;
                    }
                    Test0936.instanceCount += i2;
                    break;
                case 60:
                    i3 += (i7 + i8);
                    break;
                case 61:
                    Test0936.iArrFld[i7 + 1] *= (int) -4113109244L;
                    break;
                case 62:
                    Test0936.iArrFld[i7] = (int) Test0936.instanceCount;
                    break;
                default:
                    Test0936.instanceCount -= 20979;
                }
            }
        }
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + i3 + Float.floatToIntBits(f2) + i7 + i8 + (b1 ? 1 : 0) + i9;
    }

    public static void vMeth(int i1, double d) {

        int i10=-10046, i11=-12, i12=4, i13=-47634, i14=-7;
        float f3=0.687F;
        boolean b2=false;
        boolean[] bArr =new boolean[N];
        long l=-10L;
        double[] dArr1 =new double[N];

        FuzzerUtils.init(dArr1, 0.75331);
        FuzzerUtils.init(bArr, true);

        vMeth1(i1);
        for (i10 = 11; i10 < 231; i10++) {
            i11 = -1;
            d *= 2.467F;
            dArr1[i10] += d;
            for (f3 = 1; f3 < 7; f3++) {
                i12 = i10;
                try {
                    Test0936.iArrFld[(int) (f3 - 1)] = (i1 % i11);
                    i1 = (-171 % i10);
                    i12 = (Test0936.iArrFld[i10 + 1] / -46685);
                } catch (ArithmeticException a_e) {}
                for (i13 = 1; i13 < 2; i13++) {
                    short s=-3709;
                    i11 -= (int)d;
                    switch ((i10 % 5) + 127) {
                    case 127:
                        i14 += (i13 * i13);
                        i12 = i14;
                        bArr[(i13 >>> 1) % N] = b2;
                    case 128:
                        d += l;
                        break;
                    case 129:
                        l += (((i13 * i10) + Test0936.instanceCount) - i12);
                        break;
                    case 130:
                        i12 += i12;
                        break;
                    case 131:
                        s += (short)(((i13 * i11) + i11) - f3);
                    default:
                        i12 = (int)l;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + Double.doubleToLongBits(d) + i10 + i11 + Float.floatToIntBits(f3) + i12 + i13 + i14 +
            (b2 ? 1 : 0) + l + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-2, i15=-128, i16=25971, i17=37303, i18=-50817, i19=-9053, i20=8, i21=-3, i22=90, i23=9081;
        double[] dArr =new double[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(dArr, -73.61786);
        FuzzerUtils.init(lArr, 0L);

        if (Test0936.bFld) {
            dArr[(i >>> 1) % N] = i;
            i *= (--i);
            lArr[(i >>> 1) % N] = (-(-(Test0936.instanceCount - i)));
            vMeth(24, -1.88907);
        } else if (true) {
            for (i15 = 3; i15 < 130; ++i15) {
                Test0936.iArrFld[i15 + 1] += i15;
                if (Test0936.bFld) continue;
                fFld += Test0936.instanceCount;
                i <<= i15;
                Test0936.dFld = i15;
                i = i15;
                dArr = dArr;
                for (i17 = 6; i17 < 197; i17++) {
                    i18 += (((i17 * Test0936.instanceCount) + i) - Test0936.instanceCount);
                    i18 = 141;
                    fFld -= (float) Test0936.dFld;
                    for (i19 = 1; i19 < 2; ++i19) {
                        i20 = i18;
                        Test0936.dFld = Test0936.instanceCount;
                        if (Test0936.bFld) continue;
                        i20 += (i19 + Test0936.instanceCount);
                        i += i19;
                        i20 += i19;
                        Test0936.instanceCount += (i19 ^ i15);
                    }
                }
            }
        }
        i21 = 1;
        do {
            for (i22 = 2; 94 > i22; ++i22) {
                fFld = fFld;
                i23 >>= (int) Test0936.instanceCount;
                i23 = 11;
            }
        } while (++i21 < 267);

        FuzzerUtils.out.println("i i15 i16 = " + i + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 dArr lArr = " + i23 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0936.instanceCount Test0936.dFld Test0936.bFld = " + Test0936.instanceCount + "," +
                Double.doubleToLongBits(Test0936.dFld) + "," + (Test0936.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld Test0936.iArrFld = " + Float.floatToIntBits(fFld) + "," +
                FuzzerUtils.checkSum(Test0936.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0936 _instance = new Test0936();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
