// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0419 {

    public static final int N = 400;

    public static long instanceCount=-7813309771223962576L;
    public float fFld=-106.326F;
    public static byte byFld=0;
    public static short sFld=-25328;
    public static int iFld=-158;
    public static byte byFld1=65;
    public int iFld1=-48584;
    public volatile int[] iArrFld =new int[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0419.bArrFld, false);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i3) {

        int i4=-6616;
        int i5=-3;
        int i6=24747;
        int i7=-19609;
        int i8=-43;
        int i9=-80;
        int i10=-4;
        int[] iArr =new int[N];
        float f=1.272F;
        float f1=98.485F;
        float[][] fArr =new float[N][N];
        short s1=28005;
        boolean b=false;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -1.1615);
        FuzzerUtils.init(iArr, 43463);
        FuzzerUtils.init(fArr, 0.888F);

        for (i4 = 16; i4 < 313; ++i4) {
            dArr[i4] *= f;
        }
        for (i6 = 11; i6 < 258; i6 += 2) {
            f += i6;
            for (f1 = 1; f1 < 13; f1 += 2) {
                s1 -= (short)i8;
                for (i9 = 3; i9 > 1; i9--) {
                    dArr[i9 - 1] += s1;
                    f -= i10;
                    iArr[(i6 >>> 1) % N] += (int)f1;
                    if (b) {
                        i8 <<= i9;
                        f = i7;
                        i5 -= (int) Test0419.instanceCount;
                        fArr[i9 + 1][(int)(f1)] += 0.89F;
                    } else {
                        i8 <<= s1;
                    }
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + Float.floatToIntBits(f1) + i8 + s1 + i9
            + i10 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(int i1, int i2) {

        float f2=0.95F;
        float f3=99.291F;
        float[] fArr1 =new float[N];
        int i11=-74;
        int i12=-173;
        int i13=-61104;
        int i14=-11;
        int i15=-26;
        int i16=1207;
        int[] iArr1 =new int[N];
        boolean b1=false;

        FuzzerUtils.init(fArr1, 0.311F);
        FuzzerUtils.init(iArr1, -35602);

        switch (((16046 >>> 1) % 7) + 71) {
        case 71:
            vMeth1(11);
            fArr1[(i1 >>> 1) % N] *= i1;
            f2 += f3;
        case 72:
            for (i11 = 4; 199 > i11; ++i11) {
                i12 += (((i11 * i11) + i1) - i11);
                switch (((i12 >>> 1) % 4) + 69) {
                case 69:
                    iArr1[i11] = i1;
                    try {
                        iArr1[i11 - 1] = (i12 / -1186521226);
                        i1 = (i12 / -51670);
                        i2 = (iArr1[i11] / -2279);
                    } catch (ArithmeticException a_e) {}
                    for (i13 = 1; i13 < 8; ++i13) {
                        f3 = 177;
                        for (i15 = 1; 2 > i15; i15++) {
                            i14 = i16;
                        }
                    }
                    break;
                case 70:
                    if (b1) break;
                    break;
                case 71:
                    iArr1[i11 + 1] <<= i1;
                    break;
                case 72:
                    i2 <<= -56985;
                    break;
                default:
                    Test0419.byFld += (byte) -25721;
                }
            }
            break;
        case 73:
            i16 -= (int) Test0419.instanceCount;
            break;
        case 74:
            i14 <<= i2;
        case 75:
            Test0419.sFld <<= (short) Test0419.instanceCount;
            break;
        case 76:
            i14 -= i15;
            break;
        case 77:
            i16 *= (int)f3;
            break;
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) + i11 + i12 + i13 + i14 + i15
            + i16 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + FuzzerUtils.checkSum(iArr1);
    }

    public long lMeth(short s) {

        int i=61022;
        int i17=-7;
        int i18=-20861;
        int i19=0;
        int i20=112;
        int[] iArr2 =new int[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 747302234L);
        FuzzerUtils.init(iArr2, -1);

        fFld = (i++);
        vMeth(i, -9889);
        i += i;
        Test0419.instanceCount = Test0419.instanceCount;
        i = 1;
        for (i17 = 7; i17 < 336; ++i17) {
            Test0419.instanceCount += (((i17 * i) + Test0419.instanceCount) - Test0419.instanceCount);
            try {
                i = (i17 / i17);
                i18 = (i17 % iArr2[i17]);
                i = (i17 % i);
            } catch (ArithmeticException a_e) {}
            i18 *= 231;
            for (i19 = 1; i19 < 5; ++i19) {
                i *= (int) Test0419.instanceCount;
                iArrFld = FuzzerUtils.int1array(N, (int)-170);
                Test0419.bArrFld[i19 + 1] = true;
                i20 -= (int)fFld;
                i20 >>= (int) Test0419.instanceCount;
            }
        }
        long meth_res = s + i + i17 + i18 + i19 + i20 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21=-12, i22=-8, i23=-8, i24=-69;
        double d=-1.49152;
        double d1=0.12448;
        double[] dArr1 =new double[N];
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(dArr1, -2.121032);
        FuzzerUtils.init(byArr, (byte)-86);

        iArrFld[(58 >>> 1) % N] = Integer.reverseBytes((int)(10 + lMeth((short)(28725))));
        Test0419.iFld = 4452;
        i21 = 1;
        while (++i21 < 294) {
            try {
                iArrFld[i21 + 1] = (Test0419.iFld % 141);
                Test0419.iFld = (-1187408889 / Test0419.iFld);
                iArrFld[i21 + 1] = (Test0419.iFld % 62044);
            } catch (ArithmeticException a_e) {}
            iArrFld = iArrFld;
            if (true) {
                d += Test0419.byFld;
                Test0419.byFld1 |= (byte) iFld1;
                Test0419.instanceCount += (i21 * i21);
                Test0419.iFld += i21;
            }
            iArrFld = iArrFld;
            switch (((25013 >>> 1) % 1) + 111) {
            case 111:
                for (d1 = 5; d1 < 86; d1++) {
                    for (i23 = (int)(d1); i23 < 2; i23++) {
                        fFld = Test0419.iFld;
                        d -= iFld1;
                        iFld1 += (((i23 * i21) + i24) - iFld1);
                        switch (((i23 % 2) * 5) + 52) {
                        case 60:
                            switch ((int)(((d1 % 8) * 5) + 47)) {
                            case 51:
                                iFld1 += (int)78.103F;
                                d += iFld1;
                                i24 -= i21;
                                iArrFld[i23 - 1] = (int)fFld;
                                break;
                            case 57:
                                dArr1[i21 + 1] = Test0419.byFld1;
                                Test0419.instanceCount += (((i23 * i24) + Test0419.instanceCount) - Test0419.instanceCount);
                                byArr[i23 + 1][(int) (d1 - 1)] = Test0419.byFld;
                                i22 = (int) Test0419.instanceCount;
                                break;
                            case 69:
                                Test0419.instanceCount = 166;
                                iFld1 |= Test0419.byFld1;
                                iFld1 += (int)fFld;
                            case 75:
                                i22 += i23;
                                break;
                            case 60:
                                d %= 12;
                                break;
                            case 66:
                                d = iFld1;
                                break;
                            case 48:
                                iFld1 = 33213;
                                break;
                            case 73:
                                i24 = Test0419.byFld1;
                                break;
                            }
                        case 61:
                        }
                    }
                }
            default:
                i24 += (i21 - Test0419.sFld);
            }
        }

        FuzzerUtils.out.println("i21 d d1 = " + i21 + "," + Double.doubleToLongBits(d) + "," +
            Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("dArr1 byArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0419.instanceCount fFld Test0419.byFld = " + Test0419.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Test0419.byFld);
        FuzzerUtils.out.println("Test0419.sFld Test0419.iFld Test0419.byFld1 = " + Test0419.sFld + "," + Test0419.iFld + "," + Test0419.byFld1);
        FuzzerUtils.out.println("iFld1 iArrFld Test0419.bArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0419.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0419 _instance = new Test0419();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
