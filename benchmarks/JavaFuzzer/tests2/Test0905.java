// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:54 2023
public class Test0905 {

    public static final int N = 400;

    public static long instanceCount=-20880L;
    public static volatile boolean bFld=true;
    public static int iFld=6;
    public static byte byFld=-14;
    public static long lFld=-305452016L;
    public double dFld=0.120887;
    public int iFld1=2;
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0905.dArrFld, 97.79159);
        FuzzerUtils.init(Test0905.iArrFld, -47434);
        FuzzerUtils.init(Test0905.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i2, int i3) {

        double d=117.83680;
        int i4=13, i5=-235, i6=-9, i7=14, i8=-46629;
        long[][] lArr =new long[N][N];
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(lArr, 2L);
        FuzzerUtils.init(fArr, 1.526F);

        Test0905.dArrFld[(i3 >>> 1) % N] -= i3;
        Test0905.instanceCount = (long) d;
        for (i4 = 3; i4 < 378; ++i4) {
            Test0905.instanceCount *= i2;
            i2 %= (int)(i3 | 1);
            i2 += (i4 - i5);
            for (i6 = 5; i6 > 1; i6 -= 2) {
                switch ((i6 % 8) + 79) {
                case 79:
                    if (Test0905.bFld) {
                        i8 = 1;
                        do {
                            i7 >>= i7;
                            Test0905.instanceCount = i8;
                            Test0905.instanceCount = i8;
                            i2 = (int) Test0905.instanceCount;
                            Test0905.instanceCount ^= Test0905.instanceCount;
                        } while (++i8 < 3);
                    }
                case 80:
                    Test0905.instanceCount -= i7;
                    break;
                case 81:
                    i7 >>= (int)49112L;
                    break;
                case 82:
                    i7 += i7;
                    break;
                case 83:
                    i5 += (((i6 * i4) + i4) - i8);
                    break;
                case 84:
                    d += 9;
                    break;
                case 85:
                    lArr[i4 + 1][i6 + 1] ^= i4;
                    break;
                case 86:
                    fArr[i6 - 1][i6 - 1] *= Test0905.instanceCount;
                    break;
                default:
                    i5 += (i6 * i6);
                }
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static byte byMeth(long l) {

        int i1=-17, i9=-9, i10=-6327;
        short s=-16222;
        double d1=100.115562;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 0.118F);

        i1 -= (int)(lMeth(i1, i1) + l);
        i1 = (int)l;
        i1 -= 29;
        switch (((i1 >>> 1) % 1) + 34) {
        case 34:
            Test0905.bFld = false;
            i1 += i1;
        }
        fArr1[(-62627 >>> 1) % N] = i1;
        for (i9 = 19; i9 < 322; i9++) {
            try {
                Test0905.iArrFld[i9] = (Test0905.iFld / -4250);
                Test0905.iFld = (i9 / -1398439887);
                i1 = (-10681 / i10);
            } catch (ArithmeticException a_e) {}
            Test0905.iFld = (int) Test0905.instanceCount;
            switch ((i9 % 6) + 57) {
            case 57:
                i10 += (i9 | s);
                break;
            case 58:
                i10 -= i1;
                Test0905.iArrFld[i9 - 1] = (int) d1;
                l += i9;
                break;
            case 59:
                Test0905.bFld = Test0905.bFld;
                break;
            case 60:
                l = l;
                break;
            case 61:
                Test0905.iArrFld[i9] = -9;
            case 62:
                if (Test0905.bFld) break;
                break;
            }
        }
        long meth_res = l + i1 + i9 + i10 + s + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(float f, int i) {

        int i11=-116, i12=42169, i13=-38797, i14=-14, i15=50524, i16=-13, i17=-2352, i18=12;
        short s1=-27735;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -57076L);

        i >>= (int) (byMeth(Test0905.instanceCount) * f);
        for (i11 = 7; i11 < 133; i11++) {
            Test0905.instanceCount += (((i11 * Test0905.instanceCount) + i12) - i11);
            Test0905.instanceCount += (((i11 * i) + Test0905.iFld) - Test0905.iFld);
            for (i13 = 1; 12 > i13; ++i13) {
                Test0905.iFld += i13;
                lArr1[i13 - 1] = Test0905.instanceCount;
                i12 += (int) Test0905.instanceCount;
            }
            for (i15 = i11; i15 < 12; ++i15) {
                Test0905.instanceCount = i15;
                Test0905.bArrFld[i15] = Test0905.bFld;
                s1 += (short)i16;
                for (i17 = 1; 1 > i17; i17++) {
                    i14 += (((i17 * Test0905.iFld) + Test0905.instanceCount) - Test0905.byFld);
                    if (Test0905.bFld) continue;
                }
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i11 + i12 + i13 + i14 + i15 + i16 + s1 + i17 + i18 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i19=2, i20=50638, i21=-35935, i22=1021, i23=7643, i24=53;
        short s2=-9751;
        float f1=-2.994F;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(lArr2, 2329346428L);

        vMeth(-1.44F, Test0905.iFld);
        i19 = 1;
        while (++i19 < 389) {
            if (false) break;
            Test0905.iFld -= Test0905.iFld;
            Test0905.iFld >>= i19;
            i20 = 1;
            while (++i20 < 65) {
                Test0905.iFld *= (int) Test0905.lFld;
                for (i21 = i19; i21 < 1; i21++) {
                    lArr2 = lArr2;
                    Test0905.lFld += (i21 * Test0905.lFld);
                    Test0905.iArrFld[i21 + 1] = Test0905.iFld;
                    Test0905.iArrFld[i19] <<= (int) -38302L;
                    lArr2 = lArr2;
                    Test0905.iFld -= i19;
                    Test0905.iArrFld[i19] += i21;
                    Test0905.iFld += (int) dFld;
                    Test0905.bFld = Test0905.bFld;
                    s2 += (short)80;
                }
                Test0905.iArrFld[i20] += i19;
                for (i23 = 1; i23 < 1; ++i23) {
                    switch ((i20 % 8) + 49) {
                    case 49:
                        i22 /= (int) (Test0905.instanceCount | 1);
                        i22 = 100;
                        i22 -= Test0905.iFld;
                    case 50:
                        Test0905.instanceCount = i20;
                        s2 = (short)iFld1;
                        i24 += (int)(1.300F + (i23 * i23));
                        try {
                            Test0905.iFld = (-21 / i20);
                            Test0905.iFld = (iFld1 % i21);
                            Test0905.iFld = (Test0905.iFld % i24);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 51:
                        Test0905.instanceCount += (((i23 * Test0905.lFld) + i19) - Test0905.lFld);
                        Test0905.instanceCount += (((i23 * Test0905.instanceCount) + i23) - Test0905.lFld);
                        break;
                    case 52:
                        Test0905.iArrFld = FuzzerUtils.int1array(N, (int) 97);
                        break;
                    case 53:
                        Test0905.iFld <<= -5;
                        break;
                    case 54:
                        Test0905.iFld = (int) Test0905.lFld;
                        break;
                    case 55:
                        s2 -= (short)f1;
                        break;
                    case 56:
                        iFld1 = (int)f1;
                        break;
                    default:
                        Test0905.iArrFld[i19] = (int) Test0905.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 s2 i23 = " + i22 + "," + s2 + "," + i23);
        FuzzerUtils.out.println("i24 f1 lArr2 = " + i24 + "," + Float.floatToIntBits(f1) + "," +
            FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0905.instanceCount Test0905.bFld Test0905.iFld = " + Test0905.instanceCount + "," + (Test0905.bFld ? 1
                : 0) + "," + Test0905.iFld);
        FuzzerUtils.out.println("Test0905.byFld Test0905.lFld dFld = " + Test0905.byFld + "," + Test0905.lFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iFld1 Test0905.dArrFld Test0905.iArrFld = " + iFld1 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0905.dArrFld)) + "," + FuzzerUtils.checkSum(Test0905.iArrFld));
        FuzzerUtils.out.println("Test0905.bArrFld = " + FuzzerUtils.checkSum(Test0905.bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0905 _instance = new Test0905();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
