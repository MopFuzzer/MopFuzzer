// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0799 {

    public static final int N = 400;

    public static long instanceCount=-1627723500042437554L;
    public static float fFld=-2.685F;
    public double dFld=0.62438;
    public static int[] iArrFld =new int[N];
    public static int[] iArrFld1 =new int[N];
    public static volatile float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0799.iArrFld, -19510);
        FuzzerUtils.init(Test0799.iArrFld1, 211);
        FuzzerUtils.init(Test0799.fArrFld, -94.333F);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static short sMeth() {

        int i2=-3552;
        short s=-29716;
        float f=63.616F;

        i2 -= (int)(((14 * s) * (f * i2)) + Math.abs(i2 + 73));
        long meth_res = i2 + s + Float.floatToIntBits(f);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth2(int i7, short s1) {

        int i8=6, i9=-3;

        i7 |= i7;
        for (i8 = 6; i8 < 137; i8++) {
            byte by1=-101;
            Test0799.fFld += (((i8 * i7) + i8) - by1);
        }
        long meth_res = i7 + s1 + i8 + i9;
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1(int i6) {

        short s2=10010;
        int i10=3, i11=-13, i12=-2, i13=-10, i14=2;
        byte by2=-82;
        double[] dArr =new double[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(dArr, -60.36791);
        FuzzerUtils.init(fArr, 33.991F);

        for (double d : dArr) {
            Test0799.iArrFld[(i6 >>> 1) % N] -= (i6 * iMeth2(i6, s2));
            i10 = 1;
            do {
                i6 += (((i10 * Test0799.instanceCount) + by2) - i10);
            } while (++i10 < 4);
            for (i11 = 1; i11 < 4; i11++) {
                try {
                    i6 = (i12 / Test0799.iArrFld[(116 >>> 1) % N]);
                    i6 = (-183 % i12);
                    Test0799.iArrFld[i11] = (i10 % i6);
                } catch (ArithmeticException a_e) {}
                i12 += i11;
                for (i13 = 2; i13 > 1; i13--) {
                    Test0799.iArrFld[i11] -= i11;
                    Test0799.fFld -= 29450;
                    Test0799.iArrFld[i11 + 1] = i11;
                    fArr[i13 - 1] = i13;
                }
                Test0799.instanceCount = -13;
                i12 += (-18923 + (i11 * i11));
                i14 -= 14;
            }
        }
        long meth_res = i6 + s2 + i10 + by2 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i5=1, i16=-105;
        float f1=-91.111F, f2=-20.297F;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-25882);

        i5 = (-iMeth1(i5));
        for (int i15 : Test0799.iArrFld) {
            for (f1 = 1; f1 < 4; ++f1) {
                sArr[(int)(f1)] >>= (short)-15;
                Test0799.instanceCount += (long) dFld;
                f2 = 1;
                do {
                    i15 -= (int) Test0799.instanceCount;
                    i5 += (int) Test0799.instanceCount;
                    i5 = 8;
                    Test0799.iArrFld = Test0799.iArrFld1;
                    i5 += (0 + (f2 * f2));
                    Test0799.iArrFld1[(int) (f2 - 1)] += -12122;
                    Test0799.fFld += (float) 127.100505;
                    Test0799.fFld = i16;
                    Test0799.fArrFld[(int) (f2 + 1)] += i15;
                } while (++f2 < 2);
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + i16 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-4;
        int i1=-42500;
        int i3=-87;
        int i4=14;
        int i17=0;
        int i18=-12;
        int i19=46607;
        int i20=93;
        int i21=11;
        int[] iArr =new int[N];
        byte by=-14;
        boolean b=false;
        short s3=14946;
        float f3=57.367F, f4=47.54F;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, 17);
        FuzzerUtils.init(lArr, 28L);

        i = 1;
        while (++i < 307) {
            i1 = i;
            sMeth();
            for (i3 = 5; 82 > i3; i3++) {
                i4 <<= (++i4);
            }
            if (b = ((iMeth() != i4) == b)) {
                iArr[i - 1] -= (int) (((++Test0799.instanceCount) + 1259371310472103489L) - 4);
                i4 -= (--by);
            }
            Test0799.iArrFld1[i - 1] = i4;
            lArr[i] = (long)1.63065;
            i4 -= i4;
            Test0799.instanceCount = (long) dFld;
            i4 += i;
            for (i17 = i; i17 < 82; ++i17) {
                Test0799.instanceCount *= -34747;
            }
        }
        i19 = 224;
        do {
            Test0799.fFld -= Test0799.instanceCount;
        } while ((i19 -= 3) > 0);
        s3 = (short)i;
        i4 += (int) Test0799.instanceCount;
        f3 = 1;
        do {
            i18 -= -41291;
            Test0799.instanceCount -= i19;
            for (i20 = 4; i20 < 72; ++i20) {
                switch (((i20 % 1) * 5) + 7) {
                case 8:
                    by &= (byte)i1;
                    i1 = i17;
                    break;
                default:
                    f4 *= i1;
                }
                try {
                    i1 = (7369 % Test0799.iArrFld[i20 - 1]);
                    i18 = (i1 % -52);
                    i21 = (i3 / -134);
                } catch (ArithmeticException a_e) {}
                dFld *= i20;
                i21 = i3;
            }
        } while (++f3 < 348);

        FuzzerUtils.out.println("i i1 i3 = " + i + "," + i1 + "," + i3);
        FuzzerUtils.out.println("i4 by b = " + i4 + "," + by + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("s3 f3 i20 = " + s3 + "," + Float.floatToIntBits(f3) + "," + i20);
        FuzzerUtils.out.println("i21 f4 iArr = " + i21 + "," + Float.floatToIntBits(f4) + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0799.instanceCount Test0799.fFld dFld = " + Test0799.instanceCount + "," +
                Float.floatToIntBits(Test0799.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0799.iArrFld Test0799.iArrFld1 Test0799.fArrFld = " + FuzzerUtils.checkSum(Test0799.iArrFld) + ","
                + FuzzerUtils.checkSum(Test0799.iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0799.fArrFld)));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0799 _instance = new Test0799();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
