// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0409 {

    public static final int N = 400;

    public static long instanceCount=-4095846657L;
    public static float fFld=1.254F;
    public short sFld=-18338;
    public int iFld=-53905;
    public static float[] fArrFld =new float[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0409.fArrFld, 0.84F);
        FuzzerUtils.init(Test0409.byArrFld, (byte) -85);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-23;
        int i3=50;
        int i4=64759;
        int i5=-11;
        int i6=9848;
        int i7=-9;
        int[] iArr =new int[N];
        byte by=-123;
        double d1=0.66976, d2=51.39650;

        FuzzerUtils.init(iArr, 12);

        for (i2 = 13; i2 < 209; i2++) {
            by = (byte)i2;
            i3 = (int) Test0409.instanceCount;
            for (i4 = 1; i4 < 8; i4++) {
                if (true) {
                    d1 = Test0409.fFld;
                    Test0409.instanceCount += i2;
                } else {
                    i6 = 1;
                    while (++i6 < 2) {
                        if (true) break;
                        try {
                            i5 = (15310 % i2);
                            i3 = (i4 % i6);
                            iArr[i6 - 1] = (118 % i2);
                        } catch (ArithmeticException a_e) {}
                        d1 = i6;
                        i5 += (i6 * i6);
                    }
                    for (d2 = i4; 2 > d2; d2++) {
                        i5 += (int)(d2 * d2);
                        Test0409.instanceCount *= (long) Test0409.fFld;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + by + i4 + i5 + Double.doubleToLongBits(d1) + i6 + Double.doubleToLongBits(d2) +
            i7 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i, long l, int i1) {

        int i8=-104;
        int i9=65;
        int i10=242;
        int[] iArr1 =new int[N];
        float f=0.37F;
        boolean b=true;
        boolean[] bArr =new boolean[N];
        double d3=-122.111527;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)-30);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(iArr1, -12);

        vMeth1();
        Test0409.instanceCount >>= Test0409.instanceCount;
        for (i8 = 16; i8 < 355; i8 += 2) {
            i -= (int) Test0409.instanceCount;
            byArr[i8 - 1] >>>= (byte)2303232905L;
            i1 %= (int)251L;
            for (f = 9; 1 < f; f -= 2) {
                bArr[(int)(f + 1)] = b;
                d3 = f;
            }
        }
        for (float f1 : Test0409.fArrFld) {
            i1 >>>= 0;
            i1 = i1;
            Test0409.instanceCount = (long) f;
            iArr1[(6 >>> 1) % N] = (int) Test0409.instanceCount;
            if (b) continue;
        }
        vMeth_check_sum += i + l + i1 + i8 + i9 + Float.floatToIntBits(f) + i10 + (b ? 1 : 0) +
            Double.doubleToLongBits(d3) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vSmallMeth(double d) {

        int i11=18554;

        vMeth(i11, -232L, i11);
        Test0409.byArrFld[(i11 >>> 1) % N] = (byte) i11;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i11;
    }

    public void mainTest(String[] strArr1) {

        double d4=0.131022;
        int i12=-43480;
        int i13=1;
        int i14=-4;
        int i15=41369;
        int i16=177;
        int i17=-236;
        int i18=-49;
        int i19=-8;
        int i20=-4;
        int i21=1;
        int i22=54171;
        int i23=0;
        int[] iArr2 =new int[N];
        int[] iArr3 =new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, 4);
        FuzzerUtils.init(iArr3, -193);

        for (int smallinvoc=0; smallinvoc<331; smallinvoc++) vSmallMeth(d4);
        i12 /= (int)(i12 | 1);
        for (i13 = 122; i13 > 6; i13--) {
            Test0409.fFld += Test0409.fFld;
            try {
                iArr2[i13 + 1] = (i12 % i14);
                iArr2[i13] = (i12 % -77);
                i14 = (i14 / iArr3[i13 - 1]);
            } catch (ArithmeticException a_e) {}
            for (i15 = 11; i15 < 216; i15++) {
                i12 += 505;
                i12 = i13;
                i16 >>>= i12;
                try {
                    i12 = (40 / i15);
                    i16 = (26255 / i16);
                    i14 = (iArr3[i13] % 197);
                } catch (ArithmeticException a_e) {}
                for (i17 = 1; i17 < 2; ++i17) {
                    Test0409.fFld -= i15;
                    b1 = b1;
                    Test0409.fFld += (((i17 * sFld) + i13) - i17);
                    iArr3[(iFld >>> 1) % N] -= (int) Test0409.instanceCount;
                }
                i16 -= (int) Test0409.fFld;
                for (i19 = i13; 2 > i19; ++i19) {
                    i16 = 5;
                }
                i14 += i18;
                i20 -= (int) Test0409.instanceCount;
                sFld = (short)-11;
            }
            i21 = 1;
            do {
                Test0409.fFld += i21;
                iFld += (i21 * i21);
                i18 += i21;
                i16 -= i12;
                i20 = i19;
                for (i22 = 1; i22 < 1; ++i22) {
                    i20 += i14;
                    iArr2[i22] *= i14;
                }
            } while (++i21 < 216);
        }

        FuzzerUtils.out.println("d4 i12 i13 = " + Double.doubleToLongBits(d4) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 b1 = " + i17 + "," + i18 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 iArr2 = " + i22 + "," + i23 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0409.instanceCount Test0409.fFld sFld = " + Test0409.instanceCount + "," +
                Float.floatToIntBits(Test0409.fFld) + "," + sFld);
        FuzzerUtils.out.println("iFld Test0409.fArrFld Test0409.byArrFld = " + iFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0409.fArrFld)) + "," + FuzzerUtils.checkSum(Test0409.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0409 _instance = new Test0409();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
