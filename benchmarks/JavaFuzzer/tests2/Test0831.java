// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0831 {

    public static final int N = 400;

    public static long instanceCount=102L;
    public static double dFld=-2.92641;
    public static short sFld=25137;
    public static int iFld=-46931;
    public float fFld=-118.965F;
    public static boolean bFld=false;
    public static long[] lArrFld =new long[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0831.lArrFld, -6L);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f, long l1) {

        int i6=-215;
        int i7=5;
        int i8=-5;
        int i9=-34355;
        int i10=-14;
        int i11=-11;
        int[] iArr1 =new int[N];
        byte by1=82;

        FuzzerUtils.init(iArr1, -143);

        f = i6;
        Test0831.instanceCount <<= -6878676641930186807L;
        Test0831.sFld = (short) Test0831.dFld;
        i6 -= i6;
        for (i7 = 7; 335 > i7; ++i7) {
            i6 = i6;
        }
        l1 = i6;
        for (i9 = 9; i9 < 290; i9++) {
            i11 = 1;
            do {
                by1 -= (byte)-48235;
                l1 = i11;
                iArr1[i9 + 1] -= (int)f;
                Test0831.lArrFld[i11 - 1] = i9;
                i10 += (((i11 * i9) + i11) - i11);
                Test0831.instanceCount += (long) f;
            } while (++i11 < 6);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l1 + i6 + i7 + i8 + i9 + i10 + i11 + by1 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static float fMeth() {

        int i4=35068;
        int i5=-14;
        int i12=-58755;
        int i13=-37854;
        int i14=-9;
        int i15=-40068;
        int[][] iArr2 =new int[N][N];
        float f1=0.989F;
        long l2=2571L;
        byte by2=0;

        FuzzerUtils.init(iArr2, 12);

        i4 = 141;
        do {
            i5 += (int) ((Test0831.instanceCount + (i4 + -142)) + (Test0831.dFld--));
        } while (--i4 > 0);
        vMeth1(f1, Test0831.instanceCount);
        for (i12 = 225; 5 < i12; i12--) {
            l2 += i12;
            if (i5 != 0) {
            }
            l2 = l2;
            by2 += (byte)-139L;
            Test0831.lArrFld[i12] ^= l2;
            iArr2[i12][i12 - 1] += i12;
            switch ((i12 % 1) + 76) {
            case 76:
                if (false) {
                    for (i14 = 7; i14 > 1; --i14) {
                        i5 = (int) Test0831.instanceCount;
                        l2 = -52770;
                    }
                }
                break;
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f1) + i12 + i13 + l2 + by2 + i14 + i15 +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(long l) {

        double d=58.38504;
        int i=56947;
        int i1=-29860;
        int i2=-76;
        int i3=7;
        int[] iArr =new int[N];
        boolean b=true;
        byte by=18;
        float f2=-1.315F;

        FuzzerUtils.init(iArr, 44891);

        for (d = 4; d < 287; ++d) {
            for (i1 = 1; i1 < 6; i1++) {
                i3 = 1;
                while (++i3 < 2) {
                    iArr[i3] = i3;
                    i2 *= (i2++);
                    iArr[i1 + 1] = (int) (-(--Test0831.instanceCount));
                    i = (int)((-5329069358943066100L + (l += i1)) - (14 - (l + i1)));
                }
                iArr[(int)(d + 1)] = (int)l;
                b = b;
                by += (byte)i1;
                i2 += (i2--);
                i += (((i1 * i) + i1) - i);
                i += (i1 * i1);
                b = (fMeth() != f2);
                l %= ((long)(f2) | 1);
            }
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i + i1 + i2 + i3 + (b ? 1 : 0) + by +
            Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i16=-9;
        int i17=1799;
        int i18=3853;
        int i19=240;
        int i20=-75;
        int i21=53;
        int[] iArr3 =new int[N];

        FuzzerUtils.init(iArr3, 21);

        vMeth(Test0831.instanceCount);
        i16 = 356;
        while (--i16 > 0) {
            Test0831.instanceCount <<= 73;
            Test0831.iFld += (((i16 * Test0831.iFld) + Test0831.iFld) - fFld);
            switch (((i16 % 1) * 5) + 37) {
            case 38:
                switch ((i16 % 5) + 20) {
                case 20:
                    Test0831.iFld += i16;
                    break;
                case 21:
                    Test0831.iFld >>= (int) Test0831.instanceCount;
                    if (Test0831.bFld) continue;
                    Test0831.lArrFld[i16 + 1] -= Test0831.iFld;
                    break;
                case 22:
                    Test0831.instanceCount *= (long) fFld;
                case 23:
                    Test0831.iFld += i16;
                    fArrFld[i16 - 1] = Test0831.instanceCount;
                    for (i17 = 3; 71 > i17; ++i17) {
                        i18 = i16;
                        i18 = (int) Test0831.instanceCount;
                        for (i19 = 1; i19 < 2; i19++) {
                            i18 += (i19 - Test0831.iFld);
                            fFld -= -10;
                            fFld += ((long) i19 ^ (long) Test0831.iFld);
                            i18 += (int) Test0831.instanceCount;
                            Test0831.instanceCount += (i19 * i19);
                            try {
                                i18 = (i18 / iArr3[i19 - 1]);
                                Test0831.iFld = (i16 % i20);
                                i20 = (67 % i16);
                            } catch (ArithmeticException a_e) {}
                            i18 &= -89;
                            iArr3 = iArr3;
                            Test0831.sFld += (short) Test0831.iFld;
                            Test0831.iFld = i19;
                        }
                        i21 = 1;
                        do {
                            Test0831.dFld -= Test0831.iFld;
                            Test0831.instanceCount -= (long) fFld;
                        } while (++i21 < 2);
                    }
                case 24:
                    if (false) continue;
                    break;
                default:
                    Test0831.instanceCount = (long) fFld;
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0831.instanceCount Test0831.dFld Test0831.sFld = " + Test0831.instanceCount + "," +
                Double.doubleToLongBits(Test0831.dFld) + "," + Test0831.sFld);
        FuzzerUtils.out.println("Test0831.iFld fFld Test0831.bFld = " + Test0831.iFld + "," + Float.floatToIntBits(fFld) + "," +
                (Test0831.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0831.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test0831.lArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0831 _instance = new Test0831();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
