// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0944 {

    public static final int N = 400;

    public static long instanceCount=3751365331L;
    public int iFld=5;
    public static volatile float fFld=-108.176F;
    public static boolean bFld=false;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0944.iArrFld, 64591);
    }

    public static long dMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(float f1, float f2, int i4) {

        int i5=2, i6=-5807, i7=13, i8=139, i9=-29;
        byte by=-46;
        short s=-23589;
        double d2=-2.47387;

        i4 = i4;
        f2 = i4;
        i5 = 1;
        do {
            switch ((i5 % 6) + 90) {
            case 90:
                i4 &= by;
                i4 += (((i5 * by) + i4) - f2);
                s = (short)i5;
                break;
            case 91:
                d2 += i4;
                i4 += i4;
                f1 += i5;
                break;
            case 92:
                for (i6 = 1; i6 < 4; ++i6) {
                    Test0944.instanceCount += (i6 * i6);
                }
                for (i8 = i5; i8 < 4; i8 += 2) {
                    i9 *= i9;
                    i9 = i8;
                }
                break;
            case 93:
                Test0944.instanceCount += i7;
            case 94:
            case 95:
                if (Test0944.bFld) break;
                break;
            default:
                i9 = (int) Test0944.instanceCount;
            }
        } while (++i5 < 394);
        vMeth_check_sum += Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i4 + i5 + by + s +
            Double.doubleToLongBits(d2) + i6 + i7 + i8 + i9;
    }

    public static float fMeth(long l2) {

        int i2=-18;
        int i3=5;
        int i10=45341;
        int i11=-32992;
        int[][] iArr1 =new int[N][N];
        double d3=-35.103597;
        double[][] dArr =new double[N][N];
        long[] lArr =new long[N];

        FuzzerUtils.init(dArr, 17.88407);
        FuzzerUtils.init(lArr, -45854L);
        FuzzerUtils.init(iArr1, 170);

        for (i2 = 231; i2 > 1; i2 -= 2) {
            dArr[i2][i2] += (--i3);
            vMeth(Test0944.fFld, Test0944.fFld, 48);
            i3 = (int) Test0944.fFld;
            i10 = 1;
            while (++i10 < 14) {
                byte by1=118;
                l2 -= l2;
                Test0944.bFld = true;
                l2 = by1;
                lArr[i2 - 1] = i10;
                i3 %= (int)(i10 | 1);
                i11 = 1;
                while (++i11 < 1) {
                    short s1=4652;
                    Test0944.iArrFld = iArr1[i2 + 1];
                    i3 %= (int)85.144F;
                    i3 += (int)d3;
                    s1 *= (short)i3;
                }
            }
        }
        long meth_res = l2 + i2 + i3 + i10 + i11 + Double.doubleToLongBits(d3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static double dMeth(long l, long l1, int i1) {

        double d1=-118.72109;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 243);

        Test0944.fFld -= iArr[(-12 >>> 1) % N];
        i1 = (int) (((++d1) - (i1 * i1)) + (-(-fMeth(Test0944.instanceCount))));
        long meth_res = l + l1 + i1 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-1.202F;
        double d=0.91181;
        int i=1076, i12=56629, i13=37374, i14=-10, i15=2, i16=229, i17=-35647, i18=-13;
        byte by2=-75;

        iFld -= (int)f;
        for (d = 18; d < 297; d++) {
            i = (int) dMeth(Test0944.instanceCount, Test0944.instanceCount, 14);
        }
        Test0944.instanceCount = (long) f;
        by2 -= (byte)iFld;
        i = i;
        i = i;
        i12 = 1;
        while (++i12 < 383) {
            for (i13 = 66; i13 > 3; --i13) {
                iFld = by2;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test0944.iArrFld[i15] = i12;
                }
                switch ((i12 % 9) + 56) {
                case 56:
                    Test0944.instanceCount -= (long) 2.112066;
                    iFld = iFld;
                    break;
                case 57:
                    i16 = (int)-2274260579L;
                    switch (((i12 % 8) * 5) + 115) {
                    case 129:
                        for (i17 = 1; i17 < 2; ++i17) {
                            i18 = by2;
                            i14 += (int)f;
                            Test0944.fFld += i17;
                            i += (int)f;
                            i |= i12;
                            switch (((i17 % 2) * 5) + 95) {
                            case 97:
                                i16 = i14;
                                iFld += i17;
                                Test0944.instanceCount = i17;
                                break;
                            case 96:
                                Test0944.iArrFld[i17] *= iFld;
                                i16 ^= -1;
                                iFld %= (int)(iFld | 1);
                            default:
                                Test0944.instanceCount = Test0944.instanceCount;
                            }
                        }
                        break;
                    case 131:
                        try {
                            Test0944.iArrFld[i13] = (i17 % -192200504);
                            i14 = (i13 % 134);
                            iFld = (i15 / Test0944.iArrFld[i13 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 119:
                        i14 += (i13 - i18);
                        break;
                    case 123:
                        i16 = i13;
                        break;
                    case 146:
                        i14 += (i13 - i16);
                    case 141:
                        if (true) break;
                        break;
                    case 120:
                        Test0944.iArrFld[i12] = (int) Test0944.fFld;
                        break;
                    case 140:
                        by2 >>= by2;
                    }
                    break;
                case 58:
                    Test0944.instanceCount += (i13 ^ (long) f);
                    break;
                case 59:
                    by2 ^= (byte)i;
                    break;
                case 60:
                    Test0944.iArrFld[i13 - 1] >>>= i18;
                    break;
                case 61:
                    i14 <<= iFld;
                    break;
                case 62:
                    Test0944.iArrFld = Test0944.iArrFld;
                case 63:
                    Test0944.iArrFld[i12] = (int) f;
                    break;
                case 64:
                }
            }
        }

        FuzzerUtils.out.println("f d i = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + i);
        FuzzerUtils.out.println("by2 i12 i13 = " + by2 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 = " + i17 + "," + i18);

        FuzzerUtils.out.println("Test0944.instanceCount iFld Test0944.fFld = " + Test0944.instanceCount + "," + iFld + "," +
                Float.floatToIntBits(Test0944.fFld));
        FuzzerUtils.out.println("Test0944.bFld Test0944.iArrFld = " + (Test0944.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0944.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0944 _instance = new Test0944();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  fMeth ->  fMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
