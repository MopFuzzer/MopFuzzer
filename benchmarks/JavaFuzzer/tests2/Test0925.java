// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:55 2023
public class Test0925 {

    public static final int N = 400;

    public static long instanceCount=-2394827877L;
    public static boolean bFld=false;
    public static short sFld=28297;
    public static float fFld=46.763F;

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i=6;

        i >>= Math.max(--i, i);
        vSmallMeth_check_sum += i;
    }

    public static int iMeth(long l) {

        int i5=5185, i6=-6, i7=46328, i8=0, i9=-187, i10=-11, i11=38133, i12=121, i13=-5;
        float f1=-15.419F, f2=-75.518F;
        byte by=-81;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 126.29956);

        for (i5 = 9; i5 < 156; i5++) {
            i6 = (int) Test0925.instanceCount;
            for (i7 = 1; i7 < 11; i7++) {
                dArr[i7 - 1] -= l;
            }
            i6 += (i5 - Test0925.instanceCount);
            i6 = (int)l;
            for (i9 = i5; i9 < 11; ++i9) {
                for (f1 = 1; f1 < 1; ++f1) {
                    i8 &= i9;
                    by += (byte)f1;
                }
            }
            for (i12 = 1; 11 > i12; ++i12) {
                l += -18;
                i13 *= i6;
                f2 += i7;
                i13 = i10;
            }
        }
        long meth_res = l + i5 + i6 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f1) + i11 + by + i12 + i13 +
            Float.floatToIntBits(f2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, float f) {

        int i14=-10, i15=30360, i16=106, i17=4, i18=-12;
        short s=-12785;
        double d=-2.91526;
        long l1=-200L;
        long[] lArr1 =new long[N];
        byte by1=-1;
        float[] fArr =new float[N];

        FuzzerUtils.init(lArr1, 179302384L);
        FuzzerUtils.init(fArr, 2.182F);

        i4 = (int) (iMeth(Test0925.instanceCount) + f);
        for (i14 = 296; i14 > 6; i14 -= 3) {
            s = (short)i4;
        }
        i15 -= (int)10L;
        d = -2586277800761742708L;
        s <<= (short) Test0925.instanceCount;
        i4 = (int)f;
        for (l1 = 1; 205 > l1; l1++) {
            for (i17 = 1; i17 < 8; ++i17) {
                Test0925.instanceCount += i17;
                lArr1[i17 + 1] /= (i15 | 1);
                fArr = fArr;
                fArr[i17] -= i16;
                i15 |= (int) Test0925.instanceCount;
                lArr1[(int)(l1)] -= by1;
            }
        }
        long meth_res = i4 + Float.floatToIntBits(f) + i14 + i15 + s + Double.doubleToLongBits(d) + l1 + i16 + i17 +
            i18 + by1 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i3=-13;
        int i19=-52980;
        int i20=-225;
        int i21=42011;
        int i22=-24374;
        int i23=-179;
        int i24=-6;
        int[] iArr =new int[N];
        float f3=93.221F;
        boolean[] bArr =new boolean[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, 80);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 4L);

        iArr[(i3 >>> 1) % N] *= (int)Math.abs(iArr[(i3 >>> 1) % N] + -60);
        Test0925.bFld = (bArr[(i3 >>> 1) % N] = ((Test0925.bFld ^ Test0925.bFld) == (i3 == i3)));
        lArr[(238 >>> 1) % N] = (lMeth(i3, f3) | i3);
        for (i19 = 12; i19 < 215; i19++) {
            for (i21 = 1; 8 > i21; ++i21) {
                Test0925.instanceCount >>= i19;
                f3 = Test0925.instanceCount;
                i3 |= (int) Test0925.instanceCount;
                for (i23 = 2; i23 > 1; i23--) {
                    i22 = i21;
                    i20 += (((i23 * Test0925.instanceCount) + Test0925.instanceCount) - i23);
                    i22 += i23;
                }
                f3 += (i21 + i20);
                i22 += i21;
                i22 += (int) Test0925.instanceCount;
            }
        }
        vMeth_check_sum += i3 + Float.floatToIntBits(f3) + i19 + i20 + i21 + i22 + i23 + i24 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i1=21;
        int i2=8;
        int i25=14;
        int i26=-13856;
        int i27=19;
        int i28=-179;
        int[] iArr1 =new int[N];
        double d1=-1.128565;
        float f4=-44.546F;
        float[][] fArr1 =new float[N][N];
        long[] lArr2 =new long[N];

        FuzzerUtils.init(iArr1, -23531);
        FuzzerUtils.init(fArr1, 66.608F);
        FuzzerUtils.init(lArr2, -3L);

        for (int smallinvoc=0; smallinvoc<357; smallinvoc++) vSmallMeth();
        vSmallMeth();
        for (i1 = 7; i1 < 205; ++i1) {
            vMeth();
            iArr1[i1 + 1] |= i2;
            iArr1 = iArr1;
            i2 = Test0925.sFld;
            for (d1 = 7; d1 < 127; d1++) {
                Test0925.instanceCount += (-15221 + (d1 * d1));
                i25 &= i25;
                i25 += (int) (((d1 * i25) + Test0925.instanceCount) - Test0925.instanceCount);
                Test0925.instanceCount = (long) Test0925.fFld;
                for (i26 = 1; i26 < 2; i26 += 3) {
                    i27 += (i26 * i26);
                    fArr1[(int)(d1)] = fArr1[(int)(d1)];
                    i25 -= (int)d1;
                    i25 = (int)-1918594711936802622L;
                    i27 += i1;
                    i27 = i25;
                    iArr1[i26] = (int) Test0925.instanceCount;
                    i27 += (int)1.439F;
                }
                i2 <<= i25;
                i25 = i25;
                switch ((int)((d1 % 6) + 63)) {
                case 63:
                    for (f4 = 1; f4 < 2; f4++) {
                        Test0925.instanceCount <<= i2;
                    }
                case 64:
                    i2 >>= 59960;
                    Test0925.bFld = Test0925.bFld;
                    lArr2[i1] /= 344586884L;
                case 65:
                    i2 -= i27;
                    break;
                case 66:
                    try {
                        i28 = (-1282484436 / i26);
                        i27 = (iArr1[i1] % -41071);
                        i28 = (-41 / i1);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 67:
                    Test0925.fFld -= i27;
                    break;
                case 68:
                    i27 <<= i25;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i1 i2 d1 = " + i1 + "," + i2 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("f4 i28 iArr1 = " + Float.floatToIntBits(f4) + "," + i28 + "," +
            FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("fArr1 lArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) + "," +
            FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0925.instanceCount Test0925.bFld Test0925.sFld = " + Test0925.instanceCount + "," + (Test0925.bFld ? 1
                : 0) + "," + Test0925.sFld);
        FuzzerUtils.out.println("Test0925.fFld = " + Float.floatToIntBits(Test0925.fFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0925 _instance = new Test0925();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
