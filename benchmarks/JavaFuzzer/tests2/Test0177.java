// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0177 {

    public static final int N = 400;

    public static long instanceCount=4739538586552908762L;
    public static float fFld=2.504F;
    public boolean bFld=true;
    public volatile byte byFld=31;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0177.iArrFld, 13);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i3=84, i5=55973, i6=8, i7=-52, i8=54566;
        long l1=-38282L;
        float f=-2.420F;
        short s=12677;
        byte by=-39;
        double d=0.11105, d1=-115.38734;

        try {
            Test0177.instanceCount *= i3;
            for (int i4 : Test0177.iArrFld) {
                i4 <<= (int) Test0177.instanceCount;
            }
            l1 = 1;
            while (++l1 < 143) {
                i5 = 1;
                do {
                    i3 -= -200;
                } while (++i5 < 11);
                switch ((int)((l1 % 6) + 75)) {
                case 75:
                    f += (l1 * l1);
                    for (i6 = 1; 11 > i6; ++i6) {
                        switch ((int)((l1 % 5) + 64)) {
                        case 64:
                            i8 = 1;
                            do {
                                Test0177.instanceCount += (((i8 * i3) + s) - l1);
                                i7 += (i8 * i8);
                                f += by;
                            } while (++i8 < 2);
                            break;
                        case 65:
                            i7 = i6;
                            break;
                        case 66:
                            i7 += i6;
                            break;
                        case 67:
                            i7 += (30366 + (i6 * i6));
                            break;
                        case 68:
                            Test0177.instanceCount += (176 + (i6 * i6));
                        default:
                            i7 += i6;
                        }
                    }
                    break;
                case 76:
                    Test0177.iArrFld[(int) (l1 + 1)] = (int) 10L;
                    break;
                case 77:
                    i7 += (int)(-232L + (l1 * l1));
                    break;
                case 78:
                    f -= i8;
                    break;
                case 79:
                    d -= i5;
                    break;
                case 80:
                    i3 = (int)l1;
                    break;
                }
            }
        }
        catch (ArithmeticException exc1) {
            Test0177.instanceCount -= (long) d1;
        }
        finally {
            Test0177.instanceCount = 9;
        }
        vMeth1_check_sum += i3 + l1 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + s + by + Double.doubleToLongBits(d)
            + Double.doubleToLongBits(d1);
    }

    public static int iMeth(int i1, int i2) {

        double d2=-1.65692, d3=-43.2327;
        int i9=-61236, i10=9244, i11=-242, i12=-1;
        short s1=-8123;
        boolean b=true;
        boolean[] bArr =new boolean[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 3L);

        vMeth1();
        d2 = -33;
        if (true) {
            for (d3 = 8; d3 < 178; ++d3) {
                bArr = FuzzerUtils.boolean1array(N, (boolean)false);
                i1 -= i2;
                for (i10 = (int)(d3); i10 < 9; i10++) {
                    i11 = i9;
                    i2 += (((i10 * Test0177.instanceCount) + Test0177.fFld) - Test0177.instanceCount);
                    try {
                        i11 = (23778 % i2);
                        i11 = (i2 / -244);
                        i9 = (i10 / -128);
                    } catch (ArithmeticException a_e) {}
                    switch (((i10 % 4) * 5) + 62) {
                    case 66:
                        switch ((((1 >>> 1) % 7) * 5) + 29) {
                        case 57:
                            i1 += (((i10 * i10) + s1) - i9);
                            b = b;
                            i11 += i10;
                            break;
                        case 50:
                            d2 = i1;
                            break;
                        case 63:
                            i2 = i10;
                        case 62:
                            try {
                                i11 = (i10 / i11);
                                i9 = (i2 / i1);
                                i11 = (1001150887 / i12);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 56:
                            i11 *= i12;
                        case 52:
                            Test0177.fFld += (245 + (i10 * i10));
                            break;
                        case 42:
                            i11 *= -14;
                            break;
                        default:
                            Test0177.instanceCount += (long) d3;
                        }
                        break;
                    case 81:
                        lArr[i10] *= 13553;
                        break;
                    case 82:
                    case 72:
                        if (i11 != 0) {
                        }
                        break;
                    }
                }
            }
        }
        long meth_res = i1 + i2 + Double.doubleToLongBits(d2) + Double.doubleToLongBits(d3) + i9 + i10 + i11 + s1 + (b
            ? 1 : 0) + i12 + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i) {

        double d4=56.78529;
        int i13=8;
        int i14=3;
        int i15=25;
        int[] iArr =new int[N];
        boolean b1=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr, 32107);
        FuzzerUtils.init(fArr, -90.776F);

        iArr[(i >>> 1) % N] *= iMeth(i, i);
        for (d4 = 9; d4 < 297; ++d4) {
            i ^= i13;
            for (i14 = 1; i14 < 6; i14++) {
                i13 -= (int) Test0177.instanceCount;
                if (b1) {
                    i15 = i13;
                    Test0177.iArrFld[(int) (d4)] -= i;
                } else {
                    Test0177.fFld += (i14 * i14);
                    l = i15;
                }
                i15 += (124 + (i14 * i14));
                i -= -175;
                i += (i14 * i);
                fArr[i14] = i;
                i = i13;
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d4) + i13 + i14 + i15 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=-229, i17=-10, i18=-127, i19=8, i20=0;
        float f1=0.466F;
        short s2=11583, s3=30674;
        long l2=5L;
        boolean[] bArr1 =new boolean[N];

        FuzzerUtils.init(bArr1, false);

        vMeth(Test0177.instanceCount, i16);
        i17 = 1;
        while (++i17 < 123) {
            Test0177.instanceCount <<= Test0177.instanceCount;
            i16 <<= i17;
            if (bFld) break;
            i18 = 1;
            while (++i18 < 204) {
                Test0177.fFld += -30006;
                i16 += (i18 | i17);
                try {
                    i16 = (i18 / 704598243);
                    Test0177.iArrFld[i17 + 1] = (i16 / Test0177.iArrFld[i18 - 1]);
                    i16 = (-3331 / i18);
                } catch (ArithmeticException a_e) {}
                i19 = 1;
                while (++i19 < 1) {
                    i16 = 32530;
                    i16 += (i19 + i19);
                    if (true) break;
                    Test0177.fFld = i18;
                }
                for (f1 = 1; f1 < 1; f1++) {
                    i16 = i17;
                    Test0177.iArrFld[i17 + 1] *= i17;
                    if (bFld) continue;
                    s2 -= (short) Test0177.instanceCount;
                    i16 = (int)l2;
                    Test0177.fFld += (-127.601F + (f1 * f1));
                    switch (((i17 % 2) * 5) + 16) {
                    case 17:
                        i16 -= i19;
                        i20 += i20;
                        i20 += (int)f1;
                        break;
                    case 23:
                        byFld += (byte)(-10L + (f1 * f1));
                        bArr1[i17] = bFld;
                        i20 %= -3;
                    }
                    Test0177.iArrFld[i17] *= i17;
                    i20 <<= s3;
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 f1 i20 = " + i19 + "," + Float.floatToIntBits(f1) + "," + i20);
        FuzzerUtils.out.println("s2 l2 s3 = " + s2 + "," + l2 + "," + s3);
        FuzzerUtils.out.println("bArr1 = " + FuzzerUtils.checkSum(bArr1));

        FuzzerUtils.out.println("Test0177.instanceCount Test0177.fFld bFld = " + Test0177.instanceCount + "," +
                Float.floatToIntBits(Test0177.fFld) + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld Test0177.iArrFld = " + byFld + "," + FuzzerUtils.checkSum(Test0177.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0177 _instance = new Test0177();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
