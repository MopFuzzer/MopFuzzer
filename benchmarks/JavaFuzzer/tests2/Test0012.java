// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0012 {

    public static final int N = 400;

    public static volatile long instanceCount=-207L;
    public short sFld=15860;
    public static volatile byte byFld=13;
    public static long lFld=19L;
    public long[] lArrFld =new long[N];
    public static volatile int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0012.iArrFld, -7);
        FuzzerUtils.init(Test0012.byArrFld, (byte) -15);
    }

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i11, int i12) {

        int i13=244, i14=-247, i15=-48425, i16=60, i17=-1, i18=-18144;
        double d=1.12113;
        double[] dArr =new double[N];
        short s=-18713;
        boolean b=true;

        FuzzerUtils.init(dArr, -25.34612);

        for (i13 = 386; i13 > 3; i13--) {
            i14 += i11;
            i11 -= i11;
            i11 &= (int) Test0012.instanceCount;
            for (i15 = 1; i15 < 4; i15++) {
                switch ((i13 % 7) + 96) {
                case 96:
                    d = i14;
                    i12 = i15;
                    s += (short)i15;
                    i12 += s;
                    break;
                case 97:
                    Test0012.instanceCount += (((i15 * Test0012.instanceCount) + Test0012.byFld) - i13);
                    i11 = i15;
                    break;
                case 98:
                    for (i17 = 1; i17 < 2; i17++) {
                        int i19=1;
                        i11 += (((i17 * Test0012.instanceCount) + i12) - i15);
                        i19 = i16;
                    }
                    break;
                case 99:
                    dArr[i15] += Test0012.instanceCount;
                case 100:
                    try {
                        Test0012.iArrFld[i13 + 1] = (i18 / i18);
                        i12 = (Test0012.iArrFld[i13] % i13);
                        i11 = (i11 / -4);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 101:
                    i12 += (i15 - Test0012.instanceCount);
                    break;
                case 102:
                    i14 /= (int)(i18 | 1);
                default:
                    if (b) continue;
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d) + s + i17 + i18 + (b ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(long l, int i7, long l1) {

        float f=-1.575F;
        float[] fArr =new float[N];
        long l2=-9138L;
        int i8=31034, i9=207, i10=-9, i20=16682, i21=763;
        boolean b1=true;
        double d1=31.43182;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-8167);
        FuzzerUtils.init(fArr, -29.34F);

        lArrFld[(i7 >>> 1) % N] *= Integer.reverseBytes(Test0012.iArrFld[(i7 >>> 1) % N]);
        f -= (((i7--) + sArr[(i7 >>> 1) % N]) - ((i7 + sFld) * (++fArr[(i7 >>> 1) % N])));
        fArr[(i7 >>> 1) % N] -= -46772;
        for (l2 = 8; l2 < 193; l2++) {
            for (i9 = 1; i9 < 9; i9++) {
                vMeth(i9, i9);
                switch ((i9 % 2) + 86) {
                case 86:
                case 87:
                    Test0012.iArrFld[(int) (l2 - 1)] = (int) l1;
                    i7 = -5;
                default:
                    i10 *= Test0012.byFld;
                    for (i20 = 1; i20 < 2; i20++) {
                        Test0012.iArrFld[(int) (l2)] >>>= (int) l2;
                        if (b1) continue;
                        i8 += (int)d1;
                        i21 *= sFld;
                    }
                }
            }
        }
        long meth_res = l + i7 + l1 + Float.floatToIntBits(f) + l2 + i8 + i9 + i10 + i20 + i21 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public double dMeth(int i1, int i2) {

        int i3=0, i4=-5, i5=3, i6=0, i22=-9, i23=-3, i24=6;
        long l3=156L;
        float f1=-2.593F;
        boolean b2=true;

        i2 %= (int)(sFld | 1);
        for (i3 = 276; i3 > 3; i3--) {
            for (i5 = i3; i5 < 6; i5++) {
                sFld = (short) (Test0012.instanceCount++);
                i1 /= (int) (((-iMeth(Test0012.lFld, i4, -1054184935L)) - -6) | 1);
            }
            switch ((i3 % 7) + 93) {
            case 93:
                i4 <<= i4;
                break;
            case 94:
                if (true) {
                    for (l3 = i3; l3 < 6; ++l3) {
                        for (i23 = (int)(l3); i23 < 1; i23++) {
                            i1 += (i23 | i6);
                            Test0012.instanceCount -= Test0012.byFld;
                            i1 *= -7;
                            i4 += i24;
                        }
                        Test0012.instanceCount /= (i23 | 1);
                    }
                } else if (b2) {
                    i2 *= (int)f1;
                } else {
                    i1 = (int)f1;
                }
                break;
            case 95:
                Test0012.iArrFld[i3] |= (int) 47800L;
            case 96:
                Test0012.byFld += (byte) (-4884 + (i3 * i3));
                break;
            case 97:
                i4 = sFld;
                break;
            case 98:
                try {
                    i6 = (43 / i23);
                    i4 = (i4 % 152);
                    i2 = (i6 / 17911);
                } catch (ArithmeticException a_e) {}
                break;
            case 99:
                i24 += (int)1.56769;
                break;
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + l3 + i22 + i23 + i24 + Float.floatToIntBits(f1) + (b2 ? 1 : 0);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr3) {

        int i=183, i25=31333;
        double d2=-2.2479;

        i <<= (int)(dMeth(i, i) - i);
        i25 = 1;
        do {
            Test0012.byArrFld[i25 + 1] = (byte) 6.345F;
        } while (++i25 < 238);
        d2 = sFld;

        FuzzerUtils.out.println("i i25 d2 = " + i + "," + i25 + "," + Double.doubleToLongBits(d2));

        FuzzerUtils.out.println("Test0012.instanceCount sFld Test0012.byFld = " + Test0012.instanceCount + "," + sFld + "," +
                Test0012.byFld);
        FuzzerUtils.out.println("Test0012.lFld lArrFld Test0012.iArrFld = " + Test0012.lFld + "," + FuzzerUtils.checkSum(lArrFld) +
                "," + FuzzerUtils.checkSum(Test0012.iArrFld));
        FuzzerUtils.out.println("Test0012.byArrFld = " + FuzzerUtils.checkSum(Test0012.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr2) {

        try {
            Test0012 _instance = new Test0012();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr2);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
