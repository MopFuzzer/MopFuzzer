// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0414 {

    public static final int N = 400;

    public static long instanceCount=-20604L;
    public static int iFld=-45559;
    public double dFld=-2.75107;
    public static volatile float fFld=0.921F;
    public static double[][] dArrFld =new double[N][N];
    public static int[] iArrFld =new int[N];
    public float[] fArrFld =new float[N];
    public static byte[] byArrFld =new byte[N];
    public volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0414.dArrFld, -74.121357);
        FuzzerUtils.init(Test0414.iArrFld, 162);
        FuzzerUtils.init(Test0414.byArrFld, (byte) -110);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i9) {

        int i10=-43696;
        int i11=-1;
        int i12=22594;
        int i13=8;
        int i14=13774;
        int[] iArr1 =new int[N];
        byte by=-7;
        double d=19.113427;
        float f1=2.929F;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -2.667F);
        FuzzerUtils.init(iArr1, -92);

        Test0414.dArrFld[(i9 >>> 1) % N][(13 >>> 1) % N] = i9;
        for (i10 = 16; i10 < 386; i10++) {
            boolean b=false;
            fArr[i10 - 1] -= by;
            d = i11;
            if (b) break;
        }
        for (f1 = 14; f1 < 275; ++f1) {
            i9 += i11;
            i11 -= Test0414.iFld;
            Test0414.instanceCount = Test0414.iFld;
            i9 += Test0414.iFld;
            for (i13 = 1; i13 < 6; ++i13) {
                Test0414.iFld = i11;
                Test0414.instanceCount = 73;
                iArr1[i13] -= i11;
                iArr1 = FuzzerUtils.int1array(N, (int)7);
            }
        }
        vMeth1_check_sum += i9 + i10 + i11 + by + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i12 + i13 +
            i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i4=-43;
        int i5=8;
        int i6=250;
        int i7=-247;
        int i8=-37840;
        int i15=59834;
        int i16=-37;
        int[] iArr =new int[N];
        float f=-1.472F;
        boolean b1=false;

        FuzzerUtils.init(iArr, -4);

        for (i4 = 16; i4 < 378; ++i4) {
            for (f = 1; f < 5; f++) {
                i6 ^= (int) ((Test0414.instanceCount++) * iArr[i4 + 1]);
                try {
                    iArr[i4] = (i5 % i4);
                    i6 = (1629883650 % i4);
                    i5 = (i6 % i5);
                } catch (ArithmeticException a_e) {}
                for (i7 = i4; i7 < 2; i7 += 2) {
                    vMeth1(i7);
                    b1 = false;
                    iArr[(int)(f + 1)] -= i8;
                    i5 += (int)(-229L + (i7 * i7));
                    i8 = -12;
                    iArr = iArr;
                }
                i6 = i4;
                for (i15 = 1; i15 < 2; ++i15) {
                    Test0414.instanceCount = 3830;
                    iArr[i15] <<= i8;
                }
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 + (b1 ? 1 : 0) + i15 + i16 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i=-11, i1=-7, i2=48417, i3=4, i17=-11, i18=14969;
        double d1=-46.99195;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 8889749338872511528L);

        for (i = 13; i < 215; ++i) {
            for (i2 = 1; i2 < 8; i2 += 3) {
                Test0414.instanceCount >>= (((i2 - Test0414.instanceCount) + (i3--)) * iMeth());
                lArr = lArr;
                lArr[i2] += 16;
                Test0414.iFld = (int) Test0414.instanceCount;
                for (i17 = 1; i17 < 4; ++i17) {
                    i18 ^= (int) Test0414.instanceCount;
                    switch ((i17 % 1) + 11) {
                    case 11:
                        i3 += (i17 * i17);
                        lArr[i] |= 51118;
                        i18 = (int) Test0414.instanceCount;
                        break;
                    default:
                        i1 *= i;
                    }
                    d1 -= i18;
                }
            }
            Test0414.iArrFld[i - 1] = i;
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i17 + i18 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-9, i20=-12, i21=5, i22=8, i23=-30691, i24=-49, i25=-46575, i26=8, i27=11, i28=-11, i29=8;
        boolean b2=false;
        float f2=1.1013F;
        byte by1=15;

        vMeth();
        Test0414.iArrFld[(Test0414.iFld >>> 1) % N] >>= Test0414.iFld;
        for (i19 = 7; 271 > i19; i19++) {
            if (true) continue;
            for (i21 = 95; 2 < i21; i21 -= 3) {
                Test0414.instanceCount += (i21 * i21);
            }
            Test0414.iFld = i19;
            dFld = i21;
            for (i23 = i19; 95 > i23; i23++) {
                i24 += i23;
            }
            i20 = Test0414.iFld;
            if (b2) continue;
            i20 += (int)f2;
            if (b2) {
                for (i25 = 2; i25 < 95; i25++) {
                    i20 += (((i25 * i20) + Test0414.instanceCount) - i21);
                    Test0414.fFld -= Test0414.instanceCount;
                    i26 += (int)7.41551;
                    i26 = i26;
                    i22 = (int) Test0414.instanceCount;
                    if (b2) continue;
                    i20 = 28849;
                }
                for (i27 = 1; i27 < 95; i27++) {
                    fArrFld[i19] = i24;
                    Test0414.instanceCount /= (i23 | 1);
                    i26 = (int)-116L;
                    i29 = 1;
                    do {
                        Test0414.byArrFld[i19 + 1] = (byte) Test0414.instanceCount;
                        Test0414.iFld -= 17198;
                        i20 -= by1;
                    } while (++i29 < 2);
                }
            } else if (b2) {
                Test0414.instanceCount = 53341;
            } else if (b2) {
                lArrFld[i19] -= -18688;
            } else {
                Test0414.instanceCount = (long) f2;
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("b2 f2 i25 = " + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f2) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 by1 = " + i29 + "," + by1);

        FuzzerUtils.out.println("Test0414.instanceCount Test0414.iFld dFld = " + Test0414.instanceCount + "," + Test0414.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0414.fFld Test0414.dArrFld Test0414.iArrFld = " + Float.floatToIntBits(Test0414.fFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0414.dArrFld)) + "," + FuzzerUtils.checkSum(Test0414.iArrFld));
        FuzzerUtils.out.println("fArrFld Test0414.byArrFld lArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test0414.byArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0414 _instance = new Test0414();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
