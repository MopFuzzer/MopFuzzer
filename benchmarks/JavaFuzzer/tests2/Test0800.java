// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0800 {

    public static final int N = 400;

    public static long instanceCount=-3L;
    public static int iFld=-9910;
    public static byte byFld=-11;
    public static double dFld=10.48245;
    public boolean bFld=true;
    public static long[] lArrFld =new long[N];
    public static float[] fArrFld =new float[N];
    public double[][] dArrFld =new double[N][N];
    public volatile int[][] iArrFld =new int[N][N];

    static {
        FuzzerUtils.init(Test0800.lArrFld, 102L);
        FuzzerUtils.init(Test0800.fArrFld, 30.975F);
    }

    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i8=-234;
        int i9=-65;
        int i10=35528;
        int i11=-69;
        int i12=-60741;
        int i13=13;
        int i14=183;
        int[][] iArr1 =new int[N][N];
        double d1=1.126081;
        boolean b=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr1, 138);
        FuzzerUtils.init(fArr, 2.594F);

        for (i8 = 13; i8 < 310; ++i8) {
            for (d1 = 6; 1 < d1; d1--) {
                i10 >>>= (int) Test0800.instanceCount;
                Test0800.instanceCount += (long) (d1 * d1);
            }
            iArr1[i8][i8] -= 132;
            i9 += i8;
            iArr1[i8][i8] >>= i9;
        }
        i10 += -61653;
        fArr[(i10 >>> 1) % N] += i8;
        for (i11 = 7; i11 < 137; ++i11) {
            if (b) {
                for (i13 = 1; 12 > i13; ++i13) {
                    Test0800.lArrFld[i13 - 1] *= -107;
                    iArr1[i11 + 1] = FuzzerUtils.int1array(N, (int)40);
                }
                i12 *= Test0800.iFld;
            } else {
                Test0800.instanceCount += (i11 | Test0800.byFld);
            }
        }
        long meth_res = i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + i12 + i13 + i14 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3) {

        int i4=-14;
        int i5=-1;
        int i6=53;
        int i7=-4538;
        int i15=14;
        int i16=-28653;
        int[] iArr2 =new int[N];
        double d=-2.78393;
        float f=115.822F;

        FuzzerUtils.init(iArr2, -11);

        for (i4 = 11; i4 < 304; ++i4) {
            for (i6 = 1; i6 < 6; ++i6) {
                try {
                    i3 = (i7 / -385473620);
                    i7 = (i7 % i3);
                    Test0800.iFld = (36 % Test0800.iFld);
                } catch (ArithmeticException a_e) {}
                d = (((Test0800.instanceCount + i5) + i6) + iMeth());
                Test0800.iFld *= -10;
                d *= Test0800.iFld;
                f *= i3;
                Test0800.iFld <<= 28824;
                Test0800.fArrFld[i6 - 1] += i7;
                for (i15 = 1; i15 < 2; i15++) {
                    iArr2 = iArr2;
                    Test0800.instanceCount >>= i4;
                    i3 += (i15 + Test0800.iFld);
                    Test0800.instanceCount *= Test0800.instanceCount;
                }
                i16 = (int) Test0800.instanceCount;
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i15 + i16 +
            FuzzerUtils.checkSum(iArr2);
    }

    public double dMeth(int i1, int i2, long l) {

        int i18=143;
        int i19=173;
        int i20=-21799;
        int i21=127;
        int i22=-5;
        int i23=25768;
        int[] iArr3 =new int[N];
        double d2=0.109751;

        FuzzerUtils.init(iArr3, -43293);

        vMeth(Test0800.iFld);
        for (int i17 : iArr3) {
            Test0800.lArrFld[(Test0800.iFld >>> 1) % N] *= 1;
            i2 %= (int) (Test0800.iFld | 1);
        }
        for (i18 = 3; i18 < 172; ++i18) {
            for (i20 = 9; i20 > 1; i20 -= 3) {
                switch (((i18 % 1) * 5) + 87) {
                case 88:
                    if (i20 != 0) {
                    }
                    d2 = i1;
                    for (i22 = 1; i22 < 5; ++i22) {
                        iArr3[i22] += (int)d2;
                        try {
                            i1 = (i23 % i23);
                            i2 = (i1 % 55302);
                            i21 = (11797 / i21);
                        } catch (ArithmeticException a_e) {}
                    }
                    break;
                default:
                    dArrFld[i18 + 1][i20 + 1] = -1.207F;
                    iArrFld = iArrFld;
                }
                i1 += (i20 * i20);
            }
        }
        long meth_res = i1 + i2 + l + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d2) + i22 + i23 +
            FuzzerUtils.checkSum(iArr3);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i24=6;
        int i25=-38953;
        int i26=-53141;
        int i27=-2;
        int i28=7;
        int i29=241;
        int i30=-178;
        int[] iArr =new int[N];
        float f1=-1.1015F;
        double d4=1.105003;
        double[] dArr =new double[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr, -150);
        FuzzerUtils.init(dArr, 0.9451);
        FuzzerUtils.init(bArr, true);

        for (int i : iArr) {
            Test0800.instanceCount = (Test0800.instanceCount++);
            Test0800.instanceCount = (long) ((Test0800.instanceCount - dMeth(84, i, Test0800.instanceCount)) * Test0800.instanceCount);
            Test0800.instanceCount = Test0800.iFld;
            Test0800.instanceCount = Test0800.iFld;
            Test0800.iFld <<= (int) Test0800.instanceCount;
            for (i24 = 2; 63 > i24; i24 += 3) {
                Test0800.dFld = -21855L;
            }
            i25 -= (int) Test0800.instanceCount;
        }
        Test0800.iFld = 75;
        for (double d3 : dArr) {
            for (i26 = 2; i26 < 63; i26++) {
                try {
                    Test0800.iFld = (i26 / 62957);
                    i27 = (i24 / -7701);
                    i27 = (i26 / i24);
                } catch (ArithmeticException a_e) {}
                f1 += i26;
                switch ((((i26 >>> 1) % 1) * 5) + 9) {
                case 10:
                    Test0800.instanceCount += Test0800.instanceCount;
                    iArrFld[i26 - 1][i26] *= Test0800.iFld;
                    Test0800.dFld *= i24;
                    break;
                }
                for (d4 = 1; d4 < 2; ++d4) {
                    dArrFld[i26 - 1][(int) (d4)] = Test0800.instanceCount;
                    Test0800.byFld -= (byte) i27;
                }
                Test0800.iFld <<= Test0800.iFld;
                for (i29 = 1; i29 < 2; ++i29) {
                    i30 -= 9;
                    i30 += i30;
                    i28 = i24;
                    Test0800.instanceCount += i27;
                    f1 += Test0800.instanceCount;
                    bArr[i29] = bFld;
                    i28 -= (int) Test0800.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 f1 d4 = " + i27 + "," + Float.floatToIntBits(f1) + "," +
            Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("iArr dArr bArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0800.instanceCount Test0800.iFld Test0800.byFld = " + Test0800.instanceCount + "," + Test0800.iFld +
                "," + Test0800.byFld);
        FuzzerUtils.out.println("Test0800.dFld bFld Test0800.lArrFld = " + Double.doubleToLongBits(Test0800.dFld) + "," + (bFld ? 1
                : 0) + "," + FuzzerUtils.checkSum(Test0800.lArrFld));
        FuzzerUtils.out.println("Test0800.fArrFld dArrFld iArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0800.fArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0800 _instance = new Test0800();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
