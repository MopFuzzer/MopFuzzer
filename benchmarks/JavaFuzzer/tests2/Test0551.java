// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:38 2023
public class Test0551 {

    public static final int N = 400;

    public static long instanceCount=14L;
    public static float fFld=0.899F;
    public static int iFld=-11;
    public volatile short sFld=11204;
    public static volatile byte byFld=75;

    public static long dMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        int i13=-164;

        i13 = -44;
        i13 += (int) Test0551.instanceCount;
        long meth_res = i13;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth(byte by, short s, int i10) {

        int i11=-47915;
        int i12=-4;
        int i14=156;
        int i15=-28154;
        int[] iArr1 =new int[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-25511);
        FuzzerUtils.init(iArr1, 169);

        for (short s1 : sArr) {
            for (i11 = 1; i11 < 4; i11++) {
                Test0551.fFld += i11;
                Test0551.instanceCount += Short.reverseBytes(sMeth());
                for (i14 = i11; 2 > i14; i14++) {
                    i12 = (int)-196L;
                    i15 += i11;
                }
                i10 *= i12;
                Test0551.instanceCount = i11;
                i12 += i11;
                i10 = i10;
                iArr1[i11 + 1] = i11;
            }
            Test0551.instanceCount = i11;
        }
        i10 -= by;
        sArr[(i10 >>> 1) % N] *= (short)-82;
        long meth_res = by + s + i10 + i11 + i12 + i14 + i15 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static double dMeth(int i2, long l, int i3) {

        int i4=-20220;
        int i5=9;
        int i6=-14;
        int i7=-234;
        int i8=13;
        int i9=-14;
        int[][] iArr =new int[N][N];
        byte by1=30;
        short s2=18214;
        double d1=126.19433;

        FuzzerUtils.init(iArr, 67);

        for (i4 = 2; i4 < 139; i4++) {
            for (i6 = 1; 11 > i6; ++i6) {
                for (i8 = 1; i8 < 2; ++i8) {
                    float f=-75.181F;
                    f = (((--iArr[(i3 >>> 1) % N][i6 - 1]) + (i7 + f)) + (iMeth(by1, s2, i6) + Test0551.instanceCount));
                    switch ((i6 % 10) + 26) {
                    case 26:
                        if (false) break;
                        i7 /= (int)(l | 1);
                        break;
                    case 27:
                        i5 += (i8 * i8);
                        switch ((i8 % 2) + 124) {
                        case 124:
                            i2 = -11;
                            iArr[i4 - 1] = iArr[i6 - 1];
                            i9 = (int) Test0551.instanceCount;
                            i2 >>= i5;
                            break;
                        case 125:
                            l += l;
                            i7 += (i8 + Test0551.instanceCount);
                            break;
                        }
                        break;
                    case 28:
                        try {
                            i3 = (943602459 % iArr[i8][i8]);
                            i9 = (i6 / i4);
                            i9 = (55382 / iArr[i6 - 1][i4 + 1]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 29:
                        i7 += (i8 ^ i9);
                        break;
                    case 30:
                        try {
                            i7 = (iArr[i4][i4] % i4);
                            i3 = (i2 / i3);
                            i2 = (iArr[i4 - 1][i4] % i3);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 31:
                        Test0551.instanceCount += (-8865 + (i8 * i8));
                    case 32:
                        d1 -= -7329;
                    case 33:
                        l += (i8 * i8);
                        break;
                    case 34:
                        i9 = i5;
                        break;
                    case 35:
                        s2 += (short) Test0551.instanceCount;
                        break;
                    }
                }
            }
        }
        long meth_res = i2 + l + i3 + i4 + i5 + i6 + i7 + i8 + i9 + by1 + s2 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8;
        int i1=-25340;
        int i16=-218;
        int i17=-82;
        int i18=-39012;
        int i19=-40990;
        int i20=88;
        int i21=34043;
        int i22=-4589;
        int[] iArr2 =new
                    int[N];
        double d=124.123000;
        boolean b=false;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr2, 12);
        FuzzerUtils.init(byArr, (byte)53);

        for (i = 4; i < 168; ++i) {
            i1 += (int)d;
            Test0551.instanceCount += (i ^ i);
            if (dMeth(Test0551.iFld, Test0551.instanceCount, Test0551.iFld) != sFld) continue;
            Test0551.iFld = -26;
            for (i16 = i; i16 < 153; i16++) {
                Test0551.iFld += (i16 * i);
                Test0551.instanceCount = Test0551.instanceCount;
                Test0551.fFld -= Test0551.iFld;
                i18 = 1;
                while (++i18 < 1) {
                    iArr2 = FuzzerUtils.int1array(N, (int)-29764);
                    byArr[i] -= (byte)i18;
                    Test0551.iFld += i18;
                    i1 = (int) Test0551.fFld;
                    Test0551.instanceCount += 39871;
                    Test0551.fFld = i17;
                }
                i17 += (i16 ^ Test0551.instanceCount);
                Test0551.instanceCount = Test0551.byFld;
                Test0551.byFld = (byte) i18;
                Test0551.instanceCount += i17;
                sFld *= (short)i;
            }
            Test0551.instanceCount = i;
            for (i19 = i; i19 < 153; i19++) {
                for (i21 = 1; 1 > i21; i21++) {
                    iArr2[i] >>= Test0551.iFld;
                    switch (((i % 1) * 5) + 108) {
                    case 113:
                        if (b) break;
                        if (b) continue;
                        break;
                    default:
                        byArr[i + 1] = (byte)13;
                        Test0551.instanceCount &= Test0551.instanceCount;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 b iArr2 = " + i22 + "," + (b ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0551.instanceCount Test0551.fFld Test0551.iFld = " + Test0551.instanceCount + "," +
                Float.floatToIntBits(Test0551.fFld) + "," + Test0551.iFld);
        FuzzerUtils.out.println("sFld Test0551.byFld = " + sFld + "," + Test0551.byFld);

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0551 _instance = new Test0551();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  iMeth ->  iMeth dMeth mainTest
//DEBUG  sMeth ->  sMeth iMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
