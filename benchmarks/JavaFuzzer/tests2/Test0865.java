// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0865 {

    public static final int N = 400;

    public static long instanceCount=27338L;
    public byte byFld=-99;
    public static float fFld=0.287F;
    public static int iFld=49306;
    public static float fFld1=72.559F;
    public static volatile boolean bFld=true;
    public float fFld2=100.895F;
    public volatile int[] iArrFld =new int[N];
    public static int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0865.iArrFld1, -13);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public int iMeth(long l) {

        int i3=36;

        l -= (l >>> ((i3 - l) + (i3++)));
        i3 = 7;
        i3 >>= (int)((i3 = (int)(byFld * l)) + (l + (7529 + l)));
        long meth_res = l + i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static float fMeth() {

        long l1=1644031481234090882L;
        long[] lArr1 =new long[N];
        int i17=-51006, i18=-7944, i19=112;
        double d2=-1.112851;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, 0.569F);
        FuzzerUtils.init(lArr1, -3966365675L);

        Test0865.instanceCount = Test0865.iFld;
        Test0865.instanceCount = Test0865.iFld;
        Test0865.instanceCount = Test0865.iFld;
        for (l1 = 160; l1 > 9; --l1) {
            Test0865.iFld -= i17;
            i18 = 10;
            do {
                d2 -= i17;
                fArr[(int) (l1)][(int) (l1 + 1)] *= Test0865.instanceCount;
                Test0865.iArrFld1[i18] = Test0865.iFld;
                lArr1[i18 + 1] = Test0865.iFld;
                i19 = 1;
                while ((i19 += 2) < 1) {
                    d2 -= Test0865.fFld1;
                    Test0865.iArrFld1[i18 + 1] -= Test0865.iFld;
                    Test0865.instanceCount += (long) Test0865.fFld1;
                    i17 *= i19;
                }
            } while (--i18 > 0);
        }
        long meth_res = l1 + i17 + i18 + Double.doubleToLongBits(d2) + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth() {

        int i15=-12, i16=32298, i20=-4763;
        short s1=16683;
        long[][] lArr2 =new long[N][N];

        FuzzerUtils.init(lArr2, -1L);

        for (i15 = 245; i15 > 11; i15 -= 3) {
            boolean b1=false;
            i16 += (i15 ^ (long) Test0865.fFld);
            i16 *= (int)fMeth();
            s1 <<= (short) Test0865.instanceCount;
            Test0865.instanceCount += Test0865.instanceCount;
            lArr2[i15 + 1][i15 + 1] >>>= i16;
            if (b1) continue;
            i20 = 1;
            while (++i20 < 20) {
                Test0865.iFld += (-40463 + (i20 * i20));
                Test0865.instanceCount = i15;
                Test0865.instanceCount += (i20 * i20);
            }
            Test0865.instanceCount += i20;
            Test0865.instanceCount = i15;
            Test0865.iFld = i20;
        }
        Test0865.bFld = true;
        long meth_res = i15 + i16 + s1 + i20 + FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(double d1, byte by) {

        int i8=31125, i9=11, i10=-2, i11=4, i12=163, i13=0, i14=-16321;
        boolean b=true;
        short s=22120;
        byte[] byArr =new byte[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(byArr, (byte)80);
        FuzzerUtils.init(lArr, -1L);

        for (i8 = 6; 146 > i8; i8++) {
            if (b) continue;
            for (i10 = 1; i10 < 11; i10++) {
                i9 = (int) (i11 + (Test0865.instanceCount + (i9 - Test0865.fFld)));
            }
            i12 = 11;
            while ((i12 -= 3) > 0) {
                if (Test0865.bFld) {
                    for (i13 = 1; i13 < 3; ++i13) {
                        i11 += ((Math.abs(i12) - i12) - (s++));
                        byArr[i12 + 1] >>>= (byte)(i9--);
                        Test0865.instanceCount |= ((Test0865.instanceCount++) - (15123000L - iMeth(1269559837L)));
                        s <<= (short)i13;
                        i14 -= iMeth((i8 * i11) + (-(lArr[i8]++)));
                        i11 = (int)lMeth();
                        Test0865.instanceCount >>>= i14;
                    }
                    i9 += (i12 * fFld2);
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + by + i8 + i9 + (b ? 1 : 0) + i10 + i11 + i12 + i13 + i14 + s +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-147, i1=9, i2=20344, i4=-13, i5=10, i6=-14, i7=3, i21=11720, i22=-14114, i23=37295, i24=-1;
        double d=0.39260;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-5913);

        Test0865.instanceCount += (((--Test0865.instanceCount) - 45463) + (i++));
        for (i1 = 3; i1 < 365; i1++) {
            iArrFld[i1 + 1] -= (int)d;
        }
        if (Test0865.bFld) {
            switch (((iMeth(Test0865.instanceCount) >>> 1) % 2) + 65) {
            case 65:
                for (i4 = 5; i4 < 125; i4++) {
                    for (i6 = 8; 209 > i6; i6++) {
                        i5 >>= 29837;
                        i2 *= (int) (-(i2 - Test0865.fFld));
                        vMeth(41.3839, byFld);
                        Test0865.iFld += i7;
                        Test0865.fFld -= Test0865.iFld;
                        Test0865.bFld = Test0865.bFld;
                        for (i21 = 2; i4 < i21; --i21) {
                            fFld2 -= i5;
                            i5 <<= i22;
                            Test0865.instanceCount = -2415440052L;
                            Test0865.instanceCount = i22;
                            byFld = (byte)i1;
                            Test0865.instanceCount >>= Test0865.instanceCount;
                            Test0865.instanceCount %= (i2 | 1);
                            i22 = i4;
                            fFld2 *= 42667;
                        }
                        Test0865.instanceCount = i6;
                        for (i23 = 1; 2 > i23; ++i23) {
                            i24 += i4;
                            i2 -= (int) Test0865.instanceCount;
                            i2 = i4;
                            Test0865.instanceCount = i4;
                        }
                    }
                    Test0865.fFld += -51;
                }
            case 66:
                Test0865.instanceCount >>>= i5;
            }
        } else {
            sArr[(i21 >>> 1) % N] = (short) Test0865.iFld;
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d i4 i5 = " + Double.doubleToLongBits(d) + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 i7 i21 = " + i6 + "," + i7 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0865.instanceCount byFld Test0865.fFld = " + Test0865.instanceCount + "," + byFld + "," +
                Float.floatToIntBits(Test0865.fFld));
        FuzzerUtils.out.println("Test0865.iFld Test0865.fFld1 Test0865.bFld = " + Test0865.iFld + "," +
                Float.floatToIntBits(Test0865.fFld1) + "," + (Test0865.bFld ? 1 : 0));
        FuzzerUtils.out.println("fFld2 iArrFld Test0865.iArrFld1 = " + Float.floatToIntBits(fFld2) + "," +
                FuzzerUtils.checkSum(iArrFld) + "," + FuzzerUtils.checkSum(Test0865.iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0865 _instance = new Test0865();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
