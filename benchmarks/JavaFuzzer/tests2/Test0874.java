// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0874 {

    public static final int N = 400;

    public static long instanceCount=-19236L;
    public static volatile int iFld=-42164;
    public static byte byFld=14;
    public static volatile int[][] iArrFld =new int[N][N];

    static {
        FuzzerUtils.init(Test0874.iArrFld, -137);
    }

    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i7) {

        int i8=48;
        int i9=-4137;
        int i10=23561;
        int i11=-152;
        int i12=-29779;
        int i13=44345;
        int[] iArr =new int[N];
        float f2=2.117F;
        byte[][] byArr1 =new byte[N][N];

        FuzzerUtils.init(byArr1, (byte)-64);
        FuzzerUtils.init(iArr, -52899);

        i8 = 1;
        while (++i8 < 131) {
            Test0874.iFld = i8;
            for (i9 = 1; i9 < 12; ++i9) {
                switch (((i7 >>> 1) % 2) + 116) {
                case 116:
                    i7 *= (int)14L;
                    i11 = 2;
                    do {
                        Test0874.iFld <<= (int) Test0874.instanceCount;
                        i7 = i9;
                        i10 += i11;
                        byArr1[i8 + 1] = byArr1[i8];
                        iArr[i9 - 1] = Test0874.iFld;
                    } while (--i11 > 0);
                    i10 += i7;
                    for (i12 = i9; i12 < 2; ++i12) {
                        try {
                            iArr[i9 + 1] = (i9 % 173);
                            i7 = (i8 / -9169);
                            iArr[i12 - 1] = (i10 / -65);
                        } catch (ArithmeticException a_e) {}
                        i10 = 5;
                    }
                    break;
                case 117:
                    if (Test0874.iFld != 0) {
                        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) +
                            FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                    break;
                default:
                    iArr[i9] %= (int)((long)(f2) | 1);
                }
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(byArr1) + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth1() {

        int i5=-252, i6=-37307, i14=-9, i15=8059, i16=60;
        float f1=1.787F;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)114);

        i5 += (int) (Test0874.instanceCount--);
        i6 = 1;
        do {
            f1 = 1;
            while (++f1 < 14) {
                byArr[i6 + 1] -= (byte) (i5 ^ Test0874.instanceCount);
                vMeth(i5);
            }
            i14 = 1;
            while (++i14 < 14) {
                float f3=0.1009F;
                try {
                    i5 = (64386 / Test0874.iFld);
                    i5 = (i14 % i14);
                    Test0874.iFld = (i5 / 204330506);
                } catch (ArithmeticException a_e) {}
                f3 += 5;
                Test0874.instanceCount <<= 3614564249L;
                Test0874.iFld = i14;
                for (i15 = 1; i15 < 1; ++i15) {
                    f3 = Test0874.instanceCount;
                }
                Test0874.iArrFld[i14][i6] += -23078;
                i16 <<= i14;
                if (i5 != 0) {
                }
            }
        } while ((i6 += 2) < 230);
        long meth_res = i5 + i6 + Float.floatToIntBits(f1) + i14 + i15 + i16 + FuzzerUtils.checkSum(byArr);
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(long l, int i1, int i2) {

        int i3=-35409, i4=-67, i17=13, i18=11, i19=65, i20=-225;
        boolean b=true;
        float f=0.382F;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -68.49040);

        for (i3 = 14; 303 > i3; ++i3) {
            b = false;
            i1 -= (int)l;
        }
        i4 = (int)(((f * f) - i3) + lMeth1());
        Test0874.iFld += (int) l;
        for (i17 = 2; i17 < 159; ++i17) {
            i19 = 1;
            while (++i19 < 10) {
                i4 = Test0874.byFld;
                i20 = 1;
                do {
                    i2 = i19;
                    i4 += (i20 ^ i20);
                    if (b) continue;
                    dArr[i19] += Test0874.byFld;
                    i18 <<= Test0874.iFld;
                    Test0874.iArrFld[i20] = Test0874.iArrFld[i17 + 1];
                } while (++i20 < 1);
            }
        }
        long meth_res = l + i1 + i2 + i3 + i4 + (b ? 1 : 0) + Float.floatToIntBits(f) + i17 + i18 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11, i21=29179, i22=158, i23=-13, i24=-10, i25=3, i26=-48186, i27=-196;
        boolean b1=false;
        long l1=33L;
        float f4=26.650F, f5=18.444F;
        double d=-37.35261, d1=0.86480;

        i = 287;
        while (--i > 0) {
            Test0874.iFld >>= (int) lMeth(Test0874.instanceCount, Test0874.iFld, Test0874.iFld);
            Test0874.iFld = i;
            Test0874.instanceCount = Test0874.iFld;
            Test0874.iFld = (int) Test0874.instanceCount;
            if (b1) break;
        }
        Test0874.iFld += (int) Test0874.instanceCount;
        for (l1 = 3; l1 < 186; ++l1) {
            if (b1) {
                Test0874.byFld += (byte) l1;
                Test0874.instanceCount <<= i;
                if (b1) {
                    for (i22 = 8; i22 < 137; i22++) {
                        f4 = Test0874.byFld;
                        Test0874.instanceCount += i22;
                        Test0874.iArrFld[(int) (l1)] = FuzzerUtils.int1array(N, (int) 7795);
                        Test0874.iArrFld[(int) (l1 + 1)][(int) (l1 + 1)] = i21;
                        d *= Test0874.instanceCount;
                        for (f5 = 1; f5 < 2; ++f5) {
                            i24 = (int) Test0874.instanceCount;
                            f4 -= 13923L;
                            f4 = i23;
                            Test0874.byFld *= (byte) i;
                            Test0874.instanceCount -= (long) d;
                            i21 += (int)(f5 * f5);
                        }
                    }
                    for (i25 = 1; i25 < 137; ++i25) {
                        for (d1 = 1; d1 < 2; d1++) {
                            i26 = i27;
                            Test0874.instanceCount += (long) (((d1 * i22) + i22) - Test0874.iFld);
                            Test0874.instanceCount = l1;
                        }
                    }
                } else if (b1) {
                    i21 = (int)f5;
                } else {
                    Test0874.instanceCount += (((l1 * Test0874.instanceCount) + l1) - Test0874.iFld);
                }
            } else if (b1) {
                i24 = i22;
            } else if (b1) {
                i27 += (int)l1;
            }
        }

        FuzzerUtils.out.println("i b1 l1 = " + i + "," + (b1 ? 1 : 0) + "," + l1);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f4 d f5 = " + Float.floatToIntBits(f4) + "," + Double.doubleToLongBits(d) + "," +
            Float.floatToIntBits(f5));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d1 i27 = " + Double.doubleToLongBits(d1) + "," + i27);

        FuzzerUtils.out.println("Test0874.instanceCount Test0874.iFld Test0874.byFld = " + Test0874.instanceCount + "," + Test0874.iFld +
                "," + Test0874.byFld);
        FuzzerUtils.out.println("Test0874.iArrFld = " + FuzzerUtils.checkSum(Test0874.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0874 _instance = new Test0874();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
