// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:51 2023
public class Test0840 {

    public static final int N = 400;

    public static long instanceCount=-1144592621735540849L;
    public static int iFld=3;
    public volatile short sFld=-24393;
    public volatile boolean bFld=true;
    public static byte byFld=-3;
    public static int iFld1=41897;
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0840.iArrFld, -3);
        FuzzerUtils.init(Test0840.fArrFld, 1.154F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i10, int i11, int i12) {

        float f1=10.936F, f3=-27.302F;
        int i13=11, i14=58745, i15=46109, i16=14;
        long l2=133L;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -113.15853);

        for (f1 = 4; f1 < 131; ++f1) {
            i14 = 1;
            while (++i14 < 12) {
                for (l2 = 1; l2 < 1; l2++) {
                    float f2=45.624F;
                    i15 -= i11;
                    i10 = i10;
                    f2 *= i10;
                    Test0840.iArrFld[i14 - 1] -= i13;
                    i13 += (int)(((l2 * i15) + i14) - l2);
                }
                f3 += i14;
                i16 = 1;
                while (++i16 < 1) {
                    i12 >>= i16;
                    dArr[(int)(f1 + 1)] += -211;
                    Test0840.instanceCount *= i14;
                    f3 = i16;
                    i10 = i15;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + l2 + i15 + Float.floatToIntBits(f3) +
            i16 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i4, long l1) {

        double d=121.111071;
        int i6=17;
        int i7=-17940;
        int i8=13;
        int i9=-11464;
        int[] iArr =new int[N];
        float f=67.889F;

        FuzzerUtils.init(iArr, 12);

        i4 *= (int)(d--);
        if (false) {
            for (int i5 : iArr) {
                switch ((((i4 * i5) >>> 1) % 8) + 88) {
                case 88:
                    for (i6 = 1; i6 < 4; i6++) {
                        boolean b1=true;
                        if (b1 = (!b1)) continue;
                        for (i8 = 1; i8 < 2; ++i8) {
                            b1 = ((--f) <= i6);
                            try {
                                i7 = (i9 % i9);
                                i7 = (194 % i9);
                                iArr[i8] = (iArr[i8] % i8);
                            } catch (ArithmeticException a_e) {}
                            l1 >>= 2L;
                            if ((((i9 >>> i7) >= (i4 * i9)) ^ ((i4 - i5) < Math.min(-3L, Test0840.instanceCount))) || (b1 =
                                    ((f--) != (++Test0840.instanceCount)))) break;
                            iArr[i6] -= (int)lMeth(i7, i5, i5);
                            Test0840.instanceCount += i8;
                            Test0840.iArrFld = iArr;
                            iArr = iArr;
                        }
                    }
                case 89:
                    if (true) break;
                    break;
                case 90:
                    l1 >>>= i5;
                    break;
                case 91:
                    Test0840.iArrFld[(i9 >>> 1) % N] -= i4;
                    break;
                case 92:
                    l1 -= i7;
                    break;
                case 93:
                    i5 = i8;
                    break;
                case 94:
                    Test0840.iArrFld[(i8 >>> 1) % N] += i7;
                case 95:
                    i5 >>= i6;
                }
            }
        } else {
            Test0840.fArrFld[(i4 >>> 1) % N] += Test0840.instanceCount;
        }
        vMeth_check_sum += i4 + l1 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(long l, int i, int i1) {

        int i2=-34471, i3=-9, i18=0;
        boolean b=true;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)1861);

        for (i2 = 6; i2 < 286; i2++) {
            i += (int) (--Test0840.instanceCount);
            if (b) break;
            vMeth(i1, l);
            if (b) {
                i18 = 1;
                do {
                    Test0840.instanceCount = i2;
                } while (++i18 < 6);
                Test0840.instanceCount -= i1;
                Test0840.fArrFld[i2 - 1] -= i1;
                Test0840.instanceCount = i2;
            } else {
                i += (int)l;
            }
            switch (((i18 >>> 1) % 4) + 29) {
            case 29:
                Test0840.iArrFld[i2 + 1] = -74;
                break;
            case 30:
                i1 = i18;
                Test0840.iArrFld = Test0840.iArrFld;
                break;
            case 31:
                sArr[i2 - 1] += (short) Test0840.instanceCount;
                break;
            case 32:
                i *= i;
                break;
            default:
                Test0840.instanceCount -= -36456;
            }
        }
        long meth_res = l + i + i1 + i2 + i3 + (b ? 1 : 0) + i18 + FuzzerUtils.checkSum(sArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f4=26.322F;
        int i19=58015, i20=247, i21=37191, i22=25939;
        double d1=2.53905;
        double[] dArr1 =new double[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(dArr1, -9.48399);
        FuzzerUtils.init(lArr, 21L);

        iMeth(Test0840.instanceCount, Test0840.iFld, Test0840.iFld);
        Test0840.instanceCount -= Test0840.instanceCount;
        f4 += Test0840.iFld;
        for (i19 = 3; i19 < 391; ++i19) {
            Test0840.instanceCount += (((i19 * Test0840.instanceCount) + Test0840.iFld) - Test0840.instanceCount);
            sFld >>= (short) Test0840.instanceCount;
            i20 += (int)14L;
            i20 += (i19 + f4);
            i20 *= Test0840.iFld;
            dArr1[i19] -= 23525;
            Test0840.iFld <<= Test0840.iFld;
            Test0840.instanceCount += (((i19 * Test0840.iFld) + i20) - Test0840.instanceCount);
            d1 = f4;
        }
        for (i21 = 7; i21 < 251; i21++) {
            bFld = false;
            lArr[i21 - 1] = Test0840.instanceCount;
            Test0840.iArrFld[i21 + 1] -= Test0840.iFld;
            i20 += (((i21 * Test0840.byFld) + i20) - Test0840.instanceCount);
            Test0840.iFld |= i21;
            Test0840.instanceCount = sFld;
            sFld += (short)(i21 * i20);
            Test0840.iFld -= i19;
            Test0840.instanceCount %= (Test0840.iFld1 | 1);
            Test0840.instanceCount = i22;
        }
        switch ((((-37857 >>> 1) % 3) * 5) + 7) {
        case 10:
            i22 >>>= i22;
            dArr1[(i22 >>> 1) % N] = sFld;
            Test0840.iFld1 <<= 205;
            break;
        case 16:
            Test0840.fArrFld[(Test0840.iFld1 >>> 1) % N] += f4;
            break;
        case 15:
        default:
            i20 -= (int) Test0840.instanceCount;
        }

        FuzzerUtils.out.println("f4 i19 i20 = " + Float.floatToIntBits(f4) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("d1 i21 i22 = " + Double.doubleToLongBits(d1) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("dArr1 lArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0840.instanceCount Test0840.iFld sFld = " + Test0840.instanceCount + "," + Test0840.iFld + "," +
            sFld);
        FuzzerUtils.out.println("bFld Test0840.byFld Test0840.iFld1 = " + (bFld ? 1 : 0) + "," + Test0840.byFld + "," + Test0840.iFld1);
        FuzzerUtils.out.println("Test0840.iArrFld Test0840.fArrFld = " + FuzzerUtils.checkSum(Test0840.iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0840.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0840 _instance = new Test0840();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
