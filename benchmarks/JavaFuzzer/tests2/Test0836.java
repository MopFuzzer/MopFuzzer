// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:51 2023
public class Test0836 {

    public static final int N = 400;

    public static volatile long instanceCount=183L;
    public float fFld=1.577F;
    public static boolean bFld=false;
    public static int iFld=5;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0836.iArrFld, 44922);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, float f1) {

        int i=-40;
        int i1=-134;
        int i2=21;
        int i3=0;
        int[] iArr =new int[N];
        double d1=106.108052;
        double[][] dArr =new double[N][N];
        short[] sArr =new short[N];

        FuzzerUtils.init(dArr, -111.33361);
        FuzzerUtils.init(iArr, -5);
        FuzzerUtils.init(sArr, (short)6835);

        i = 1;
        while (++i < 380) {
            i1 ^= i;
            for (i2 = 1; i2 < 4; i2++) {
                dArr[i][i] += i2;
                i3 += (int)-2.473F;
                iArr[i2 + 1] >>= i1;
                i1 += (i2 + i1);
                l -= i3;
                sArr[i2 - 1] ^= (short)28114;
                iArr[i] *= i1;
                iArr = iArr;
                i3 += (i2 * i2);
                d1 -= d1;
            }
            if (false) continue;
            i1 /= 106;
        }
        vMeth1_check_sum += l + Float.floatToIntBits(f1) + i + i1 + i2 + i3 + Double.doubleToLongBits(d1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(float f, double d) {

        int i4=113;
        int[] iArr1 =new int[N];
        long l1=-4L;
        long[] lArr =new long[N];
        byte by=77;
        boolean b=false;
        short s=-29286;

        FuzzerUtils.init(iArr1, -8);
        FuzzerUtils.init(lArr, 23101L);

        vMeth1(Test0836.instanceCount, f);
        i4 = 1;
        while (++i4 < 336) {
            switch (((41 >>> 1) % 4) + 110) {
            case 110:
                switch ((((i4 >>> 1) % 3) * 5) + 97) {
                case 111:
                    l1 = 1;
                    do {
                        int i5=-30158;
                        f = -91;
                        i5 += (int)(l1 * l1);
                        f *= 83;
                        try {
                            i5 = (i4 % i5);
                            iArr1[i4 - 1] = (i4 / 30);
                            i5 = (i5 / 12908);
                        } catch (ArithmeticException a_e) {}
                        Test0836.instanceCount >>= i5;
                        i5 *= (int)l1;
                        Test0836.instanceCount += Test0836.instanceCount;
                        i5 = -1;
                        Test0836.iArrFld[(int) (l1 + 1)] += i5;
                        by <<= (byte)91;
                    } while (++l1 < 5);
                    break;
                case 100:
                    b = b;
                    break;
                case 107:
                    lArr[i4 - 1] -= (long)f;
                    break;
                }
                break;
            case 111:
                Test0836.instanceCount = i4;
                break;
            case 112:
            case 113:
                s -= by;
                break;
            default:
                f += (i4 * i4);
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i4 + l1 + by + (b ? 1 : 0) + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public int iMeth() {

        int i6=14238, i7=1, i8=-28664, i9=-5, i10=-58411, i11=-248, i12=0;

        vMeth(fFld, 2.32794);
        i6 = i6;
        if (Test0836.bFld) {
            for (i7 = 7; i7 < 364; ++i7) {
                fFld += (32315 + (i7 * i7));
            }
            for (i9 = 6; i9 < 325; i9++) {
                i8 += i9;
                try {
                    i6 = (-7 / Test0836.iArrFld[i9]);
                    i10 = (i6 % Test0836.iArrFld[i9]);
                    i8 = (Test0836.iArrFld[i9 - 1] / 1570544355);
                } catch (ArithmeticException a_e) {}
                i10 += i6;
                i6 -= (int)-15376L;
                i6 = i10;
                Test0836.iArrFld[i9 - 1] -= i8;
                for (i11 = 1; i11 < 5; i11++) {
                    Test0836.instanceCount -= i6;
                    i8 -= (int) Test0836.instanceCount;
                }
            }
        } else {
            i12 >>>= i8;
        }
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i13=-21221, i14=11, i15=-237, i16=0, i17=0;
        short s1=-11855;
        double d2=-1.55467;
        float f2=-1.321F;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 293350369L);

        switch (((iMeth() >>> 1) % 7) + 118) {
        case 118:
            for (i13 = 196; i13 > 11; i13 -= 2) {
                switch ((i13 % 2) + 12) {
                case 12:
                    i14 += (((i13 * fFld) + Test0836.instanceCount) - i14);
                    for (i15 = 11; i15 < 272; i15++) {
                        i17 = 1;
                        while (++i17 < 2) {
                            i16 = i13;
                        }
                        Test0836.iArrFld[i15 - 1] >>= s1;
                        d2 -= i16;
                        f2 = 1;
                        while (++f2 < 2) {
                            i16 *= i16;
                            switch ((((i14 >>> 1) % 4) * 5) + 1) {
                            case 9:
                                i14 -= -46542;
                            case 18:
                                Test0836.iArrFld[i15 + 1] += i16;
                                switch ((((i13 >>> 1) % 1) * 5) + 60) {
                                case 64:
                                    switch (((Test0836.iFld >>> 1) % 10) + 125) {
                                    case 125:
                                        i14 += (1 + (f2 * f2));
                                        fFld += i14;
                                        d2 = f2;
                                    case 126:
                                        Test0836.iArrFld = Test0836.iArrFld;
                                        Test0836.instanceCount += i15;
                                        s1 *= (short) Test0836.instanceCount;
                                        Test0836.iArrFld[i13] = i14;
                                        break;
                                    case 127:
                                        Test0836.instanceCount -= 71;
                                        Test0836.iArrFld[(int) (f2)] = (int) f2;
                                        break;
                                    case 128:
                                        i14 >>= s1;
                                    case 129:
                                        i14 = (int)f2;
                                        Test0836.instanceCount *= i13;
                                        Test0836.iFld >>= i15;
                                        lArr1[i15 + 1] <<= Test0836.instanceCount;
                                        break;
                                    case 130:
                                        Test0836.iArrFld[i13 + 1] = i13;
                                    case 131:
                                        i16 += (int) Test0836.instanceCount;
                                        break;
                                    case 132:
                                    case 133:
                                        Test0836.instanceCount = i17;
                                        break;
                                    case 134:
                                    }
                                default:
                                    Test0836.iArrFld[i13 + 1] = i13;
                                }
                                break;
                            case 2:
                                if (Test0836.bFld) continue;
                                break;
                            case 3:
                                Test0836.iArrFld[i13] = i14;
                                break;
                            }
                        }
                    }
                case 13:
                    i16 += i17;
                    break;
                }
            }
            break;
        case 119:
            Test0836.instanceCount *= Test0836.instanceCount;
            break;
        case 120:
            fFld *= i15;
        case 121:
        case 122:
            Test0836.iFld += 63;
            break;
        case 123:
        case 124:
            lArr1[(i13 >>> 1) % N] = i15;
            break;
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 s1 = " + i16 + "," + i17 + "," + s1);
        FuzzerUtils.out.println("d2 f2 lArr1 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f2) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0836.instanceCount fFld Test0836.bFld = " + Test0836.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + (Test0836.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0836.iFld Test0836.iArrFld = " + Test0836.iFld + "," + FuzzerUtils.checkSum(Test0836.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0836 _instance = new Test0836();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
