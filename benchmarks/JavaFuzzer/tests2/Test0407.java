// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0407 {

    public static final int N = 400;

    public static long instanceCount=-28896L;
    public static boolean bFld=false;
    public static short sFld=-7514;
    public static double dFld=-2.129907;
    public byte byFld=-47;
    public static double dFld1=0.102824;

    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long fMeth1_check_sum = 0;

    public static float fMeth1(int i5, long l, double d) {

        float f3=-23.612F;
        int i6=26558;
        int i7=182;
        int i8=-10;
        int i9=0;
        int i10=1;
        int i11=62;
        int i12=38;
        int[] iArr1 =new int[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr1, 14);
        FuzzerUtils.init(sArr, (short)21848);

        i5 -= (int)f3;
        for (i6 = 308; i6 > 15; i6--) {
            iArr1 = FuzzerUtils.int1array(N, (int)3);
            for (i8 = i6; i8 < 6; ++i8) {
                if (Test0407.bFld) continue;
                l -= Test0407.instanceCount;
            }
            Test0407.instanceCount = -94;
        }
        i10 = 1;
        do {
            for (i11 = i10; 10 > i11; ++i11) {
                switch ((i10 % 7) + 115) {
                case 115:
                    f3 -= i8;
                    iArr1[i10 - 1] -= -8;
                    iArr1 = iArr1;
                    if (Test0407.bFld) continue;
                    break;
                case 116:
                    l -= i12;
                    break;
                case 117:
                    d += -11944;
                    break;
                case 118:
                case 119:
                    sArr = FuzzerUtils.short1array(N, (short)-14992);
                case 120:
                    i12 = 9245;
                    break;
                case 121:
                    iArr1[i10 - 1] -= 134;
                    break;
                default:
                    Test0407.instanceCount += (((i11 * i9) + i5) - i9);
                }
            }
        } while (++i10 < 152);
        long meth_res = i5 + l + Double.doubleToLongBits(d) + Float.floatToIntBits(f3) + i6 + i7 + i8 + i9 + i10 + i11
            + i12 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(sArr);
        fMeth1_check_sum += meth_res;
        return (float)meth_res;
    }

    public static long lMeth(int i3, int i4) {

        float f2=0.780F;
        double d1=1.86867;
        int i13=202;
        int i14=4;
        int[] iArr =new int[N];
        long[] lArr1 =new long[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr, -15500);
        FuzzerUtils.init(lArr1, 3907400584L);
        FuzzerUtils.init(byArr, (byte)-55);

        iArr[(41625 >>> 1) % N] = (int)f2;
        fMeth1(i4, Test0407.instanceCount, d1);
        for (i13 = 1; i13 < 142; i13++) {
            if (Test0407.bFld) {
                lArr1[i13 - 1] = (long)f2;
            } else if (Test0407.bFld) {
                i4 -= Test0407.sFld;
            } else if (Test0407.bFld) {
                f2 += (((i13 * i13) + Test0407.sFld) - f2);
                f2 *= i13;
            } else {
                i3 = (int)d1;
            }
            iArr[i13] = (int) Test0407.instanceCount;
            byArr[i13 - 1] += (byte)f2;
            iArr = iArr;
            f2 = i3;
            Test0407.instanceCount -= (long) f2;
            i14 *= i4;
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i13 + i14 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(float f, float f1, int i2) {

        int i15=183;
        int i16=21;
        int i17=66;
        int[] iArr2 =new int[N];

        FuzzerUtils.init(iArr2, -9442);

        Test0407.bFld = ((Math.min(185, i2) - i2) != lMeth(-2, i2));
        i15 = 359;
        do {
            Test0407.instanceCount = -36568L;
            Test0407.dFld += -1L;
            for (i16 = 13; 1 < i16; --i16) {
                i2 = (int) Test0407.instanceCount;
                iArr2[i15 - 1] -= i15;
                i2 += (i16 - Test0407.instanceCount);
            }
            Test0407.sFld -= (short) Test0407.instanceCount;
            Test0407.bFld = Test0407.bFld;
            if (Test0407.bFld) {
                i17 *= i17;
            } else {
                i2 += i15;
                i2 = i16;
                Test0407.instanceCount -= Test0407.instanceCount;
            }
        } while ((i15 -= 3) > 0);
        long meth_res = Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i2 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=9;
        int i1=8;
        int i18=-9;
        int i19=-7;
        int i20=-26257;
        int i21=117;
        int i22=-199;
        int i23=-6;
        int i24=6;
        int i25=20804;
        int i26=12;
        int[] iArr3 =new
                    int[N];
        float f4=91.959F;
        float[] fArr =new float[N];
        double d2=-45.93635, d3=27.74269;
        long[] lArr =new long[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(lArr, -189L);
        FuzzerUtils.init(fArr, 1.835F);
        FuzzerUtils.init(iArr3, 239);
        FuzzerUtils.init(bArr, true);

        for (i = 4; i < 124; i += 3) {
            i1 = (int) Test0407.instanceCount;
            lArr[i + 1] >>>= 249L;
            Test0407.instanceCount = (long) (fMeth(f4, f4, i1) * i);
            i1 = (int)841907101L;
            for (i18 = 1; i18 < i; i18++) {
                Test0407.instanceCount *= 12;
                i19 -= i18;
                Test0407.instanceCount >>>= -42969;
                byFld = (byte)i18;
            }
            byFld <<= (byte)i;
            i1 = 10;
            i20 = 1;
            do {
                Test0407.instanceCount = i19;
            } while (++i20 < 139);
        }
        i19 = (int) Test0407.instanceCount;
        lArr[(i >>> 1) % N] <<= 89;
        for (i21 = 5; i21 < 145; i21++) {
            switch ((i21 % 2) + 9) {
            case 9:
                i19 = (int)17L;
                for (i23 = 6; i23 < 179; i23++) {
                    i24 = i23;
                    i1 += i23;
                }
                d2 = 1;
                do {
                    i24 -= (int) Test0407.dFld1;
                    switch (((i21 % 10) * 5) + 49) {
                    case 74:
                        Test0407.sFld -= (short) f4;
                        i22 += (int)(d2 + i22);
                        for (d3 = 1; 1 > d3; d3++) {
                            fArr[(int) (d3)] = Test0407.instanceCount;
                            i19 = (int)d2;
                        }
                        break;
                    case 95:
                        i19 = i21;
                        break;
                    case 51:
                        Test0407.bFld = Test0407.bFld;
                    case 98:
                        i19 ^= (int) Test0407.instanceCount;
                        break;
                    case 57:
                        Test0407.instanceCount = i22;
                        break;
                    case 56:
                        i19 = i22;
                        break;
                    case 93:
                        try {
                            iArr3[(int)(d2 + 1)] = (i20 % i19);
                            i26 = (-930372878 / i26);
                            i25 = (-221 / i23);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 72:
                        bArr[(int) (d2 - 1)] = Test0407.bFld;
                    case 80:
                        i25 += (int)(d2 * d2);
                        break;
                    case 64:
                        iArr3[i21 + 1] = (int)f4;
                        break;
                    default:
                        i26 = 33677;
                    }
                } while (++d2 < 179);
                break;
            case 10:
                byFld /= (byte)(i18 | 1);
                break;
            default:
                i24 >>= i18;
            }
        }

        FuzzerUtils.out.println("i i1 f4 = " + i + "," + i1 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 d2 d3 = " + i24 + "," + Double.doubleToLongBits(d2) + "," +
            Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i25 i26 lArr = " + i25 + "," + i26 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr iArr3 bArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr3) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0407.instanceCount Test0407.bFld Test0407.sFld = " + Test0407.instanceCount + "," + (Test0407.bFld ? 1
                : 0) + "," + Test0407.sFld);
        FuzzerUtils.out.println("Test0407.dFld byFld Test0407.dFld1 = " + Double.doubleToLongBits(Test0407.dFld) + "," + byFld +
                "," + Double.doubleToLongBits(Test0407.dFld1));

        FuzzerUtils.out.println("fMeth1_check_sum: " + fMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0407 _instance = new Test0407();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth mainTest
//DEBUG  fMeth1 ->  fMeth1 lMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
