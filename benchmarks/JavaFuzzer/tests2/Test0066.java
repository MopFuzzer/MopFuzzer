// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0066 {

    public static final int N = 400;

    public static long instanceCount=37L;
    public int iFld=3;
    public static byte byFld=-29;
    public static short sFld=-7093;
    public static volatile double dFld=-16.123335;
    public static float fFld=1.881F;
    public volatile int iFld1=8;
    public volatile int iFld2=-11;
    public static boolean bFld=false;
    public static int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0066.iArrFld, 12);
        FuzzerUtils.init(Test0066.byArrFld, (byte) -82);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l, long l1, int i5) {

        int i6=-8, i7=-53935, i8=-10, i9=11, i10=34;

        i5 *= i5;
        for (i6 = 1; i6 < 380; ++i6) {
            switch (((i6 >>> 1) % 3) + 93) {
            case 93:
                Test0066.byFld -= (byte) i7;
                Test0066.sFld *= (short) i5;
            case 94:
                i5 += (((i6 * i5) + l1) - i6);
                if (i7 != 0) {
                    vMeth1_check_sum += l + l1 + i5 + i6 + i7 + i8 + i9 + i10;
                    return;
                }
                break;
            case 95:
                Test0066.instanceCount = i6;
                i5 += (22 + (i6 * i6));
                i5 += i6;
                break;
            default:
                for (i8 = 1; i8 < 4; ++i8) {
                    i5 -= i5;
                    i9 += i8;
                    try {
                        Test0066.iArrFld[i6 - 1] = (Test0066.iArrFld[i6 + 1] % 1028);
                        i10 = (-13502 % i6);
                        i7 = (i6 % i8);
                    } catch (ArithmeticException a_e) {}
                    i10 += (((i8 * Test0066.instanceCount) + i8) - l1);
                }
            }
        }
        vMeth1_check_sum += l + l1 + i5 + i6 + i7 + i8 + i9 + i10;
    }

    public static void vMeth() {

        int i3=3, i4=484, i11=-209;
        float f=60.596F;
        float[] fArr =new float[N];
        long l2=-60485L;

        FuzzerUtils.init(fArr, 0.232F);

        for (i3 = 6; 150 > i3; ++i3) {
            vMeth1(Test0066.instanceCount, Test0066.instanceCount, -56002);
            f += Test0066.instanceCount;
            Test0066.instanceCount *= (long) Test0066.dFld;
            for (l2 = 11; l2 > 1; --l2) {
                Test0066.iArrFld = Test0066.iArrFld;
                i4 |= i4;
                Test0066.instanceCount *= Test0066.byFld;
                i4 += (int)(39.599F + (l2 * l2));
                i4 += (int)(l2 ^ i4);
                switch ((int)(((l2 % 7) * 5) + 89)) {
                case 108:
                    Test0066.dFld = Test0066.instanceCount;
                    f += -3488770223L;
                    i4 += (-4 + (l2 * l2));
                    i11 += Test0066.sFld;
                case 104:
                    i4 -= (int)l2;
                    break;
                case 94:
                    i11 += -13824;
                    break;
                case 101:
                    try {
                        i11 = (i4 % -56704);
                        i4 = (i4 % i3);
                        i11 = (i3 / 44);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 116:
                    Test0066.instanceCount *= i3;
                    break;
                case 120:
                    Test0066.instanceCount += (l2 ^ Test0066.instanceCount);
                case 109:
                    i4 -= (int)l2;
                    break;
                default:
                    fArr[(int) (l2)] = (float) Test0066.dFld;
                }
            }
        }
        vMeth_check_sum += i3 + i4 + Float.floatToIntBits(f) + l2 + i11 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i) {

        int i1=-28065, i2=160;
        float f1=77.295F;

        for (i1 = 291; 9 < i1; i1--) {
            vMeth();
            f1 = f1;
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        short s=-6266;
        int i12=-172;
        int i13=65113;
        int i14=-19;
        int i15=-7582;
        int i16=18141;
        int i17=-61;
        int i18=9;
        int[] iArr =new int[N];
        int[] iArr1 =new int[N];
        double[] dArr =new double[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, -6);
        FuzzerUtils.init(dArr, -62.52853);
        FuzzerUtils.init(iArr1, 105);
        FuzzerUtils.init(lArr, 63855L);

        Test0066.instanceCount *= (s++);
        Test0066.instanceCount -= (iArr[(39595 >>> 1) % N]++);
        iFld = iMeth(iFld);
        i12 = 1;
        do {
            for (i13 = i12; 89 > i13; ++i13) {
                dArr[i13 - 1] = Test0066.instanceCount;
                Test0066.fFld = -14093;
                i15 = 1;
                while (++i15 < 1) {
                    iFld = -51372;
                    Test0066.iArrFld[i15 + 1] += (int) Test0066.instanceCount;
                    i14 += (((i15 * i13) + i14) - i15);
                    Test0066.instanceCount = Test0066.sFld;
                    iFld = iFld1;
                    iFld <<= iFld2;
                    iFld += i12;
                    Test0066.instanceCount += Test0066.instanceCount;
                    iArr1[i13 - 1] -= iFld;
                }
                i16 = 1;
                do {
                    iFld += i16;
                    Test0066.fFld = Test0066.instanceCount;
                    Test0066.bFld = Test0066.bFld;
                    lArr[i16 - 1] = iFld2;
                    i14 -= (int) Test0066.instanceCount;
                    Test0066.iArrFld[i12] *= iFld2;
                    Test0066.byArrFld[i12 + 1] += (byte) -2.781F;
                    iFld += i16;
                    Test0066.fFld -= Test0066.instanceCount;
                } while (++i16 < 1);
                for (i17 = 1; i17 > 1; i17 -= 3) {
                    lArr[i12 - 1] = 113;
                    s -= (short)iFld;
                }
            }
        } while (++i12 < 281);

        FuzzerUtils.out.println("s i12 i13 = " + s + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 iArr = " + i17 + "," + i18 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("dArr iArr1 lArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," +
            FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0066.instanceCount iFld Test0066.byFld = " + Test0066.instanceCount + "," + iFld + "," +
                Test0066.byFld);
        FuzzerUtils.out.println("Test0066.sFld Test0066.dFld Test0066.fFld = " + Test0066.sFld + "," +
                Double.doubleToLongBits(Test0066.dFld) + "," + Float.floatToIntBits(Test0066.fFld));
        FuzzerUtils.out.println("iFld1 iFld2 Test0066.bFld = " + iFld1 + "," + iFld2 + "," + (Test0066.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0066.iArrFld Test0066.byArrFld = " + FuzzerUtils.checkSum(Test0066.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0066.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0066 _instance = new Test0066();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
