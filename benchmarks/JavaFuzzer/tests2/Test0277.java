// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:25 2023
public class Test0277 {

    public static final int N = 400;

    public static long instanceCount=861759236L;
    public static double dFld=-54.38024;
    public static volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0277.lArrFld, 2282903057L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(int i4, int i5) {

        int i6=26329, i7=3, i8=139, i9=11, i10=-126, i11=14;
        float f1=0.422F;
        byte by=80;
        short s=18345;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 0.40144);

        i5 *= i5;
        for (i6 = 8; i6 < 205; ++i6) {
            i7 = (int)f1;
            for (i8 = 1; 8 > i8; i8++) {
                switch ((i8 % 2) + 24) {
                case 24:
                    for (i10 = 1; i10 < 2; i10++) {
                        i5 += (int) Test0277.instanceCount;
                        by += (byte)(i10 * i4);
                        dArr[i6 - 1] -= i7;
                        f1 += i10;
                        Test0277.lArrFld = Test0277.lArrFld;
                        switch (((i9 >>> 1) % 2) + 4) {
                        case 4:
                            i5 = -7;
                            i7 = (int) Test0277.instanceCount;
                            s = s;
                            break;
                        case 5:
                            Test0277.instanceCount = 83;
                        }
                    }
                case 25:
                    i11 = i8;
                    break;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + by + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        int i12=12;
        int i13=4;
        int i14=-50;
        int i15=-12;
        int i16=-206;
        int i17=-205;
        int[] iArr =new int[N];
        float f2=0.756F;
        boolean b=false;
        short[] sArr =new short[N];
        double[] dArr1 =new double[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr, -231);
        FuzzerUtils.init(sArr, (short)-4435);
        FuzzerUtils.init(dArr1, -15.12709);
        FuzzerUtils.init(byArr, (byte)110);

        fMeth(i3, i2);
        for (i12 = 10; i12 < 284; i12++) {
            switch (((i3 >>> 1) % 5) + 15) {
            case 15:
                for (i14 = 6; i14 > 1; --i14) {
                    f2 += (i14 + Test0277.instanceCount);
                    i15 += (((i14 * i3) + i3) - i2);
                    i1 *= (int)-78.103096;
                    Test0277.instanceCount >>= Test0277.instanceCount;
                }
                if (b) {
                    Test0277.dFld -= Test0277.instanceCount;
                    i2 *= i15;
                    for (i16 = 1; 6 > i16; ++i16) {
                        i1 += i1;
                        try {
                            i2 = (iArr[i16 - 1] / -38562);
                            i1 = (i2 / 42632);
                            i1 = (i14 / iArr[i12 + 1]);
                        } catch (ArithmeticException a_e) {}
                    }
                    Test0277.lArrFld[i12] -= i14;
                } else if (true) {
                    dArr1[i12] -= 13427L;
                    vMeth_check_sum += i1 + i2 + i3 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 + i17 + (b
                        ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr);
                    return;
                } else {
                    i17 *= (int)16.137F;
                    vMeth_check_sum += i1 + i2 + i3 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 + i17 + (b
                        ? 1 : 0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr);
                    return;
                }
                break;
            case 16:
                byArr = FuzzerUtils.byte1array(N, (byte)81);
                break;
            case 17:
                i17 = (int)f2;
                break;
            case 18:
                f2 *= i16;
                break;
            case 19:
                i1 = (int) Test0277.instanceCount;
                break;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 + i17 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vSmallMeth(int i, long l, float f) {


        vMeth(i, i, i);
        vSmallMeth_check_sum += i + l + Float.floatToIntBits(f);
    }

    public void mainTest(String[] strArr1) {

        int i18=57190;
        int i19=-8;
        int i20=-45021;
        int i21=-48913;
        int i22=7539;
        int i23=103;
        int i24=10;
        int i25=167;
        int i26=-22199;
        int i27=42375;
        int[][] iArr1 =new int[N][N];
        float f3=-49.256F;
        float f4=-1.189F;
        float[][] fArr =new float[N][N];
        boolean b1=true;
        byte by1=90;
        short s2=6199;

        FuzzerUtils.init(iArr1, -70);
        FuzzerUtils.init(fArr, 1.866F);

        for (int smallinvoc = 0; smallinvoc < 396; smallinvoc++) vSmallMeth(i18, Test0277.instanceCount, f3);
        switch ((((i18 >>> 1) % 9) * 5) + 126) {
        case 154:
            for (f4 = 10; f4 < 325; f4++) {
                Test0277.instanceCount = i19;
                i18 = i18;
                i18 = i19;
                i18 += (int)((long)f4 ^ i19);
                b1 = false;
                Test0277.instanceCount += i18;
                for (i20 = 80; i20 > 4; i20 -= 2) {
                    Test0277.instanceCount -= (long) f4;
                    i21 = (int) Test0277.instanceCount;
                }
                i19 >>= i20;
                Test0277.instanceCount += (long) Test0277.dFld;
            }
            break;
        case 151:
            switch (((i19 >>> 1) % 8) + 89) {
            case 89:
                f3 -= Test0277.instanceCount;
                i19 *= i21;
                i19 = (int) Test0277.instanceCount;
                break;
            case 90:
            case 91:
                for (i22 = 2; 327 > i22; ++i22) {
                    try {
                        i18 = (i21 % i21);
                        i21 = (iArr1[i22 - 1][i22] / -93);
                        iArr1[i22][i22 - 1] = (80 / i20);
                    } catch (ArithmeticException a_e) {}
                    f3 += i22;
                    i19 = i21;
                    Test0277.instanceCount = i21;
                    i24 = 1;
                    while (++i24 < 77) {
                        if (b1) {
                            Test0277.instanceCount -= Test0277.instanceCount;
                            for (i25 = i22; 1 > i25; i25++) {
                                i21 = (int)-1789618286973762663L;
                                i26 -= (int)96L;
                                if (b1) continue;
                            }
                        } else if (b1) {
                            i18 /= (int)(i25 | 1);
                        } else if (b1) {
                            by1 <<= (byte) Test0277.instanceCount;
                        } else {
                            Test0277.instanceCount = i24;
                        }
                    }
                }
                break;
            case 92:
                i18 += (int)f3;
                break;
            case 93:
                iArr1[(i24 >>> 1) % N][(i23 >>> 1) % N] -= (int) Test0277.instanceCount;
            case 94:
                Test0277.dFld = i19;
            case 95:
                i18 = i23;
                break;
            case 96:
                i23 = i24;
                break;
            }
            break;
        case 163:
            i26 = -11;
        case 161:
            s2 *= (short)i19;
            break;
        case 168:
            Test0277.dFld -= i20;
        case 156:
            iArr1[(i23 >>> 1) % N] = iArr1[(i24 >>> 1) % N];
            break;
        case 129:
            Test0277.dFld *= Test0277.dFld;
        case 146:
            Test0277.dFld -= i27;
            break;
        case 133:
            i26 *= (int) Test0277.instanceCount;
        default:
            fArr[(8 >>> 1) % N] = fArr[(i26 >>> 1) % N];
        }

        FuzzerUtils.out.println("i18 f3 f4 = " + i18 + "," + Float.floatToIntBits(f3) + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("i19 b1 i20 = " + i19 + "," + (b1 ? 1 : 0) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("by1 s2 i27 = " + by1 + "," + s2 + "," + i27);
        FuzzerUtils.out.println("iArr1 fArr = " + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0277.instanceCount Test0277.dFld Test0277.lArrFld = " + Test0277.instanceCount + "," +
                Double.doubleToLongBits(Test0277.dFld) + "," + FuzzerUtils.checkSum(Test0277.lArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0277 _instance = new Test0277();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
