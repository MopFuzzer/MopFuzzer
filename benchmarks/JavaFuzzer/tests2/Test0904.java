// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:54 2023
public class Test0904 {

    public static final int N = 400;

    public static long instanceCount=50187L;
    public static volatile float fFld=-39.568F;
    public double dFld=-2.32798;
    public static volatile int iFld=22;
    public static long lFld=12L;
    public static volatile double dFld1=-7.103486;
    public static volatile int iFld1=62;
    public static volatile int[] iArrFld =new int[N];
    public static int[][] iArrFld1 =new int[N][N];

    static {
        FuzzerUtils.init(Test0904.iArrFld, 114);
        FuzzerUtils.init(Test0904.iArrFld1, -20202);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i7=36467;
        int i8=-1;
        int i9=-82;
        int i10=-134;
        int i11=-33517;
        int[] iArr2 =new int[N];
        byte by=6;

        FuzzerUtils.init(iArr2, 214);

        for (i7 = 5; i7 < 259; ++i7) {
            Test0904.iFld -= (int) -74L;
            iArr2[i7 - 1] = i7;
            Test0904.iFld -= (int) Test0904.fFld;
            iArr2[i7 - 1] -= by;
            i9 = 6;
            while (--i9 > 0) {
                i8 >>= i8;
                Test0904.fFld += (((i9 * Test0904.fFld) + Test0904.fFld) - by);
                iArr2[i7] += i7;
                for (i10 = 1; 1 > i10; i10++) {
                    by += (byte)(i10 - i9);
                    Test0904.fFld += Test0904.lFld;
                    i11 += i10;
                    Test0904.instanceCount *= Test0904.instanceCount;
                    i8 += i11;
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + by + i9 + i10 + i11 + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(int i6) {

        int i12=-235, i13=-199, i14=-40620, i15=7, i16=213, i17=-217;
        float f=-2.905F;
        byte by1=-48;

        vMeth1();
        for (i12 = 11; i12 < 213; i12++) {
            i6 >>= (int) Test0904.lFld;
            i14 = 1;
            do {
                Test0904.lFld += (((i14 * i6) + i12) - Test0904.lFld);
            } while ((i14 += 3) < 8);
            Test0904.iArrFld[i12 - 1] = i6;
            Test0904.fFld -= 9;
            for (f = 1; 8 > f; ++f) {
                Test0904.iArrFld = FuzzerUtils.int1array(N, (int) -39283);
                Test0904.iArrFld[i12 + 1] <<= by1;
                Test0904.instanceCount += 648963887L;
                Test0904.fFld += (((f * i15) + i13) - by1);
            }
            for (i16 = 1; i16 < 8; i16++) {
                Test0904.instanceCount *= (long) Test0904.dFld1;
                Test0904.iArrFld[i12 + 1] = i17;
            }
        }
        vMeth_check_sum += i6 + i12 + i13 + i14 + Float.floatToIntBits(f) + i15 + by1 + i16 + i17;
    }

    public static int iMeth(short s1) {

        int i4=19;
        int i5=164;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, -13);

        i4 = 1;
        while ((i4 += 3) < 243) {
            try {
                Test0904.iFld = (i4 % i4);
                iArr1[i4 - 1] = (-26 % Test0904.iFld);
                Test0904.iFld = (122 / iArr1[i4 + 1]);
            } catch (ArithmeticException a_e) {}
            Test0904.instanceCount >>= Math.min(247 * (Test0904.iFld--), iArr1[i4 + 1]);
            Test0904.iFld *= (int) (((iArr1[i4 - 1]++) - (Test0904.instanceCount + Test0904.iFld)) + (i4 *
                    Math.min(Test0904.instanceCount, Test0904.instanceCount)));
            i5 = 1;
            do {
                vMeth(i5);
                Test0904.iArrFld[i5] = (int) Test0904.instanceCount;
                Test0904.iFld = i4;
                Test0904.iFld *= Test0904.iFld;
                Test0904.fFld = Test0904.instanceCount;
                iArr1[i4 - 1] -= 13138;
                Test0904.instanceCount = Test0904.iFld;
                Test0904.lFld = i4;
                Test0904.iArrFld1 = Test0904.iArrFld1;
                Test0904.fFld = Test0904.iFld;
            } while (++i5 < 19);
        }
        long meth_res = s1 + i4 + i5 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-35565;
        int i1=0;
        int i2=-93;
        int i3=-245;
        int i18=-55772;
        int i19=-1;
        int[] iArr =new int[N];
        short s=-8376;
        long l=-7763420106049857220L;
        boolean b=true;
        byte by2=-32;

        FuzzerUtils.init(iArr, -28836);

        i /= (int) (Test0904.instanceCount | 1);
        for (i1 = 237; i1 > 4; i1--) {
            iArr[i1 - 1] -= s;
            i3 = 108;
            do {
                Test0904.fFld += (((i3 * i3) + i3) - i3);
                Test0904.fFld = (float) (i *= (int) ((dFld - s) * iMeth(s)));
                for (l = 1; l < 1; l++) {
                    Test0904.iFld %= -28362;
                    if (b) {
                        Test0904.iFld += (int) l;
                        Test0904.iFld -= 8;
                        i18 += (int) (((l * i2) + Test0904.lFld) - i3);
                        i2 *= (int) Test0904.lFld;
                    } else {
                        iArr[i3] -= i2;
                        by2 += (byte)(((l * i2) + i3) - i1);
                        switch (((-172 >>> 1) % 4) + 35) {
                        case 35:
                            Test0904.dFld1 = i;
                            break;
                        case 36:
                            Test0904.lFld -= i1;
                            Test0904.instanceCount += l;
                            break;
                        case 37:
                            i18 <<= i18;
                            i += (int) (((l * l) + Test0904.iFld) - i18);
                            break;
                        case 38:
                            i18 = (int) Test0904.dFld1;
                            break;
                        }
                    }
                    Test0904.lFld -= i1;
                    i2 += Test0904.iFld;
                }
                Test0904.iFld = Test0904.iFld1;
                Test0904.iArrFld1 = Test0904.iArrFld1;
                iArr[i1 - 1] += i18;
                i += i19;
                by2 += (byte) Test0904.iFld;
                Test0904.iFld += (((i3 * i3) + Test0904.lFld) - i19);
            } while (--i3 > 0);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s i3 l = " + s + "," + i3 + "," + l);
        FuzzerUtils.out.println("i18 b by2 = " + i18 + "," + (b ? 1 : 0) + "," + by2);
        FuzzerUtils.out.println("i19 iArr = " + i19 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0904.instanceCount Test0904.fFld dFld = " + Test0904.instanceCount + "," +
                Float.floatToIntBits(Test0904.fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0904.iFld Test0904.lFld Test0904.dFld1 = " + Test0904.iFld + "," + Test0904.lFld + "," +
                Double.doubleToLongBits(Test0904.dFld1));
        FuzzerUtils.out.println("Test0904.iFld1 Test0904.iArrFld Test0904.iArrFld1 = " + Test0904.iFld1 + "," +
                FuzzerUtils.checkSum(Test0904.iArrFld) + "," + FuzzerUtils.checkSum(Test0904.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0904 _instance = new Test0904();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
