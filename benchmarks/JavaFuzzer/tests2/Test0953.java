// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0953 {

    public static final int N = 400;

    public static long instanceCount=-3378725743L;
    public int iFld=-56948;
    public short sFld=26437;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0953.iArrFld, 173);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vSmallMeth(long l) {

        int i=0;

        l += (-Math.abs((int)(104.17729 + (++i))));
        vSmallMeth_check_sum += l + i;
    }

    public static long lMeth(long l1, int i5, int i6) {

        double d1=-47.29542;
        long l2=220L;
        int i7=-62;

        i5 -= (int)(d1++);
        for (l2 = 9; l2 < 333; ++l2) {
            l1 += l2;
        }
        vSmallMeth(l1);
        long meth_res = l1 + i5 + i6 + Double.doubleToLongBits(d1) + l2 + i7;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public float fMeth() {

        float f1=-84.198F;
        long l3=138L;
        int i8=63, i9=1, i10=17, i11=117, i12=-5;
        double d2=63.94894;
        double[] dArr =new double[N];
        boolean b=true;

        FuzzerUtils.init(dArr, 1.4705);

        Test0953.instanceCount = (long) (((f1 + iFld) - iFld) + dArr[(iFld >>> 1) % N]);
        dArr[(iFld >>> 1) % N] = ((sFld <<= (short) (Test0953.instanceCount - f1)) - lMeth(l3, iFld, -13));
        iFld += iFld;
        for (i8 = 15; i8 < 372; i8++) {
            if (b) {
                if (b) {
                    i9 ^= iFld;
                    i10 = 5;
                    while (--i10 > 0) {
                        for (i11 = 1; 1 > i11; i11++) {
                            Test0953.iArrFld[i10 + 1] <<= i10;
                            Test0953.instanceCount += (i11 - i8);
                            f1 -= i12;
                            l3 -= i8;
                            f1 -= i12;
                            Test0953.iArrFld[i11 + 1] = (int) d2;
                        }
                    }
                } else {
                    Test0953.iArrFld = Test0953.iArrFld;
                }
            } else if (b) {
                i12 = iFld;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l3 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + (b ?
            1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=-121;
        double d=0.16504;
        short s=10185;
        int i1=-4, i2=27854, i3=-22, i4=-34908, i13=-7857, i14=49262, i15=19210, i16=-38037, i17=-50638, i18=162,
            i19=47959;
        float f=71.297F, f2=0.1020F;
        boolean b2=false;

        Test0953.instanceCount <<= by;
        for (int smallinvoc = 0; smallinvoc < 605; smallinvoc++) vSmallMeth(--Test0953.instanceCount);
        iFld = (int) (((iFld *= (int) Test0953.instanceCount) * (iFld * d)) * (s / (((long) (--d)) | 1)));
        for (i1 = 9; i1 < 284; i1++) {
            for (i3 = 1; 91 > i3; i3++) {
                boolean b1=true;
                i4 = (int)(-((i3 - i1) - (-89.106074 + s)));
                iFld -= i1;
                f += (((i3 * i2) + iFld) - iFld);
                if (((++i4) >= (Test0953.instanceCount = (--iFld))) || ((i4 != (30.76478 * fMeth())) || b1)) break;
                Test0953.iArrFld[i3 - 1] = (int) d;
                iFld = -9;
            }
            iFld -= (int) Test0953.instanceCount;
            for (i13 = 1; i13 < 91; i13++) {
                i2 = i13;
                i2 += i13;
                f += (((i13 * i3) + iFld) - i4);
                i2 += (i13 | Test0953.instanceCount);
                i4 += (int) Test0953.instanceCount;
            }
        }
        for (f2 = 6; f2 < 154; ++f2) {
            f *= 37.373F;
            for (i16 = (int)(f2); i16 < 169; i16++) {
                if (b2) continue;
                switch ((int)((f2 % 3) + 36)) {
                case 36:
                    i15 -= i1;
                    for (i18 = 1; i18 < 1; i18++) {
                        iFld += (i18 + i16);
                        Test0953.instanceCount = i18;
                        i2 = i19;
                        i4 -= 3;
                        Test0953.instanceCount = -46029;
                    }
                    break;
                case 37:
                    i17 += (((i16 * i19) + by) - Test0953.instanceCount);
                    break;
                case 38:
                    i2 += i16;
                    break;
                default:
                    i4 = 253;
                }
            }
        }

        FuzzerUtils.out.println("by d s = " + by + "," + Double.doubleToLongBits(d) + "," + s);
        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 f i13 = " + i4 + "," + Float.floatToIntBits(f) + "," + i13);
        FuzzerUtils.out.println("i14 f2 i15 = " + i14 + "," + Float.floatToIntBits(f2) + "," + i15);
        FuzzerUtils.out.println("i16 i17 b2 = " + i16 + "," + i17 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i18 i19 = " + i18 + "," + i19);

        FuzzerUtils.out.println("Test0953.instanceCount iFld sFld = " + Test0953.instanceCount + "," + iFld + "," + sFld);
        FuzzerUtils.out.println("Test0953.iArrFld = " + FuzzerUtils.checkSum(Test0953.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0953 _instance = new Test0953();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test lMeth fMeth
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
