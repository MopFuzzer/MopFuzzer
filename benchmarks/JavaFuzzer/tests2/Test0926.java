// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:55 2023
public class Test0926 {

    public static final int N = 400;

    public static long instanceCount=3817893280L;
    public static int iFld=-35908;
    public static double dFld=66.9988;
    public volatile byte byFld=126;
    public int iFld1=-4925;
    public static int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public boolean[] bArrFld =new boolean[N];
    public double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0926.iArrFld, 164);
        FuzzerUtils.init(Test0926.lArrFld, -34442L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        double d=-2.15364;
        int i4=15708, i5=36088, i6=-44176, i7=-63820;
        short s=-369;
        boolean b=true;

        Test0926.iFld = Test0926.iFld;
        d += Test0926.iFld;
        Test0926.lArrFld[(Test0926.iFld >>> 1) % N] += (long) d;
        for (i4 = 5; i4 < 246; ++i4) {
            Test0926.instanceCount += i4;
            Test0926.iFld += (i4 | i5);
            if (b) {
                d = Test0926.instanceCount;
                if (Test0926.iFld != 0) {
                }
            } else if (b) {
                for (i6 = i4; i6 < 7; ++i6) {
                    Test0926.iArrFld[i4 - 1] += (int) 54.466F;
                    Test0926.iFld *= (int) Test0926.instanceCount;
                    i7 <<= (int)-3434163266L;
                    Test0926.instanceCount -= Test0926.iFld;
                    s += (short)i6;
                }
            } else if (b) {
                Test0926.iFld = (int) d;
            } else {
                if (false) continue;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + s + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i3) {

        int i8=9869, i9=-2;
        boolean b1=true;

        lMeth();
        i3 = Test0926.iFld;
        for (i8 = 6; i8 < 152; i8++) {
            b1 = b1;
            if (i8 != 0) {
                vMeth1_check_sum += i3 + i8 + i9 + (b1 ? 1 : 0);
                return;
            }
        }
        Test0926.instanceCount = i8;
        vMeth1_check_sum += i3 + i8 + i9 + (b1 ? 1 : 0);
    }

    public static void vMeth() {


        vMeth1(-36744);
        vMeth_check_sum += 0;
    }

    public void mainTest(String[] strArr1) {

        int i=0, i1=206, i2=16396, i10=-34438, i11=12, i12=186, i13=-14, i14=208, i15=-31786, i16=-4, i17=28,
            i18=-16986;
        float f1=-102.971F;
        float[] fArr =new float[N];
        boolean b2=true;
        short s1=-16077;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 39055L);
        FuzzerUtils.init(fArr, 0.1020F);

        i -= i;
        for (i1 = 3; i1 < 256; i1++) {
            float f=-116.640F;
            i = -44728;
            f += i1;
            lArr[i1 + 1] = -11;
            Test0926.iArrFld[i1 - 1] >>= Math.max((int) (i2 >>= (int) (lArr[i1]++)), i2--);
        }
        vMeth();
        for (i10 = 198; i10 > 2; i10--) {
            for (i12 = 5; i12 < 128; ++i12) {
                Test0926.dFld -= i2;
                for (i14 = i10; i14 < 2; ++i14) {
                    bArrFld = bArrFld;
                    byFld -= (byte) Test0926.instanceCount;
                    f1 += f1;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    if (false) {
                        fArr[i16 - 1] = i18;
                        Test0926.iArrFld = Test0926.iArrFld;
                    } else if (b2) {
                        i11 *= i14;
                        i18 = (int) Test0926.instanceCount;
                        dArrFld[i12 - 1] -= i13;
                    } else {
                        Test0926.lArrFld[i10 - 1] = i15;
                    }
                    i17 += (int)f1;
                    s1 -= (short) Test0926.iFld;
                    b2 = b2;
                    Test0926.instanceCount = -29513;
                    f1 += ((long)i16 ^ (long)iFld1);
                }
                f1 *= f1;
                f1 -= i;
                f1 = i;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("f1 i16 i17 = " + Float.floatToIntBits(f1) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 b2 s1 = " + i18 + "," + (b2 ? 1 : 0) + "," + s1);
        FuzzerUtils.out.println("lArr fArr = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0926.instanceCount Test0926.iFld Test0926.dFld = " + Test0926.instanceCount + "," + Test0926.iFld +
                "," + Double.doubleToLongBits(Test0926.dFld));
        FuzzerUtils.out.println("byFld iFld1 Test0926.iArrFld = " + byFld + "," + iFld1 + "," +
                FuzzerUtils.checkSum(Test0926.iArrFld));
        FuzzerUtils.out.println("Test0926.lArrFld bArrFld dArrFld = " + FuzzerUtils.checkSum(Test0926.lArrFld) + "," +
            FuzzerUtils.checkSum(bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0926 _instance = new Test0926();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
