// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:45 2023
public class Test0712 {

    public static final int N = 400;

    public static long instanceCount=10L;
    public float fFld=36.101F;
    public static byte byFld=49;
    public int iFld=-13;
    public static volatile long lFld=-250562008944578007L;
    public static volatile int[] iArrFld =new int[N];
    public static int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0712.iArrFld, 14);
        FuzzerUtils.init(Test0712.iArrFld1, 14937);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i6, byte by) {

        int i7=-148;
        int i8=-3;
        int i9=-13;
        int i10=19395;
        int i11=176;
        int i12=-24408;
        int[][] iArr1 =new int[N][N];
        short s1=30742;
        float f=-1.550F;

        FuzzerUtils.init(iArr1, -33);

        for (i7 = 3; i7 < 358; ++i7) {
            s1 += (short)(((i7 * i6) + f) - f);
            for (i9 = 1; i9 < 5; i9++) {
                i8 += (((i9 * i7) + i9) - by);
                i8 = i6;
                switch (((22340 >>> 1) % 5) + 59) {
                case 59:
                    switch (((i8 >>> 1) % 1) + 68) {
                    case 68:
                        i10 += (int)(2384970606763566612L + (i9 * i9));
                        break;
                    }
                    break;
                case 60:
                    i8 *= i8;
                    i10 -= (int)f;
                    f = i9;
                    i8 += (i9 * i8);
                    break;
                case 61:
                    for (i11 = 1; i11 < 2; ++i11) {
                        iArr1[i11 + 1][i7 + 1] -= i10;
                        i8 = i6;
                    }
                    break;
                case 62:
                    i12 &= i9;
                    break;
                case 63:
                    i10 -= -37489;
                    break;
                }
            }
        }
        vMeth1_check_sum += i6 + by + i7 + i8 + s1 + Float.floatToIntBits(f) + i9 + i10 + i11 + i12 +
            FuzzerUtils.checkSum(iArr1);
    }

    public static long lMeth() {

        int i5=56105;
        int i13=-11;
        int i14=5;
        int i15=192;
        int i16=-66;
        int i17=-31177;
        int[] iArr2 =new int[N];
        byte by1=7;
        float f1=-1.574F;
        boolean b1=true;
        long[][] lArr1 =new long[N][N];

        FuzzerUtils.init(lArr1, 16082L);
        FuzzerUtils.init(iArr2, 23458);

        i5 = i5;
        vMeth1(i5, by1);
        i13 = 1;
        while (++i13 < 188) {
            lArr1[i13][i13] = 59335;
            Test0712.instanceCount += (i13 * i13);
            f1 -= Test0712.instanceCount;
            i5 >>= i5;
            for (i14 = 1; i14 < 8; i14++) {
                if (b1) continue;
            }
        }
        for (i16 = 8; i16 < 306; ++i16) {
            i17 += (i16 ^ i5);
            i17 = -3;
            iArr2[i16] = i14;
            f1 -= Test0712.instanceCount;
        }
        i5 = 4;
        long meth_res = i5 + by1 + i13 + Float.floatToIntBits(f1) + i14 + i15 + (b1 ? 1 : 0) + i16 + i17 +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(long l, int i1) {

        int i2=9;
        int i3=14245;
        int i4=-47693;
        int i18=-129;
        int i19=6;
        int[] iArr =new int[N];
        boolean b=true;
        short s=-9444;
        long[] lArr =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr, -4180446155348998861L);
        FuzzerUtils.init(dArr, 0.106502);
        FuzzerUtils.init(iArr, -55);

        i2 = 1;
        do {
            lArr[i2 + 1] -= (long)(++dArr[i2 + 1]);
            i1 += (((i2 * i1) + i2) - Test0712.instanceCount);
            for (i3 = 1; i3 < 7; i3++) {
                if (((b = (true && (fFld != l))) && ((i4 - 2.1112) == (s - Test0712.instanceCount))) || b) break;
                iArr[i3] += (--iArr[i3 + 1]);
                i4 = (int)(lArr[i3 + 1]++);
                i1 <<= (int)lMeth();
                if (b) break;
                i1 = (int)1.117691;
                Test0712.byFld += Test0712.byFld;
                iArr[i2] >>= iFld;
                for (i18 = 1; i18 < 2; i18++) {
                    iFld = i2;
                    fFld += (((i18 * iFld) + Test0712.byFld) - i19);
                }
            }
        } while (++i2 < 220);
        vMeth_check_sum += l + i1 + i2 + i3 + i4 + (b ? 1 : 0) + s + i18 + i19 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d=-27.19575, d1=18.71633;
        int i=57967, i20=14, i21=226, i22=6;
        boolean b2=true;

        for (d = 10; d < 317; ++d) {
            i += (int)d;
            vMeth(Test0712.lFld, iFld);
        }
        i20 = 1;
        while (++i20 < 171) {
            iFld += i;
            if (false) break;
            d1 = 1;
            while (++d1 < 147) {
                for (i21 = 1; i21 < 1; i21++) {
                    i22 -= (int)d;
                    Test0712.lFld <<= i22;
                    switch ((i21 % 2) + 119) {
                    case 119:
                    case 120:
                        switch (((i21 % 2) * 5) + 84) {
                        case 90:
                            switch (((i20 >>> 1) % 1) + 35) {
                            case 35:
                                i = (int) Test0712.instanceCount;
                                i <<= (int) Test0712.instanceCount;
                                i = i22;
                                if (b2) continue;
                                break;
                            }
                            if (b2) {
                                iFld >>>= i21;
                                i22 = i22;
                                iFld -= (int)-1.90358;
                                if (b2) {
                                    Test0712.lFld = 50;
                                    iFld += Test0712.byFld;
                                    fFld += fFld;
                                }
                            } else {
                                Test0712.lFld += (long) 1.117627;
                                i22 += (((i21 * Test0712.instanceCount) + Test0712.instanceCount) - Test0712.lFld);
                                Test0712.iArrFld = Test0712.iArrFld;
                            }
                            try {
                                iFld = (391718141 / i21);
                                i22 = (Test0712.iArrFld1[(int) (d1 - 1)] / -488247905);
                                i22 = (iFld % i);
                            } catch (ArithmeticException a_e) {}
                            i22 >>>= i22;
                            break;
                        case 85:
                            fFld = i20;
                            break;
                        }
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("d i i20 = " + Double.doubleToLongBits(d) + "," + i + "," + i20);
        FuzzerUtils.out.println("d1 i21 i22 = " + Double.doubleToLongBits(d1) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("b2 = " + (b2 ? 1 : 0));

        FuzzerUtils.out.println("Test0712.instanceCount fFld Test0712.byFld = " + Test0712.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Test0712.byFld);
        FuzzerUtils.out.println("iFld Test0712.lFld Test0712.iArrFld = " + iFld + "," + Test0712.lFld + "," +
                FuzzerUtils.checkSum(Test0712.iArrFld));
        FuzzerUtils.out.println("Test0712.iArrFld1 = " + FuzzerUtils.checkSum(Test0712.iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0712 _instance = new Test0712();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
