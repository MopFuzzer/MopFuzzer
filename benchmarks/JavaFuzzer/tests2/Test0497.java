// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:35 2023
public class Test0497 {

    public static final int N = 400;

    public static volatile long instanceCount=-195L;
    public static double dFld=114.79203;
    public static byte byFld=90;
    public int iFld=-27652;
    public static int[][] iArrFld =new int[N][N];
    public boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0497.iArrFld, -148);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l, int i2, short s) {

        int i3=0, i4=0, i5=-42274, i6=61676;
        float f2=99.264F;
        long l1=3691L;
        byte by=-82;
        boolean b=false;

        for (i3 = 4; i3 < 357; ++i3) {
            i4 += i3;
            if (b) {
                i2 += (((i3 * i2) + i3) - f2);
            } else if (b) {
                for (l1 = i3; l1 < 5; ++l1) {
                    f2 = by;
                    l *= i3;
                    i6 = i6;
                }
                if (b) break;
                i6 = -206;
                if (false) {
                    i2 = (int)1.40294;
                    if (b) {
                        i6 ^= i4;
                        i5 += (int)(-55443L + (i3 * i3));
                    } else if (b) {
                        i6 -= (int)-2410746057203438564L;
                    } else {
                        Test0497.instanceCount = 3;
                    }
                } else if (false) {
                    i5 += (int)l;
                }
            } else if (b) {
                Test0497.iArrFld[i3 + 1][i3] = i3;
            }
        }
        long meth_res = l + i2 + s + i3 + i4 + Float.floatToIntBits(f2) + l1 + i5 + by + i6 + (b ? 1 : 0);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f1, int i1) {

        short s1=12505;
        int i7=-7, i8=148, i9=0, i10=199, i11=14, i12=11, i13=95, i14=12;
        double d=85.29412;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -11L);

        i1 += (int) lMeth(Test0497.instanceCount, i1, s1);
        for (i7 = 369; i7 > 9; i7 -= 3) {
            i9 = 1;
            do {
                for (d = 1; d < 1; d += 3) {
                    lArr[(int)(d)] *= i1;
                    Test0497.instanceCount = (long) -34.933F;
                    i1 = i10;
                    i8 >>= i10;
                    Test0497.iArrFld[i7][i9 + 1] <<= -239;
                }
                for (i11 = 1; i11 < 1; i11++) {
                    Test0497.byFld = (byte) i1;
                }
                for (i13 = 1; i13 < 1; i13++) {
                    try {
                        i1 = (i8 / i8);
                        i8 = (i7 % Test0497.iArrFld[i9 + 1][i13]);
                        Test0497.iArrFld[i13][i9] = (i12 % i14);
                    } catch (ArithmeticException a_e) {}
                    i10 += i13;
                    i10 += i13;
                }
            } while (++i9 < 13);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + s1 + i7 + i8 + i9 + Double.doubleToLongBits(d) + i10 + i11 +
            i12 + i13 + i14 + FuzzerUtils.checkSum(lArr);
    }

    public static void vSmallMeth(int i) {

        float f3=0.877F;

        vMeth(f3, i);
        Test0497.iArrFld[(i >>> 1) % N][(i >>> 1) % N] = (int) f3;
        vSmallMeth_check_sum += i + Float.floatToIntBits(f3);
    }

    public void mainTest(String[] strArr1) {

        float f=0.924F;
        int i15=-4072, i16=12, i17=-25980, i18=-35;
        short s2=842;
        short[] sArr =new short[N];
        boolean b1=true;

        FuzzerUtils.init(sArr, (short)-3720);

        f -= (float) (-(Test0497.dFld--));
        for (int smallinvoc=0; smallinvoc<537; smallinvoc++) vSmallMeth(iFld);
        Test0497.iArrFld[(iFld >>> 1) % N][(56955 >>> 1) % N] ^= (int) Test0497.instanceCount;
        for (i15 = 9; i15 < 196; ++i15) {
            iFld += i16;
            i17 = 1;
            while (++i17 < 134) {
                i18 = 1;
                while (++i18 < 1) {
                    switch ((((i15 >>> 1) % 7) * 5) + 1) {
                    case 15:
                        iFld += i18;
                        break;
                    case 35:
                        sArr[i15 - 1] = (short)i15;
                        f += (((i18 * Test0497.instanceCount) + Test0497.instanceCount) - i17);
                        Test0497.dFld *= 2L;
                        f += s2;
                        break;
                    case 10:
                        Test0497.dFld -= 2;
                        f = s2;
                        try {
                            i16 = (i15 % i15);
                            i16 = (iFld / -158);
                            iFld = (-42 / i15);
                        } catch (ArithmeticException a_e) {}
                        s2 = (short)i15;
                        break;
                    case 21:
                        f += Test0497.instanceCount;
                        iFld -= (int)f;
                        Test0497.instanceCount *= i18;
                        break;
                    case 4:
                        Test0497.iArrFld[i17 - 1][i15] *= Test0497.byFld;
                        if (b1) continue;
                        break;
                    case 11:
                        if (b1) continue;
                        switch ((i17 % 7) + 81) {
                        case 81:
                        case 82:
                            iFld += (i18 - f);
                            Test0497.instanceCount *= Test0497.instanceCount;
                            i16 += (int)-113.91224;
                            iFld = iFld;
                            break;
                        case 83:
                            try {
                                i16 = (i15 % Test0497.iArrFld[i18][i18]);
                                i16 = (-762091874 / i18);
                                Test0497.iArrFld[i18 - 1][i17] = (i15 / i17);
                            } catch (ArithmeticException a_e) {}
                            iFld += (((i18 * Test0497.instanceCount) + i18) - iFld);
                            break;
                        case 84:
                            bArrFld[i18 + 1] = true;
                            break;
                        case 85:
                        case 86:
                            Test0497.instanceCount += i15;
                        case 87:
                            f += (i18 * i18);
                            break;
                        default:
                            i16 *= i18;
                        }
                        break;
                    case 7:
                        Test0497.iArrFld[i17 - 1][i15 - 1] &= 10;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i15 i16 = " + Float.floatToIntBits(f) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 s2 = " + i17 + "," + i18 + "," + s2);
        FuzzerUtils.out.println("b1 sArr = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0497.instanceCount Test0497.dFld Test0497.byFld = " + Test0497.instanceCount + "," +
                Double.doubleToLongBits(Test0497.dFld) + "," + Test0497.byFld);
        FuzzerUtils.out.println("iFld Test0497.iArrFld bArrFld = " + iFld + "," + FuzzerUtils.checkSum(Test0497.iArrFld) + ","
            + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0497 _instance = new Test0497();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
