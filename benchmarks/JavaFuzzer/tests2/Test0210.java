// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:22 2023
public class Test0210 {

    public static final int N = 400;

    public static long instanceCount=-30522L;
    public byte byFld=107;
    public static float fFld=2.901F;
    public static long[] lArrFld =new long[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0210.lArrFld, -41580L);
        FuzzerUtils.init(Test0210.fArrFld, 13.848F);
    }

    public static long sMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i14) {

        int i15=26;
        int i16=-18038;
        int i17=40;
        int i18=7;
        int i19=-50571;
        int[] iArr2 =new int[N];
        short s2=198;
        byte by1=42;
        float f2=0.476F;
        boolean b=false;
        double d=94.32036;

        FuzzerUtils.init(iArr2, -52);

        for (i15 = 5; i15 < 349; i15++) {
            s2 = (short)i15;
            by1 |= (byte)i16;
            if (b) {
                for (i17 = 5; i17 > 1; i17 -= 2) {
                    for (f2 = i17; f2 < 3; f2++) {
                        i14 >>= i15;
                        Test0210.instanceCount += (long) (f2 * i18);
                        switch (((i17 % 3) * 5) + 39) {
                        case 45:
                            if (b) {
                                b = true;
                                iArr2[i17 + 1] *= (int)237L;
                                Test0210.instanceCount *= i16;
                            }
                            i16 = (int)-105.485F;
                            i14 += i14;
                            break;
                        case 40:
                            b = true;
                            break;
                        case 48:
                            d = 10;
                            break;
                        default:
                            Test0210.lArrFld = Test0210.lArrFld;
                        }
                    }
                }
            }
        }
        vMeth_check_sum += i14 + i15 + i16 + s2 + by1 + i17 + i18 + Float.floatToIntBits(f2) + i19 + (b ? 1 : 0) +
            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2);
    }

    public static double dMeth(long l1, float f1) {

        int i11=10914;
        int i12=-7;
        int i13=47846;
        int i20=-32273;
        int i21=-41903;
        int[] iArr3 =new int[N];
        short s1=10231;
        byte by=-62;

        FuzzerUtils.init(iArr3, 4);

        i11 = (int)(i11 - ((l1 + s1) - (i11 - by)));
        i11 -= (int) (((i11--) * (Test0210.instanceCount + Test0210.instanceCount)) % (((i11 + i11) + Test0210.instanceCount) | 1));
        for (i12 = 18; 296 > i12; i12++) {
            Test0210.instanceCount += i12;
        }
        vMeth(i13);
        for (i20 = 348; i20 > 18; i20 -= 3) {
            Test0210.lArrFld = Test0210.lArrFld;
            iArr3 = iArr3;
        }
        long meth_res = l1 + Float.floatToIntBits(f1) + i11 + s1 + by + i12 + i13 + i20 + i21 +
            FuzzerUtils.checkSum(iArr3);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static short sMeth(int i4, int i5, int i6) {

        int i7=-167;
        int i8=37042;
        int i9=1;
        int i10=52038;
        int i22=-208;
        int[][] iArr1 =new int[N][N];
        byte by2=45;
        boolean b1=false;
        short s3=-27493;

        FuzzerUtils.init(iArr1, 12);

        for (i7 = 2; i7 < 251; i7++) {
            for (i9 = 1; i9 < 7; ++i9) {
                if (b1) {
                    i6 *= i7;
                } else if (false) {
                    iArr1[i7 - 1][i9 + 1] = (int) dMeth(Test0210.instanceCount, Test0210.fFld);
                    iArr1[i9][i7 - 1] = by2;
                }
                i22 = 1;
                do {
                    i5 = i6;
                    i5 *= 117;
                    i4 *= i5;
                    s3 += (short)(((i22 * s3) + i6) - i9);
                    Test0210.instanceCount = Test0210.instanceCount;
                    if (b1) {
                        i8 >>= i7;
                        i8 = i4;
                    } else if (b1) {
                        i5 ^= i7;
                    } else if (b1) {
                        iArr1[i7][i7 - 1] |= i10;
                    }
                } while (++i22 < 2);
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + by2 + (b1 ? 1 : 0) + i22 + s3 + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-7;
        int i1=-53;
        int i2=126;
        int i3=21;
        int i23=39710;
        int i24=-14;
        int i25=206;
        int i26=20118;
        int[] iArr =new int[N];
        short s=4609;
        short[] sArr =new short[N];
        float f=-75.185F;
        long l=539150378L;
        double d1=-79.45431;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr, -197);
        FuzzerUtils.init(dArr, 1.128583);
        FuzzerUtils.init(sArr, (short)-9972);

        i = 1;
        while ((i += 3) < 286) {
            i1 = 1;
            do {
                byFld += (byte)i1;
                i2 += (((i1 * i) + Test0210.instanceCount) - Test0210.instanceCount);
                s <<= (short)(i2--);
                iArr = iArr;
                f -= (i2++);
                iArr[i1 + 1] *= (int)1.325F;
                for (l = 1; 1 > l; l++) {
                    i2 = ((Math.abs(i2) - 117) + (--i3));
                    Test0210.instanceCount *= i2;
                    i3 = (sMeth(i1, i3, 57712) % (i | 1));
                    dArr[(int)(l)] += i;
                    sArr = sArr;
                    f -= i2;
                    Test0210.instanceCount += i2;
                }
                i3 -= byFld;
            } while (++i1 < 264);
            for (i23 = 2; i23 < 264; ++i23) {
                i24 -= i2;
                for (i25 = 1; 2 > i25; ++i25) {
                    i3 *= (int)d1;
                    i3 += (i25 | l);
                    iArr[i] = i2;
                    Test0210.fArrFld[i] -= (float) 74.63034;
                    Test0210.fFld += i25;
                    i2 -= (int)d1;
                    i3 *= i24;
                    iArr[i25 + 1] = (int)d1;
                    Test0210.instanceCount += (i25 * i25);
                    i24 += i25;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s f l = " + s + "," + Float.floatToIntBits(f) + "," + l);
        FuzzerUtils.out.println("i3 i23 i24 = " + i3 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 d1 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("iArr dArr sArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0210.instanceCount byFld Test0210.fFld = " + Test0210.instanceCount + "," + byFld + "," +
                Float.floatToIntBits(Test0210.fFld));
        FuzzerUtils.out.println("Test0210.lArrFld Test0210.fArrFld = " + FuzzerUtils.checkSum(Test0210.lArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0210.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0210 _instance = new Test0210();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  dMeth ->  dMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
