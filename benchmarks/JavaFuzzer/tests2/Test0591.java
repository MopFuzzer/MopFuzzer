// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:40 2023
public class Test0591 {

    public static final int N = 400;

    public static volatile long instanceCount=8661262732519019652L;
    public static volatile int iFld=-12;
    public static float fFld=37.396F;
    public static volatile short sFld=-356;
    public int[] iArrFld =new int[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(boolean b, long l) {

        float f=-52.654F;
        byte by=-30;

        f += by;
        Test0591.iFld += (int) Test0591.instanceCount;
        vMeth_check_sum += (b ? 1 : 0) + l + Float.floatToIntBits(f) + by;
    }

    public static int iMeth1() {

        boolean b1=false;
        int i2=-844;
        int i3=-97;
        int i4=2;
        int i5=4147;
        int i6=9;
        int i7=5;
        int[] iArr =new int[N];
        float f1=26.105F;
        float[] fArr =new float[N];
        double d1=1.73926;

        FuzzerUtils.init(fArr, 46.908F);
        FuzzerUtils.init(iArr, -44);

        vMeth(b1, Test0591.instanceCount);
        for (i2 = 15; i2 < 252; i2++) {
            i3 += (((i2 * Test0591.iFld) + f1) - i3);
            Test0591.instanceCount += i2;
            fArr[i2 + 1] *= f1;
            i3 += i2;
            Test0591.instanceCount += Test0591.iFld;
            for (i4 = 1; i4 < 7; ++i4) {
                for (i6 = 1; i6 < 2; i6++) {
                    d1 -= f1;
                    i3 = -231;
                    i5 -= (int)1.29776;
                    try {
                        iArr[(i4 >>> 1) % N] = (i2 / i2);
                        i7 = (i7 % i3);
                        iArr[i6 + 1] = (i5 % Test0591.iFld);
                    } catch (ArithmeticException a_e) {}
                }
                iArr = FuzzerUtils.int1array(N, (int)-24);
                f1 += i4;
            }
        }
        long meth_res = (b1 ? 1 : 0) + i2 + i3 + Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 +
            Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(double d, int i1) {

        int i8=7408;
        int i9=6;
        int i10=-237;
        int i11=10;
        int i12=9;
        int i13=29842;
        int i14=12;
        int i15=2630;
        int[] iArr1 =new int[N];
        boolean b2=false;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(iArr1, -139);
        FuzzerUtils.init(lArr, -8162L);

        iMeth1();
        for (i8 = 4; i8 < 174; ++i8) {
            i9 = Test0591.iFld;
        }
        for (i10 = 6; 129 > i10; ++i10) {
            for (i12 = i10; i12 < 13; ++i12) {
                i13 += i12;
                i13 += (((i12 * i8) + i1) - Test0591.instanceCount);
            }
            d -= Test0591.instanceCount;
            switch (((i10 % 9) * 5) + 37) {
            case 76:
                if (b2) break;
                break;
            case 60:
            case 63:
                for (i14 = 1; 13 > i14; ++i14) {
                    byte by1=115;
                    Test0591.fFld -= i15;
                    Test0591.sFld <<= (short) Test0591.iFld;
                    Test0591.iFld += i14;
                    i11 += by1;
                }
                break;
            case 65:
                iArr1 = iArr1;
                break;
            case 77:
                if (b2) break;
                break;
            case 57:
                Test0591.iFld += i12;
                break;
            case 61:
                Test0591.instanceCount &= Test0591.instanceCount;
            case 47:
                Test0591.iFld *= -11;
                break;
            case 38:
                lArr[i10 + 1][i10] = i1;
                break;
            default:
                iArr1[i10] = (int) Test0591.instanceCount;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i1 + i8 + i9 + i10 + i11 + i12 + i13 + (b2 ? 1 : 0) + i14 + i15 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-10, i16=34549, i17=5, i19=-173, i20=251, i21=210, i22=3, i23=11, i24=-6, i25=-24487, i26=-56773,
            i27=-30652;
        double d2=-122.115130;
        byte by2=119;
        boolean[] bArr =new boolean[N];
        float[] fArr1 =new float[N];

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr1, 0.213F);

        i = (int) Math.abs(Test0591.instanceCount * iMeth(d2, i));
        Test0591.iFld += (int) Test0591.fFld;
        for (i16 = 12; i16 < 223; ++i16) {
            i17 = i17;
            Test0591.fFld = 126.969F;
        }
        for (int i18 : iArrFld) {
            bArr = bArr;
            i19 = 1;
            do {
                Test0591.fFld += (i19 * i17);
                for (i20 = 1; i20 < 1; i20++) {
                    Test0591.fFld += -14L;
                    Test0591.instanceCount = Test0591.instanceCount;
                }
                Test0591.instanceCount >>>= i19;
            } while (++i19 < 63);
            for (i22 = 2; i22 < 63; ++i22) {
                Test0591.iFld &= -8;
                Test0591.instanceCount >>= i18;
            }
            i18 *= i17;
            for (i24 = 1; i24 < 63; ++i24) {
                for (i26 = 1; 2 > i26; i26++) {
                    fArr1[i26] = i17;
                    i21 = 37229;
                    i21 = by2;
                    switch (((i26 % 6) * 5) + 4) {
                    case 9:
                        Test0591.instanceCount += Test0591.iFld;
                        break;
                    case 19:
                        d2 = Test0591.iFld;
                        Test0591.iFld += (-97 + (i26 * i26));
                        break;
                    case 7:
                        by2 /= (byte) (Test0591.instanceCount | 1);
                        break;
                    case 25:
                        i <<= i;
                        Test0591.sFld += (short) i26;
                        Test0591.instanceCount -= Test0591.iFld;
                        break;
                    case 20:
                        i27 += (int)(-57333L + (i26 * i26));
                    case 23:
                        iArrFld[i26] *= (int)-104.2206;
                    default:
                        Test0591.instanceCount += Test0591.iFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i d2 i16 = " + i + "," + Double.doubleToLongBits(d2) + "," + i16);
        FuzzerUtils.out.println("i17 i19 i20 = " + i17 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 by2 bArr = " + i27 + "," + by2 + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0591.instanceCount Test0591.iFld Test0591.fFld = " + Test0591.instanceCount + "," + Test0591.iFld +
                "," + Float.floatToIntBits(Test0591.fFld));
        FuzzerUtils.out.println("Test0591.sFld iArrFld = " + Test0591.sFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0591 _instance = new Test0591();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
