// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0421 {

    public static final int N = 400;

    public static long instanceCount=16L;
    public static float fFld=-108.343F;
    public static volatile int iFld=15411;
    public static boolean bFld=false;
    public static short sFld=-26454;
    public volatile long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];
    public double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0421.iArrFld, 114);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, long l, int i4) {

        int i5=13690;
        int i6=44;
        int i7=-14127;
        int i8=-38522;
        int i9=-207;
        int[] iArr =new int[N];
        byte by=112;

        FuzzerUtils.init(iArr, 79);

        i3 = (int) Test0421.instanceCount;
        for (i5 = 333; i5 > 3; i5--) {
            for (i7 = 1; i7 < 5; i7++) {
                if (true) break;
                i9 = 1;
                do {
                    i4 += (i9 + Test0421.fFld);
                    Test0421.fFld /= (i9 | 1);
                    i3 -= i3;
                    iArr[i9] = i4;
                    by *= (byte)i4;
                    Test0421.fFld -= i8;
                    Test0421.instanceCount -= Test0421.instanceCount;
                    i6 <<= i5;
                    i6 += (-12 + (i9 * i9));
                } while ((i9 += 2) < 2);
                Test0421.instanceCount *= i9;
            }
        }
        vMeth2_check_sum += i3 + l + i4 + i5 + i6 + i7 + i8 + i9 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2) {

        short s=22146;
        byte by1=-29;
        long l1=-811264626L;
        int i10=-62121;
        int i11=-204;
        int i12=-168;
        int i13=124;
        int i14=25343;
        int[] iArr1 =new int[N];
        double d=88.74169;
        boolean b=false;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 2.490F);
        FuzzerUtils.init(iArr1, 35);

        s += (short)((--i2) - -157L);
        vMeth2(i2, -3156778269507949915L, i2);
        i2 |= by1;
        fArr = fArr;
        try {
            i2 *= i2;
            i2 *= (int) Test0421.fFld;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            iArr1 = iArr1;
        }
        for (l1 = 3; 299 > l1; l1++) {
            for (i11 = 1; i11 < 6; ++i11) {
                d = i11;
                if (true) {
                    for (i13 = 1; 2 > i13; ++i13) {
                        i12 += (((i13 * i2) + l1) - i10);
                        Test0421.instanceCount -= i14;
                    }
                } else if (b) {
                    Test0421.instanceCount += (i11 * i11);
                } else {
                    Test0421.instanceCount += 3;
                }
            }
        }
        vMeth1_check_sum += i2 + s + by1 + l1 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 + (b ? 1 : 0)
            + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i1=-14, i15=21300, i16=-50145, i17=-34594, i18=-72;
        double d1=-1.112185;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 87L);

        i1 = 1;
        while (++i1 < 243) {
            vMeth1(i1);
        }
        Test0421.iFld >>= (int) -19664L;
        Test0421.instanceCount = Test0421.iFld;
        lArr[(i1 >>> 1) % N] = (long) Test0421.fFld;
        if (Test0421.bFld) {
            Test0421.iFld += (int) Test0421.instanceCount;
            i15 = 1;
            do {
                i16 = 1;
                while (++i16 < 6) {
                    short s1=1174;
                    s1 -= (short)i1;
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d1) +
                            FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    for (i17 = 1; 1 < i17; --i17) {
                        i18 *= i15;
                        i18 = (int)d1;
                        i18 -= (int)d1;
                    }
                }
            } while (++i15 < 260);
        } else if (Test0421.bFld) {
            i18 = Test0421.iFld;
        } else {
            i18 >>>= (int) Test0421.instanceCount;
        }
        vMeth_check_sum += i1 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i=-62370, i19=160, i20=-5, i21=2, i22=150, i23=78, i24=-14, i25=30, i26=220, i27=-23891, i28=151, i29=-14,
            i30=10;
        byte by2=74;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 0.155F);

        i *= (int) Math.abs((-123 + (Test0421.instanceCount & i)) - (-(-Math.min(i, -882))));
        vMeth();
        lArrFld[(Test0421.iFld >>> 1) % N] *= i;
        Test0421.instanceCount = -208;
        for (i19 = 7; i19 < 388; ++i19) {
            try {
                Test0421.iFld = (Test0421.iFld / i20);
                i20 = (i21 % i);
                i21 = (-53401 % i);
            } catch (ArithmeticException a_e) {}
        }
        for (i22 = 9; 160 > i22; ++i22) {
            i20 -= i20;
            Test0421.fFld = i;
            if (Test0421.bFld) {
                i23 >>>= -2;
            }
        }
        Test0421.iArrFld[(i21 >>> 1) % N] -= Test0421.iFld;
        i24 = 306;
        do {
            i -= Test0421.iFld;
            i += (((i24 * Test0421.instanceCount) + Test0421.instanceCount) - Test0421.sFld);
            for (i25 = 82; i25 > 2; --i25) {
                Test0421.instanceCount *= i26;
            }
            for (i27 = 2; i27 < 82; i27 += 3) {
                i = 34943;
                i26 &= -13890;
                try {
                    i21 = (Test0421.iFld % Test0421.iFld);
                    i20 = (-1099989331 / i19);
                    i20 = (Test0421.iArrFld[i24] / i24);
                } catch (ArithmeticException a_e) {}
            }
            switch ((i24 % 9) + 20) {
            case 20:
                for (i29 = 4; i29 < 82; i29++) {
                    try {
                        Test0421.iFld = (-53431 / i28);
                        i28 = (Test0421.iArrFld[i24] / -1791625368);
                        i26 = (i20 % i24);
                    } catch (ArithmeticException a_e) {}
                    if (Test0421.bFld) {
                        dArrFld[i24 + 1] *= by2;
                        lArrFld[i29 - 1] = i30;
                        i30 = (int) Test0421.fFld;
                    } else {
                        lArrFld[i29] = i20;
                        Test0421.iArrFld[i24] = Test0421.sFld;
                    }
                }
            case 21:
                by2 *= by2;
            case 22:
                fArr1[i24 + 1] += i25;
                break;
            case 23:
                Test0421.sFld += (short) (i24 ^ i);
                break;
            case 24:
                i26 = Test0421.iFld;
                break;
            case 25:
                i21 += i24;
            case 26:
                Test0421.instanceCount *= i27;
            case 27:
                i23 -= i21;
                break;
            case 28:
                Test0421.instanceCount += i20;
                break;
            }
        } while (--i24 > 0);

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 by2 fArr1 = " + i30 + "," + by2 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0421.instanceCount Test0421.fFld Test0421.iFld = " + Test0421.instanceCount + "," +
                Float.floatToIntBits(Test0421.fFld) + "," + Test0421.iFld);
        FuzzerUtils.out.println("Test0421.bFld Test0421.sFld lArrFld = " + (Test0421.bFld ? 1 : 0) + "," + Test0421.sFld + "," +
            FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test0421.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test0421.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0421 _instance = new Test0421();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
