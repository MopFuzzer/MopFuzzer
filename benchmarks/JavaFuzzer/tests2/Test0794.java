// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0794 {

    public static final int N = 400;

    public static volatile long instanceCount=-14L;
    public static int iFld=3;
    public static double dFld=2.70219;
    public static volatile byte byFld=7;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0794.iArrFld, -173);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(short s, byte by1) {

        double d2=0.61005;
        int i9=2, i10=31540, i11=-1, i12=0;
        float f2=7.920F;
        boolean b=false;
        long[][] lArr1 =new long[N][N];

        FuzzerUtils.init(lArr1, 8361123668759912021L);

        for (d2 = 2; d2 < 137; d2++) {
            Test0794.instanceCount = i9;
            Test0794.instanceCount -= Test0794.iFld;
            f2 += f2;
            Test0794.iFld |= (int) -3060398055L;
            i9 += (int) (((d2 * Test0794.iFld) + Test0794.iFld) - i9);
            b = b;
            i10 = 1;
            do {
                Test0794.iFld -= (int) 6359028247643000938L;
                for (i11 = i10; i11 < 1; ++i11) {
                    switch (((-13 >>> 1) % 9) + 39) {
                    case 39:
                        if (b) break;
                        Test0794.iFld -= (int) -3665809093L;
                    case 40:
                        i12 = 204;
                        break;
                    case 41:
                        Test0794.iArrFld[(int) (d2)] = i10;
                    case 42:
                        Test0794.instanceCount += i10;
                        break;
                    case 43:
                        i9 >>>= (int) Test0794.instanceCount;
                        break;
                    case 44:
                        Test0794.instanceCount = i9;
                    case 45:
                        Test0794.iArrFld[i10 - 1] -= (int) Test0794.instanceCount;
                    case 46:
                        Test0794.iFld -= (int) f2;
                        break;
                    case 47:
                        Test0794.iFld += (i11 | i9);
                        break;
                    default:
                        lArr1[i11 - 1][(int)(d2)] = i12;
                    }
                }
            } while (++i10 < 12);
        }
        long meth_res = s + by1 + Double.doubleToLongBits(d2) + i9 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i10 + i11
            + i12 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth1(long l3, double d1, int i7) {

        int i8=-44454, i13=-53, i14=5512;
        short s1=4902;
        float f3=-1.745F, f4=0.766F;
        boolean b1=false;
        boolean[] bArr =new boolean[N];
        long l4=55L;

        FuzzerUtils.init(bArr, false);

        try {
            i8 = 1;
            do {
                byte by=46;
                by |= (byte)lMeth(s1, by);
                Test0794.instanceCount += (long) f3;
            } while (++i8 < 241);
            bArr[(Test0794.iFld >>> 1) % N] = b1;
            Test0794.iArrFld[(i8 >>> 1) % N] -= Test0794.iFld;
            for (f4 = 3 - 400; f4 < 211; ++f4) {
                Test0794.iFld = 168;
                f3 += i13;
                Test0794.iFld >>= 10;
                f3 = i13;
            }
            d1 *= -19673L;
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            for (l4 = 3; l4 < 303; l4++) {
                i7 -= i13;
                i14 += (int)f4;
            }
        }
        long meth_res = l3 + Double.doubleToLongBits(d1) + i7 + i8 + s1 + Float.floatToIntBits(f3) + (b1 ? 1 : 0) +
            Float.floatToIntBits(f4) + i13 + l4 + i14 + FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(long l, long l1, int i1) {

        float f1=-1.783F;
        int i3=171;
        int i4=-215;
        int i5=-41;
        int i6=-39;
        int[] iArr1 =new int[N];
        long l2=146071517170983957L;
        long[] lArr =new long[N];
        short s2=4686;
        byte by2=84;

        FuzzerUtils.init(iArr1, 238);
        FuzzerUtils.init(lArr, -1555665619L);

        for (int i2 : iArr1) {
            for (f1 = 1; f1 < 4; f1++) {
                l1 += (long)f1;
                i1 <<= (((Test0794.iFld - i2) - (i1 - Test0794.iFld)) * (--i1));
                iArr1[(int)(f1)] >>= (int)l1;
                for (i4 = 1; i4 < 2; ++i4) {
                    i1 -= 2292;
                    Test0794.instanceCount = i4;
                    lArr = (lArr = (lArr = (lArr = lArr)));
                }
                for (l2 = 1; l2 < 2; ++l2) {
                    switch ((int)(((f1 % 1) * 5) + 33)) {
                    case 35:
                        Test0794.instanceCount -= (long) ((i5 - iMeth1(l, Test0794.dFld, i3)) + f1);
                        break;
                    }
                    i5 = (int)l2;
                    i5 += (int)(((l2 * i1) + s2) - by2);
                    Test0794.dFld = Test0794.dFld;
                }
            }
        }
        long meth_res = l + l1 + i1 + Float.floatToIntBits(f1) + i3 + i4 + i5 + l2 + i6 + s2 + by2 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-78.816F, f5=-1.887F;
        double d=16.91257;
        int i=-11184;
        int i16=160;
        int i17=-1;
        int[][] iArr =new int[N][N];
        boolean b2=true;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(iArr, -10);
        FuzzerUtils.init(lArr2, 5169468689734353539L);

        iArr[(Test0794.iFld >>> 1) % N][(-35763 >>> 1) % N] *= (int) (-11 + (++f));
        d = 257;
        while (--d > 0) {
            Test0794.iFld = (int) (((Test0794.iFld * Test0794.instanceCount) - Test0794.iFld) + iArr[(int) (d - 1)][(int) (d + 1)]);
            i = 1;
            do {
                Test0794.iFld = (int) (((Test0794.iFld - f) % (Test0794.instanceCount | 1)) - i);
                Test0794.iFld += i;
                try {
                    Test0794.iFld = (51288 % i);
                    Test0794.iFld = (iArr[i - 1][(int) (d + 1)] / -24536);
                    Test0794.iFld = (147 % i);
                } catch (ArithmeticException a_e) {}
                Test0794.instanceCount += i;
                iMeth(Test0794.instanceCount, Test0794.instanceCount, i);
                Test0794.instanceCount += (((i * Test0794.instanceCount) + Test0794.iFld) - Test0794.instanceCount);
            } while (++i < 98);
            if (b2) {
                f *= i;
            } else {
                Test0794.dFld -= Test0794.iFld;
                for (i16 = 2; i16 < 98; i16++) {
                    f5 = 1;
                    while (++f5 < 2) {
                        i17 += (int) Test0794.instanceCount;
                        Test0794.iArrFld[(int) (f5 - 1)] |= i16;
                        b2 = false;
                        Test0794.iArrFld[i16 + 1] = i17;
                        i17 += (int)f;
                        switch ((((Test0794.iFld >>> 1) % 8) * 5) + 76) {
                        case 115:
                            Test0794.byFld = Test0794.byFld;
                            switch ((int)((f5 % 4) + 50)) {
                            case 50:
                                Test0794.iFld -= (int) 95.21588;
                                Test0794.iFld += (int) Test0794.instanceCount;
                                Test0794.iArrFld = Test0794.iArrFld;
                                break;
                            case 51:
                                i17 += (int) Test0794.instanceCount;
                                break;
                            case 52:
                                lArr2[i16 - 1] = (long)1.25987;
                                break;
                            case 53:
                                b2 = b2;
                                Test0794.iFld >>= i16;
                                break;
                            }
                            break;
                        case 94:
                            iArr[i16 - 1] = Test0794.iArrFld;
                        case 88:
                            Test0794.iFld -= (int) Test0794.instanceCount;
                            break;
                        case 93:
                            i17 += i16;
                        case 108:
                            i17 = -5994;
                            break;
                        case 96:
                            i17 += (int)f;
                            break;
                        case 101:
                            lArr2[i16 - 1] *= (long)d;
                            break;
                        case 79:
                            f = Test0794.instanceCount;
                            break;
                        default:
                            iArr[(int)(d + 1)][i16 - 1] &= i16;
                        }
                    }
                }
            }
        }

        FuzzerUtils.out.println("f d i = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d) + "," + i);
        FuzzerUtils.out.println("b2 i16 i17 = " + (b2 ? 1 : 0) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("f5 iArr lArr2 = " + Float.floatToIntBits(f5) + "," + FuzzerUtils.checkSum(iArr) + ","
            + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0794.instanceCount Test0794.iFld Test0794.dFld = " + Test0794.instanceCount + "," + Test0794.iFld +
                "," + Double.doubleToLongBits(Test0794.dFld));
        FuzzerUtils.out.println("Test0794.byFld Test0794.iArrFld = " + Test0794.byFld + "," + FuzzerUtils.checkSum(Test0794.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0794 _instance = new Test0794();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
