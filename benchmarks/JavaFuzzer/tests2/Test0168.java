// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0168 {

    public static final int N = 400;

    public static volatile long instanceCount=-413953587L;
    public double dFld=-71.17124;
    public short sFld=-31454;
    public static byte byFld=79;
    public static volatile boolean bFld=true;
    public static long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0168.lArrFld, 72L);
        FuzzerUtils.init(Test0168.iArrFld, 50344);
    }

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l1) {

        int i9=-52, i10=60267, i11=-185, i12=-6747;

        for (i9 = 6; i9 < 310; ++i9) {
            l1 += (9 + (i9 * i9));
            i11 = 1;
            while (++i11 < 5) {
                short s=-24886;
                if (true) {
                    s = (short)-2.89530;
                    Test0168.lArrFld[i11 - 1] = (long) 1.655F;
                    if (i11 != 0) {
                        vMeth_check_sum += l1 + i9 + i10 + i11 + i12;
                        return;
                    }
                } else {
                    i10 -= -64;
                }
                i10 += i11;
                i10 -= i12;
                Test0168.iArrFld[i11] = i10;
                i10 += i11;
            }
            Test0168.instanceCount &= -5909467834163249769L;
        }
        Test0168.instanceCount += i11;
        i12 ^= i10;
        vMeth_check_sum += l1 + i9 + i10 + i11 + i12;
    }

    public static int iMeth(int i8) {

        int i13=-234, i14=-125;
        float f1=-2.557F, f2=1.774F;

        vMeth(Test0168.instanceCount);
        for (i13 = 3; i13 < 348; ++i13) {
            switch (((i14 >>> 1) % 5) + 65) {
            case 65:
                i8 <<= i13;
                break;
            case 66:
                Test0168.lArrFld[i13 + 1] ^= i13;
                i8 %= (int)(i13 | 1);
                i8 >>= Test0168.byFld;
                f1 = 1;
                while (++f1 < 5) {
                    Test0168.instanceCount >>= i14;
                    Test0168.iArrFld[i13 - 1] <<= i13;
                    i14 += (int)f1;
                    i14 = i14;
                    f2 -= 8129;
                    Test0168.instanceCount += Test0168.instanceCount;
                    i14 += (int)(f1 - i13);
                }
                break;
            case 67:
                i8 += i13;
                break;
            case 68:
                Test0168.bFld = Test0168.bFld;
            case 69:
                f2 += i8;
                break;
            default:
                f2 %= (i8 | 1);
            }
        }
        long meth_res = i8 + i13 + i14 + Float.floatToIntBits(f1) + Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(long l, int i7) {

        boolean b=true;
        int i15=30, i16=-38064, i17=-32372;
        double d1=1.83728, d2=-2.1783;

        b = (i7 != i7);
        i7 -= (i7 = iMeth(i7));
        switch (((i7 >>> 1) % 1) + 113) {
        case 113:
            Test0168.lArrFld[(11 >>> 1) % N] = i7;
            i15 = 1;
            do {
                if (true) {
                    Test0168.instanceCount = i7;
                    Test0168.iArrFld[i15 - 1] = i15;
                    i7 *= (int)d1;
                    i7 += (int)d1;
                } else {
                    i16 = 5;
                    do {
                        i7 += (i16 * i16);
                        for (d2 = 1; d2 > 1; d2 -= 3) {
                            i7 += (int)d2;
                            i17 = (int) Test0168.instanceCount;
                        }
                    } while (--i16 > 0);
                }
            } while (++i15 < 301);
        default:
            l += i7;
        }
        long meth_res = l + i7 + (b ? 1 : 0) + i15 + Double.doubleToLongBits(d1) + i16 + Double.doubleToLongBits(d2) +
            i17;
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=18755;
        int i1=-41983;
        int i2=1;
        int i3=199;
        int i4=62878;
        int i5=-2;
        int i6=-14;
        int i18=0;
        int[] iArr =new int[N];
        double d=-52.98497;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr, 25884);
        FuzzerUtils.init(fArr, -127.133F);

        for (i = 3; i < 125; i++) {
            for (i2 = 6; i2 < 205; ++i2) {
                i4 = 1;
                while (++i4 < 2) {
                    dFld *= Double.longBitsToDouble(Test0168.instanceCount);
                }
                iArr[i] *= (int) Test0168.instanceCount;
                fArr[i] = (((++Test0168.instanceCount) * (-Math.max(-1, i1))) + i4);
            }
            i1 -= (sFld++);
            for (d = 10; d < 205; d++) {
                i3 *= (i1--);
                i6 = 1;
                while (++i6 < 2) {
                    float f=2.602F;
                    f %= (Test0168.lArrFld[(int) (d + 1)] | 1);
                    Test0168.instanceCount *= (--i3);
                    Test0168.instanceCount <<= Test0168.instanceCount;
                    i5 = Math.abs((int) (Test0168.instanceCount - (i - i3)));
                    sFld = (short)(-(--i3));
                    i3 += i6;
                    iArr[(int) (d)] = (int) (i5 += (int) ((++i1) - Test0168.instanceCount));
                    iArr[(int) (d)] = ((i1--) + sMeth(Test0168.instanceCount, -209));
                    iArr[(int)(d - 1)] = (int)-2.519F;
                    Test0168.bFld = false;
                }
                i18 = 1;
                do {
                    dFld -= Test0168.instanceCount;
                    Test0168.iArrFld = Test0168.iArrFld;
                    Test0168.iArrFld[(int) (d + 1)] = i1;
                    i1 |= i1;
                    i3 <<= i;
                    i3 += i6;
                    i1 >>= i6;
                    i3 += (i18 ^ Test0168.byFld);
                    i1 += i;
                } while (++i18 < 2);
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 d = " + i3 + "," + i4 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i5 i6 i18 = " + i5 + "," + i6 + "," + i18);
        FuzzerUtils.out.println("iArr fArr = " + FuzzerUtils.checkSum(iArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0168.instanceCount dFld sFld = " + Test0168.instanceCount + "," +
            Double.doubleToLongBits(dFld) + "," + sFld);
        FuzzerUtils.out.println("Test0168.byFld Test0168.bFld Test0168.lArrFld = " + Test0168.byFld + "," + (Test0168.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0168.lArrFld));
        FuzzerUtils.out.println("Test0168.iArrFld = " + FuzzerUtils.checkSum(Test0168.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0168 _instance = new Test0168();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
