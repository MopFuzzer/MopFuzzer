// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0417 {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public int iFld=8197;
    public int iFld1=-225;
    public static volatile int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0417.iArrFld, -146);
        FuzzerUtils.init(Test0417.lArrFld, -108L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i1=4;
        int i2=-8;
        int[][] iArr =new int[N][N];
        double d=113.1906;
        float f1=-2.960F;
        long l=6778822577854496916L;
        boolean b=false;

        FuzzerUtils.init(iArr, 6200);

        for (i1 = 6; i1 < 143; i1++) {
            if (true) {
                i2 >>= 169;
                Test0417.instanceCount <<= i1;
                d += 110;
            } else {
                if (b) {
                    i2 ^= i2;
                    i2 %= (int)((long)(f1) | 1);
                } else if (b) {
                    if (b) {
                        Test0417.instanceCount &= i1;
                        i2 -= i2;
                        l = 1;
                        do {
                            Test0417.instanceCount -= i2;
                            iArr[i1][(int)(l)] <<= i1;
                            iArr[i1 - 1][(int)(l + 1)] *= i2;
                        } while (++l < 11);
                    } else {
                        i2 += i1;
                        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + l + (b ? 1
                            : 0) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                } else {
                    i2 <<= (int)l;
                }
            }
        }
        vMeth_check_sum += i1 + i2 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + l + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i) {

        byte by=49;
        int i3=50, i4=43292, i5=-247, i6=-35790, i7=-158, i8=0, i9=-206, i10=-223;
        short s=-17128;

        i += (int)-8176L;
        vMeth();
        by = (byte)i;
        i ^= i;
        Test0417.instanceCount <<= i;
        Test0417.iArrFld = Test0417.iArrFld;
        for (i3 = 8; i3 < 150; ++i3) {
            for (i5 = 1; i5 < 11; i5++) {
                i4 = i6;
                by *= (byte)i;
            }
            for (i7 = 1; i7 < 11; ++i7) {
                Test0417.lArrFld[i7 + 1] >>= Test0417.instanceCount;
                for (i9 = 1; i9 < 2; ++i9) {
                    Test0417.instanceCount += (((i9 * i3) + i3) - Test0417.instanceCount);
                    s *= (short)i7;
                }
            }
        }
        long meth_res = i + by + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + s;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(float f) {

        int i11=5;

        Test0417.instanceCount += iMeth(i11);
        i11 >>= i11;
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i11;
    }

    public void mainTest(String[] strArr1) {

        float f2=2.383F;
        int i12=-11, i13=8, i14=13, i15=-42517, i16=53941, i17=7747;
        double d1=0.21298, d2=-46.19435;

        for (int smallinvoc=0; smallinvoc<461; smallinvoc++) vSmallMeth(46.495F);
        iFld += (int)f2;
        fArrFld[(-101 >>> 1) % N] *= Test0417.instanceCount;
        i12 = 1;
        do {
            for (i13 = i12; i13 < 141; i13++) {
                iFld *= (int) Test0417.instanceCount;
                try {
                    i14 = (Test0417.iArrFld[i12] % 1541936739);
                    iFld = (-1052379812 / i15);
                    iFld = (i12 % -248);
                } catch (ArithmeticException a_e) {}
                d1 = 1;
                while (++d1 < 1) {
                    Test0417.instanceCount += (long) (7.650F + (d1 * d1));
                    f2 += (float)(d1 - i12);
                    Test0417.iArrFld[(int) (d1)] += i12;
                    i15 += (int) Test0417.instanceCount;
                }
                switch ((i13 % 1) + 115) {
                case 115:
                    i15 <<= i12;
                    i14 += i14;
                    for (i16 = 1; i16 < 1; i16++) {
                        switch (((i12 % 4) * 5) + 54) {
                        case 59:
                            iFld = (int) Test0417.instanceCount;
                            if (true) continue;
                            try {
                                iFld1 = (-16575 % i16);
                                i17 = (i14 / -27);
                                iFld = (-124 % i15);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 69:
                            i15 += (i16 ^ i17);
                            Test0417.iArrFld = Test0417.iArrFld;
                            iFld1 += i16;
                            Test0417.instanceCount += -15688;
                            break;
                        case 65:
                            Test0417.instanceCount -= Test0417.instanceCount;
                            switch (((i12 % 5) * 5) + 39) {
                            case 63:
                                Test0417.instanceCount = i16;
                                d2 = f2;
                                break;
                            case 51:
                                i15 >>= i14;
                                Test0417.iArrFld[i13] = i13;
                                break;
                            case 56:
                            case 57:
                                iFld += (int) Test0417.instanceCount;
                                break;
                            case 60:
                                f2 += iFld;
                                break;
                            default:
                                i15 = i17;
                            }
                            break;
                        case 58:
                            Test0417.iArrFld[i12 + 1] = (int) d1;
                            break;
                        }
                    }
                    break;
                default:
                    iFld *= (int)f2;
                }
            }
        } while (++i12 < 178);

        FuzzerUtils.out.println("f2 i12 i13 = " + Float.floatToIntBits(f2) + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 d1 = " + i14 + "," + i15 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i16 i17 d2 = " + i16 + "," + i17 + "," + Double.doubleToLongBits(d2));

        FuzzerUtils.out.println("Test0417.instanceCount iFld iFld1 = " + Test0417.instanceCount + "," + iFld + "," + iFld1);
        FuzzerUtils.out.println("Test0417.iArrFld Test0417.lArrFld fArrFld = " + FuzzerUtils.checkSum(Test0417.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0417.lArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0417 _instance = new Test0417();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
