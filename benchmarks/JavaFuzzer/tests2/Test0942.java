// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:56 2023
public class Test0942 {

    public static final int N = 400;

    public static long instanceCount=5116777214968821878L;
    public static long lFld=-3L;
    public static byte byFld=77;
    public static int iFld=129;
    public float fFld=49.564F;
    public boolean bFld=true;
    public static short sFld=6553;
    public static int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0942.iArrFld, -6);
        FuzzerUtils.init(Test0942.byArrFld, (byte) 70);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i8, int i9) {

        int i10=11;
        int i11=6;
        int i12=3;
        int[] iArr1 =new int[N];
        double d=109.126382;

        FuzzerUtils.init(iArr1, 11);

        for (i10 = 8; i10 < 207; i10++) {
            Test0942.instanceCount += (i10 - Test0942.lFld);
            i9 += (int)d;
            iArr1[i10] = i11;
        }
        Test0942.instanceCount >>= i8;
        Test0942.instanceCount >>= Test0942.lFld;
        i8 *= i12;
        long meth_res = i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + i12 + FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth(int i5, int i6) {

        short s=4507;
        int i13=24638;
        int i14=-138;
        int i15=7;
        int i16=-12;
        int[] iArr =new int[N];
        double d1=0.42853;

        FuzzerUtils.init(iArr, 210);

        for (int i7 : iArr) {
            Test0942.instanceCount |= iArr[(i7 >>> 1) % N];
        }
        i6 <<= sMeth(-1233, i6);
        s <<= (short)-7292;
        i5 = -76;
        Test0942.byFld = (byte) i6;
        Test0942.iFld = (int) Test0942.instanceCount;
        for (i13 = 332; i13 > 2; i13--) {
            for (i15 = 5; i15 > 1; i15--) {
                d1 = i15;
                if (i5 != 0) {
                    vMeth_check_sum += i5 + i6 + s + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) +
                        FuzzerUtils.checkSum(iArr);
                    return;
                }
            }
            i6 = (int) Test0942.lFld;
            Test0942.instanceCount = -64540L;
        }
        i14 += (int) Test0942.lFld;
        i6 -= (int) Test0942.lFld;
        vMeth_check_sum += i5 + i6 + s + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(float f) {

        int i4=-12501;

        Test0942.instanceCount = Math.abs((i4 / (Test0942.instanceCount | 1)) - (i4 - -232));
        vMeth(-247, i4);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i4;
    }

    public void mainTest(String[] strArr1) {

        int i=120, i1=-17283, i2=-11, i3=4;
        float f1=2.988F;
        float[][] fArr =new float[N][N];
        long[] lArr =new long[N];

        FuzzerUtils.init(fArr, -2.948F);
        FuzzerUtils.init(lArr, 14L);

        for (i = 11; 210 > i; ++i) {
            for (i2 = 126; 3 < i2; i2--) {
                i1 <<= i1;
                switch (((i2 % 6) * 5) + 94) {
                case 107:
                    Test0942.instanceCount = (((i3++) - -246L) * -20085);
                    break;
                case 106:
                    for (int smallinvoc=0; smallinvoc<1; smallinvoc++) vSmallMeth(fFld);
                    break;
                case 102:
                    Test0942.iArrFld = FuzzerUtils.int1array(N, (int) 14);
                    if (bFld) {
                        fArr[i][i2 - 1] += Test0942.iFld;
                        Test0942.iArrFld = Test0942.iArrFld;
                        Test0942.byArrFld[i] += (byte) i3;
                    }
                    if (bFld) continue;
                    Test0942.sFld >>>= (short) i;
                    break;
                case 104:
                case 108:
                    i3 = (int)3051606152L;
                    i1 += (i2 * i2);
                    i1 *= (int)f1;
                    Test0942.instanceCount += i;
                    break;
                case 116:
                    Test0942.iArrFld[i - 1] += Test0942.byFld;
                }
                lArr[(i >>> 1) % N] -= i3;
                i3 += -31158;
                i3 *= i;
                bFld = false;
                Test0942.sFld <<= (short) i3;
                Test0942.byFld = (byte) i1;
                Test0942.byFld += (byte) Test0942.sFld;
            }
        }
        i1 += i;
        for (int i17 : Test0942.iArrFld) {
            i1 *= (int) Test0942.instanceCount;
        }
        i1 -= -3;
        i1 |= (int)37675L;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f1 fArr = " + i3 + "," + Float.floatToIntBits(f1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0942.instanceCount Test0942.lFld Test0942.byFld = " + Test0942.instanceCount + "," + Test0942.lFld +
                "," + Test0942.byFld);
        FuzzerUtils.out.println("Test0942.iFld fFld bFld = " + Test0942.iFld + "," + Float.floatToIntBits(fFld) + "," + (bFld ?
            1 : 0));
        FuzzerUtils.out.println("Test0942.sFld Test0942.iArrFld Test0942.byArrFld = " + Test0942.sFld + "," +
                FuzzerUtils.checkSum(Test0942.iArrFld) + "," + FuzzerUtils.checkSum(Test0942.byArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0942 _instance = new Test0942();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  sMeth ->  sMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
