// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:38 2023
public class Test0555 {

    public static final int N = 400;

    public static long instanceCount=175L;
    public int iFld=5;
    public static volatile boolean bFld=true;
    public static int iFld1=-222;
    public volatile double dFld=1.40857;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0555.iArrFld, -19245);
    }

    public static long byMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i13, boolean b1) {

        int i14=2, i15=3, i16=-12, i17=-29171, i18=-4795, i19=20, i20=-137;
        float f1=-20.56F;
        byte by1=-59;
        short[] sArr =new short[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(sArr, (short)17984);
        FuzzerUtils.init(lArr, -144L);

        for (i14 = 8; i14 < 171; ++i14) {
            sArr[i14] = (short)251;
            sArr[i14 - 1] = (short)i15;
        }
        for (i16 = 263; 4 < i16; i16 -= 3) {
            i18 = 1;
            do {
                try {
                    Test0555.iArrFld[(i14 >>> 1) % N] = (i14 % 1515468500);
                    Test0555.iFld1 = (-5646 % i13);
                    Test0555.iFld1 = (-52 / Test0555.iArrFld[i18 + 1]);
                } catch (ArithmeticException a_e) {}
                f1 += i18;
                Test0555.iArrFld[i18] = (int) Test0555.instanceCount;
                Test0555.iArrFld[i18 + 1] *= (int) Test0555.instanceCount;
                Test0555.iFld1 = (int) Test0555.instanceCount;
                for (i19 = 1; 1 > i19; i19++) {
                    switch (((i16 % 5) * 5) + 54) {
                    case 69:
                        lArr[i19 - 1] = Test0555.instanceCount;
                        i13 = (int) Test0555.instanceCount;
                        i13 = (int) Test0555.instanceCount;
                        break;
                    case 66:
                        by1 = by1;
                        break;
                    case 60:
                        Test0555.iArrFld[i16 - 1] -= i15;
                        break;
                    case 57:
                        Test0555.instanceCount = i17;
                    case 77:
                        i13 ^= (int) Test0555.instanceCount;
                    }
                }
            } while (++i18 < 18);
        }
        vMeth1_check_sum += i13 + (b1 ? 1 : 0) + i14 + i15 + i16 + i17 + i18 + Float.floatToIntBits(f1) + i19 + i20 +
            by1 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(int i11, int i12) {

        int i21=79, i22=6, i23=0, i24=11, i25=11, i26=58;
        short s=28011;
        float f2=-12.1011F;

        vMeth1(iFld, Test0555.bFld);
        for (i21 = 3; 342 > i21; ++i21) {
            Test0555.iArrFld[i21 - 1] += (int) Test0555.instanceCount;
            Test0555.iFld1 <<= iFld;
            dFld = i21;
            iFld = i21;
            Test0555.iFld1 -= s;
            Test0555.instanceCount <<= -142;
            Test0555.instanceCount >>= i23;
            Test0555.iArrFld[i21] -= (int) Test0555.instanceCount;
            i24 = 1;
            while (++i24 < 5) {
                for (i25 = 1; i25 < 1; ++i25) {
                    dFld += f2;
                    try {
                        i26 = (i25 / i26);
                        i26 = (Test0555.iArrFld[i25 + 1] / Test0555.iArrFld[i25 + 1]);
                        i22 = (Test0555.iArrFld[i25 + 1] / -208);
                    } catch (ArithmeticException a_e) {}
                    Test0555.iArrFld[i21 - 1] %= (int) (Test0555.iFld1 | 1);
                }
            }
        }
        vMeth_check_sum += i11 + i12 + i21 + i22 + s + i23 + i24 + i25 + i26 + Float.floatToIntBits(f2);
    }

    public byte byMeth(int i4, int i5, int i6) {

        int i7=18, i8=-172, i9=47, i10=-14, i27=74, i28=-3373;
        byte by2=49;
        float f3=86.332F;

        for (i7 = 5; i7 < 133; i7++) {
            Test0555.bFld = (Test0555.bFld = (Test0555.bFld = false));
            i5 = (int) ((++i5) - (Math.max(-12, i6) - (Test0555.instanceCount = i7)));
            for (i9 = 1; i9 < 12; i9++) {
                vMeth(-11, i7);
                by2 >>= (byte)-7855518105384694011L;
                for (i27 = i9; i27 < 2; ++i27) {
                    f3 += Test0555.instanceCount;
                    f3 = Test0555.instanceCount;
                    Test0555.instanceCount = 46375;
                    iFld = by2;
                    i28 = i7;
                }
                iFld = i4;
            }
            Test0555.iArrFld[i7] -= 2;
            f3 *= Test0555.instanceCount;
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + by2 + i27 + i28 + Float.floatToIntBits(f3);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=43649, i2=6, i3=1, i29=-5, i30=-13, i31=-35758, i32=-173, i33=56468, i34=-3, i35=6;
        byte by=17;
        float f=37.161F;
        long l=405234688L;
        long l1=31469L;
        long[][] lArr1 =new long[N][N];
        boolean b=true;

        FuzzerUtils.init(lArr1, 3L);

        for (int i : Test0555.iArrFld) {
            i = ((++Test0555.iArrFld[(iFld >>> 1) % N]) * (iFld--));
            for (i1 = 63; i1 > 1; --i1) {
                i2 = Integer.reverseBytes((int)(by + (f + iFld)));
                i2 = i;
                for (l = i1; l < 2; l++) {
                    i >>= (int)(l * ((--f) * -56.398F));
                    i3 -= (int) (-(Float.intBitsToFloat(i3) + (Test0555.instanceCount++)));
                }
                b = ((byMeth(i, 14517, i) <= f) && true);
                i2 >>>= Test0555.iFld1;
            }
            Test0555.iArrFld[(i2 >>> 1) % N] = i;
            i29 = 1;
            while (++i29 < 63) {
                Test0555.iArrFld[i29 + 1] += i1;
            }
            for (i30 = 2; i30 < 63; ++i30) {
                i32 += (int)l;
                Test0555.iFld1 = i3;
            }
        }
        Test0555.iFld1 -= i3;
        i3 += (int)dFld;
        dFld -= Test0555.instanceCount;
        for (l1 = 161; l1 > 7; --l1) {
            Test0555.instanceCount += i29;
            i32 = (int) Test0555.instanceCount;
        }
        switch (((i29 >>> 1) % 5) + 91) {
        case 91:
            for (i34 = 4; i34 < 236; ++i34) {
                lArr1[i34 - 1] = lArr1[i34 + 1];
                Test0555.iFld1 += i34;
                i35 *= -9;
                lArr1[i34 + 1][i34 - 1] *= 9914;
                try {
                    i33 = (Test0555.iArrFld[i34 - 1] / iFld);
                    i3 = (i29 / Test0555.iArrFld[i34]);
                    i33 = (i30 / i31);
                } catch (ArithmeticException a_e) {}
                Test0555.iFld1 += (i34 * i34);
            }
            break;
        case 92:
            iFld = -13473;
        case 93:
            Test0555.iArrFld[(i1 >>> 1) % N] += (int) f;
            break;
        case 94:
            Test0555.instanceCount += Test0555.instanceCount;
            break;
        case 95:
            Test0555.instanceCount = 12;
            break;
        }

        FuzzerUtils.out.println("i1 i2 by = " + i1 + "," + i2 + "," + by);
        FuzzerUtils.out.println("f l i3 = " + Float.floatToIntBits(f) + "," + l + "," + i3);
        FuzzerUtils.out.println("b i29 i30 = " + (b ? 1 : 0) + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 l1 = " + i31 + "," + i32 + "," + l1);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0555.instanceCount iFld Test0555.bFld = " + Test0555.instanceCount + "," + iFld + "," +
                (Test0555.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0555.iFld1 dFld Test0555.iArrFld = " + Test0555.iFld1 + "," + Double.doubleToLongBits(dFld) +
                "," + FuzzerUtils.checkSum(Test0555.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0555 _instance = new Test0555();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  vMeth ->  vMeth byMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
