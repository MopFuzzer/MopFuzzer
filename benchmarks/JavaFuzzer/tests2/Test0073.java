// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:15 2023
public class Test0073 {

    public static final int N = 400;

    public static long instanceCount=-168L;
    public static double dFld=-5.71854;
    public static int iFld=-133;
    public static volatile byte byFld=1;
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0073.iArrFld, -42490);
        FuzzerUtils.init(Test0073.fArrFld, -1.770F);
        FuzzerUtils.init(Test0073.dArrFld, 2.78445);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth() {

        float f2=117.943F;
        int i11=-58290, i12=33116;
        long l1=980826006L;
        long[] lArr1 =new long[N];
        boolean b1=true;

        FuzzerUtils.init(lArr1, 3370488195476107069L);

        Test0073.instanceCount -= (long) f2;
        for (i11 = 6; i11 < 150; ++i11) {
            i12 -= i11;
            Test0073.iFld += (i11 * i11);
            l1 = 1;
            do {
                Test0073.iFld -= i11;
                if (b1) continue;
                f2 -= i12;
                Test0073.iArrFld[(int) (l1)] %= (int) (Test0073.byFld | 1);
                Test0073.iFld = (int) f2;
                Test0073.iFld >>= (int) Test0073.instanceCount;
                b1 = b1;
                Test0073.fArrFld[i11 + 1] = Test0073.iFld;
            } while (++l1 < 11);
            Test0073.dArrFld = Test0073.dArrFld;
            lArr1 = lArr1;
        }
        long meth_res = Float.floatToIntBits(f2) + i11 + i12 + l1 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(boolean b, int i8) {

        int i9=-213, i10=-7, i13=-3248, i14=-1, i15=-181, i16=-134, i17=12, i18=-40;
        float f3=2.428F;
        long l2=49228L;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 29.114009);

        for (i9 = 6; i9 < 136; i9++) {
            dArr[(i10 >>> 1) % N] *= (sMeth() - i8);
            i8 = Test0073.iFld;
            i8 = (int)f3;
        }
        f3 = i10;
        Test0073.iFld = Test0073.iFld;
        for (i13 = 1; 246 > i13; i13++) {
            for (i15 = 1; i15 < 7; i15++) {
                for (i17 = 1; i17 < 2; ++i17) {
                    Test0073.dFld *= 13;
                    if (b) break;
                    i14 -= Test0073.iFld;
                    Test0073.instanceCount += (i17 * i17);
                    dArr[i17 - 1] += -60000;
                    l2 += (i17 + i17);
                }
            }
        }
        vMeth1_check_sum += (b ? 1 : 0) + i8 + i9 + i10 + Float.floatToIntBits(f3) + i13 + i14 + i15 + i16 + i17 + i18
            + l2 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public int iMeth(long l) {

        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 45.578F);

        Test0073.iFld = (int) (-(fArr[(Test0073.iFld >>> 1) % N] -= (Test0073.iFld - 14346)));
        long meth_res = l + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, int i1) {

        float f=-53.666F, f1=2.605F;
        int i2=11;
        int i3=-11049;
        int i4=16;
        int i5=-1;
        int i6=-13;
        int i7=60022;
        int[][] iArr =new int[N][N];
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -4161788584L);
        FuzzerUtils.init(iArr, 38411);

        i = (int) (Test0073.dFld - (++i1));
        for (f = 5; f < 279; f++) {
            for (f1 = f; f1 < 6; f1++) {
                i3 += (-14 + (f1 * f1));
                Test0073.instanceCount = (lArr[(int) (f1 + 1)]--);
                i3 = (int) (((i - f1) + (i3 + Test0073.instanceCount)) + i);
                for (i4 = 1; i4 < 1; i4 += 2) {
                    i5 *= (int) (-Test0073.instanceCount);
                    i1 += iMeth((long) ((Test0073.instanceCount - i4) + Math.abs(Test0073.dFld)));
                }
                i3 = (i + iArr[(int)(f1)][(int)(f - 1)]);
            }
            for (i6 = 1; i6 < 6; ++i6) {
                vMeth1(true, i5);
                Test0073.instanceCount += i7;
                Test0073.dArrFld[i6] -= i1;
                lArr[(int)(f - 1)] *= -59830;
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + i7 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i19=-166, i20=-61307, i21=-35708, i22=-29365, i23=-14, i24=-7, i25=-50918, i26=-36039, i27=29400, i28=1,
            i29=13;
        boolean b2=true;
        long l3=9L;
        short s=-27318;
        float f4=-1.519F;

        vMeth(Test0073.iFld, Test0073.iFld);
        i19 = 1;
        while ((i19 += 3) < 168) {
            Test0073.iArrFld[i19] -= i19;
            for (i20 = 5; i20 < 151; i20++) {
                if (b2) break;
                Test0073.iArrFld[i19 + 1] *= i19;
                for (i22 = 1; 4 > i22; ++i22) {
                    Test0073.instanceCount += (19510 + (i22 * i22));
                    Test0073.instanceCount *= i20;
                    if (b2) break;
                    Test0073.dArrFld = Test0073.dArrFld;
                    if (b2) continue;
                    l3 += 7;
                    s = (short)4658949591639632884L;
                }
                for (i24 = 4; i24 > 1; i24 -= 2) {
                    i25 += (i24 | i22);
                    Test0073.instanceCount ^= i23;
                    i25 += (i24 ^ (long)f4);
                    f4 += ((long)i24 | (long)i21);
                }
                Test0073.iArrFld[i19] = i23;
                Test0073.iFld += (24218 + (i20 * i20));
            }
            i23 >>>= (int) Test0073.instanceCount;
            l3 += i19;
            Test0073.iArrFld[i19] += s;
            Test0073.iArrFld[i19] -= -2;
            for (i26 = i19; i26 < 390; i26++) {
                i27 += (3 + (i26 * i26));
                for (i28 = 2; i28 > i26; i28 -= 3) {
                    i25 >>= (int)l3;
                    i25 += i19;
                }
            }
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("b2 i22 i23 = " + (b2 ? 1 : 0) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("l3 s i24 = " + l3 + "," + s + "," + i24);
        FuzzerUtils.out.println("i25 f4 i26 = " + i25 + "," + Float.floatToIntBits(f4) + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);

        FuzzerUtils.out.println("Test0073.instanceCount Test0073.dFld Test0073.iFld = " + Test0073.instanceCount + "," +
                Double.doubleToLongBits(Test0073.dFld) + "," + Test0073.iFld);
        FuzzerUtils.out.println("Test0073.byFld Test0073.iArrFld Test0073.fArrFld = " + Test0073.byFld + "," +
                FuzzerUtils.checkSum(Test0073.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0073.fArrFld)));
        FuzzerUtils.out.println("Test0073.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0073.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0073 _instance = new Test0073();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
