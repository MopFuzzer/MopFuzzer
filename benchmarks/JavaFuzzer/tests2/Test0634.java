// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:41 2023
public class Test0634 {

    public static final int N = 400;

    public static volatile long instanceCount=2L;
    public static int iFld=4;
    public double dFld=116.68311;
    public volatile int[] iArrFld =new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth(int i7) {

        int i8=4269;
        int i9=-123;
        int i10=-27;
        int i11=-56;
        int i12=-97;
        int[][] iArr2 =new int[N][N];
        short s1=-365;
        float f1=-112.87F;

        FuzzerUtils.init(iArr2, -7);

        i7 = i8;
        s1 += (short)-1363L;
        Test0634.instanceCount <<= -242;
        i8 += i8;
        for (i9 = 13; i9 < 214; ++i9) {
            i10 += (((i9 * i10) + Test0634.instanceCount) - i8);
            for (i11 = 1; 8 > i11; ++i11) {
                i8 -= i9;
                f1 = 1;
                while (++f1 < 2) {
                    iArr2[i11 + 1] = iArr2[(int)(f1 - 1)];
                    try {
                        iArr2[i11][i11 + 1] = (i7 % 125);
                        i10 = (-1893012141 / i7);
                        iArr2[i9][i9 + 1] = (i10 % -21);
                    } catch (ArithmeticException a_e) {}
                    i8 = (int) Test0634.instanceCount;
                    Test0634.instanceCount = i10;
                    i10 >>= -249;
                }
                i8 *= i12;
            }
        }
        long meth_res = i7 + i8 + s1 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth1(short s, double d) {

        int i6=228;
        int i13=254;
        int i14=58669;
        int i15=12;
        int i16=-11;
        int i17=-2;
        int i18=-3;
        int i19=-32;
        int i20=-13;
        int i21=8;
        int[] iArr1 =new int[N];
        float f2=0.163F;
        float[][] fArr =new float[N][N];
        boolean b=true;
        double d1=0.128954;

        FuzzerUtils.init(iArr1, 142);
        FuzzerUtils.init(fArr, -42.832F);

        if (b) {
            iArr1[(i6 >>> 1) % N] <<= byMeth(Test0634.iFld);
            for (i13 = 3; i13 < 275; i13++) {
                f2 = i6;
            }
            for (i15 = 15; i15 < 383; ++i15) {
                i16 >>= -15;
                for (i17 = 1; i17 < 5; ++i17) {
                    for (i19 = 1; i19 < 2; i19++) {
                        if (b) continue;
                        Test0634.instanceCount <<= -61496L;
                    }
                    if (b) continue;
                    for (d1 = 2; d1 > 1; d1--) {
                        i16 -= i16;
                        fArr[(int)(d1 - 1)][(int)(d1)] += i13;
                        Test0634.instanceCount += (long) d1;
                    }
                }
            }
            vMeth1_check_sum += s + Double.doubleToLongBits(d) + i6 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16
                + i17 + i18 + i19 + i20 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i21 + FuzzerUtils.checkSum(iArr1)
                + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
            return;
        }
        vMeth1_check_sum += s + Double.doubleToLongBits(d) + i6 + i13 + i14 + Float.floatToIntBits(f2) + i15 + i16 +
            i17 + i18 + i19 + i20 + (b ? 1 : 0) + Double.doubleToLongBits(d1) + i21 + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i1=24929;
        int i2=-16;
        int i3=-59705;
        int i4=-12;
        int i5=3;
        int[][] iArr =new int[N][N];
        float f=1.326F;
        short s2=7323;
        double d2=-1.69988;
        byte by=-72;

        FuzzerUtils.init(iArr, 190);

        i1 = (int)(((-(-(i1--))) * (f - i1)) - (-i1));
        i2 = 1;
        while (++i2 < 341) {
            iArr = (iArr = (iArr = (iArr = iArr)));
            Test0634.instanceCount = (i1++);
            i3 = 1;
            while (++i3 < 5) {
                for (i4 = 1; i4 < 1; ++i4) {
                    switch (((i2 % 2) * 5) + 1) {
                    case 5:
                        vMeth1(s2, d2);
                        s2 = (short)-243;
                        i5 = by;
                        Test0634.instanceCount /= (i2 | 1);
                        break;
                    case 10:
                        iArr[i4 + 1][i3] = i1;
                        f -= i1;
                        i1 += i3;
                        Test0634.iFld -= i2;
                        break;
                    default:
                        i5 += (i4 | Test0634.iFld);
                    }
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f) + i2 + i3 + i4 + i5 + s2 + Double.doubleToLongBits(d2) + by +
            FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=62474, i22=-47554, i23=-49648, i24=192, i25=-120, i26=-2, i27=0, i28=-13, i29=-75;
        byte by1=-110;
        float f3=-1.209F, f4=-2.653F;
        short s3=-23249;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -34301L);

        i = iArrFld[(i >>> 1) % N];
        vMeth();
        lArr[(i >>> 1) % N][(i >>> 1) % N] += (long)1.112492;
        i22 = 1;
        while (++i22 < 279) {
            try {
                i = (i22 % i22);
                iArrFld[i22 + 1] = (i % -695877722);
                iArrFld[i22 + 1] = (i / i22);
            } catch (ArithmeticException a_e) {}
            i <<= Test0634.iFld;
            iArrFld[i22 - 1] <<= by1;
            Test0634.instanceCount /= ((long) (dFld) | 1);
            Test0634.iFld -= 26884;
            for (i23 = 2; i23 < 90; ++i23) {
                Test0634.iFld = 10;
                i += by1;
                Test0634.iFld -= -33201;
                i <<= i22;
                i = by1;
            }
            i += (-7836 + (i22 * i22));
            for (i25 = 90; i25 > 1; i25 -= 3) {
                f3 = 1;
                do {
                    Test0634.instanceCount >>= i26;
                    Test0634.instanceCount *= s3;
                } while (++f3 < 4);
                f4 += i23;
                i26 += 62;
                for (i27 = 4; i27 > 1; --i27) {
                    Test0634.iFld += (i27 | i29);
                    i26 += (-154 + (i27 * i27));
                    f4 = Test0634.instanceCount;
                    Test0634.instanceCount += (86 + (i27 * i27));
                    i >>= i26;
                    i26 += (int)f4;
                    f4 -= Test0634.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i22 by1 = " + i + "," + i22 + "," + by1);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 f3 s3 = " + i26 + "," + Float.floatToIntBits(f3) + "," + s3);
        FuzzerUtils.out.println("f4 i27 i28 = " + Float.floatToIntBits(f4) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 lArr = " + i29 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0634.instanceCount Test0634.iFld dFld = " + Test0634.instanceCount + "," + Test0634.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0634 _instance = new Test0634();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
