// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:18 2023
public class Test0139 {

    public static final int N = 400;

    public static long instanceCount=1L;
    public static int iFld=170;
    public static byte byFld=121;
    public static volatile double dFld=0.12881;
    public static boolean[] bArrFld =new boolean[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0139.bArrFld, true);
        FuzzerUtils.init(Test0139.fArrFld, 1.381F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i6, int i7, byte by1) {

        double d=1.113801;
        int i8=-10;
        int[] iArr2 =new int[N];
        short s=30031;
        float f=-36.746F;
        float[][] fArr1 =new float[N][N];

        FuzzerUtils.init(iArr2, 10);
        FuzzerUtils.init(fArr1, 2.619F);

        Test0139.byFld += (byte) d;
        i8 = 1;
        while (++i8 < 338) {
            boolean b=true;
            Test0139.iFld <<= s;
            Test0139.iFld += (int) f;
            Test0139.iFld >>= (int) Test0139.instanceCount;
            if (b) {
                i7 = i8;
            } else {
                i6 += (i8 | Test0139.iFld);
                iArr2[i8 + 1] *= i6;
                i6 += (int)(-759098173L + (i8 * i8));
                Test0139.instanceCount >>= 13;
            }
            b = b;
        }
        Test0139.instanceCount += i8;
        fArr1[(i6 >>> 1) % N][(i7 >>> 1) % N] = i6;
        i6 = (int) Test0139.instanceCount;
        long meth_res = i6 + i7 + by1 + Double.doubleToLongBits(d) + i8 + s + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i2, int i3, byte by) {

        int i4=-6;
        int i5=9;
        int i9=10;
        int i10=-242;
        int i11=122;
        int i12=239;
        int i13=107;
        int[][] iArr1 =new int[N][N];

        FuzzerUtils.init(iArr1, 13);

        Test0139.iFld += (Test0139.iFld--);
        for (i4 = 365; 14 < i4; --i4) {
            i2 >>= (int) (((i4 * i4) - (++Test0139.instanceCount)) % ((i2 - (--iArr1[i4][i4])) | 1));
            i3 *= (int) (((Test0139.instanceCount % (by | 1)) + Test0139.byFld) & ((14 - Test0139.iFld) * lMeth1(i3, Test0139.iFld,
                    Test0139.byFld)));
            for (i9 = 5; i9 > 1; i9--) {
                boolean b1=false;
                i2 += -9;
                Test0139.instanceCount += (long) Test0139.dFld;
                iArr1[i9 - 1][i9 + 1] &= i4;
                if (b1) break;
                i2 = i3;
            }
            Test0139.instanceCount -= Test0139.instanceCount;
            i11 = 1;
            do {
                for (i12 = 1; i12 < 1; ++i12) {
                    iArr1[i12 + 1][i4] = (int) Test0139.instanceCount;
                    iArr1[i4][i11 + 1] = i9;
                }
            } while (++i11 < 5);
        }
        long meth_res = i2 + i3 + by + i4 + i5 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        int i=154;
        int i1=63;
        int i14=208;
        int i15=60;
        int i16=206;
        int i17=10;
        int[][] iArr3 =new int[N][N];
        float f2=-2.150F;
        float[] fArr =new float[N];
        long[] lArr =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(fArr, -122.317F);
        FuzzerUtils.init(iArr3, 61);
        FuzzerUtils.init(dArr, -8.103568);

        Test0139.iFld *= (int) Long.reverseBytes(lArr[(Test0139.iFld >>> 1) % N]);
        for (i = 6; i < 170; ++i) {
            fArr[i] -= Math.max(lMeth(Test0139.iFld, Test0139.iFld, Test0139.byFld), 28091L);
            iArr3[i + 1][i - 1] = i;
        }
        for (i14 = 264; 4 < i14; i14--) {
            short s1=16385;
            s1 = (short) Test0139.iFld;
            dArr[i14 + 1] = Test0139.instanceCount;
            switch ((((i >>> 1) % 1) * 5) + 101) {
            case 105:
                i15 = i15;
            default:
                i16 = 1;
                while (++i16 < 6) {
                    i17 = 1;
                    do {
                        Test0139.instanceCount >>= Test0139.byFld;
                        Test0139.instanceCount <<= Test0139.iFld;
                    } while (++i17 < 1);
                    Test0139.instanceCount -= Test0139.instanceCount;
                    f2 = i1;
                }
            }
        }
        vMeth_check_sum += i + i1 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i18=51;
        int i20=-13615;
        int i21=-4;
        int i22=107;
        int i23=14;
        int i24=18;
        int[] iArr =new int[N];
        short s2=32181;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, -32);
        FuzzerUtils.init(lArr1, 8929010949889252731L);

        Test0139.bArrFld = (Test0139.bArrFld = (Test0139.bArrFld = (Test0139.bArrFld = FuzzerUtils.boolean1array(N, (boolean) false))));
        Test0139.iFld -= (Test0139.byFld * iArr[(Test0139.iFld >>> 1) % N]);
        vMeth();
        Test0139.byFld -= (byte) Test0139.iFld;
        i18 = 1;
        while (++i18 < 316) {
            float f3=-38.319F;
            Test0139.byFld = (byte) Test0139.iFld;
            f3 -= Test0139.iFld;
            Test0139.iFld += (i18 + i18);
            Test0139.iFld += (((i18 * i18) + Test0139.instanceCount) - Test0139.instanceCount);
        }
        for (float f4 : Test0139.fArrFld) {
            Test0139.iFld -= (int) Test0139.instanceCount;
            Test0139.iFld += (int) Test0139.instanceCount;
            Test0139.instanceCount += i18;
            Test0139.fArrFld[(Test0139.iFld >>> 1) % N] -= Test0139.instanceCount;
            Test0139.iFld = (int) Test0139.instanceCount;
            Test0139.iFld *= i18;
            Test0139.iFld += Test0139.iFld;
            lArr1[(i18 >>> 1) % N] *= i18;
        }
        i20 = 1;
        while (++i20 < 185) {
            Test0139.dFld = Test0139.instanceCount;
            Test0139.instanceCount *= i20;
            Test0139.iFld += (((i20 * i20) + Test0139.instanceCount) - Test0139.instanceCount);
            Test0139.dFld *= i18;
            for (i21 = 136; i21 > 6; --i21) {
                i22 = s2;
                i22 += i21;
                Test0139.instanceCount = s2;
            }
            for (i23 = 3; 136 > i23; i23++) {
                Test0139.instanceCount -= Test0139.byFld;
                Test0139.instanceCount -= s2;
            }
        }

        FuzzerUtils.out.println("i18 i20 i21 = " + i18 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 s2 i23 = " + i22 + "," + s2 + "," + i23);
        FuzzerUtils.out.println("i24 iArr lArr1 = " + i24 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0139.instanceCount Test0139.iFld Test0139.byFld = " + Test0139.instanceCount + "," + Test0139.iFld +
                "," + Test0139.byFld);
        FuzzerUtils.out.println("Test0139.dFld Test0139.bArrFld Test0139.fArrFld = " + Double.doubleToLongBits(Test0139.dFld) + "," +
                FuzzerUtils.checkSum(Test0139.bArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0139.fArrFld)));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0139 _instance = new Test0139();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
