// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0105 {

    public static final int N = 400;

    public static long instanceCount=6L;
    public float fFld=-1.915F;
    public double dFld=-71.35176;
    public static byte byFld=44;
    public static volatile int iFld=30;
    public static float fFld1=-59.152F;
    public short sFld=9843;
    public static boolean bFld=false;
    public int[] iArrFld =new int[N];
    public long[] lArrFld =new long[N];

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i3, int i4) {

        int i5=-9, i6=155, i7=-8820, i8=7, i9=125, i10=-61924;
        double d=-52.25276;
        double[] dArr1 =new double[N];

        FuzzerUtils.init(dArr1, -53.21669);

        for (i5 = 7; 292 > i5; ++i5) {
            i6 -= i4;
            i3 += i5;
            for (i7 = 1; i7 < 6; ++i7) {
                i6 += (i7 * i7);
                for (i9 = i5; i9 < 2; ++i9) {
                    i6 >>= i7;
                    Test0105.instanceCount += (i9 | Test0105.iFld);
                    switch (((i3 >>> 1) % 1) + 40) {
                    case 40:
                        d *= Test0105.fFld1;
                        break;
                    default:
                        i4 += (i9 * i9);
                        Test0105.fFld1 += (-17908 + (i9 * i9));
                        dArr1[i9 - 1] -= Test0105.byFld;
                    }
                    Test0105.iFld = 2;
                    Test0105.iFld += (i9 * i9);
                }
            }
        }
        vMeth_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static int iMeth1(byte by1) {

        float f1=-77.917F;
        double d1=2.83377;
        double d2=96.103460;
        double[][] dArr =new double[N][N];
        int i11=-93;
        int i12=-6;
        int[] iArr =new int[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)29813);
        FuzzerUtils.init(dArr, 0.9310);
        FuzzerUtils.init(iArr, 39);

        f1 *= (((Test0105.iFld + Test0105.iFld) + Test0105.iFld) * ((Test0105.iFld++) - Test0105.iFld));
        sArr[(Test0105.iFld >>> 1) % N] >>= (short) Test0105.iFld;
        dArr = (dArr = (dArr = (dArr = dArr)));
        Test0105.iFld = (int) (((Test0105.iFld / (Test0105.iFld | 1)) + (Test0105.iFld ^ Test0105.instanceCount)) + ((sArr[(232 >>> 1) %
                N]--) - Test0105.iFld));
        vMeth(Test0105.iFld, Test0105.iFld);
        Test0105.iFld = 173;
        d1 = 1;
        while (++d1 < 281) {
            f1 *= Test0105.iFld;
            for (i11 = 1; 6 > i11; i11++) {
                sArr[i11 - 1] = (short) Test0105.iFld;
                Test0105.iFld += (int) d2;
                i12 <<= (int) Test0105.instanceCount;
                Test0105.fFld1 += i11;
                iArr[(int)(d1 - 1)] = (int)2707192806182243528L;
                Test0105.iFld = i11;
            }
        }
        long meth_res = by1 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i11 + i12 +
            Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(sArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(short s, long l) {

        float f=12.382F;
        int i1=-13;
        int i2=-38299;
        int i13=-211;
        int i14=14970;
        int[] iArr1 =new int[N];
        double d3=116.107401;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -10879L);
        FuzzerUtils.init(iArr1, -2);

        Test0105.byFld = (byte) ((s - (--lArr[(Test0105.iFld >>> 1) % N])) + (Test0105.iFld - (s++)));
        Test0105.iFld *= Test0105.iFld;
        Test0105.byFld <<= (byte) ((f--) - (Test0105.iFld += (int) 0L));
        for (i1 = 319; i1 > 17; i1--) {
            Test0105.byFld = (byte) ((iMeth1(Test0105.byFld) + i2) * d3);
            Test0105.iFld += Test0105.iFld;
            i2 += (((i1 * l) + Test0105.instanceCount) - s);
            for (i13 = 1; i13 < 5; i13 += 2) {
                i2 += (int)f;
                iArr1[i1 + 1] >>>= i2;
            }
            l += (i1 + l);
            i14 += 25061;
            Test0105.instanceCount *= Test0105.instanceCount;
        }
        i2 -= (int) Test0105.instanceCount;
        Test0105.iFld = i13;
        long meth_res = s + l + Float.floatToIntBits(f) + i1 + i2 + Double.doubleToLongBits(d3) + i13 + i14 +
            FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=23693, i15=12, i16=-10, i17=23, i18=18293, i19=-16187, i20=-4, i21=30, i22=-4, i23=12, i24=-132;
        byte by=-11;
        short[] sArr1 =new short[N];

        FuzzerUtils.init(sArr1, (short)20348);

        i = 1;
        do {
            fFld -= Math.abs(++fFld);
            iArrFld[i] *= i;
            dFld += (fFld -= ((by--) * 13232));
            iMeth(sFld, -36L);
            Test0105.iFld = -6;
            Test0105.iFld += (-100 + (i * i));
            Test0105.iFld += (i ^ Test0105.iFld);
        } while (++i < 342);
        for (i15 = 1; i15 < 272; i15++) {
            for (i17 = 4; 93 > i17; i17++) {
                iArrFld[i17] -= (int) Test0105.instanceCount;
                sArr1[i17 - 1] += (short)-2;
                fFld = 10.892F;
                for (i19 = 1; i19 < 2; i19++) {
                    lArrFld[i15] *= 7L;
                    i16 |= (int) Test0105.instanceCount;
                    Test0105.fFld1 += Test0105.iFld;
                    Test0105.iFld += (((i19 * i18) + Test0105.iFld) - i19);
                    i16 = i15;
                    i16 = i17;
                }
                Test0105.iFld += i17;
            }
            Test0105.iFld += (int) dFld;
            Test0105.bFld = Test0105.bFld;
            Test0105.instanceCount = i19;
            Test0105.fFld1 = Test0105.instanceCount;
            for (i21 = 93; i21 > i15; i21 -= 2) {
                dFld = i17;
                for (i23 = i21; i23 < 1; i23++) {
                    Test0105.bFld = Test0105.bFld;
                    i16 -= (int)1.784F;
                }
            }
        }

        FuzzerUtils.out.println("i by i15 = " + i + "," + by + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("sArr1 = " + FuzzerUtils.checkSum(sArr1));

        FuzzerUtils.out.println("Test0105.instanceCount fFld dFld = " + Test0105.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0105.byFld Test0105.iFld Test0105.fFld1 = " + Test0105.byFld + "," + Test0105.iFld + "," +
                Float.floatToIntBits(Test0105.fFld1));
        FuzzerUtils.out.println("sFld Test0105.bFld iArrFld = " + sFld + "," + (Test0105.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0105 _instance = new Test0105();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
