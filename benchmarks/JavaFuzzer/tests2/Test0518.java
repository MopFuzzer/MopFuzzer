// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:36 2023
public class Test0518 {

    public static final int N = 400;

    public static volatile long instanceCount=-6601L;
    public boolean bFld=false;
    public static float fFld=101.592F;
    public static int[] iArrFld =new int[N];
    public int[] iArrFld1 =new int[N];

    static {
        FuzzerUtils.init(Test0518.iArrFld, -247);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        byte by=90;
        int i7=-13;

        by <<= (byte)i7;
        long meth_res = by + i7;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i5=-12, i6=0, i8=11;
        double d1=-1.57243;
        float f=3.284F;
        short s1=-32684;
        boolean b=false;

        for (int i4 : Test0518.iArrFld) {
            i5 = 1;
            do {
                for (d1 = 1; d1 > 1; d1--) {
                    i4 += (int)(--f);
                    Test0518.iArrFld[(int) (d1)] = (((s1++) - Integer.reverseBytes(i5)) - iMeth());
                    i4 -= 14;
                    Test0518.iArrFld = Test0518.iArrFld;
                    Test0518.iArrFld[(int) (d1 - 1)] = (int) Test0518.instanceCount;
                    if (i4 != 0) {
                        vMeth1_check_sum += i5 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + s1 + i8 +
                            (b ? 1 : 0);
                        return;
                    }
                }
                i4 = (int)-2337747198L;
                i4 = i6;
                if (b) {
                    i8 = 1;
                    while (--i8 > 0) {
                        Test0518.instanceCount = -8L;
                        Test0518.instanceCount += (59380 + (i8 * i8));
                    }
                }
            } while (++i5 < 4);
        }
        vMeth1_check_sum += i5 + Double.doubleToLongBits(d1) + i6 + Float.floatToIntBits(f) + s1 + i8 + (b ? 1 : 0);
    }

    public static void vMeth(int i, int i1, double d) {

        int i2=-30416, i3=243, i9=12, i10=36782, i11=-12, i12=-55, i13=175, i14=-153;
        short s=-15792;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -79.130866);

        for (i2 = 2; i2 < 385; ++i2) {
            s = (short)i1;
            i += i2;
            vMeth1();
            i9 >>= -8;
            for (i10 = 1; i10 < 4; i10++) {
                i11 -= (int) Test0518.instanceCount;
                Test0518.instanceCount += (-13L + (i10 * i10));
            }
            i12 = 1;
            while (++i12 < 4) {
                i1 += -178;
                i3 += i2;
                for (i13 = 1; i13 < 1; ++i13) {
                    i1 = i10;
                    i3 += i13;
                    dArr = FuzzerUtils.double1array(N, (double)0.122266);
                }
            }
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(d) + i2 + i3 + s + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i15=-73, i16=-241, i17=-164, i18=32437, i19=9183, i20=40871, i21=20924, i22=-227;
        double d2=-91.59516;

        vMeth(i15, i15, d2);
        for (i16 = 22; i16 < 386; ++i16) {
            i17 = (int)d2;
            if (bFld) {
                Test0518.instanceCount += (i16 * i15);
            } else {
                for (i18 = 4; 69 > i18; ++i18) {
                    switch ((i16 % 10) + 103) {
                    case 103:
                        d2 += Test0518.instanceCount;
                        i17 = (int) Test0518.instanceCount;
                        try {
                            i19 = (i15 % i15);
                            i17 = (21062 % Test0518.iArrFld[i18 - 1]);
                            i15 = (i16 / Test0518.iArrFld[i18]);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 104:
                        i17 >>= (int) Test0518.instanceCount;
                        for (i20 = 1; i20 < 2; i20++) {
                            i19 = i17;
                        }
                        Test0518.iArrFld[i16] = i19;
                        i15 *= -18888;
                    case 105:
                        i15 += (i18 * Test0518.instanceCount);
                        break;
                    case 106:
                        i21 += i21;
                        break;
                    case 107:
                        try {
                            i15 = (31272 / i17);
                            i21 = (i20 / Test0518.iArrFld[i16 + 1]);
                            i19 = (i16 % i21);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 108:
                        i17 += i21;
                        i21 = i19;
                        break;
                    case 109:
                        Test0518.instanceCount -= 8630485857565997809L;
                        Test0518.fFld += Test0518.instanceCount;
                        switch (((i20 >>> 1) % 6) + 33) {
                        case 33:
                            i17 = (int) Test0518.instanceCount;
                            i19 = i17;
                            i19 *= -37325;
                            i22 += (i18 * i18);
                        case 34:
                            i21 = i18;
                            Test0518.fFld *= Test0518.instanceCount;
                            break;
                        case 35:
                            i15 = i15;
                            break;
                        case 36:
                            i21 += (int) Test0518.instanceCount;
                            break;
                        case 37:
                            i19 ^= i16;
                        case 38:
                        default:
                            Test0518.instanceCount -= Test0518.instanceCount;
                        }
                        break;
                    case 110:
                        i19 = i19;
                        break;
                    case 111:
                        try {
                            i22 = (2066133958 % Test0518.iArrFld[i16 + 1]);
                            i21 = (i17 % Test0518.iArrFld[i16]);
                            iArrFld1[i18 + 1] = (i15 % i17);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 112:
                        Test0518.fFld += (i18 * i18);
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i15 d2 i16 = " + i15 + "," + Double.doubleToLongBits(d2) + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);

        FuzzerUtils.out.println("Test0518.instanceCount bFld Test0518.fFld = " + Test0518.instanceCount + "," + (bFld ? 1 : 0) +
                "," + Float.floatToIntBits(Test0518.fFld));
        FuzzerUtils.out.println("Test0518.iArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test0518.iArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0518 _instance = new Test0518();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
