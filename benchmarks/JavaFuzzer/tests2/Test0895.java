// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:54 2023
public class Test0895 {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static byte byFld=100;
    public static float fFld=81.690F;
    public static long lFld=7982933739649382341L;
    public static double dFld=87.74331;
    public boolean bFld=false;
    public int[] iArrFld =new int[N];
    public static short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0895.sArrFld, (short) 31931);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(short s1, int i22, long l2) {

        int i23=10;
        int i24=-53057;
        int i25=-61854;
        int[] iArr =new int[N];
        int[][] iArr1 =new int[N][N];

        FuzzerUtils.init(iArr, 14082);
        FuzzerUtils.init(iArr1, 99);

        Test0895.dFld = l2;
        for (i23 = 7; i23 < 286; i23++) {
            Test0895.dFld += 9;
            iArr[i23 + 1] -= (int) Test0895.fFld;
            iArr1 = iArr1;
            i24 += (int) Test0895.instanceCount;
            l2 = i24;
            Test0895.lFld >>= 6;
            i25 = 1;
            do {
                iArr1[i23 - 1][i23] *= i23;
                Test0895.instanceCount = l2;
            } while (++i25 < 6);
            Test0895.instanceCount = 9;
            s1 <<= (short)-4;
            i22 += (((i23 * Test0895.fFld) + s1) - Test0895.instanceCount);
        }
        iArr1[(i22 >>> 1) % N] = FuzzerUtils.int1array(N, (int)-5);
        long meth_res = s1 + i22 + l2 + i23 + i24 + i25 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static boolean bMeth() {

        int i20=219;
        int i21=-212;
        int i26=-18561;
        int i27=0;
        int i28=-10358;
        int[] iArr2 =new int[N];
        short s2=302;
        double d1=-26.27772;
        long l3=252L;
        long[] lArr1 =new long[N];
        boolean b1=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(lArr1, 10L);
        FuzzerUtils.init(fArr, -24.818F);
        FuzzerUtils.init(iArr2, -51665);

        for (i20 = 10; i20 < 164; i20++) {
            if (b1) {
                lArr1[i20] = (long)(i21 += (int)-74.49401);
                Test0895.fFld -= (((i21 - Test0895.lFld) + (-5L * iMeth(s2, i21, Test0895.instanceCount))) + i21);
                for (d1 = 10; d1 > 1; d1 -= 2) {
                    i26 <<= -40569;
                    Test0895.byFld += (byte) (((d1 * i21) + i20) - i21);
                    switch ((int)(((d1 % 3) * 5) + 37)) {
                    case 43:
                        for (i27 = 1; i27 < 3; i27++) {
                            Test0895.lFld *= i20;
                            Test0895.fFld = i21;
                            switch ((int)((d1 % 6) + 92)) {
                            case 92:
                                fArr[i20] -= i21;
                                break;
                            case 93:
                                Test0895.instanceCount += Test0895.instanceCount;
                                lArr1[i27] = (long)d1;
                                break;
                            case 94:
                                Test0895.fFld *= Test0895.instanceCount;
                                break;
                            case 95:
                                Test0895.dFld += 0.75165;
                            case 96:
                            case 97:
                                Test0895.instanceCount >>= 1;
                            default:
                                l3 += (i27 | i27);
                            }
                        }
                        break;
                    case 48:
                        i28 -= (int)d1;
                        break;
                    case 50:
                        iArr2[(int)(d1)] = 85;
                    }
                }
            } else if (false) {
                Test0895.fFld += (i20 * i20);
            } else {
                iArr2[i20 + 1] &= i27;
            }
        }
        long meth_res = i20 + i21 + s2 + Double.doubleToLongBits(d1) + i26 + i27 + i28 + l3 + (b1 ? 1 : 0) +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public long lMeth(long l1) {

        int i12=33721, i13=7, i14=0, i15=-23674, i16=-153, i17=155;
        float f2=-1.389F;
        boolean b=false;
        double d=-88.42861;

        for (i12 = 7; i12 < 211; ++i12) {
            for (i14 = 1; 8 > i14; ++i14) {
                l1 >>= (Math.max((int) (Test0895.instanceCount + f2), (int) (l1 - 0.47379)) - (++i15));
                i13 += i14;
                i13 = i14;
                iArrFld[i12 - 1] -= i15;
                for (i16 = 1; i16 < 2; i16++) {
                    f2 = (((i13 * i15) - (i13++)) + (Math.abs(l1) + (i13 = (int)l1)));
                    iArrFld[i16 + 1] *= (int)Float.intBitsToFloat(i12);
                    f2 += (2367L + (i16 * i16));
                    if (b) continue;
                    i15 ^= (++i17);
                    d -= (++i17);
                    f2 += ((-l1) - (Integer.reverseBytes(i13) + Test0895.byFld));
                    iArrFld[i14] = ((iArrFld[i16] += (iArrFld[i16]--)) - i14);
                }
            }
        }
        long meth_res = l1 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f2) + i16 + i17 + (b ? 1 : 0) +
            Double.doubleToLongBits(d);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(int i7, float f1) {

        int i8=32381, i9=-12830, i10=28081, i11=155, i18=160, i19=181;
        long[] lArr2 =new long[N];
        float[][] fArr1 =new float[N][N];

        FuzzerUtils.init(lArr2, 132L);
        FuzzerUtils.init(fArr1, 0.735F);

        i8 = (int) Math.abs(--Test0895.instanceCount);
        i7 += (++i7);
        i9 = 1;
        do {
            for (i10 = 1; i10 < 11; i10++) {
                iArrFld[i9 - 1] = (int) lMeth(Test0895.instanceCount);
                for (i18 = 2; 1 < i18; --i18) {
                    boolean b2=false;
                    Test0895.instanceCount = 74;
                    if (bMeth()) break;
                    if (b2) {
                        if (b2) {
                            Test0895.fFld -= (float) Test0895.dFld;
                            i11 = (int)-42348L;
                            lArr2[i9] = i9;
                        } else if (true) {
                            Test0895.instanceCount >>= i19;
                            fArr1[i18 + 1][i18] /= (i18 | 1);
                            vMeth_check_sum += i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i18 + i19 +
                                FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                            return;
                        } else {
                            Test0895.lFld *= 84;
                        }
                        vMeth_check_sum += i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i18 + i19 +
                            FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
                        return;
                    } else if (b2) {
                        if (b2) continue;
                    }
                }
            }
        } while (++i9 < 137);
        vMeth_check_sum += i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + i11 + i18 + i19 +
            FuzzerUtils.checkSum(lArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public void mainTest(String[] strArr1) {

        int i=-251, i1=-38, i2=144, i3=-33596, i4=179, i5=10499, i6=21376, i29=23654, i30=65, i31=21339;
        long l=-104L;
        long[][] lArr =new long[N][N];
        float f=115.6F;
        float[] fArr2 =new float[N];
        byte by=7;
        short s=2849;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 1.34341);
        FuzzerUtils.init(lArr, 3466840122449974724L);
        FuzzerUtils.init(fArr2, 0.306F);

        for (i = 10; i < 396; i++) {
            if (bFld) {
                for (i2 = 2; i2 < 65; i2++) {
                    Test0895.instanceCount -= (i2 / (((i1--) * (i2 * i3)) | 1));
                    for (l = 1; l < 2; l++) {
                        i4 |= i4;
                        f += (((l * i) + i1) - f);
                        i4 = (int)(((i4 & 0L) - (i3 - 3732135032L)) - (iArrFld[i + 1] = (int)l));
                        by >>= (byte)((by * (i - 49759)) - (Math.abs(i2) - (--i4)));
                        dArr[i - 1] = (f * ((Test0895.instanceCount - i1) * i3));
                        i4 += (-17405 + (l * l));
                    }
                    Test0895.instanceCount |= (((i3 + Test0895.instanceCount) - i3) - ((s * by) + (i + Test0895.instanceCount)));
                }
                Test0895.instanceCount -= ((lArr[i + 1][i - 1] *= Test0895.instanceCount) - (i1 = Test0895.sArrFld[i + 1]));
                if (bFld) {
                    Test0895.instanceCount *= s;
                    for (i5 = i; i5 < 65; i5++) {
                        vMeth(i4, Test0895.fFld);
                        s = (short) Test0895.dFld;
                        Test0895.lFld -= i4;
                        iArrFld[(i >>> 1) % N] += (int)1.702F;
                    }
                    iArrFld[i - 1] -= s;
                }
            } else if (bFld) {
                for (i29 = 1; i29 < 65; i29++) {
                    bFld = bFld;
                    i31 = 2;
                    do {
                        Test0895.fFld *= i5;
                        i3 <<= i4;
                        i4 = i29;
                    } while ((i31 -= 3) > 0);
                }
                i30 += (-242 + (i * i));
                fArr2[i - 1] += Test0895.byFld;
                Test0895.dFld = s;
            } else if (bFld) {
                lArr[i][i - 1] += i2;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 l i4 = " + i3 + "," + l + "," + i4);
        FuzzerUtils.out.println("f by s = " + Float.floatToIntBits(f) + "," + by + "," + s);
        FuzzerUtils.out.println("i5 i6 i29 = " + i5 + "," + i6 + "," + i29);
        FuzzerUtils.out.println("i30 i31 dArr = " + i30 + "," + i31 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("lArr fArr2 = " + FuzzerUtils.checkSum(lArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));

        FuzzerUtils.out.println("Test0895.instanceCount Test0895.byFld Test0895.fFld = " + Test0895.instanceCount + "," + Test0895.byFld +
                "," + Float.floatToIntBits(Test0895.fFld));
        FuzzerUtils.out.println("Test0895.lFld Test0895.dFld bFld = " + Test0895.lFld + "," + Double.doubleToLongBits(Test0895.dFld) +
            "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld Test0895.sArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0895.sArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0895 _instance = new Test0895();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
