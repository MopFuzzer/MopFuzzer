// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:24 2023
public class Test0265 {

    public static final int N = 400;

    public static volatile long instanceCount=-176L;
    public static byte byFld=-74;
    public static double dFld=-1.128979;
    public boolean bFld=false;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0265.lArrFld, 1525696407604508789L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public void vMeth1(float f1, int i4, byte by) {

        int i5=-3, i6=7021;

        i4 <<= (int)(18.34794 - i4);
        for (i5 = 14; i5 < 278; ++i5) {
            i6 |= (i6++);
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + by + i5 + i6;
    }

    public void vMeth(long l, int i3, float f) {

        byte by1=86;

        vMeth1(-(++i3), i3, by1);
        vMeth_check_sum += l + i3 + Float.floatToIntBits(f) + by1;
    }

    public static int iMeth1(boolean b, long l1) {

        int i11=-89;
        int i12=-3;
        int i13=-35047;
        int[] iArr1 =new int[N];
        double d=-1.38955, d1=8.88400;
        float f4=0.851F;

        FuzzerUtils.init(iArr1, -54262);

        for (i11 = 6; i11 < 190; ++i11) {
            i12 >>>= i12;
            Test0265.lArrFld[i11 - 1] -= (long) d;
            for (d1 = 1; d1 < 9; ++d1) {
                i13 = i13;
                iArr1[(int)(d1)] = (int)24.335F;
                i12 = i13;
                l1 = (long)-2.867F;
            }
            f4 *= -11;
            d -= i12;
            Test0265.instanceCount -= i11;
            try {
                i13 = (iArr1[i11] % -11129);
                i12 = (i12 / i11);
                iArr1[i11] = (106 / iArr1[i11]);
            } catch (ArithmeticException a_e) {}
            i12 = i11;
        }
        i13 = i13;
        f4 = i11;
        long meth_res = (b ? 1 : 0) + l1 + i11 + i12 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i13 +
            Float.floatToIntBits(f4) + FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(float f3, int i8) {

        int i9=83, i10=-59745, i14=-2;
        boolean b1=false;

        for (i9 = 8; i9 < 135; i9++) {
            i8 = (i10 <<= (i10++));
            f3 += i9;
            Test0265.instanceCount >>= iMeth1(b1, -9222326000532899169L);
            i10 = i9;
            if (b1) {
                i10 = (int) Test0265.instanceCount;
                Test0265.instanceCount = i10;
                i14 = 1;
                do {
                    i8 += i8;
                    i8 -= i9;
                    Test0265.instanceCount += (i14 * i14);
                    f3 = i8;
                    i10 += i10;
                    f3 -= 2271421095L;
                } while (++i14 < 12);
            }
        }
        vMeth2_check_sum += Float.floatToIntBits(f3) + i8 + i9 + i10 + (b1 ? 1 : 0) + i14;
    }

    public static int iMeth(float f2, int i7) {

        boolean b2=true;
        int i15=9;
        int i16=-31975;
        int[] iArr2 =new int[N];

        FuzzerUtils.init(iArr2, -6);

        vMeth2(f2, i7);
        i7 = i7;
        if (b2) {
            i7 -= i7;
        }
        iArr2[(i7 >>> 1) % N] = i7;
        i7 = -202;
        f2 -= f2;
        for (i15 = 149; i15 > 7; --i15) {
            i16 += (i15 - i7);
            i7 *= i7;
            i7 *= (int) Test0265.instanceCount;
            if (b2) break;
            i7 = i16;
            Test0265.dFld *= 5;
        }
        long meth_res = Float.floatToIntBits(f2) + i7 + (b2 ? 1 : 0) + i15 + i16 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=0;
        int i1=-21756;
        int i2=6499;
        int i17=-194;
        int i18=9;
        int i19=28544;
        int[] iArr =new int[N];
        short s=-3093;
        float f5=2.977F;
        double d2=51.29632;
        double[] dArr =new double[N];
        long[] lArr =new long[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr, 149);
        FuzzerUtils.init(lArr, -5L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(dArr, -121.90541);

        iArr = (iArr = (iArr = (iArr = iArr)));
        for (i = 15; i < 295; i++) {
            i2 = 1;
            do {
                switch ((i % 2) + 99) {
                case 99:
                    vMeth(lArr[i], --iArr[i2], -(1 + (++iArr[i + 1])));
                    i1 = (int) (++Test0265.instanceCount);
                    s += (short)i;
                    Test0265.byFld = (byte) iMeth(f5, i1);
                    break;
                case 100:
                    bArr[i2 - 1] = bFld;
                    Test0265.instanceCount = -63074L;
                    i17 = 1;
                    do {
                        f5 -= i;
                        i1 += i17;
                    } while (--i17 > 0);
                }
                Test0265.instanceCount = (long) f5;
                iArr[i2 - 1] = i17;
                for (d2 = 1; d2 < 1; d2++) {
                    dArr[i2 + 1] = 120;
                    i18 += (int)(d2 * d2);
                    iArr[i] *= i;
                    i18 *= s;
                    switch ((int)((d2 % 10) + 90)) {
                    case 90:
                    case 91:
                        Test0265.instanceCount += (long) d2;
                        f5 /= -73.427F;
                        Test0265.instanceCount += (long) d2;
                        break;
                    case 92:
                        iArr[i2 + 1] = i1;
                        break;
                    case 93:
                        i1 = i19;
                        if (true) continue;
                        Test0265.dFld = i;
                        Test0265.lArrFld[(int) (d2)] -= Test0265.instanceCount;
                    case 94:
                        Test0265.dFld += -57654;
                        break;
                    case 95:
                        i1 += i19;
                        break;
                    case 96:
                        i19 = i2;
                    case 97:
                        i18 += (int) ((long) d2 ^ Test0265.instanceCount);
                        break;
                    case 98:
                        Test0265.byFld = (byte) 33;
                    case 99:
                        f5 -= i17;
                        break;
                    }
                }
            } while (++i2 < 90);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s f5 i17 = " + s + "," + Float.floatToIntBits(f5) + "," + i17);
        FuzzerUtils.out.println("d2 i18 i19 = " + Double.doubleToLongBits(d2) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("iArr lArr bArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr) +
            "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0265.instanceCount Test0265.byFld Test0265.dFld = " + Test0265.instanceCount + "," + Test0265.byFld +
                "," + Double.doubleToLongBits(Test0265.dFld));
        FuzzerUtils.out.println("bFld Test0265.lArrFld = " + (bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test0265.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0265 _instance = new Test0265();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth2 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
