// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:27 2023
public class Test0328 {

    public static final int N = 400;

    public static long instanceCount=10L;
    public static double dFld=-1.10205;
    public static boolean bFld=true;
    public long[] lArrFld =new long[N];
    public int[] iArrFld =new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=14;
        int i3=10;
        int i4=229;
        int i5=-62603;
        int i6=28831;
        int i7=6;
        int i8=65349;
        int i9=-130;
        int[] iArr =new int[N];
        short s=26355;
        double d=-1.115948;
        float f=-2.478F;

        FuzzerUtils.init(iArr, 84);

        for (i2 = 161; i2 > 5; i2--) {
            i3 -= s;
        }
        for (i4 = 3; i4 < 121; ++i4) {
            for (d = 13; d > 1; d -= 3) {
                s += (short) Test0328.instanceCount;
                i5 += 1;
                if (true) break;
                iArr = iArr;
                i7 = 1;
                while (++i7 < 4) {
                    Test0328.dFld = i7;
                    try {
                        i6 = (-3705 / i7);
                        i6 = (i8 / i7);
                        i8 = (-23574 % iArr[i7 - 1]);
                    } catch (ArithmeticException a_e) {}
                    i3 = -5;
                    i6 = i8;
                    i9 %= (int)(i4 | 1);
                    f = (float) Test0328.dFld;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + s + i4 + i5 + Double.doubleToLongBits(d) + i6 + i7 + i8 + i9 +
            Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth() {

        int i10=16256, i11=28054, i12=-51956, i13=-110, i14=-47, i15=-64936;
        float f1=-53.146F;
        boolean b1=false;

        vMeth1();
        for (i10 = 6; i10 < 154; i10++) {
            f1 += Test0328.instanceCount;
            Test0328.instanceCount += Test0328.instanceCount;
            i11 += i11;
            for (i12 = 1; i12 < 11; ++i12) {
                Test0328.dFld -= i14;
                i11 = (int)-8516427025185092217L;
                i15 = 1;
                do {
                    i14 += i15;
                } while ((i15 += 3) < 2);
                i14 += i11;
            }
            Test0328.instanceCount -= i15;
            i14 >>= i10;
        }
        b1 = b1;
        Test0328.dFld *= f1;
        vMeth_check_sum += i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 + i14 + i15 + (b1 ? 1 : 0);
    }

    public static void vSmallMeth(boolean b) {


        vMeth();
        vSmallMeth_check_sum += (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=48792, i1=14, i16=-26746, i17=-82, i19=-23020, i20=0, i21=-27134, i22=5233, i23=62261, i24=-51292,
            i25=-12, i26=28672;
        double d1=-85.17841;
        float f2=11.424F;
        short s1=-17116;
        byte by1=95;

        for (i = 260; i > 13; --i) {
            byte by=-77;
            for (int smallinvoc = 0; smallinvoc < 62; smallinvoc++) vSmallMeth(Test0328.bFld);
            i1 += (int)(-225L + (i * i));
            lArrFld[i] = -7;
            switch ((i % 1) + 32) {
            case 32:
                if (Test0328.bFld) break;
                break;
            default:
                i16 = 1;
                while (++i16 < 102) {
                    for (d1 = i; d1 < 1; d1++) {
                        i1 += (41606 + (d1 * d1));
                        iArrFld[i16] -= (int)f2;
                        Test0328.instanceCount >>= i;
                    }
                    iArrFld[i16 - 1] <<= -1;
                    Test0328.instanceCount = i16;
                }
                Test0328.dFld += 0.67981;
                i17 = (int) Test0328.instanceCount;
                i1 += (((i * i16) + s1) - i17);
            }
            Test0328.instanceCount = i1;
            Test0328.instanceCount = 194;
            by += (byte) (((i * i) + i16) - Test0328.instanceCount);
        }
        Test0328.instanceCount *= Test0328.instanceCount;
        i17 >>>= (int) Test0328.instanceCount;
        for (i19 = 1; i19 < 221; i19++) {
            i17 += (11 + (i19 * i19));
            for (i21 = 2; i21 < 114; i21++) {
                f2 = Test0328.instanceCount;
            }
            for (i23 = 114; i23 > 3; --i23) {
                for (i25 = i23; i25 < 2; i25 += 3) {
                    i26 = -6;
                    Test0328.dFld %= (by1 | 1);
                }
                i22 += (i23 * i23);
            }
        }

        FuzzerUtils.out.println("i i1 i16 = " + i + "," + i1 + "," + i16);
        FuzzerUtils.out.println("d1 i17 f2 = " + Double.doubleToLongBits(d1) + "," + i17 + "," +
            Float.floatToIntBits(f2));
        FuzzerUtils.out.println("s1 i19 i20 = " + s1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("by1 = " + by1);

        FuzzerUtils.out.println("Test0328.instanceCount Test0328.dFld Test0328.bFld = " + Test0328.instanceCount + "," +
                Double.doubleToLongBits(Test0328.dFld) + "," + (Test0328.bFld ? 1 : 0));
        FuzzerUtils.out.println("lArrFld iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0328 _instance = new Test0328();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
