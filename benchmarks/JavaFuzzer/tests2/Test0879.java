// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0879 {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static float fFld=0.1006F;
    public static byte byFld=36;
    public static float fFld1=1.378F;
    public static volatile short sFld=8968;
    public int iFld=-2;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(long l1, int i6, float f) {

        int i7=9, i8=-140, i9=0, i10=10, i11=12259, i12=2;
        boolean b1=false;
        double d1=-45.83834;

        for (i7 = 5; i7 < 148; ++i7) {
            i6 += i7;
            f *= i6;
            i8 += i6;
            for (i9 = 1; i9 < 11; i9++) {
                Test0879.fFld -= i6;
                Test0879.fFld *= Test0879.fFld;
                f += Test0879.instanceCount;
                i6 += (i9 * i9);
                for (i11 = i7; i11 < 2; i11++) {
                    b1 = b1;
                    d1 -= -48103L;
                    d1 += -95;
                    if (b1) continue;
                }
            }
            Test0879.instanceCount |= i7;
        }
        long meth_res = l1 + i6 + Float.floatToIntBits(f) + i7 + i8 + i9 + i10 + i11 + i12 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i5, long l) {

        double d2=11.118938;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 50333);

        Test0879.byFld += (byte) i5;
        i5 *= (int) (lMeth(l, 32892, Test0879.fFld1) + d2);
        iArr[(176 >>> 1) % N] = (int)1.100479;
        vMeth_check_sum += i5 + l + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth() {

        int i1=3;
        int i2=228;
        int i3=5;
        int i4=61737;
        int i13=14;
        int i14=33035;
        int[] iArr1 =new int[N];
        double d=2.30866, d3=-18.17069;
        boolean b=false;
        short s=-9823;

        FuzzerUtils.init(iArr1, -152);

        i1 *= (int) Test0879.instanceCount;
        for (d = 370; d > 16; --d) {
            for (i3 = 1; i3 < 5; ++i3) {
                if (b) break;
                switch (((i3 % 2) * 5) + 79) {
                case 81:
                    vMeth(i2, Test0879.instanceCount);
                    d3 += i2;
                    try {
                        i1 = (-2112277310 % i1);
                        i1 = (7 % iArr1[i3]);
                        i2 = (-53477 % i3);
                    } catch (ArithmeticException a_e) {}
                    if (b) {
                        i1 += (((i3 * s) + i2) - i4);
                        i4 = i2;
                        for (i13 = 1; i13 < 2; ++i13) {
                            i14 += (i13 + Test0879.fFld1);
                            i14 = s;
                        }
                        iArr1 = iArr1;
                    } else {
                        Test0879.fFld1 = Test0879.byFld;
                    }
                    break;
                case 84:
                    Test0879.instanceCount += (i3 + Test0879.instanceCount);
                    break;
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + s
            + i13 + i14 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=104;
        int i16=-105;
        int i17=3;
        int i18=33400;
        int i19=-152;
        int i20=54375;
        int i21=155;
        int i22=-201;
        int i23=16665;
        int[] iArr2 =new int[N];
        double d4=-90.79633;
        boolean b2=true;
        float[] fArr =new float[N];
        long[] lArr =new long[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(fArr, -77.464F);
        FuzzerUtils.init(iArr2, 10855);
        FuzzerUtils.init(lArr, 55669L);
        FuzzerUtils.init(byArr, (byte)60);

        Test0879.instanceCount = (long) ((Test0879.fFld - (i--)) * ((-(i - i)) % ((++i) | 1)));
        fArr[(i >>> 1) % N] += (iMeth() - i);
        Test0879.instanceCount *= i;
        d4 -= i;
        for (int i15 : iArr2) {
            if (b2) break;
            for (i16 = 2; 63 > i16; i16++) {
                try {
                    i = (i17 / i17);
                    i = (i16 % -40114);
                    i15 = (i15 / i17);
                } catch (ArithmeticException a_e) {}
                i15 -= 0;
            }
            d4 += Test0879.instanceCount;
        }
        for (i18 = 12; i18 < 356; ++i18) {
            switch ((i18 % 10) + 47) {
            case 47:
                Test0879.fFld = Test0879.fFld1;
                iArr2[i18 - 1] >>= Test0879.sFld;
                Test0879.instanceCount += (i18 ^ i19);
            case 48:
                i *= 20764;
                for (i20 = 73; i20 > 3; i20 -= 3) {
                    for (i22 = 1; i22 < 4; i22 += 3) {
                        lArr[i20 - 1] *= Test0879.instanceCount;
                        i17 |= -8;
                        Test0879.instanceCount -= -1;
                        Test0879.byFld >>= (byte) i16;
                        if (b2) break;
                        i -= (int)64305L;
                        i17 *= Test0879.byFld;
                        iArr2[i22] = i;
                        byArr[i22 + 1] %= (byte)(i20 | 1);
                        i19 |= Test0879.byFld;
                    }
                    i17 += (i20 - i);
                    i23 += (i20 * Test0879.fFld1);
                }
                break;
            case 49:
            case 50:
                Test0879.fFld += (i18 * i22);
                break;
            case 51:
                fArr[i18 - 1] -= Test0879.fFld;
                break;
            case 52:
                i17 = (int)d4;
                break;
            case 53:
            case 54:
                if (b2) continue;
                break;
            case 55:
                i23 *= iFld;
                break;
            case 56:
                i17 += i18;
                break;
            }
        }

        FuzzerUtils.out.println("i d4 b2 = " + i + "," + Double.doubleToLongBits(d4) + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 fArr = " + i22 + "," + i23 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));
        FuzzerUtils.out.println("iArr2 lArr byArr = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr)
            + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0879.instanceCount Test0879.fFld Test0879.byFld = " + Test0879.instanceCount + "," +
                Float.floatToIntBits(Test0879.fFld) + "," + Test0879.byFld);
        FuzzerUtils.out.println("Test0879.fFld1 Test0879.sFld iFld = " + Float.floatToIntBits(Test0879.fFld1) + "," + Test0879.sFld +
            "," + iFld);

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0879 _instance = new Test0879();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
