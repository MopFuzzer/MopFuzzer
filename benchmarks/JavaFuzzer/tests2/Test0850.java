// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:52 2023
public class Test0850 {

    public static final int N = 400;

    public static long instanceCount=-12L;
    public static boolean bFld=true;
    public static short sFld=-10358;
    public int iFld=54647;
    public static volatile byte byFld=116;
    public int[] iArrFld =new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, int i5) {

        double d1=32.98821;
        float f1=0.283F;
        int i6=-1802;
        int i7=13;
        int i8=11;
        int i9=8;
        int[] iArr =new int[N];
        short s=-4787;

        FuzzerUtils.init(iArr, -164);

        d1 *= -26868;
        for (f1 = 17; f1 < 332; f1++) {
            Test0850.bFld = false;
            Test0850.instanceCount -= -47441;
            iArr[(int) (f1)] <<= (int) Test0850.instanceCount;
            for (i7 = (int)(f1); 5 > i7; i7++) {
                i4 ^= i6;
            }
            i5 = (int)f1;
            i3 += i8;
        }
        s |= (short) Test0850.instanceCount;
        try {
            i9 = 1;
            while (++i9 < 192) {
                i3 *= (int) Test0850.instanceCount;
                i5 = i8;
                i5 *= i7;
            }
        }
        catch (ArrayIndexOutOfBoundsException exc1) {
            Test0850.instanceCount -= -26899;
        }
        finally {
            i5 -= (int)-1.9628;
        }
        vMeth2_check_sum += i3 + i4 + i5 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i6 + i7 + i8 + s +
            i9 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i2, float f, byte by) {

        int i10=6440, i11=-8488, i12=-14, i13=95, i14=2, i15=63679, i16=-118, i17=114;
        short s1=-27010;
        double d2=55.99996;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -12L);

        vMeth2(i2, 5, i2);
        i10 = 1;
        do {
            for (i11 = 1; i11 < 12; i11++) {
                f += i2;
                by <<= (byte)i11;
            }
            for (i13 = i10; i13 < 12; ++i13) {
                Test0850.instanceCount += 177;
            }
            for (i15 = 1; i15 < 12; i15++) {
                s1 += (short)d2;
                i17 = 1;
                do {
                    switch ((i15 % 2) + 69) {
                    case 69:
                        Test0850.bFld = Test0850.bFld;
                        Test0850.bFld = false;
                        lArr = lArr;
                        break;
                    case 70:
                        i14 *= -34740;
                        break;
                    default:
                        if (i13 != 0) {
                            vMeth1_check_sum += i2 + Float.floatToIntBits(f) + by + i10 + i11 + i12 + i13 + i14 + i15 +
                                i16 + s1 + Double.doubleToLongBits(d2) + i17 + FuzzerUtils.checkSum(lArr);
                            return;
                        }
                    }
                } while (++i17 < 2);
            }
        } while ((i10 += 2) < 273);
        vMeth1_check_sum += i2 + Float.floatToIntBits(f) + by + i10 + i11 + i12 + i13 + i14 + i15 + i16 + s1 +
            Double.doubleToLongBits(d2) + i17 + FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(double d, int i, int i1) {

        float f2=1.584F;
        byte by1=89;
        int i18=-20225, i19=4, i20=-15481;
        long[] lArr1 =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(lArr1, -348717185L);
        FuzzerUtils.init(dArr, 2.36855);

        vMeth1(7, f2, by1);
        i1 = i1;
        i += (int)f2;
        i1 -= (int) Test0850.instanceCount;
        for (i18 = 9; i18 < 347; i18++) {
            by1 += (byte)d;
            f2 += i18;
            f2 += i;
            lArr1[i18 + 1] *= (long)f2;
            dArr[i18] = i19;
            i20 = 1;
            while (++i20 < 5) {
                if (i != 0) {
                    vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + Float.floatToIntBits(f2) + by1 + i18 + i19
                        + i20 + FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                    return;
                }
                Test0850.sFld = (short) 147;
                i += (i20 + i18);
                i1 += (-20938 + (i20 * i20));
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i + i1 + Float.floatToIntBits(f2) + by1 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        double d3=-70.4848, d4=-2.116747;
        int i21=-184, i22=-11, i23=44758, i24=12, i25=-2525, i26=34023, i27=-14;
        long[] lArr2 =new long[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(lArr2, 14L);
        FuzzerUtils.init(fArr, 0.578F);

        vMeth(d3, iFld, iFld);
        if (Test0850.bFld) {
            for (d4 = 5; d4 < 148; ++d4) {
                i21 = -10;
                if (true) break;
                i22 = 175;
                do {
                    iFld += (i22 * i22);
                    i21 *= iFld;
                    i21 -= iFld;
                    i21 += (i22 * i22);
                    Test0850.instanceCount += (((i22 * i22) + i21) - i21);
                    iArrFld[i22 + 1] -= iFld;
                    Test0850.instanceCount -= Test0850.instanceCount;
                    if (Test0850.bFld) break;
                } while (--i22 > 0);
                i21 = i21;
                if (Test0850.bFld) break;
                for (i23 = (int)(d4); i23 < 175; i23++) {
                    if (Test0850.bFld) continue;
                    i25 = 1;
                    while (++i25 < 1) {
                        Test0850.instanceCount <<= Test0850.byFld;
                        iFld -= i24;
                        i24 >>= (int)2946199585L;
                        i24 -= (int)-2534917641050059313L;
                        d3 = 4260020130L;
                        i21 = (int) Test0850.instanceCount;
                        iFld = (int)1.949F;
                    }
                    for (i26 = 1; i26 < 1; ++i26) {
                        iFld += (((i26 * i22) + Test0850.instanceCount) - Test0850.instanceCount);
                        i27 = i22;
                        fArr[i26 + 1] = 5;
                    }
                }
            }
        } else if (Test0850.bFld) {
            iArrFld[(i24 >>> 1) % N] = 2;
        } else if (Test0850.bFld) {
            lArr2[(i26 >>> 1) % N] |= i24;
        } else {
            Test0850.instanceCount -= i25;
        }

        FuzzerUtils.out.println("d3 d4 i21 = " + Double.doubleToLongBits(d3) + "," + Double.doubleToLongBits(d4) + ","
            + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("lArr2 fArr = " + FuzzerUtils.checkSum(lArr2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0850.instanceCount Test0850.bFld Test0850.sFld = " + Test0850.instanceCount + "," + (Test0850.bFld ? 1
                : 0) + "," + Test0850.sFld);
        FuzzerUtils.out.println("iFld Test0850.byFld iArrFld = " + iFld + "," + Test0850.byFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0850 _instance = new Test0850();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
