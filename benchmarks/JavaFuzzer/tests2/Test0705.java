// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:45 2023
public class Test0705 {

    public static final int N = 400;

    public static long instanceCount=65197L;
    public static byte byFld=-67;
    public static float fFld=-2.201F;
    public static short sFld=-20356;
    public static boolean bFld=true;
    public float fFld1=0.990F;
    public static double dFld=0.36520;
    public volatile float[] fArrFld =new float[N];
    public static volatile byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0705.byArrFld, (byte) -65);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(long l) {

        int i4=-54637;
        int i5=-48269;
        int i6=-209;
        int i7=106;
        int i8=62916;
        int i9=9;
        int i10=-51063;
        int[] iArr1 =new int[N];
        short s=20954;
        float f3=-25.431F;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -2);
        FuzzerUtils.init(lArr, -6L);

        for (i4 = 10; i4 < 296; i4++) {
            for (i6 = 1; i6 < 6; i6++) {
                Test0705.byFld -= (byte) l;
                i8 = 1;
                while (++i8 < 2) {
                    s *= (short)f3;
                    i5 -= i8;
                    f3 = i8;
                    iArr1[i4] *= i4;
                    i5 -= -10;
                }
                i7 = (int) Test0705.instanceCount;
                i5 = (int) Test0705.instanceCount;
                for (i9 = 1; i9 < 2; i9++) {
                    lArr[i6 - 1] *= i7;
                    i7 -= (int) Test0705.instanceCount;
                    i7 = i10;
                }
            }
        }
        vMeth_check_sum += l + i4 + i5 + i6 + i7 + i8 + s + Float.floatToIntBits(f3) + i9 + i10 +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {

        int i2=4769;
        int i3=-34483;
        int i11=144;
        int i12=-51729;
        int i13=-6;
        int i14=-14;
        int[] iArr2 =new int[N];
        float f2=-103.957F;
        boolean b=false;
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(iArr2, -55277);
        FuzzerUtils.init(dArr, 2.17471);

        for (i2 = 3; i2 < 128; ++i2) {
            i3 = (int)f2;
            b = b;
            vMeth(-133L);
            i3 >>>= 681;
            iArr2 = FuzzerUtils.int1array(N, (int)-1589);
            for (i11 = 1; i11 < 13; i11++) {
                i12 += (i11 * i11);
                dArr[i11 - 1][i11] -= i3;
                Test0705.instanceCount = 9L;
                for (i13 = 1; i13 < 2; i13++) {
                    i3 -= i13;
                    Test0705.instanceCount = Test0705.instanceCount;
                    i14 += (i13 - Test0705.instanceCount);
                    iArr2[i11] = i13;
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f2) + (b ? 1 : 0) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr2) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, float f1) {

        boolean b1=true;
        int i15=3;
        int i16=214;
        int i17=-28684;
        int i18=-12;
        int i19=-63563;
        int[] iArr3 =new int[N];
        float[] fArr =new float[N];
        double[] dArr1 =new double[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(fArr, -68.472F);
        FuzzerUtils.init(dArr1, -89.100106);
        FuzzerUtils.init(lArr1, 5490790599478135303L);
        FuzzerUtils.init(iArr3, -55706);

        if (b1) {
            Test0705.instanceCount += (--i1);
            fArr[(i1 >>> 1) % N] = (lMeth() - i1);
            b1 = false;
            try {
                for (i15 = 7; i15 < 292; ++i15) {
                    i1 = -29715;
                    i1 = i15;
                    i16 += (int)1.680F;
                    dArr1[i15] += Test0705.fFld;
                }
                i1 *= 52;
                lArr1[(0 >>> 1) % N] = 0L;
                for (i17 = 3; 122 > i17; ++i17) {
                    iArr3[i17] = i17;
                    f1 += (((i17 * Test0705.fFld) + Test0705.instanceCount) - Test0705.instanceCount);
                }
            }
            catch (ArithmeticException exc4) {
                i19 |= Test0705.sFld;
            }
            catch (UserDefinedExceptionTest exc5) {
                i1 = 10;
            }
        } else if (b1) {
            Test0705.instanceCount = i19;
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i15 + i16 + i17 + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1))
            + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-5;
        int i20=58779;
        int i21=6;
        int i22=-63554;
        int i23=-9;
        int i24=-10;
        int[] iArr =new int[N];
        float f=113.621F;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, -125);
        FuzzerUtils.init(sArr, (short)-18768);

        iArr[(i >>> 1) % N] += iArr[(-35 >>> 1) % N];
        sArr[(i >>> 1) % N] >>= (short)((-Math.abs(i)) + ((i + f) - (iArr[(i >>> 1) % N]++)));
        i = Integer.reverseBytes(iMeth(i, f));
        i20 = 209;
        do {
            i += (((i20 * Test0705.instanceCount) + i20) - i20);
            if (Test0705.bFld) continue;
            Test0705.byFld <<= (byte) i20;
        } while ((i20 -= 3) > 0);
        i21 = 215;
        do {
            try {
                i = (-37088 / i21);
                i = (i20 % 168);
                i = (i20 / 55);
            } catch (ArithmeticException a_e) {}
            Test0705.instanceCount = i20;
            Test0705.fFld = i20;
            if (Test0705.bFld) break;
        } while (--i21 > 0);
        iArr[(i >>> 1) % N] >>>= -19208;
        fArrFld[(i20 >>> 1) % N] = 20254;
        i <<= i20;
        i22 = 1;
        do {
            iArr[i22 - 1] = i20;
            i += (int)(-4098140677L + (i22 * i22));
            f -= i;
            i += (i22 ^ (long)fFld1);
            Test0705.dFld = i;
            Test0705.byArrFld[i22] &= (byte) i23;
            i24 = 1;
            do {
                i *= (int) Test0705.instanceCount;
                i <<= (int) Test0705.instanceCount;
                Test0705.dFld += i23;
                Test0705.instanceCount -= i20;
                i23 += i;
            } while (++i24 < 81);
            Test0705.sFld = (short) i22;
        } while (++i22 < 312);
        Test0705.instanceCount = i;

        FuzzerUtils.out.println("i f i20 = " + i + "," + Float.floatToIntBits(f) + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 iArr sArr = " + i24 + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0705.instanceCount Test0705.byFld Test0705.fFld = " + Test0705.instanceCount + "," + Test0705.byFld +
                "," + Float.floatToIntBits(Test0705.fFld));
        FuzzerUtils.out.println("Test0705.sFld Test0705.bFld fFld1 = " + Test0705.sFld + "," + (Test0705.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(fFld1));
        FuzzerUtils.out.println("Test0705.dFld fArrFld Test0705.byArrFld = " + Double.doubleToLongBits(Test0705.dFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," + FuzzerUtils.checkSum(Test0705.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0705 _instance = new Test0705();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
