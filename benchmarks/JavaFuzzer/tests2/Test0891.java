// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0891 {

    public static final int N = 400;

    public static long instanceCount=-27290L;
    public float fFld=0.840F;
    public double dFld=0.122787;
    public static byte byFld=-43;
    public static boolean bFld=false;
    public static float fFld1=0.732F;
    public volatile int[] iArrFld =new int[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0891.bArrFld, true);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i) {

        double d=0.91216;

        Test0891.instanceCount |= (long) (-(i + (d -= i)));
        vSmallMeth_check_sum += i + Double.doubleToLongBits(d);
    }

    public static void vMeth(long l, short s1) {

        long l1=-44798233142560231L;
        int i10=13;
        int i11=1;
        int i12=-164;
        int i13=50970;
        int i14=194;
        int[] iArr =new int[N];
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)1700);
        FuzzerUtils.init(iArr, -68);

        l1 = 146;
        do {
            Test0891.bFld = Test0891.bFld;
            Test0891.bArrFld[(int) (l1 - 1)] = Test0891.bFld;
            i10 += (1 + (l1 * l1));
            i10 += (int)(l1 * l1);
            for (i11 = 1; i11 < 11; i11++) {
                Test0891.fFld1 = i11;
                for (i13 = 1; 2 > i13; ++i13) {
                    sArr[i11 + 1] += (short)i13;
                    Test0891.instanceCount <<= i11;
                    switch (((i13 % 4) * 5) + 99) {
                    case 117:
                    case 118:
                        iArr[i11 + 1] += s1;
                        if (Test0891.bFld) break;
                        l -= (long) Test0891.fFld1;
                        break;
                    case 106:
                        i14 &= i13;
                        break;
                    case 100:
                    default:
                        i12 -= i11;
                    }
                }
            }
        } while (--l1 > 0);
        vMeth_check_sum += l + s1 + l1 + i10 + i11 + i12 + i13 + i14 + FuzzerUtils.checkSum(sArr) +
            FuzzerUtils.checkSum(iArr);
    }

    public int iMeth1(short s, int i8, int i9) {

        long l2=-1968041097L;
        int i15=4, i16=5, i17=18367, i18=38712, i19=47116, i20=197, i21=-37368, i22=-35612;
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(dArr, 2.22841);

        vMeth(Test0891.instanceCount, (short) (19089));
        dArr[(-135 >>> 1) % N][(i8 >>> 1) % N] *= Test0891.instanceCount;
        i8 <<= i8;
        for (l2 = 18; 365 > l2; ++l2) {
            i15 ^= i15;
            i8 = -12;
        }
        for (i16 = 266; i16 > 8; --i16) {
            i18 = 1;
            do {
                i15 -= Test0891.byFld;
                fFld -= l2;
            } while ((i18 += 3) < 6);
            for (i19 = 1; 6 > i19; ++i19) {
                Test0891.instanceCount += (i19 * i19);
            }
            for (i21 = 1; i21 < 6; ++i21) {
                i20 &= (int)-12L;
                i20 -= (int) Test0891.fFld1;
            }
        }
        long meth_res = s + i8 + i9 + l2 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth() {

        int i5=6, i6=4150, i7=-154, i23=-8, i24=241, i25=20187, i26=6, i27=-9, i28=-4;
        long[] lArr =new long[N];
        float[] fArr1 =new float[N];

        FuzzerUtils.init(lArr, 92L);
        FuzzerUtils.init(fArr1, -3.619F);

        lArr[(i5 >>> 1) % N] = (long)(((--fArr1[(0 >>> 1) % N]) * (++i5)) + (-(i5 + i5)));
        dFld /= ((long)(Math.abs((float)(i5 - (-dFld)))) | 1);
        for (i6 = 10; i6 < 180; ++i6) {
            Test0891.instanceCount += i6;
        }
        i7 <<= ((iMeth1((short)(6311), 10840, i7) + -176) + 10);
        i23 = 1;
        while (++i23 < 390) {
            Test0891.instanceCount += (i23 * i23);
            for (i24 = i23; i24 < 4; ++i24) {
                fFld = i26;
                Test0891.bFld = Test0891.bFld;
                for (i27 = i24; i27 < 1; i27++) {
                    Test0891.bFld = Test0891.bFld;
                    i28 = (int) Test0891.instanceCount;
                    i7 = i24;
                    i7 *= -48214;
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i23 + i24 + i25 + i26 + i27 + i28 + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i1=-72, i2=-115, i3=134, i4=12760, i29=6901, i30=51149, i31=215, i32=63305, i33=96;
        double d1=0.127814;
        float[] fArr =new float[N];
        byte[] byArr =new byte[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(fArr, 8.362F);
        FuzzerUtils.init(byArr, (byte)105);
        FuzzerUtils.init(lArr1, -82L);

        for (int smallinvoc=0; smallinvoc<922; smallinvoc++) vSmallMeth(-i1);
        for (i2 = 369; i2 > 19; i2--) {
            for (d1 = i2; d1 < 72; ++d1) {
                i4 -= (int)((fFld--) - (dFld += (fArr[i2 - 1]++)));
                vSmallMeth(iArrFld[(int)(d1)]--);
                Test0891.byFld += (byte) -46870901203492549L;
                Test0891.instanceCount <<= i2;
                vSmallMeth((int) (((Test0891.instanceCount = 59218) + iMeth()) + i3));
                fFld += (float) (((d1 * Test0891.instanceCount) + i1) - i3);
                i29 = i1;
                i3 = (int) Test0891.instanceCount;
            }
            byArr[i2] -= (byte)dFld;
            for (i30 = 72; i30 > 3; i30 -= 2) {
                lArr1[i30 - 1] = Test0891.instanceCount;
                i1 += (((i30 * Test0891.instanceCount) + i30) - i30);
                i1 >>= i1;
                i31 = i2;
                if (Test0891.bFld) continue;
                i31 <<= i4;
                i31 += (i30 * i31);
            }
            Test0891.bArrFld[i2 - 1] = Test0891.bFld;
            Test0891.byFld = (byte) Test0891.instanceCount;
            i31 -= -46;
            i4 -= i31;
            iArrFld[i2] = (int) Test0891.instanceCount;
            fFld += (i2 * i30);
            iArrFld[i2 - 1] = i29;
        }
        for (i32 = 2; i32 < 257; ++i32) {
            lArr1[i32 + 1] = Test0891.instanceCount;
            Test0891.instanceCount += (long) dFld;
        }

        FuzzerUtils.out.println("i1 i2 i3 = " + i1 + "," + i2 + "," + i3);
        FuzzerUtils.out.println("d1 i4 i29 = " + Double.doubleToLongBits(d1) + "," + i4 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 fArr byArr = " + i33 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0891.instanceCount fFld dFld = " + Test0891.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0891.byFld Test0891.bFld Test0891.fFld1 = " + Test0891.byFld + "," + (Test0891.bFld ? 1 : 0) + "," +
                Float.floatToIntBits(Test0891.fFld1));
        FuzzerUtils.out.println("iArrFld Test0891.bArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0891.bArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0891 _instance = new Test0891();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
