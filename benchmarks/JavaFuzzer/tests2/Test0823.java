// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0823 {

    public static final int N = 400;

    public static long instanceCount=8L;
    public byte byFld=-73;
    public float fFld=-84.156F;
    public boolean bFld=false;
    public static volatile short sFld=-31390;
    public static double[] dArrFld =new double[N];
    public static long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0823.dArrFld, 0.2760);
        FuzzerUtils.init(Test0823.lArrFld, -14L);
        FuzzerUtils.init(Test0823.iArrFld, -1);
        FuzzerUtils.init(Test0823.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i2) {

        byte by=-43;

        by >>>= (byte)-1;
        Test0823.lArrFld[(i2 >>> 1) % N] += i2;
        i2 -= (int) Test0823.instanceCount;
        by = (byte)i2;
        long meth_res = i2 + by;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(float f, double d, long l) {

        int i3=129, i4=59757, i5=10, i6=-13;
        long l1=-163L;

        Test0823.instanceCount = iMeth1(-45942);
        Test0823.iArrFld[(i3 >>> 1) % N] = i3;
        for (i4 = 10; 263 > i4; i4++) {
            l += i4;
            i5 = (int)l;
            byFld += (byte)i4;
            Test0823.dArrFld[i4 + 1] = f;
            l1 = 1;
            do {
                i5 = i4;
                Test0823.lArrFld[i4 - 1] %= (i6 | 1);
                Test0823.instanceCount += l1;
                Test0823.iArrFld[i4] = 0;
                Test0823.instanceCount <<= Test0823.instanceCount;
                l >>= Test0823.instanceCount;
                f -= l;
            } while (++l1 < 6);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Double.doubleToLongBits(d) + l + i3 + i4 + i5 + l1 + i6;
    }

    public int iMeth() {

        double d1=41.50458;
        int i7=5, i8=11, i9=-17, i10=6, i11=-11454, i12=119;
        short s=1023;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, true);

        vMeth(fFld, d1, Test0823.instanceCount);
        for (i7 = 226; 3 < i7; i7--) {
            for (i9 = 1; i9 < 7; i9++) {
                s = (short)i7;
                try {
                    i8 = (-116 % i7);
                    i10 = (609691020 / i9);
                    Test0823.iArrFld[i7] = (i7 / 54615);
                } catch (ArithmeticException a_e) {}
                fFld = i7;
                i10 = (int)143L;
                for (i11 = 1; i11 < 2; i11++) {
                    i10 = (int)fFld;
                    if (bFld) {
                        bArr[i7] = bFld;
                        fFld += i11;
                        i10 = -10;
                    } else {
                        i12 += (((i11 * i11) + Test0823.instanceCount) - Test0823.instanceCount);
                        i12 = 8;
                    }
                }
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10 + s + i11 + i12 + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=204, i1=103, i13=13, i14=-10, i15=-13063, i16=-65172, i17=35572, i18=36672, i19=-6, i20=3;
        double d2=-70.110965;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -2.877F);

        for (i = 139; i > 5; i--) {
            Test0823.dArrFld[i] -= ((iMeth() + i) * Test0823.instanceCount);
            for (i13 = 8; i13 < 187; i13++) {
                for (i15 = 1; i15 < 2; i15++) {
                    i17 |= i14;
                    byFld -= byFld;
                    i14 >>>= (int) Test0823.instanceCount;
                    Test0823.instanceCount = i15;
                }
                for (i18 = 1; i18 < 2; ++i18) {
                    switch (((i18 % 8) * 5) + 106) {
                    case 145:
                        fArr[i18] += i14;
                        break;
                    case 138:
                        bFld = bFld;
                        i1 *= -2;
                        i16 += (i18 | i17);
                        Test0823.sFld += (short) (i18 ^ i20);
                        break;
                    case 135:
                    case 146:
                        fFld -= i15;
                        i1 >>= -5372;
                        if (false) {
                            switch ((i13 % 5) + 63) {
                            case 63:
                                Test0823.instanceCount += i18;
                                d2 -= Test0823.instanceCount;
                                break;
                            case 64:
                                fFld = i19;
                                break;
                            case 65:
                                Test0823.sFld += (short) i18;
                                i1 *= (int)fFld;
                                break;
                            case 66:
                                Test0823.iArrFld[i18] -= i20;
                                Test0823.instanceCount *= (long) fFld;
                                break;
                            case 67:
                                i1 += (10 + (i18 * i18));
                                Test0823.instanceCount += (((i18 * i16) + i) - Test0823.instanceCount);
                                break;
                            }
                            Test0823.bArrFld[i - 1] = bFld;
                            Test0823.instanceCount += Test0823.sFld;
                        } else {
                            Test0823.iArrFld[i13] += (int) 1.280F;
                        }
                        break;
                    case 136:
                        Test0823.instanceCount -= i15;
                        break;
                    case 141:
                        Test0823.iArrFld[i13 - 1] -= i14;
                        break;
                    case 114:
                        i16 <<= (int) Test0823.instanceCount;
                    case 139:
                        i17 -= i;
                        break;
                    default:
                        Test0823.lArrFld[i13 + 1] &= -1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i13 = " + i + "," + i1 + "," + i13);
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 d2 fArr = " + i20 + "," + Double.doubleToLongBits(d2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0823.instanceCount byFld fFld = " + Test0823.instanceCount + "," + byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("bFld Test0823.sFld Test0823.dArrFld = " + (bFld ? 1 : 0) + "," + Test0823.sFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0823.dArrFld)));
        FuzzerUtils.out.println("Test0823.lArrFld Test0823.iArrFld Test0823.bArrFld = " + FuzzerUtils.checkSum(Test0823.lArrFld) + ","
                + FuzzerUtils.checkSum(Test0823.iArrFld) + "," + FuzzerUtils.checkSum(Test0823.bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0823 _instance = new Test0823();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
