// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0018 {

    public static final int N = 400;

    public static long instanceCount=366051251L;
    public float fFld=1.158F;
    public long lFld=-13L;
    public int iFld=171;
    public int[] iArrFld =new int[N];
    public static double[][] dArrFld =new double[N][N];

    static {
        FuzzerUtils.init(Test0018.dArrFld, -68.33062);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1() {

        int i10=-45220;
        int i11=11;
        int i12=-8;
        int i13=-5377;
        int i14=-17891;
        int[] iArr =new int[N];
        float f1=-1.456F;
        float[] fArr1 =new float[N];
        byte by1=-67;
        double d2=-105.5302;
        boolean b=true;

        FuzzerUtils.init(iArr, 141);
        FuzzerUtils.init(fArr1, 48.147F);

        i10 -= i10;
        f1 = by1;
        for (i11 = 11; i11 < 302; i11++) {
            d2 = f1;
            if (false) continue;
        }
        i13 = 1;
        do {
            try {
                i10 = (i11 % i12);
                i12 = (57724 / i12);
                iArr[i13] = (i10 / 14349);
            } catch (ArithmeticException a_e) {}
            i14 /= (int)(i13 | 1);
            if (b) {
                i14 <<= i12;
                Test0018.instanceCount += (long) f1;
                iArr = FuzzerUtils.int1array(N, (int)230);
            }
        } while (++i13 < 140);
        d2 *= i11;
        i10 += (int) Test0018.instanceCount;
        f1 += i10;
        long meth_res = i10 + Float.floatToIntBits(f1) + by1 + i11 + i12 + Double.doubleToLongBits(d2) + i13 + i14 + (b
            ? 1 : 0) + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i8, double d1) {

        int i9=58279;
        int i15=10;
        int i16=97;
        int[] iArr1 =new int[N];
        float f=67.13F;
        float[][] fArr =new float[N][N];
        short s=-6376;
        byte by2=-106;

        FuzzerUtils.init(fArr, 0.470F);
        FuzzerUtils.init(iArr1, 146);

        i9 = 1;
        while (++i9 < 255) {
            i8 = Math.min(i8--, (int) ((i8--) * (Test0018.instanceCount - Test0018.instanceCount)));
            fArr[i9][i9 + 1] -= f;
            i8 += (iMeth1() * i9);
            Test0018.instanceCount = -1;
        }
        i8 -= i8;
        iArr1[(i8 >>> 1) % N] *= (int)d1;
        d1 -= i9;
        for (i15 = 2; i15 < 141; ++i15) {
            Test0018.instanceCount = i9;
            s *= by2;
        }
        i8 <<= -12;
        long meth_res = i8 + Double.doubleToLongBits(d1) + i9 + Float.floatToIntBits(f) + i15 + i16 + s + by2 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5) {

        int i6=1, i7=-70, i17=6, i18=28885, i19=2935, i20=240;
        double d3=-2.60960;
        float f3=26.356F;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)30611);

        for (i6 = 1; i6 < 364; i6++) {
            i5 = (iMeth(i5, d3) - i6);
        }
        i7 *= i7;
        f3 -= -107;
        Test0018.dArrFld[(i7 >>> 1) % N][(i7 >>> 1) % N] -= i6;
        d3 -= -4015853890745453458L;
        f3 = i6;
        i7 = i5;
        i5 -= i6;
        for (i17 = 188; i17 > 10; i17--) {
            Test0018.instanceCount -= (long) f3;
            Test0018.instanceCount = Test0018.instanceCount;
            for (i19 = 1; 9 > i19; ++i19) {
                sArr[i19 + 1] = (short)i20;
                i5 = 1;
            }
        }
        long meth_res = i5 + i6 + i7 + Double.doubleToLongBits(d3) + Float.floatToIntBits(f3) + i17 + i18 + i19 + i20 +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-11375, i1=-28327, i2=-32012, i3=102, i4=231, i21=34688, i22=-6, i23=172;
        double d=-2.21587;
        byte by=-38;
        float f4=-30.649F;
        float[] fArr2 =new float[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -9L);
        FuzzerUtils.init(fArr2, 53.576F);

        for (i = 16; i < 274; ++i) {
            if (true) {
                i1 >>= (int)((lArr[i - 1] <<= (--iArrFld[i])) - i);
                i1 -= (int)(((i * i) - Math.abs(i)) + (--d));
                for (i2 = 3; i2 < 97; ++i2) {
                    i4 = 1;
                    do {
                        if (-33728 == (-(i1 = i))) break;
                        by >>= (byte)(((i1 / (i1 | 1)) * (i2 * i)) ^ lMeth(i));
                        Test0018.dArrFld[i4 + 1][i4] -= i3;
                    } while (++i4 < 2);
                    i1 += (((i2 * Test0018.instanceCount) + i2) - fFld);
                    Test0018.instanceCount -= by;
                    i1 += (int)lFld;
                    for (i21 = 1; i21 < 2; i21++) {
                        iFld = (int)d;
                        lArr[i21 - 1] += -175;
                    }
                    for (f4 = 1; f4 < 2; ++f4) {
                        long l=4603994824277117841L;
                        switch (((8 >>> 1) % 4) + 13) {
                        case 13:
                            i22 -= -12;
                            try {
                                i3 = (i22 % i23);
                                i22 = (-28536 % i22);
                                i22 = (224 % i23);
                            } catch (ArithmeticException a_e) {}
                            i3 += i21;
                            break;
                        case 14:
                            i22 = 10;
                            lFld &= 11L;
                            break;
                        case 15:
                            switch ((((i21 >>> 1) % 2) * 5) + 89) {
                            case 98:
                                lFld += Test0018.instanceCount;
                                break;
                            case 96:
                                i1 += (int)f4;
                                break;
                            default:
                                i3 = (int) Test0018.instanceCount;
                                fArr2[i] = l;
                                i22 = 152;
                            }
                            i23 = (int)fFld;
                            i3 += (int)f4;
                            break;
                        case 16:
                            Test0018.instanceCount = i;
                        }
                    }
                }
            } else {
                iArrFld[i] = i23;
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("by i21 i22 = " + by + "," + i21 + "," + i22);
        FuzzerUtils.out.println("f4 i23 lArr = " + Float.floatToIntBits(f4) + "," + i23 + "," +
            FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)));

        FuzzerUtils.out.println("Test0018.instanceCount fFld lFld = " + Test0018.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + lFld);
        FuzzerUtils.out.println("iFld iArrFld Test0018.dArrFld = " + iFld + "," + FuzzerUtils.checkSum(iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0018.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0018 _instance = new Test0018();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
