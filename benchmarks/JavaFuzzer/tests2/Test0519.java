// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:36 2023
public class Test0519 {

    public static final int N = 400;

    public static long instanceCount=227L;
    public static byte byFld=-34;
    public static volatile int iFld=-40573;
    public short sFld=5313;
    public static float fFld=2.128F;
    public static int[][] iArrFld =new int[N][N];
    public static volatile float[][] fArrFld =new float[N][N];

    static {
        FuzzerUtils.init(Test0519.iArrFld, -3);
        FuzzerUtils.init(Test0519.fArrFld, -93.811F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4) {

        int i5=51;
        int i6=1365;
        int i7=181;
        int i8=-10;
        int i9=138;
        int[] iArr =new int[N];
        double d=-69.94569;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr, 16899);
        FuzzerUtils.init(lArr, 14L);

        for (i5 = 12; i5 < 376; i5++) {
            for (i7 = 1; i7 < 5; ++i7) {
                i9 = 1;
                do {
                    i4 += i5;
                    Test0519.instanceCount -= i7;
                    Test0519.instanceCount += i5;
                    Test0519.instanceCount += i9;
                    iArr[i7 - 1] -= i7;
                    Test0519.instanceCount *= (long) -2.411F;
                    d += 4;
                    Test0519.instanceCount *= Test0519.instanceCount;
                } while (++i9 < 2);
                Test0519.instanceCount += i7;
                iArr[i5] <<= (int) Test0519.instanceCount;
                Test0519.iArrFld = Test0519.iArrFld;
                lArr[i5] = (long)-2.858F;
            }
        }
        vMeth2_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(long l) {

        int i2=-5452, i3=-211;
        double d1=2.99263;
        long l1=6371834665885293583L;

        for (i2 = 372; i2 > 11; --i2) {
            vMeth2(1);
            d1 *= Test0519.instanceCount;
            i3 += (((i2 * i3) + Test0519.instanceCount) - i2);
            i3 += (31699 + (i2 * i2));
        }
        l *= l;
        l1 = 1;
        do {
            i3 -= i2;
        } while (++l1 < 271);
        vMeth1_check_sum += l + i2 + i3 + Double.doubleToLongBits(d1) + l1;
    }

    public static void vMeth() {

        int i=44, i1=-5, i10=-5946, i11=47929;
        float f=47.570F;
        short s=-7402;

        for (i = 14; i < 276; ++i) {
            vMeth1(Test0519.instanceCount);
            f -= 3;
            i1 = (int) Test0519.instanceCount;
            Test0519.iArrFld[i + 1][i] -= s;
            Test0519.byFld -= (byte) i1;
            i1 -= (int) Test0519.instanceCount;
            for (i10 = 1; 6 > i10; i10++) {
                i1 -= (int) Test0519.instanceCount;
                f -= i11;
                i11 *= i1;
                Test0519.fArrFld[i10 + 1][i10] = i1;
                i11 *= 20150;
                Test0519.instanceCount -= Test0519.instanceCount;
                i11 += (int) Test0519.instanceCount;
            }
        }
        vMeth_check_sum += i + i1 + Float.floatToIntBits(f) + s + i10 + i11;
    }

    public void mainTest(String[] strArr1) {

        int i12=-33;
        int i13=13;
        int i15=-73;
        int i16=0;
        int i17=54402;
        int i18=7;
        int i19=8;
        int i20=3715;
        int i21=-5;
        int i22=10;
        int[] iArr1 =new int[N];
        boolean b=true;
        double d2=-2.58586;
        double d3=1.99985;
        double d4=113.5946;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr1, -7);
        FuzzerUtils.init(dArr, -1.125771);

        vMeth();
        i12 -= (int) Test0519.instanceCount;
        b = b;
        for (d2 = 13; d2 < 216; d2++) {
            Test0519.iArrFld[(int) (d2)][(int) (d2 + 1)] -= Test0519.iFld;
            Test0519.iFld >>= Test0519.iFld;
            for (i15 = 7; i15 < 124; ++i15) {
                if (b) continue;
                for (i17 = 1; 2 > i17; ++i17) {
                    Test0519.instanceCount += (-58668 + (i17 * i17));
                    try {
                        Test0519.iFld = (i13 / Test0519.iFld);
                        i13 = (Test0519.iArrFld[(int) (d2)][i17 + 1] / -66);
                        i16 = (i16 / i12);
                    } catch (ArithmeticException a_e) {}
                }
                for (i19 = 1; i19 < 2; ++i19) {
                    Test0519.instanceCount += (i19 * i19);
                    i20 %= (int)(i18 | 1);
                    Test0519.iFld *= sFld;
                    Test0519.iFld += (((i19 * i17) + i12) - i15);
                }
                for (i21 = 1; i21 < 2; ++i21) {
                    dArr[i21 + 1] *= Test0519.instanceCount;
                    d3 += Test0519.fFld;
                    i22 = i21;
                    Test0519.iArrFld[i21][i21 - 1] *= i21;
                    b = b;
                    switch ((((i17 >>> 1) % 7) * 5) + 27) {
                    case 42:
                        Test0519.instanceCount -= Test0519.iFld;
                        i16 += i17;
                        i20 = (int) Test0519.instanceCount;
                        break;
                    case 33:
                        if (b) {
                            dArr[i15 - 1] += i12;
                            Test0519.fFld -= Test0519.instanceCount;
                        } else if (false) {
                            i20 = (int)d4;
                        }
                        break;
                    case 60:
                        i22 += (i21 + Test0519.instanceCount);
                        break;
                    case 41:
                        Test0519.iFld *= Test0519.iFld;
                    case 51:
                        if (b) continue;
                        break;
                    case 43:
                        i12 *= (int)d4;
                        break;
                    case 45:
                        Test0519.byFld -= (byte) -2;
                    default:
                        d3 += i21;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i12 b d2 = " + i12 + "," + (b ? 1 : 0) + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i13 i15 i16 = " + i13 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d3 d4 iArr1 = " + Double.doubleToLongBits(d3) + "," + Double.doubleToLongBits(d4) +
            "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0519.instanceCount Test0519.byFld Test0519.iFld = " + Test0519.instanceCount + "," + Test0519.byFld +
                "," + Test0519.iFld);
        FuzzerUtils.out.println("sFld Test0519.fFld Test0519.iArrFld = " + sFld + "," + Float.floatToIntBits(Test0519.fFld) + "," +
                FuzzerUtils.checkSum(Test0519.iArrFld));
        FuzzerUtils.out.println("Test0519.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0519.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0519 _instance = new Test0519();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
