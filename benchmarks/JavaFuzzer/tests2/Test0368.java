// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:29 2023
public class Test0368 {

    public static final int N = 400;

    public static volatile long instanceCount=-6L;
    public static int iFld=22054;
    public static short sFld=12424;
    public static byte byFld=20;
    public volatile short[] sArrFld =new short[N];

    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    public static long lMeth1(int i9) {

        int i10=208;
        int i11=-21588;
        int i12=63704;
        int i13=9202;
        int i14=238;
        int i15=-119;
        int[] iArr1 =new int[N];
        int[][] iArr2 =new int[N][N];
        float f=0.514F;
        long[] lArr =new long[N];
        long[][] lArr1 =new long[N][N];
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(lArr, -53730L);
        FuzzerUtils.init(iArr2, 73);
        FuzzerUtils.init(lArr1, 13L);
        FuzzerUtils.init(dArr, 1.49270);

        iArr1[(Test0368.iFld >>> 1) % N] = Test0368.iFld;
        Test0368.iFld = (int) Test0368.instanceCount;
        for (i10 = 15; i10 < 324; ++i10) {
            Test0368.sFld *= (short) i9;
            Test0368.iFld = 52723;
            switch (((i10 >>> 1) % 4) + 60) {
            case 60:
            case 61:
                for (i12 = 5; i12 > 1; i12 -= 2) {
                    for (i14 = 1; i14 < 3; i14++) {
                        switch (((i10 % 6) * 5) + 30) {
                        case 47:
                            Test0368.iFld += Test0368.iFld;
                            i9 <<= (int) Test0368.instanceCount;
                        case 49:
                            switch ((i10 % 4) + 85) {
                            case 85:
                                lArr[i12 - 1] = i14;
                                try {
                                    i15 = (i14 % -1972751942);
                                    iArr1[i14] = (i11 / -59807);
                                    i13 = (i15 % 116);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 86:
                                Test0368.instanceCount += i14;
                                break;
                            case 87:
                                i9 >>>= i14;
                                break;
                            case 88:
                                i13 <<= Test0368.iFld;
                                break;
                            default:
                                iArr2 = iArr2;
                            }
                            break;
                        case 34:
                            i11 += (((i14 * Test0368.sFld) + i13) - Test0368.instanceCount);
                            break;
                        case 60:
                            Test0368.instanceCount = Test0368.instanceCount;
                        case 53:
                            i11 *= (int)f;
                            break;
                        case 37:
                            Test0368.iFld ^= (int) Test0368.instanceCount;
                            break;
                        default:
                            lArr1[i14][i14 - 1] += Test0368.sFld;
                        }
                    }
                }
            case 62:
                dArr[i10 + 1] *= Test0368.iFld;
                break;
            case 63:
                f += (i10 + Test0368.iFld);
            default:
                if (i14 != 0) {
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1)
            + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth1_check_sum += meth_res;
        return (long)meth_res;
    }

    public static long lMeth(int i6, int i7, int i8) {


        i7 -= (int)(-lMeth1(6));
        long meth_res = i6 + i7 + i8;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static float fMeth(int i) {

        int i1=-36291;
        int i2=-109;
        int i3=23200;
        int i4=90;
        int i5=-33902;
        int i16=48;
        int[] iArr =new int[N];
        double d=-38.44924;
        long l=-3787227148L;
        boolean b=false;
        float f1=7.751F;

        FuzzerUtils.init(iArr, 203);

        Test0368.iFld -= (int) (((-60244 + (Test0368.sFld ^ Test0368.instanceCount)) * (5 * (Test0368.iFld--))) +
                (Test0368.instanceCount++));
        iArr = (iArr = iArr);
        for (i1 = 1; 246 > i1; i1++) {
            d %= 69.120873;
            i3 = 1;
            do {
                for (i4 = 1; i4 < 1; i4++) {
                    Test0368.iFld -= (int) lMeth(Test0368.iFld, 56, i3);
                    iArr[i1 - 1] = i2;
                    try {
                        i2 = (iArr[i3] % 111);
                        i2 = (i2 / -10897);
                        i = (Test0368.iFld / 231);
                    } catch (ArithmeticException a_e) {}
                    i = i5;
                    try {
                        i = (i4 % 586299377);
                        i2 = (i1 / i3);
                        i = (34794 % i4);
                    } catch (ArithmeticException a_e) {}
                    i5 += (i4 + i1);
                }
                for (l = 1; l < 1; l++) {
                    if (b) continue;
                    f1 = -161;
                }
            } while (++i3 < 7);
        }
        long meth_res = i + i1 + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + l + i16 + (b ? 1 : 0) +
            Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d1=21.55543;
        int i17=-95;
        int i18=48784;
        int i19=251;
        int i20=2;
        int i21=-89;
        int i22=-252;
        int[] iArr3 =new int[N];
        float f2=74.893F;
        boolean b1=true;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(lArr2, -10L);
        FuzzerUtils.init(iArr3, -2);

        if (fMeth(Test0368.iFld) != d1) {
            Test0368.iFld = (int) ((Test0368.iFld++) - (Test0368.instanceCount - (Test0368.iFld - Test0368.iFld)));
        }
        Test0368.iFld = (int) d1;
        lArr2[(-13 >>> 1) % N] -= Test0368.iFld;
        for (i17 = 7; 132 > i17; i17++) {
            iArr3[i17 + 1] = -3;
            Test0368.iFld += (int) 7635907263267454004L;
            sArrFld[i17 - 1] >>= (short)-52;
            for (i19 = i17; i19 < 201; i19 += 3) {
                Test0368.instanceCount += Test0368.instanceCount;
                for (i21 = 1; i21 < 1; ++i21) {
                    i18 -= i18;
                    i18 <<= i19;
                    i18 >>= 242;
                    iArr3[i21] = (int) Test0368.instanceCount;
                    switch ((i21 % 9) + 84) {
                    case 84:
                        iArr3[i21 - 1] -= (int)d1;
                        i20 = i17;
                        break;
                    case 85:
                        switch ((i17 % 7) + 56) {
                        case 56:
                            Test0368.iFld += (i21 | (long) f2);
                            Test0368.instanceCount = Test0368.sFld;
                            Test0368.sFld += (short) i21;
                            break;
                        case 57:
                            i20 += i21;
                            f2 *= 245;
                            break;
                        case 58:
                            try {
                                i22 = (i20 % -10909);
                                i22 = (i17 / -38808);
                                i22 = (-334829601 / i18);
                            } catch (ArithmeticException a_e) {}
                            iArr3[i21] += (int) Test0368.instanceCount;
                            switch (((i21 % 5) * 5) + 124) {
                            case 130:
                                d1 *= Test0368.byFld;
                                Test0368.instanceCount += (i21 + i22);
                                f2 *= i20;
                                break;
                            case 141:
                                i22 >>= i20;
                                break;
                            case 148:
                                i22 = (int) Test0368.instanceCount;
                                break;
                            case 144:
                                iArr3[i17 - 1] -= i22;
                                break;
                            case 129:
                                i22 |= Test0368.iFld;
                                break;
                            default:
                                i18 >>>= (int) Test0368.instanceCount;
                            }
                        case 59:
                            Test0368.instanceCount = i20;
                        case 60:
                            try {
                                iArr3[i21] = (i18 / i18);
                                iArr3[i19] = (i20 % i19);
                                i18 = (i17 / i19);
                            } catch (ArithmeticException a_e) {}
                            break;
                        case 61:
                            Test0368.iFld += (int) -8L;
                            break;
                        case 62:
                        default:
                            i20 >>>= i18;
                        }
                    case 86:
                        iArr3[i19 + 1] -= i18;
                        break;
                    case 87:
                        try {
                            i22 = (i18 / Test0368.iFld);
                            i22 = (iArr3[i21 - 1] % Test0368.iFld);
                            i18 = (i19 % i19);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 88:
                        Test0368.iFld = Test0368.iFld;
                        break;
                    case 89:
                        iArr3[i17] -= (int) Test0368.instanceCount;
                        break;
                    case 90:
                        iArr3[i17 + 1] += (int)f2;
                        break;
                    case 91:
                        lArr2[i21] -= i21;
                        break;
                    case 92:
                        b1 = b1;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("d1 i17 i18 = " + Double.doubleToLongBits(d1) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 f2 b1 = " + i22 + "," + Float.floatToIntBits(f2) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("lArr2 iArr3 = " + FuzzerUtils.checkSum(lArr2) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0368.instanceCount Test0368.iFld Test0368.sFld = " + Test0368.instanceCount + "," + Test0368.iFld +
                "," + Test0368.sFld);
        FuzzerUtils.out.println("Test0368.byFld sArrFld = " + Test0368.byFld + "," + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0368 _instance = new Test0368();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  lMeth ->  lMeth fMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
