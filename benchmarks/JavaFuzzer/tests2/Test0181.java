// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0181 {

    public static final int N = 400;

    public static long instanceCount=-177L;
    public static float fFld=1.133F;
    public static short sFld=-23936;
    public int[] iArrFld =new int[N];
    public volatile long[] lArrFld =new long[N];

    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth(int i4) {


        i4 *= (i4++);
        i4 = i4;
        long meth_res = i4;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth1() {

        int i6=-6;
        int i7=35995;
        int i8=-4;
        int i9=68;
        int i10=-118;
        int[] iArr2 =new int[N];
        byte by1=74;
        double d=124.10049;
        boolean b=true;

        FuzzerUtils.init(iArr2, -7);

        i6 = -7572;
        for (i7 = 292; i7 > 11; --i7) {
            switch ((i7 % 6) + 106) {
            case 106:
                Test0181.instanceCount <<= by1;
                switch ((i7 % 1) + 118) {
                case 118:
                    i8 -= i7;
                    for (d = 1; 6 > d; ++d) {
                        i10 = 1;
                        while (++i10 < 2) {
                            short s=-31018;
                            s -= (short)i9;
                            i6 -= i9;
                            Test0181.fFld *= 40646L;
                            i6 = 34471;
                            Test0181.instanceCount = i6;
                        }
                        Test0181.instanceCount *= i8;
                    }
                    b = b;
                    break;
                default:
                    Test0181.instanceCount += (((i7 * i7) + Test0181.instanceCount) - i6);
                }
            case 107:
                iArr2[i7 - 1] = i7;
                break;
            case 108:
                i8 += i10;
                break;
            case 109:
                i9 += i7;
                break;
            case 110:
                i9 <<= 5;
                break;
            case 111:
                iArr2[i7] >>= by1;
                break;
            }
        }
        long meth_res = i6 + i7 + i8 + by1 + Double.doubleToLongBits(d) + i9 + i10 + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i5) {

        byte by2=-8;
        int i11=-25786;
        int i12=181;
        int i13=-135;
        int i14=222;
        int i15=-15;
        int i16=47241;
        int[] iArr1 =new int[N];
        long[] lArr1 =new long[N];
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr1, -51588);
        FuzzerUtils.init(lArr1, 716541855L);
        FuzzerUtils.init(bArr, true);

        i5 = iArr1[(i5 >>> 1) % N];
        Test0181.fFld = iMeth1();
        by2 ^= (byte)14005;
        iArr1[(i5 >>> 1) % N] -= i5;
        for (i11 = 2; i11 < 210; ++i11) {
            switch ((i11 % 3) + 60) {
            case 60:
                Test0181.instanceCount *= i5;
                break;
            case 61:
                for (i13 = 1; i13 < 8; i13++) {
                    lArr1[i13] = -97;
                    for (i15 = 1; i15 < 2; i15++) {
                        iArr1[i13] *= i14;
                        Test0181.fFld += (((i15 * i12) + Test0181.fFld) - i5);
                        bArr = bArr;
                        i14 = -42;
                        i14 += (int) Test0181.instanceCount;
                    }
                }
            case 62:
                Test0181.fFld += Test0181.fFld;
            default:
                try {
                    i5 = (-43206 / i14);
                    i16 = (i11 / 1314259595);
                    i14 = (i15 / i15);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = i5 + by2 + i11 + i12 + i13 + i14 + i15 + i16 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public short sMeth(long l) {

        int i2=-5;
        int i3=-147;
        int[] iArr =new int[N];
        byte by=-36;
        long[] lArr =new long[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr, 2);
        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(dArr, 100.34751);

        Test0181.instanceCount += Test0181.instanceCount;
        iArr = (iArr = (iArr = iArr));
        for (i2 = 8; 164 > i2; i2++) {
            lArr[i2] -= (l++);
            if (((lArr[i2] + (l * i3)) + by) == iMeth((int)((105 * dArr[i2]) - l))) {
                iArr[i2 - 1] += (int) (Test0181.instanceCount += i3);
            } else {
                i3 += i2;
                i3 -= ((i3--) + (i3++));
                l += (iArr[i2 - 1] + i3);
                i3 = (int) (lMeth(i2) + Test0181.instanceCount);
            }
            i3 = i2;
            Test0181.sFld -= (short) i2;
            l >>= i3;
            i3 += (i2 - i2);
            l += (((i2 * i2) + i3) - i3);
        }
        long meth_res = l + i2 + i3 + by + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-131, i1=38384, i17=36240, i18=-227, i19=14, i20=-13, i21=-49777, i22=228, i23=-50, i24=46597, i25=-1;
        double d1=-42.57995;
        float f=73.837F;
        short s1=-15806;
        short[] sArr =new short[N];

        FuzzerUtils.init(sArr, (short)-9047);

        for (i = 6; 256 > i; ++i) {
            i1 += (int) (((i1--) + (-1 - (Test0181.instanceCount - Test0181.instanceCount))) - sMeth(Test0181.instanceCount));
            for (i17 = 4; 101 > i17; i17++) {
                i1 -= (int) Test0181.instanceCount;
                i19 = 1;
                while ((i19 += 2) < 2) {
                    Test0181.fFld += i19;
                    Test0181.instanceCount -= Test0181.instanceCount;
                    Test0181.instanceCount *= Test0181.instanceCount;
                    i18 -= i1;
                    i1 = (int)d1;
                    iArrFld[i19] += (int) Test0181.instanceCount;
                    lArrFld[i + 1] += i19;
                    lArrFld[i17 - 1] ^= i1;
                    lArrFld[i17] |= i1;
                }
            }
            Test0181.instanceCount += (i * i);
            d1 -= 31;
            i18 *= (int)f;
        }
        for (i20 = 12; i20 < 233; ++i20) {
            for (i22 = 6; 114 > i22; ++i22) {
                iArrFld[i22 - 1] = i22;
                Test0181.sFld += (short) (i22 ^ i17);
                for (i24 = 1; i24 < 2; ++i24) {
                    i18 <<= i17;
                    lArrFld[i20] = Test0181.instanceCount;
                    i21 >>= s1;
                    iArrFld = iArrFld;
                    i21 += (i24 * i24);
                    d1 -= i20;
                    sArr[i22 + 1] <<= (short) Test0181.instanceCount;
                }
            }
            i23 = i22;
        }

        FuzzerUtils.out.println("i i1 i17 = " + i + "," + i1 + "," + i17);
        FuzzerUtils.out.println("i18 i19 d1 = " + i18 + "," + i19 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("f i20 i21 = " + Float.floatToIntBits(f) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 s1 sArr = " + i25 + "," + s1 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0181.instanceCount Test0181.fFld Test0181.sFld = " + Test0181.instanceCount + "," +
                Float.floatToIntBits(Test0181.fFld) + "," + Test0181.sFld);
        FuzzerUtils.out.println("iArrFld lArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0181 _instance = new Test0181();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
