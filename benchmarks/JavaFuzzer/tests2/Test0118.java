// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0118 {

    public static final int N = 400;

    public static long instanceCount=61143L;
    public static volatile short sFld=-6737;
    public static byte byFld=-104;
    public float fFld=0.769F;
    public long[] lArrFld =new long[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i7, float f1, int i8) {

        int i9=14, i10=202, i11=-54096, i12=1;
        boolean b=true;
        byte by=-32;
        short s=-13788;
        long[] lArr =new long[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(lArr, 44543L);
        FuzzerUtils.init(fArr, -17.705F);

        i7 += i7;
        for (i9 = 3; i9 < 252; i9++) {
            Test0118.instanceCount += i10;
            if (b) break;
            i7 = i8;
            i7 += i9;
            i8 += i7;
            by += (byte)i9;
            lArr[i9] = Test0118.instanceCount;
        }
        fArr = fArr;
        for (i11 = 3; i11 < 135; i11++) {
            lArr[i11] *= s;
            by = (byte)i12;
            f1 -= i11;
            if (b) continue;
        }
        long meth_res = i7 + Float.floatToIntBits(f1) + i8 + i9 + i10 + (b ? 1 : 0) + by + i11 + i12 + s +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i6, double d) {

        float f2=113.888F;
        long l=3464762315L;
        int i13=49, i14=53068, i15=29084, i16=8;
        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, -2.124207);

        i6 -= (int) (((Test0118.instanceCount--) - (i6 = i6)) * Test0118.instanceCount);
        i6 = (int)lMeth(i6, f2, i6);
        for (l = 5; l < 232; ++l) {
            i13 += i6;
            i14 = 1;
            do {
                d -= -2341462135275503972L;
                try {
                    i6 = (8 / i6);
                    i6 = (-567672167 / i6);
                    i13 = (-2019347901 / i13);
                } catch (ArithmeticException a_e) {}
                i6 += (i14 * i14);
                Test0118.instanceCount <<= 7;
                for (i15 = 1; i15 < 1; i15 += 3) {
                    dArr[i14] += Test0118.instanceCount;
                    i13 *= i16;
                    i13 = (int) Test0118.instanceCount;
                    i13 |= -1;
                    i16 += (i15 * i15);
                }
            } while (++i14 < 7);
        }
        long meth_res = i6 + Double.doubleToLongBits(d) + Float.floatToIntBits(f2) + l + i13 + i14 + i15 + i16 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth() {

        int i1=-5;
        int i2=-7;
        int i3=21018;
        int i4=-24915;
        int i5=45;
        int i18=8;
        int[] iArr1 =new int[N];
        float f=0.437F;
        double d1=-66.18603;
        byte by1=86;
        short s1=11875;
        boolean b1=true;

        FuzzerUtils.init(iArr1, 113);

        for (i1 = 7; i1 < 122; i1++) {
            f += (i1 - i3);
            for (i4 = 1; i4 < 14; ++i4) {
                int i17=-145;
                switch (((i4 % 3) * 5) + 5) {
                case 12:
                    Test0118.instanceCount += (-212 + (i4 * i4));
                    if (i2 != 0) {
                        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 +
                            Double.doubleToLongBits(d1) + by1 + s1 + i18 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 6:
                case 7:
                    i3 *= ((--iArr1[i1 - 1]) / (Math.min(i3, iMeth(i3, d1)) | 1));
                    f += (((i4 * Test0118.instanceCount) + i17) - i2);
                    by1 = (byte)s1;
                    break;
                default:
                    i5 *= 64025;
                    try {
                        i17 = (13879 % iArr1[i1 + 1]);
                        i2 = (iArr1[i4 + 1] % iArr1[i1]);
                        i17 = (i4 % 78);
                    } catch (ArithmeticException a_e) {}
                    Test0118.instanceCount += (((i4 * i17) + i17) - i18);
                    if (b1) continue;
                }
                iArr1[i1] = -29807;
                i2 = i3;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + Double.doubleToLongBits(d1) + by1 + s1 +
            i18 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=-47637;
        int i19=253;
        int i20=-141;
        int i21=11;
        int i22=-34;
        int i23=-3;
        int i25=11;
        int i26=0;
        int i27=-6;
        int[] iArr =new int[N];
        float f3=7.688F, f4=-7.951F;
        double d2=-58.43886;
        long l1=-209648253L;
        boolean b2=true;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, 22892);
        FuzzerUtils.init(sArr, (short)-5896);

        iArr[(236 >>> 1) % N] >>= (int)lArrFld[(i >>> 1) % N];
        vMeth();
        for (i19 = 275; i19 > 11; i19 -= 3) {
            Test0118.sFld += (short) (((i19 * i20) + Test0118.instanceCount) - Test0118.instanceCount);
            for (f3 = 14; f3 < 285; f3++) {
                i = i22;
                Test0118.byFld += (byte) (((f3 * f3) + i) - i20);
                try {
                    iArr[(int)(f3 + 1)] = (iArr[i19 - 1] / 90);
                    i21 = (i19 % -4177);
                    i20 = (iArr[i19] / i);
                } catch (ArithmeticException a_e) {}
                i21 += (int)d2;
                for (l1 = 1; l1 < 2; ++l1) {
                    i = i19;
                    i22 += (int)l1;
                    d2 -= i22;
                    i -= i;
                    Test0118.instanceCount /= (i23 | 1);
                    i23 <<= i;
                    d2 = 10;
                }
                Test0118.instanceCount = i19;
            }
        }
        if (b2) {
            for (int i24 : iArr) {
                for (f4 = 2; 63 > f4; ++f4) {
                    for (i26 = 1; i26 < 2; i26++) {
                        fFld -= i21;
                        Test0118.instanceCount = Test0118.instanceCount;
                        iArr[(int) (f4 + 1)] = Test0118.byFld;
                        iArr = iArr;
                        i24 = i23;
                    }
                    Test0118.instanceCount += (long) d2;
                    i21 += (-11540 + (f4 * f4));
                    sArr[(int)(f4)] = (short)i27;
                }
            }
        } else {
            Test0118.instanceCount -= -164;
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f3 i21 i22 = " + Float.floatToIntBits(f3) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d2 l1 i23 = " + Double.doubleToLongBits(d2) + "," + l1 + "," + i23);
        FuzzerUtils.out.println("f4 i25 i26 = " + Float.floatToIntBits(f4) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 b2 iArr = " + i27 + "," + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0118.instanceCount Test0118.sFld Test0118.byFld = " + Test0118.instanceCount + "," + Test0118.sFld +
                "," + Test0118.byFld);
        FuzzerUtils.out.println("fFld lArrFld = " + Float.floatToIntBits(fFld) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0118 _instance = new Test0118();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
