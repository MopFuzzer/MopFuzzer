// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0120 {

    public static final int N = 400;

    public static long instanceCount=-1L;
    public static double dFld=34.23484;
    public static float fFld=-46.969F;
    public static volatile byte byFld=79;
    public static short sFld=-25221;
    public static boolean bFld=false;
    public static long[] lArrFld =new long[N];
    public int[] iArrFld =new int[N];
    public float[] fArrFld =new float[N];
    public static double[][] dArrFld =new double[N][N];

    static {
        FuzzerUtils.init(Test0120.lArrFld, -5401402528508797527L);
        FuzzerUtils.init(Test0120.dArrFld, 0.112092);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i6=162;
        int i7=-13237;
        int[][] iArr1 =new int[N][N];
        boolean b=false;
        byte by=-12;
        long l1=2451511810L;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.222F);
        FuzzerUtils.init(iArr1, 10);

        for (i6 = 8; i6 < 349; ++i6) {
            Test0120.fFld += i6;
            b = b;
            fArr[i6 - 1] += by;
            l1 = 1;
            do {
                i7 -= i7;
                Test0120.byFld += (byte) (l1 - i6);
                i7 = i6;
            } while (++l1 < 5);
            iArr1[i6 + 1][i6 + 1] = i7;
            if (b) break;
            i7 = i7;
            i7 = i7;
            iArr1[i6][i6 - 1] += i6;
        }
        i7 = i7;
        i7 <<= i7;
        vMeth1_check_sum += i6 + i7 + (b ? 1 : 0) + by + l1 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i1, float f1, int i2) {

        int i4=-70;
        int i5=7;
        int i8=-53541;
        int i9=21;
        int[] iArr =new int[N];
        float f2=76.295F;

        FuzzerUtils.init(iArr, -13);

        for (int i3 : iArr) {
            for (i4 = 1; 4 > i4; ++i4) {
                vMeth1();
                Test0120.dFld -= i4;
            }
            i8 = 1;
            while (++i8 < 4) {
                iArr[i8] += (int) Test0120.instanceCount;
                f1 += (((i8 * i1) + i2) - i3);
                i9 *= i9;
                f2 = 1;
                while ((f2 += 2) < 1) {
                    iArr[(int)(f2 + 1)] >>>= i8;
                    i3 = i3;
                    Test0120.dFld -= i2;
                    Test0120.fFld += (f2 * Test0120.instanceCount);
                    i9 = i3;
                    i9 -= i1;
                }
            }
        }
        vMeth_check_sum += i1 + Float.floatToIntBits(f1) + i2 + i4 + i5 + i8 + i9 + Float.floatToIntBits(f2) +
            FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth(double d, int i, long l) {

        int i10=-4918;
        int i11=-112;
        int i12=94;
        int i13=-27037;
        int i14=-26467;
        int[] iArr2 =new int[N];
        boolean b1=false;

        FuzzerUtils.init(iArr2, -28517);

        i *= i;
        i -= (i++);
        vMeth(i, Test0120.fFld, i);
        i10 = 1;
        do {
            Test0120.lArrFld[i10 - 1] >>= Test0120.sFld;
            Test0120.sFld += (short) (i10 ^ Test0120.instanceCount);
            Test0120.sFld ^= (short) 198;
            if (b1) break;
            switch ((i10 % 4) + 56) {
            case 56:
                i -= i10;
                break;
            case 57:
                for (i11 = 1; 5 > i11; ++i11) {
                    switch ((i11 % 2) + 51) {
                    case 51:
                        for (i13 = 2; i13 > 1; i13--) {
                            i = -5;
                            Test0120.lArrFld[i11 + 1] *= i11;
                        }
                        break;
                    case 52:
                        i14 >>>= (int)l;
                        break;
                    }
                }
                break;
            case 58:
                Test0120.instanceCount = l;
                break;
            case 59:
                iArr2[i10 - 1] *= -6;
                break;
            default:
                i14 *= (int) Test0120.dFld;
            }
        } while (++i10 < 326);
        long meth_res = Double.doubleToLongBits(d) + i + l + i10 + (b1 ? 1 : 0) + i11 + i12 + i13 + i14 +
            FuzzerUtils.checkSum(iArr2);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        float f=-1.762F;
        int i15=-8197, i16=-61990, i17=8, i18=-29815, i19=26559, i20=-34182, i21=62, i22=7, i23=4, i24=48, i25=-7;
        long l3=-4373660917626137425L;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test0120.instanceCount -= (long) (((f--) + (-14 - (Test0120.instanceCount - Test0120.dFld))) + (-51771L - (-fMeth(Test0120.dFld,
                49640, Test0120.instanceCount))));
        for (i15 = 1; i15 < 190; i15++) {
            i16 = i16;
            for (i17 = 7; i17 < 133; ++i17) {
                for (i19 = i15; i19 < 2; i19++) {
                    i16 = -33;
                    try {
                        i16 = (-32678 / i16);
                        i16 = (iArrFld[i19 - 1] % 225);
                        i20 = (i16 % -616341802);
                    } catch (ArithmeticException a_e) {}
                    i20 = i16;
                }
                for (i21 = 1; 2 > i21; ++i21) {
                    i18 *= i17;
                    fArrFld[i15 - 1] += f;
                    i18 += i16;
                    i16 %= (int)-2.128243;
                    i22 *= i16;
                    i22 = 11;
                    iArrFld[i21] &= i15;
                }
                i22 = i22;
                for (i23 = 1; i23 < 2; i23++) {
                    Test0120.dArrFld[i23 + 1][i17 - 1] += i17;
                    l3 <<= Test0120.instanceCount;
                    switch ((((i17 >>> 1) % 4) * 5) + 121) {
                    case 123:
                        if (Test0120.bFld) continue;
                    case 139:
                        i18 >>= i17;
                        break;
                    case 127:
                        iArrFld = FuzzerUtils.int1array(N, (int)28012);
                        i25 -= -43818;
                        bArr[i23 + 1] = true;
                        Test0120.instanceCount -= (long) Test0120.dFld;
                        break;
                    case 141:
                        i24 <<= i15;
                    default:
                        i16 *= -5;
                        i18 *= (int) Test0120.fFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i15 i16 = " + Float.floatToIntBits(f) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 l3 = " + i23 + "," + i24 + "," + l3);
        FuzzerUtils.out.println("i25 bArr = " + i25 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0120.instanceCount Test0120.dFld Test0120.fFld = " + Test0120.instanceCount + "," +
                Double.doubleToLongBits(Test0120.dFld) + "," + Float.floatToIntBits(Test0120.fFld));
        FuzzerUtils.out.println("Test0120.byFld Test0120.sFld Test0120.bFld = " + Test0120.byFld + "," + Test0120.sFld + "," + (Test0120.bFld ?
            1 : 0));
        FuzzerUtils.out.println("Test0120.lArrFld iArrFld fArrFld = " + FuzzerUtils.checkSum(Test0120.lArrFld) + "," +
            FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test0120.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0120.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0120 _instance = new Test0120();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
