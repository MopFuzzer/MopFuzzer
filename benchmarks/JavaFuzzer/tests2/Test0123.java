// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0123 {

    public static final int N = 400;

    public static long instanceCount=-14L;
    public static boolean bFld=false;
    public static int iFld=2740;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0123.iArrFld, 44);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(double d) {

        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -7);

        iArr = (iArr = (iArr = iArr));
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(float f2, boolean b) {

        int i5=-6;
        int i6=-9;
        int[] iArr2 =new int[N];
        double d1=2.118114;
        float f3=-69.1000F;

        FuzzerUtils.init(iArr2, 66);

        i5 = 1;
        while (++i5 < 370) {
            short s=30496;
            if (b) {
                s = (short)i5;
                switch ((i5 % 9) + 90) {
                case 90:
                    Test0123.iFld *= (int) d1;
                    iArr2[(Test0123.iFld >>> 1) % N] -= (int) -1438701801129129592L;
                    Test0123.iFld = (int) f2;
                    Test0123.iFld %= -183;
                    break;
                case 91:
                    Test0123.iFld += (i5 ^ i5);
                    for (f3 = 1; f3 < 5; f3++) {
                        Test0123.iFld *= (int) f2;
                    }
                    break;
                case 92:
                    iArr2[i5 - 1] = i6;
                    Test0123.iFld <<= s;
                    Test0123.iFld -= 43802;
                    break;
                case 93:
                case 94:
                    iArr2[i5 + 1] -= (int)f3;
                    break;
                case 95:
                    d1 = Test0123.instanceCount;
                    break;
                case 96:
                    Test0123.instanceCount = i5;
                case 97:
                    i6 += i5;
                    break;
                case 98:
                    d1 = 8014;
                    break;
                default:
                    Test0123.iFld += i5;
                }
            } else if (false) {
                Test0123.iFld = (int) Test0123.instanceCount;
            } else if (b) {
                d1 = i6;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + (b ? 1 : 0) + i5 + Double.doubleToLongBits(d1) +
            Float.floatToIntBits(f3) + i6 + FuzzerUtils.checkSum(iArr2);
    }

    public static boolean bMeth() {


        vMeth(-2.564F, true);
        long meth_res = 0;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth(byte by, long l, int i1) {

        float f1=-109.465F;
        long l1=1273394197L;
        int i2=13, i3=56619, i4=240, i7=27697, i8=129;
        double d2=-112.121085;

        i1 *= (int)(--f1);
        for (l1 = 10; l1 < 300; l1++) {
            for (i3 = (int)(l1); 6 > i3; ++i3) {
                Test0123.bFld = (Test0123.bFld = ((Test0123.bFld && Test0123.bFld) && bMeth()));
                Test0123.iArrFld[i3] -= Test0123.iFld;
                f1 -= 65191;
                f1 += Test0123.instanceCount;
                for (i7 = 1; i7 > 1; i7--) {
                    Test0123.iFld += (((i7 * i2) + i3) - i1);
                    i4 += (i7 + Test0123.iFld);
                    by = (byte)d2;
                    Test0123.iFld ^= i7;
                    Test0123.iFld *= Test0123.iFld;
                }
                Test0123.iFld += (int) l;
                i2 -= (int) Test0123.instanceCount;
            }
        }
        long meth_res = by + l + i1 + Float.floatToIntBits(f1) + l1 + i2 + i3 + i4 + i7 + i8 +
            Double.doubleToLongBits(d2);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=55;
        int i10=-100;
        int i11=-5;
        int i12=45394;
        int i13=-25069;
        int i14=44109;
        int i15=201;
        int i16=-63;
        int i17=-44048;
        int[] iArr1 =new int[N];
        float f=-87.1016F, f4=-29.827F;
        byte by1=-21;
        long l2=-367355425567266621L;
        short s1=-14980;

        FuzzerUtils.init(iArr1, -1);

        for (int smallinvoc=0; smallinvoc<421; smallinvoc++) vSmallMeth(0.13019);
        iArr1[(i >>> 1) % N] = (int)((iArr1[(i >>> 1) % N] - f) + ((i + -221) - (--i)));
        dMeth(by1, 8L, Test0123.iFld);
        for (int i9 : Test0123.iArrFld) {
            if (Test0123.bFld) continue;
            Test0123.iFld /= (int) (i | 1);
            for (i10 = 1; i10 < 63; i10++) {
                Test0123.iFld += (((i10 * Test0123.iFld) + i11) - i10);
            }
            i = (int)37.35F;
            Test0123.instanceCount += l2;
            Test0123.iFld += (int) -55L;
            i9 |= i11;
        }
        for (i12 = 201; 12 < i12; i12--) {
            Test0123.iArrFld[i12 + 1] = (int) Test0123.instanceCount;
            i11 = i13;
            for (i14 = 4; i14 < 133; ++i14) {
                s1 -= (short)i;
                i11 &= 204;
                switch ((i14 % 9) + 5) {
                case 5:
                    i13 = (int) Test0123.instanceCount;
                    iArr1 = Test0123.iArrFld;
                    for (i16 = i14; 2 > i16; i16++) {
                        by1 = (byte)1L;
                        iArr1[i12] += Test0123.iFld;
                    }
                    break;
                case 6:
                    f4 = 2;
                    do {
                        Test0123.bFld = Test0123.bFld;
                        if (true) {
                            Test0123.iFld = i10;
                            l2 += i16;
                        } else if (Test0123.bFld) {
                            Test0123.instanceCount -= -128;
                        } else if (Test0123.bFld) {
                            by1 += (byte)i11;
                        } else {
                            Test0123.iFld |= -3;
                        }
                    } while (--f4 > 0);
                case 7:
                    i13 -= i17;
                    break;
                case 8:
                    l2 -= i15;
                    break;
                case 9:
                    Test0123.instanceCount += (i14 - i10);
                    break;
                case 10:
                    i15 += i14;
                    break;
                case 11:
                    f = 243;
                case 12:
                case 13:
                    Test0123.iFld += 10326;
                    break;
                default:
                    i11 -= (int)l2;
                }
            }
        }

        FuzzerUtils.out.println("i f by1 = " + i + "," + Float.floatToIntBits(f) + "," + by1);
        FuzzerUtils.out.println("i10 i11 l2 = " + i10 + "," + i11 + "," + l2);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 s1 i16 = " + i15 + "," + s1 + "," + i16);
        FuzzerUtils.out.println("i17 f4 iArr1 = " + i17 + "," + Float.floatToIntBits(f4) + "," +
            FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0123.instanceCount Test0123.bFld Test0123.iFld = " + Test0123.instanceCount + "," + (Test0123.bFld ? 1
                : 0) + "," + Test0123.iFld);
        FuzzerUtils.out.println("Test0123.iArrFld = " + FuzzerUtils.checkSum(Test0123.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0123 _instance = new Test0123();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth dMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
