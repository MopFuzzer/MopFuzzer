// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:25 2023
public class Test0275 {

    public static final int N = 400;

    public static long instanceCount=47068L;
    public static byte byFld=-113;
    public static volatile double dFld=1.49756;
    public static int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0275.iArrFld, 243);
        FuzzerUtils.init(Test0275.byArrFld, (byte) 3);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, int i7) {

        float f3=-2.701F;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 34450L);

        lArr = lArr;
        Test0275.instanceCount >>= Test0275.instanceCount;
        Test0275.iArrFld[(-2 >>> 1) % N] &= (int) Test0275.instanceCount;
        i6 &= (int) Test0275.instanceCount;
        Test0275.byFld -= (byte) f3;
        f3 += i7;
        vMeth2_check_sum += i6 + i7 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i4, int i5, float f2) {

        int i8=-80, i9=-196, i10=-194, i11=-53296;
        double d1=-6.30683;

        Test0275.instanceCount *= (long) (((Test0275.instanceCount * f2) + (++i5)) + (Test0275.iArrFld[(60249 >>> 1) % N]++));
        vMeth2(i5, i5);
        i5 = (int) Test0275.instanceCount;
        i5 = -32;
        i4 = (int) Test0275.instanceCount;
        for (i8 = 4; i8 < 365; ++i8) {
            i4 >>>= (int) Test0275.instanceCount;
            for (i10 = 5; i10 > 1; --i10) {
                try {
                    i5 = (-1833882344 % i4);
                    i9 = (-116 / i4);
                    i9 = (i9 / -55763);
                } catch (ArithmeticException a_e) {}
                i11 += (i10 - f2);
                Test0275.iArrFld[i8 - 1] -= i9;
                i5 += (((i10 * i9) + i8) - i5);
                Test0275.iArrFld[i10] = i5;
                d1 += f2;
                i9 += i10;
            }
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f2) + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1);
    }

    public static void vSmallMeth(double d, int i2, int i3) {

        float f4=1.444F;

        vMeth1(5, i3, f4);
        Test0275.instanceCount = (long) d;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + Float.floatToIntBits(f4);
    }

    public void vMeth(float f1) {

        boolean b=false;
        int i1=7506;

        b = (-5 < ((i1 - i1) + (f1 - f1)));
        i1 <<= (int) ((i1 << (--i1)) + Test0275.instanceCount);
        i1 ^= (int)(((i1 * f1) + (60.645F / ((-(i1 * i1)) | 1))) + (-(i1 + i1)));
        vMeth_check_sum += Float.floatToIntBits(f1) + (b ? 1 : 0) + i1;
    }

    public void mainTest(String[] strArr1) {

        float f=-34.512F;
        int i=25450, i12=26968, i13=-28539, i14=-5548, i15=48983, i16=-48950, i17=-5168, i18=16090, i19=11100, i20=14;
        short s=-14480;
        boolean b1=false;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -761L);

        f *= ((i = 7) - (-(f / 10455L)));
        vMeth((float) (Test0275.iArrFld[(603 >>> 1) % N] * ((16.35247 + Math.min(i, i)) + (i *= i))));
        vMeth(Float.intBitsToFloat(-(-(Test0275.iArrFld[(i >>> 1) % N]--))));
        i >>= (int)((-(f * -11768)) + i);
        for (int smallinvoc = 0; smallinvoc < 680; smallinvoc++) vSmallMeth(Test0275.dFld, i, -109);
        i = i;
        Test0275.byArrFld[(i >>> 1) % N] *= (byte) i;
        i12 = 161;
        while (--i12 > 0) {
            for (i13 = 5; i13 < 156; ++i13) {
                for (i15 = 1; i15 < 2; i15++) {
                    i16 -= i17;
                    Test0275.dFld *= i17;
                    Test0275.instanceCount = (long) Test0275.dFld;
                    lArr1[i12 + 1] = (long)1.51F;
                    lArr1[i15 + 1] += i15;
                    i17 += (163 + (i15 * i15));
                }
                i17 = i;
                i14 -= i15;
                i = i14;
                if (false) break;
            }
        }
        i17 >>= i;
        Test0275.dFld -= s;
        if (b1) {
            i14 += (int)f;
        } else {
            Test0275.dFld -= Test0275.byFld;
            i17 = Test0275.byFld;
            for (i18 = 8; i18 < 166; ++i18) {
                i20 += i18;
                i19 -= i16;
                if (b1) break;
            }
        }

        FuzzerUtils.out.println("f i i12 = " + Float.floatToIntBits(f) + "," + i + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 s = " + i16 + "," + i17 + "," + s);
        FuzzerUtils.out.println("b1 i18 i19 = " + (b1 ? 1 : 0) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 lArr1 = " + i20 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0275.instanceCount Test0275.byFld Test0275.dFld = " + Test0275.instanceCount + "," + Test0275.byFld +
                "," + Double.doubleToLongBits(Test0275.dFld));
        FuzzerUtils.out.println("Test0275.iArrFld Test0275.byArrFld = " + FuzzerUtils.checkSum(Test0275.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0275.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0275 _instance = new Test0275();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vSmallMeth mainTest Test
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
