// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0013 {

    public static final int N = 400;

    public static long instanceCount=-348448008L;
    public double dFld=-86.9461;
    public static double dFld1=0.19828;
    public static byte byFld=-88;
    public static float fFld=0.863F;
    public int[] iArrFld =new int[N];
    public static long[] lArrFld =new long[N];
    public static int[] iArrFld1 =new int[N];
    public static boolean[] bArrFld =new boolean[N];
    public short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0013.lArrFld, 1L);
        FuzzerUtils.init(Test0013.iArrFld1, 31326);
        FuzzerUtils.init(Test0013.bArrFld, true);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i6, long l, int i7) {

        int i8=-220, i9=-222, i10=152, i11=-12, i12=-12, i13=62332, i14=-145, i15=2;
        float f1=68.432F;
        float[] fArr =new float[N];
        double d=-2.113721;
        short s=8524;

        FuzzerUtils.init(fArr, 0.75F);

        i7 -= (int)-5011831862277099849L;
        for (i8 = 1; i8 < 267; i8++) {
            f1 = i7;
        }
        for (i10 = 1; i10 < 375; ++i10) {
            for (i12 = 1; 5 > i12; i12++) {
                Test0013.instanceCount *= i13;
            }
        }
        for (i14 = 378; 20 < i14; --i14) {
            f1 += (-2.252F + (i14 * i14));
            l -= (long)d;
            Test0013.lArrFld[i14 - 1] = Test0013.instanceCount;
            d -= i7;
            i13 *= i10;
            fArr[i14 + 1] -= s;
            i9 = i11;
            i15 <<= i15;
        }
        vMeth2_check_sum += i6 + l + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + i11 + i12 + i13 + i14 + i15 +
            Double.doubleToLongBits(d) + s + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(int i4, int i5) {

        float f2=13.806F;
        int i16=159, i17=-35949, i18=-71;
        double d1=2.123196;
        double[] dArr =new double[N];
        byte by=18;

        FuzzerUtils.init(dArr, -2.54707);

        dArr[(i5 >>> 1) % N] = -5;
        vMeth2(i5, 11L, i5);
        for (f2 = 1; f2 < 383; f2++) {
            d1 = 1;
            do {
                i5 = 24360;
                Test0013.instanceCount += i16;
                i4 = (int) Test0013.instanceCount;
                i4 = i16;
                i4 += -25528;
                Test0013.instanceCount |= by;
                Test0013.instanceCount = i16;
                switch ((int)(((d1 % 4) * 5) + 54)) {
                case 57:
                    for (i17 = 1; i17 < 1; ++i17) {
                        Test0013.dFld1 -= i16;
                        Test0013.iArrFld1[(int) (d1 - 1)] -= i16;
                    }
                    break;
                case 62:
                    by = (byte)i4;
                case 65:
                    Test0013.lArrFld[(int) (d1 - 1)] /= (i18 | 1);
                    break;
                case 60:
                    i4 = (int)-1822401592L;
                }
            } while (++d1 < 4);
        }
        vMeth1_check_sum += i4 + i5 + Float.floatToIntBits(f2) + i16 + Double.doubleToLongBits(d1) + by + i17 + i18 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void vMeth() {

        int i3=-239, i19=-13, i20=93, i21=67;
        short s1=1978;

        Test0013.instanceCount -= (iArrFld[(i3 >>> 1) % N] + ((i3++) - (Test0013.instanceCount * Test0013.instanceCount)));
        vMeth1(i3, i3);
        Test0013.iArrFld1[(i3 >>> 1) % N] *= i3;
        i3 -= i3;
        for (i19 = 1; i19 < 269; ++i19) {
            Test0013.byFld = Test0013.byFld;
            i3 *= (int)2.9205;
            Test0013.lArrFld[i19] = Test0013.instanceCount;
            i3 -= i19;
            s1 -= (short) Test0013.instanceCount;
            Test0013.bArrFld[i19] = false;
        }
        i21 = 127;
        while (--i21 > 0) {
            Test0013.instanceCount = i19;
            i3 = i19;
            Test0013.fFld += i21;
        }
        vMeth_check_sum += i3 + i19 + i20 + s1 + i21;
    }

    public void mainTest(String[] strArr1) {

        float f=-2.747F;
        float[] fArr1 =new float[N];
        int i=-6, i1=227, i2=0, i22=-126, i23=205, i24=86, i25=-134, i26=113;
        double d2=1.45968;
        double[] dArr1 =new double[N];
        short s2=-7434;

        FuzzerUtils.init(dArr1, 2.87420);
        FuzzerUtils.init(fArr1, -2.552F);

        switch ((((((int) (-(f * Test0013.instanceCount))) >>> 1) % 2) * 5) + 17) {
        case 19:
            for (i = 13; 356 > i; i++) {
                i1 -= (int) (((Test0013.instanceCount - dFld) + i1) + (i + (i1 * i1)));
                i2 = 1;
                do {
                    iArrFld[i2 - 1] += (int) (((i2 * i2) - Test0013.instanceCount) - ((i1 - Test0013.instanceCount) +
                        (-iArrFld[i2])));
                    iArrFld[i2] = (iArrFld[i2]++);
                    vMeth();
                    Test0013.fFld -= Test0013.fFld;
                    i1 -= i1;
                    i1 += (i2 * i2);
                    for (d2 = 1; d2 < 1; ++d2) {
                        i22 += i1;
                        Test0013.instanceCount -= i;
                        dArr1[(int)(d2 - 1)] = i22;
                        s2 += (short)i22;
                    }
                    iArrFld[i2] = 23715;
                    fArr1 = FuzzerUtils.float1array(N, (float)-1.180F);
                    i22 >>= -194;
                } while (++i2 < 73);
                i1 = (int) Test0013.instanceCount;
                for (i23 = 3; i23 < 73; i23++) {
                    try {
                        i1 = (Test0013.iArrFld1[i - 1] % i1);
                        i24 = (i1 / -3215);
                        i22 = (Test0013.iArrFld1[i23] / 646096677);
                    } catch (ArithmeticException a_e) {}
                    i24 += i23;
                }
                for (i25 = 73; i25 > 2; i25--) {
                    i1 += (((i25 * f) + s2) - i25);
                    Test0013.dFld1 *= Test0013.byFld;
                    i22 += (((i25 * i25) + i22) - i);
                    i1 += -1;
                    Test0013.iArrFld1[i25] *= i23;
                    i24 *= (int)d2;
                }
                Test0013.lArrFld[i - 1] = i24;
            }
            break;
        case 26:
            Test0013.instanceCount %= (Test0013.instanceCount | 1);
            break;
        default:
            Test0013.iArrFld1[(-3599 >>> 1) % N] -= (int) Test0013.instanceCount;
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 d2 i22 = " + i2 + "," + Double.doubleToLongBits(d2) + "," + i22);
        FuzzerUtils.out.println("s2 i23 i24 = " + s2 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 dArr1 = " + i25 + "," + i26 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0013.instanceCount dFld Test0013.dFld1 = " + Test0013.instanceCount + "," +
                Double.doubleToLongBits(dFld) + "," + Double.doubleToLongBits(Test0013.dFld1));
        FuzzerUtils.out.println("Test0013.byFld Test0013.fFld iArrFld = " + Test0013.byFld + "," + Float.floatToIntBits(Test0013.fFld)
            + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0013.lArrFld Test0013.iArrFld1 Test0013.bArrFld = " + FuzzerUtils.checkSum(Test0013.lArrFld) + ","
                + FuzzerUtils.checkSum(Test0013.iArrFld1) + "," + FuzzerUtils.checkSum(Test0013.bArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0013 _instance = new Test0013();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
