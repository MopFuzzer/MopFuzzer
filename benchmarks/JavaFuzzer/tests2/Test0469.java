// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:34 2023
public class Test0469 {

    public static final int N = 400;

    public static long instanceCount=-210L;
    public int iFld=194;
    public static byte byFld=-102;
    public static double dFld=-47.103679;
    public static float fFld=2.411F;
    public static long[] lArrFld =new long[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0469.lArrFld, 4358444816452858153L);
        FuzzerUtils.init(Test0469.dArrFld, -21.33749);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i, float f, long l) {

        long l1=0L;

        l1 = i;
        vSmallMeth_check_sum += i + Float.floatToIntBits(f) + l + l1;
    }

    public static void vMeth() {

        int i6=80;

        i6 += (int) Test0469.dFld;
        vMeth_check_sum += i6;
    }

    public static double dMeth(int i3) {

        int i4=7, i5=-7, i7=81, i8=190;

        for (i4 = 2; i4 < 168; ++i4) {
            vMeth();
            i5 = (int) Test0469.instanceCount;
            i5 *= (int) Test0469.instanceCount;
            Test0469.dFld -= i3;
            try {
                i5 = (i5 % 63162);
                i3 = (i3 % 48414);
                i5 = (20187 / i5);
            } catch (ArithmeticException a_e) {}
            if (i5 != 0) {
            }
            i3 = i3;
            Test0469.byFld = (byte) -14383;
        }
        i5 = (int) Test0469.dFld;
        i3 = 3;
        for (i7 = 6; 282 > i7; ++i7) {
            Test0469.instanceCount += Test0469.instanceCount;
            i3 += 42;
            Test0469.instanceCount <<= i4;
        }
        long meth_res = i3 + i4 + i5 + i7 + i8;
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static long lMeth(int i1) {

        int i2=7;
        int i9=-254;
        int i10=-23283;
        int[] iArr =new int[N];
        boolean b=true;
        short s=-32311;

        FuzzerUtils.init(iArr, -8175);

        i2 = 1;
        do {
            Test0469.instanceCount >>= i2;
            if (b) {
                Test0469.instanceCount += Test0469.lArrFld[i2 + 1];
                Test0469.byFld >>= (byte) ((Test0469.instanceCount + (i1 * i2)) + ((i2 - -67) + (-(iArr[i2 - 1]--))));
                i1 += i2;
                dMeth(i1);
            } else {
                Test0469.fFld = 51;
                switch (((i2 % 2) * 5) + 47) {
                case 56:
                    switch ((i2 % 6) + 39) {
                    case 39:
                        Test0469.fFld -= Test0469.byFld;
                        b = b;
                        for (i9 = i2; i9 < 8; i9++) {
                            if (i9 != 0) {
                            }
                            iArr = iArr;
                        }
                    case 40:
                        i10 += (((i2 * Test0469.instanceCount) + Test0469.fFld) - Test0469.instanceCount);
                        break;
                    case 41:
                        i10 >>= i10;
                        break;
                    case 42:
                        i1 += (-17703 + (i2 * i2));
                    case 43:
                        s *= (short)i2;
                        break;
                    case 44:
                        i10 = i10;
                        break;
                    }
                    break;
                case 50:
                    iArr[i2 - 1] += i1;
                    break;
                }
            }
        } while (++i2 < 201);
        long meth_res = i1 + i2 + (b ? 1 : 0) + i9 + i10 + s + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i12=56816;
        int i13=-3;
        int i14=51282;
        int i15=-27958;
        int[] iArr1 =new int[N];
        long l2=-12L;
        short s1=16628;
        boolean b1=false;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(fArr, -54.847F);

        for (int smallinvoc=0; smallinvoc<219; smallinvoc++) vSmallMeth(Math.min(-112 * (-9 + (iFld + iFld)), iFld) -
                Math.min(iFld + iFld, (int) (-54.493F - (iFld * Test0469.instanceCount))), (-124 + Math.max(iFld, iFld)) +
            (iFld++), lMeth(iFld));
        Test0469.instanceCount = (long) Test0469.dFld;
        switch (((iFld >>> 1) % 9) + 21) {
        case 21:
            switch (((55417 >>> 1) % 10) + 109) {
            case 109:
                for (int i11 : iArr1) {
                    for (i12 = 1; i12 < 63; i12++) {
                        for (i14 = 1; i14 < 2; ++i14) {
                            i15 -= (int)-8978287562727215318L;
                            i15 >>= i13;
                            if (false) continue;
                            iFld = i13;
                            switch (((i14 % 8) * 5) + 21) {
                            case 23:
                                Test0469.fFld -= (float) 116.63360;
                                fArr[i12] = l2;
                                iFld += i13;
                                break;
                            case 36:
                                i11 += 199;
                                l2 += (i14 | Test0469.instanceCount);
                                Test0469.dFld -= i13;
                                l2 = i13;
                            case 59:
                                s1 += (short)i12;
                                break;
                            case 58:
                                Test0469.byFld -= (byte) i14;
                                Test0469.fFld = Test0469.fFld;
                                i13 *= i13;
                                break;
                            case 52:
                                if (b1) {
                                    Test0469.dFld -= l2;
                                    i11 -= i13;
                                } else {
                                    if (false) {
                                        i11 -= i11;
                                        i15 *= i11;
                                    } else if (b1) {
                                        i15 += 32875;
                                    } else if (b1) {
                                        l2 += Test0469.instanceCount;
                                    }
                                }
                                break;
                            case 38:
                                i11 += (((i14 * i11) + Test0469.fFld) - l2);
                                break;
                            case 29:
                                Test0469.byFld <<= (byte) i12;
                                break;
                            case 33:
                                iFld += (int) Test0469.instanceCount;
                            default:
                                iFld |= i13;
                            }
                        }
                    }
                }
                break;
            case 110:
                i15 += iFld;
                break;
            case 111:
                Test0469.lArrFld[(i12 >>> 1) % N] = (long) -106.495F;
                break;
            case 112:
                iFld %= (int)(i15 | 1);
                break;
            case 113:
                iFld -= (int)1799967297L;
                break;
            case 114:
                b1 = b1;
                break;
            case 115:
                iArr1[(i13 >>> 1) % N] += (int)l2;
                break;
            case 116:
                Test0469.instanceCount = iFld;
            case 117:
                i13 = s1;
                break;
            case 118:
                i15 += s1;
                break;
            }
            break;
        case 22:
            iFld %= (int)(iFld | 1);
        case 23:
            iFld *= (int)-49907L;
            break;
        case 24:
        case 25:
            i15 = iFld;
            break;
        case 26:
            i13 -= -3;
            break;
        case 27:
            i15 += (int)l2;
            break;
        case 28:
            i15 = (int) Test0469.instanceCount;
            break;
        case 29:
            l2 &= iFld;
        default:
            Test0469.dArrFld = FuzzerUtils.double1array(N, (double) 0.17014);
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 l2 s1 = " + i15 + "," + l2 + "," + s1);
        FuzzerUtils.out.println("b1 iArr1 fArr = " + (b1 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0469.instanceCount iFld Test0469.byFld = " + Test0469.instanceCount + "," + iFld + "," +
                Test0469.byFld);
        FuzzerUtils.out.println("Test0469.dFld Test0469.fFld Test0469.lArrFld = " + Double.doubleToLongBits(Test0469.dFld) + "," +
                Float.floatToIntBits(Test0469.fFld) + "," + FuzzerUtils.checkSum(Test0469.lArrFld));
        FuzzerUtils.out.println("Test0469.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0469.dArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0469 _instance = new Test0469();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
