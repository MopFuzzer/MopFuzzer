// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:54 2023
public class Test0903 {

    public static final int N = 400;

    public static long instanceCount=-3617564344L;
    public static volatile float fFld=-1.955F;
    public static short sFld=-17260;
    public static int iFld=128;
    public static int[][] iArrFld =new int[N][N];
    public static long[] lArrFld =new long[N];
    public static volatile float[][] fArrFld =new float[N][N];

    static {
        FuzzerUtils.init(Test0903.iArrFld, -204);
        FuzzerUtils.init(Test0903.lArrFld, 3L);
        FuzzerUtils.init(Test0903.fArrFld, 65.265F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i3, int i4, long l1) {

        long l2=359070643L;
        int i5=-7, i6=-224, i7=-7, i8=-31279, i9=-21;
        float f1=-58.557F;
        float[][] fArr =new float[N][N];
        short s=8783;

        FuzzerUtils.init(fArr, -44.926F);

        Test0903.iArrFld[(i3 >>> 1) % N] = Test0903.iArrFld[(i4 >>> 1) % N];
        for (l2 = 340; l2 > 19; l2--) {
            for (i6 = 1; i6 < 5; ++i6) {
                switch ((i6 % 8) + 89) {
                case 89:
                    Test0903.iArrFld[i6 - 1][i6] |= i4;
                    i4 = i4;
                    try {
                        i3 = (182 / Test0903.iArrFld[i6 + 1][i6 - 1]);
                        Test0903.iArrFld[i6 + 1][i6 + 1] = (-144 % i6);
                        i4 = (Test0903.iArrFld[i6][(int) (l2 + 1)] / i6);
                    } catch (ArithmeticException a_e) {}
                    fArr[i6][(int)(l2)] -= i7;
                    break;
                case 90:
                    f1 += l2;
                    i3 = i7;
                    Test0903.lArrFld[i6 + 1] = i3;
                    try {
                        Test0903.iArrFld[(i3 >>> 1) % N][i6 + 1] = (i6 % 184881474);
                        i5 = (i6 % Test0903.iArrFld[i6 + 1][i6 - 1]);
                        i5 = (83 / Test0903.iArrFld[i6][(int) (l2 - 1)]);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 91:
                    for (i8 = 1; 2 > i8; ++i8) {
                        Test0903.iArrFld[i6 + 1][i8] = (int) l1;
                        Test0903.lArrFld[(int) (l2)] += i3;
                    }
                    break;
                case 92:
                    i9 -= 1;
                    break;
                case 93:
                    f1 -= -43588;
                case 94:
                    i9 >>= s;
                case 95:
                case 96:
                    Test0903.iArrFld[(int) (l2)][(int) (l2)] *= (int) f1;
                    break;
                }
            }
        }
        vMeth2_check_sum += i3 + i4 + l1 + l2 + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + s +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth1(long l) {

        int i1=-89, i2=-4, i10=-215, i11=237, i12=24653, i13=-16207, i14=11, i15=-10;
        byte by=55;
        double d=-125.122347;

        for (i1 = 19; 374 > i1; ++i1) {
            vMeth2(i2, i10, Test0903.instanceCount);
            Test0903.fArrFld[i1][i1 + 1] = 179;
            for (i11 = 1; i11 < 5; i11++) {
                for (i13 = 1; i13 < 2; ++i13) {
                    try {
                        i12 = (17240 % i14);
                        i2 = (i1 % i2);
                        i10 = (i13 / -841856947);
                    } catch (ArithmeticException a_e) {}
                    by -= (byte)i12;
                    i14 -= i11;
                    Test0903.instanceCount *= (long) d;
                    i10 += by;
                    i2 = (int) Test0903.fFld;
                    i14 += i1;
                }
                i15 = 1;
                while (++i15 < 2) {
                    Test0903.instanceCount += (i15 * i15);
                    i2 += (int)l;
                }
            }
        }
        vMeth1_check_sum += l + i1 + i2 + i10 + i11 + i12 + i13 + i14 + by + Double.doubleToLongBits(d) + i15;
    }

    public static void vMeth(int i, float f) {

        float f2=-26.40F;
        int i16=18;
        int i17=-12;
        int[] iArr =new int[N];
        boolean b=true, b1=false;
        double d1=1.82617;

        FuzzerUtils.init(iArr, -69);

        vMeth1(Test0903.instanceCount);
        for (f2 = 7; f2 < 149; ++f2) {
            switch ((int)((f2 % 1) + 45)) {
            case 45:
                Test0903.instanceCount += i;
                i *= 62362;
                i16 += (int) (f2 - Test0903.instanceCount);
                Test0903.instanceCount <<= i16;
                break;
            }
            if (b1) {
                b = b;
                Test0903.instanceCount -= Test0903.instanceCount;
                switch ((int)(((f2 % 10) * 5) + 18)) {
                case 39:
                    i16 = (int) Test0903.instanceCount;
                    Test0903.instanceCount += i16;
                    Test0903.iArrFld[(int) (f2 - 1)][(int) (f2 - 1)] *= (int) d1;
                    Test0903.sFld = (short) i16;
                    break;
                case 23:
                    i += (int)(f2 * i);
                    break;
                case 22:
                    f += (f2 - i17);
                    break;
                case 65:
                    i >>= i;
                case 45:
                    b = b;
                    break;
                case 20:
                    i16 += i;
                    break;
                case 26:
                    Test0903.instanceCount += (long) (f2 - i17);
                case 58:
                    i = i16;
                    break;
                case 32:
                    Test0903.instanceCount -= (long) f;
                    break;
                case 46:
                    d1 *= d1;
                    break;
                default:
                    iArr[(int)(f2 - 1)] += i16;
                }
            } else {
                Test0903.iArrFld[(int) (f2)][(int) (f2 + 1)] |= i16;
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + Float.floatToIntBits(f2) + i16 + (b ? 1 : 0) +
            Double.doubleToLongBits(d1) + i17 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        boolean b2=true;
        boolean[][] bArr =new boolean[N][N];

        FuzzerUtils.init(bArr, false);

        if (false) {
            vMeth(Test0903.iFld, -2.587F);
            Test0903.iFld = Test0903.iFld;
            Test0903.iFld = (int) Test0903.instanceCount;
        } else {
            Test0903.iFld = (int) Test0903.instanceCount;
            bArr[(Test0903.iFld >>> 1) % N][(Test0903.iFld >>> 1) % N] = b2;
            Test0903.fFld *= Test0903.iFld;
        }

        FuzzerUtils.out.println("b2 bArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0903.instanceCount Test0903.fFld Test0903.sFld = " + Test0903.instanceCount + "," +
                Float.floatToIntBits(Test0903.fFld) + "," + Test0903.sFld);
        FuzzerUtils.out.println("Test0903.iFld Test0903.iArrFld Test0903.lArrFld = " + Test0903.iFld + "," +
                FuzzerUtils.checkSum(Test0903.iArrFld) + "," + FuzzerUtils.checkSum(Test0903.lArrFld));
        FuzzerUtils.out.println("Test0903.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0903.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0903 _instance = new Test0903();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
