// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:34 2023
public class Test0479 {

    public static final int N = 400;

    public static long instanceCount=-248L;
    public static int iFld=-26933;
    public volatile double dFld=85.41698;
    public float fFld=99.442F;
    public int iFld1=14;
    public int[] iArrFld =new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i1, int i2) {

        byte by=-70;
        double d=84.56712;
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(dArr, -2.86389);

        by = (byte)10;
        d += i1;
        i2 += i2;
        i2 -= i1;
        dArr[(i2 >>> 1) % N][(i2 >>> 1) % N] -= i2;
        long meth_res = i1 + i2 + by + Double.doubleToLongBits(d) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        float f1=-1.307F;
        float[][] fArr =new float[N][N];
        int i4=14;
        int i5=-81;
        int i6=-8;
        int[] iArr1 =new int[N];
        boolean b=false;
        double d1=36.91591;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr1, 21673);
        FuzzerUtils.init(fArr, -11.393F);
        FuzzerUtils.init(byArr, (byte)124);

        f1 = (iMeth1(Test0479.iFld, Test0479.iFld) + Test0479.instanceCount);
        for (int i3 : iArr1) {
            try {
                iArr1[(i3 >>> 1) % N] = (iArr1[(Test0479.iFld >>> 1) % N] / -170);
                Test0479.iFld = (i3 / 46624);
                i3 = (Test0479.iFld / i3);
            } catch (ArithmeticException a_e) {}
            iArr1[(i3 >>> 1) % N] *= (int)1.820F;
            Test0479.iFld = (int) -2.33737;
            i4 = 1;
            do {
                fArr[i4][i4 - 1] += Test0479.iFld;
            } while (++i4 < 4);
            for (i5 = 1; i5 < 4; i5++) {
                byArr[i5 + 1] += (byte) Test0479.iFld;
                Test0479.iFld += i5;
                b = b;
                if (b) {
                    i6 <<= i3;
                    i6 += (int)d1;
                    i3 += (i5 - Test0479.iFld);
                } else {
                    i3 = (int) Test0479.instanceCount;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i4 + i5 + i6 + (b ? 1 : 0) + Double.doubleToLongBits(d1) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(int i, long l) {

        float f=51.863F;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 11);

        iArr[(205 >>> 1) % N] = i;
        f -= (iMeth() - i);
        vSmallMeth_check_sum += i + l + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        byte by1=41;
        int i7=91, i8=34, i9=14, i10=180, i11=49238, i12=243, i13=-130, i14=-224, i15=11;
        boolean b1=false;
        boolean[][] bArr =new boolean[N][N];
        float[] fArr1 =new float[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(fArr1, 14.820F);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(lArr, 2853625783019696761L);

        for (int smallinvoc=0; smallinvoc<980; smallinvoc++) vSmallMeth(-240, -9747L);
        by1 += (byte) Test0479.iFld;
        Test0479.iFld = (int) -98.57282;
        for (i7 = 4; i7 < 257; ++i7) {
            boolean b2=false;
            b1 = b1;
            switch ((i7 % 4) + 61) {
            case 61:
                for (i9 = i7; i9 < 99; i9++) {
                    Test0479.instanceCount += i7;
                    Test0479.instanceCount += (145 + (i9 * i9));
                }
                try {
                    i10 = (iArrFld[i7 + 1] / iArrFld[i7 + 1]);
                    i10 = (-161 % i7);
                    i8 = (i8 % -1920392197);
                } catch (ArithmeticException a_e) {}
                break;
            case 62:
                for (i11 = 2; 99 > i11; i11++) {
                    Test0479.iFld += (-11 + (i11 * i11));
                    i8 = (int) Test0479.instanceCount;
                    for (i13 = 1; 2 > i13; ++i13) {
                        i10 += by1;
                        b1 = false;
                        fArr1[i7] += i13;
                        i14 >>= Test0479.iFld;
                        by1 = (byte)i13;
                        Test0479.instanceCount += i13;
                        bArr[i11][i13] = false;
                        i10 = i12;
                        i14 = (int) Test0479.instanceCount;
                    }
                }
                iArrFld[i7 - 1] -= i11;
                break;
            case 63:
                switch ((i7 % 9) + 119) {
                case 119:
                    if (b1) {
                        dFld = fFld;
                        i15 = 1;
                        do {
                            i8 -= (int)-2461726965L;
                            i10 += i15;
                        } while (++i15 < 99);
                    } else if (false) {
                        lArr[i7 - 1] += Test0479.iFld;
                    } else if (b1) {
                        iFld1 += (i7 * i7);
                    }
                    break;
                case 120:
                    fFld += (i7 * i7);
                case 121:
                    fFld = -2587309324874816421L;
                case 122:
                    Test0479.instanceCount += i7;
                    break;
                case 123:
                    Test0479.instanceCount -= Test0479.instanceCount;
                case 124:
                    iArrFld[i7 + 1] += (int) Test0479.instanceCount;
                case 125:
                    i14 = (int)fFld;
                    break;
                case 126:
                    iArrFld[i7] ^= 202;
                case 127:
                    i14 >>= (int) Test0479.instanceCount;
                    break;
                default:
                    b2 = b2;
                }
            case 64:
                dFld -= i9;
                break;
            default:
                dFld = 140;
            }
        }

        FuzzerUtils.out.println("by1 i7 i8 = " + by1 + "," + i7 + "," + i8);
        FuzzerUtils.out.println("b1 i9 i10 = " + (b1 ? 1 : 0) + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 i12 i13 = " + i11 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 i15 fArr1 = " + i14 + "," + i15 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("bArr lArr = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0479.instanceCount Test0479.iFld dFld = " + Test0479.instanceCount + "," + Test0479.iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("fFld iFld1 iArrFld = " + Float.floatToIntBits(fFld) + "," + iFld1 + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0479 _instance = new Test0479();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
