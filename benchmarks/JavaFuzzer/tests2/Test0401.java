// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0401 {

    public static final int N = 400;

    public static long instanceCount=174L;
    public static short sFld=-6941;
    public double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0401.iArrFld, -72);
        FuzzerUtils.init(Test0401.fArrFld, -1.947F);
        FuzzerUtils.init(Test0401.lArrFld, 144L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vSmallMeth(int i1, double d) {

        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -80L);

        i1 *= i1;
        vSmallMeth_check_sum += i1 + Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i5, int i6, int i7) {

        float f1=1.580F;

        i7 >>= (int) (i5 >>= (int) ((++f1) + Test0401.instanceCount));
        f1 = (f1++);
        vMeth_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f1);
    }

    public static void vMeth1(int i8) {

        float f2=-2.694F;
        double d1=50.111406;
        double[] dArr =new double[N];
        int i9=-114, i10=163, i11=14, i12=-2;
        boolean b=true;
        short s=-14499;
        byte by1=-33;

        FuzzerUtils.init(dArr, 0.63602);

        Test0401.iArrFld[(i8 >>> 1) % N] += (int) f2;
        d1 += 4;
        Test0401.instanceCount ^= i8;
        Test0401.iArrFld[(i8 >>> 1) % N] %= (int) ((long) (f2) | 1);
        for (i9 = 308; i9 > 10; i9--) {
            if (b) break;
            s += (short)i8;
            dArr[i9 + 1] = d1;
            for (i11 = 1; 6 > i11; ++i11) {
                i12 = s;
                switch (((i11 % 10) * 5) + 25) {
                case 36:
                    Test0401.instanceCount <<= i11;
                case 61:
                    i8 >>= i8;
                    Test0401.iArrFld[i11 - 1] += (int) Test0401.instanceCount;
                    i10 += (i11 ^ i11);
                    break;
                case 70:
                case 33:
                    i12 = (int) Test0401.instanceCount;
                    break;
                case 64:
                    i10 = i11;
                case 38:
                    Test0401.iArrFld[i11] -= by1;
                case 43:
                    i12 *= (int) Test0401.instanceCount;
                    break;
                case 53:
                    Test0401.iArrFld[i11 - 1] *= i11;
                case 73:
                    try {
                        i12 = (i12 % 177);
                        i8 = (159 / i8);
                        i10 = (i8 / 1710901416);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 46:
                    i8 -= -13;
                    break;
                default:
                    i8 = i12;
                }
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d1) + i9 + i10 + (b ? 1 : 0) + s +
            i11 + i12 + by1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        int i13=4736, i14=-38022, i15=-171, i16=24688, i17=1, i18=-5;
        float f3=2.168F;
        double d2=1.89828;

        vMeth1(i13);
        i13 ^= Test0401.sFld;
        for (i14 = 21; i14 < 369; ++i14) {
            f3 -= i13;
            switch (((i14 % 1) * 5) + 40) {
            case 43:
                Test0401.instanceCount += i14;
                Test0401.iArrFld[i14 - 1] = i15;
                break;
            default:
                for (i16 = 1; i16 < 5; i16++) {
                    i18 = 1;
                    while (++i18 < 2) {
                        try {
                            i13 = (i13 % i16);
                            i17 = (i14 % Test0401.iArrFld[i14 - 1]);
                            i13 = (i14 / i13);
                        } catch (ArithmeticException a_e) {}
                        d2 *= Test0401.instanceCount;
                        Test0401.fArrFld[i16 - 1] *= i14;
                        f3 -= Test0401.instanceCount;
                        Test0401.iArrFld[i18 - 1] = i13;
                        Test0401.instanceCount <<= i18;
                    }
                }
            }
        }
        long meth_res = i13 + i14 + i15 + Float.floatToIntBits(f3) + i16 + i17 + i18 + Double.doubleToLongBits(d2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i2, int i3, int i4) {

        int i19=5, i20=6017, i21=115, i22=64347, i23=61411;
        float f4=2.706F;
        boolean b1=false;

        vMeth(--Test0401.iArrFld[(i3 >>> 1) % N], Math.abs(iMeth()), i3);
        i2 *= i3;
        for (i19 = 16; i19 < 324; ++i19) {
            i4 += (i19 - i20);
            f4 = Test0401.instanceCount;
            for (i21 = 1; i21 < 5; ++i21) {
                i22 = i3;
                if (b1) {
                    i2 = (int)f4;
                } else {
                    i23 = 1;
                    while (++i23 < 2) {
                        i3 -= i3;
                    }
                    if (b1) continue;
                    i22 <<= i23;
                    Test0401.lArrFld[i19 + 1] -= (long) f4;
                }
                i2 *= i19;
            }
        }
        long meth_res = i2 + i3 + i4 + i19 + i20 + Float.floatToIntBits(f4) + i21 + i22 + (b1 ? 1 : 0) + i23;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-16370, i24=-15, i25=3, i26=-211, i27=-14, i28=14;
        byte by=41;
        float f=-2.740F;
        boolean b2=false;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 154L);

        i = (int) (Test0401.instanceCount++);
        dArrFld[(i >>> 1) % N] *= Test0401.iArrFld[(i >>> 1) % N];
        for (int smallinvoc=0; smallinvoc<395; smallinvoc++) vSmallMeth((int)(((i * by) + (i++)) - ((-11 - (i + f)) -
            (i + f))), Double.longBitsToDouble(--lArr1[(-728 >>> 1) % N]) - ((~(i - i)) * (12 >>> lMeth(i, i, i))));
        i = Test0401.sFld;
        i24 = 1;
        while (++i24 < 334) {
            f += (((i24 * i24) + Test0401.instanceCount) - by);
            for (i25 = 75; i25 > 1; --i25) {
                Test0401.instanceCount ^= 4;
                f += (((i25 * i25) + Test0401.instanceCount) - i26);
                for (i27 = 1; i27 < 2; ++i27) {
                    i += i26;
                    if (b2) {
                        Test0401.iArrFld[i24 - 1] = i27;
                        i += (((i27 * i24) + f) - i);
                        i = (int) Test0401.instanceCount;
                        i += i25;
                    } else if (b2) {
                        switch (((i24 >>> 1) % 2) + 99) {
                        case 99:
                        case 100:
                            i26 &= (int) Test0401.instanceCount;
                        }
                        i26 += (int) Test0401.instanceCount;
                    } else if (b2) {
                        i28 *= -251;
                        i26 <<= i;
                        switch (((i25 % 5) * 5) + 112) {
                        case 129:
                            Test0401.instanceCount += i26;
                            if (b2) break;
                            dArrFld[i25 + 1] = i25;
                            i >>= i26;
                            break;
                        case 116:
                            Test0401.instanceCount += Test0401.instanceCount;
                            i28 = i28;
                            i >>= 1;
                            break;
                        case 113:
                            Test0401.instanceCount *= i26;
                        case 121:
                            i28 *= i24;
                            break;
                        case 117:
                            Test0401.iArrFld[i27] -= i27;
                            break;
                        }
                    } else {
                        i26 -= i26;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i by f = " + i + "," + by + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 b2 = " + i27 + "," + i28 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0401.instanceCount Test0401.sFld dArrFld = " + Test0401.instanceCount + "," + Test0401.sFld + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));
        FuzzerUtils.out.println("Test0401.iArrFld Test0401.fArrFld Test0401.lArrFld = " + FuzzerUtils.checkSum(Test0401.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0401.fArrFld)) + "," + FuzzerUtils.checkSum(Test0401.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0401 _instance = new Test0401();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
