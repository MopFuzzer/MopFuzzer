// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0164 {

    public static final int N = 400;

    public static volatile long instanceCount=-61345L;
    public static int iFld=154;
    public static double dFld=-64.83209;
    public short sFld=-13734;
    public static int iFld1=12;
    public short[] sArrFld =new short[N];
    public long[] lArrFld =new long[N];

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(double d2, byte by) {

        int i6=248;
        int i7=65084;
        int i8=6;
        int i9=-90;
        int[] iArr2 =new int[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr2, 175);
        FuzzerUtils.init(dArr, -3.9427);

        Test0164.iFld ^= Test0164.iFld;
        for (i6 = 9; i6 < 295; ++i6) {
            try {
                i7 = (911695864 / Test0164.iFld);
                iArr2[i6 + 1] = (Test0164.iFld % i7);
                Test0164.iFld = (iArr2[i6] / Test0164.iFld);
            } catch (ArithmeticException a_e) {}
        }
        dArr[(Test0164.iFld >>> 1) % N] = Test0164.iFld;
        for (i8 = 246; i8 > 1; i8 -= 3) {
            i7 += i8;
        }
        Test0164.instanceCount = i9;
        long meth_res = Double.doubleToLongBits(d2) + by + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static int iMeth(int i2, double d) {

        int i3=6;
        int i4=64;
        int i5=0;
        int i10=-31219;
        int i11=54511;
        int[] iArr1 =new int[N];
        double d1=2.76022;
        byte by1=106;
        float f=-1.9F;
        short s1=20262;

        FuzzerUtils.init(iArr1, 37520);

        for (i3 = 19; i3 < 369; ++i3) {
            for (d1 = 5; 1 < d1; d1--) {
                Test0164.instanceCount += (long) ((long) d1 | Test0164.instanceCount);
                iArr1[(int) (d1 + 1)] -= (int) (((i5--) * (Test0164.instanceCount--)) - (Test0164.instanceCount = (long) fMeth(d,
                    by1)));
                Test0164.iFld &= by1;
                i4 = i4;
                Test0164.iFld = i3;
                for (i10 = i3; i10 < 2; ++i10) {
                    if (i11 != 0) {
                    }
                    f -= i2;
                    i2 <<= i10;
                    switch (((i11 >>> 1) % 1) + 26) {
                    case 26:
                        if (true) continue;
                        iArr1[i10 - 1] = (int) Test0164.instanceCount;
                        i5 = i5;
                        break;
                    default:
                        f = s1;
                    }
                }
            }
        }
        long meth_res = i2 + Double.doubleToLongBits(d) + i3 + i4 + Double.doubleToLongBits(d1) + i5 + by1 + i10 + i11
            + Float.floatToIntBits(f) + s1 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void vMeth(int i, short s, long l) {

        int i1=-251;
        int i12=4;
        int i13=-188;
        int i14=45;
        int i15=13;
        int i16=-14917;
        int i17=-65254;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -119);

        iArr[(i >>> 1) % N] = (int)(((-i1) * (i1 - l)) + iArr[(i >>> 1) % N]);
        iArr[(i1 >>> 1) % N] = (i1++);
        i1 -= iMeth(i1, Test0164.dFld);
        i12 = 1;
        do {
            for (i13 = 1; i13 < 5; ++i13) {
                i += (2 + (i13 * i13));
                Test0164.iFld += i13;
                i14 *= (int) Test0164.dFld;
                Test0164.instanceCount >>= Test0164.instanceCount;
                i15 = 1;
                while (++i15 < 2) {
                    i14 = i15;
                    i >>= 44473;
                }
                for (i16 = 1; i16 < 2; i16++) {
                    i = i;
                    i17 = i13;
                }
            }
        } while (++i12 < 331);
        vMeth_check_sum += i + s + l + i1 + i12 + i13 + i14 + i15 + i16 + i17 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i18=12;
        int i19=204;
        int i20=92;
        int i21=-17587;
        int i22=-26;
        int i23=-13;
        int i24=-22;
        int i25=147;
        int[] iArr3 =new int[N];
        float f1=0.542F;

        FuzzerUtils.init(iArr3, -53710);

        vMeth(Test0164.iFld, sFld, Test0164.instanceCount);
        for (i18 = 5; i18 < 129; i18++) {
            byte by2=-20;
            iArr3[i18] >>= i18;
            Test0164.instanceCount /= (by2 | 1);
            Test0164.instanceCount += (-42 + (i18 * i18));
            iArr3[i18] = i19;
            sFld = (short)i18;
            i19 += i19;
            for (i20 = 12; 202 > i20; ++i20) {
                i19 <<= (int) Test0164.instanceCount;
                i21 = -19021;
                for (i22 = 1; i22 < 2; ++i22) {
                    by2 <<= (byte)i21;
                    Test0164.iFld *= (int) -3296154918382573666L;
                    f1 -= i21;
                    f1 += (i22 * Test0164.instanceCount);
                    Test0164.iFld1 += (((i22 * Test0164.instanceCount) + i20) - f1);
                    iArr3 = FuzzerUtils.int1array(N, (int)51582);
                    sFld += (short) (((i22 * i19) + Test0164.instanceCount) - i18);
                    sArrFld[i22 + 1] *= (short)27;
                    Test0164.iFld = i21;
                }
                for (i24 = 2; 1 < i24; i24 -= 3) {
                    i21 >>= Test0164.iFld1;
                    Test0164.iFld += (((i24 * i18) + i18) - Test0164.instanceCount);
                    switch (((i18 % 1) * 5) + 30) {
                    case 32:
                        lArrFld[i18] = 36269;
                        break;
                    default:
                        iArr3[i24] = (int) Test0164.instanceCount;
                        i21 = i22;
                        i25 += 10;
                    }
                    Test0164.iFld *= i25;
                }
            }
        }

        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("f1 i24 i25 = " + Float.floatToIntBits(f1) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0164.instanceCount Test0164.iFld Test0164.dFld = " + Test0164.instanceCount + "," + Test0164.iFld +
                "," + Double.doubleToLongBits(Test0164.dFld));
        FuzzerUtils.out.println("sFld Test0164.iFld1 sArrFld = " + sFld + "," + Test0164.iFld1 + "," +
            FuzzerUtils.checkSum(sArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0164 _instance = new Test0164();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  fMeth ->  fMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
