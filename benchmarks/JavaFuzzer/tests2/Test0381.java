// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:29 2023
public class Test0381 {

    public static final int N = 400;

    public static long instanceCount=3L;
    public static int iFld=18;
    public static int iFld1=-108;
    public static double dFld=0.45983;
    public static volatile float fFld=-2.735F;
    public static int[] iArrFld =new int[N];
    public static short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0381.iArrFld, 9);
        FuzzerUtils.init(Test0381.sArrFld, (short) 22218);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static int iMeth(int i1, int i2) {

        long l1=6492600138572231269L, l2=-189L;
        double d=-114.92072;
        int i3=6500, i4=-3, i5=-12, i6=-216, i7=-57585;
        float f1=0.842F;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 108.607F);

        l1 = 1;
        do {
            i1 = (int) Math.max(Test0381.iArrFld[(int) (l1 - 1)] % ((i2 - -40587L) | 1), (long) (-(i2 - d)));
        } while (++l1 < 221);
        for (i3 = 14; i3 < 360; ++i3) {
            i4 <<= (int)((-(i4 / (i2 | 1))) - (29319 - (i1 + l1)));
            i2 *= Test0381.iFld;
            for (l2 = 1; l2 < 5; l2++) {
                Test0381.iArrFld[i3] -= 3183;
                for (i6 = 1; i6 < 2; i6++) {
                    Test0381.iArrFld[i3] += (Test0381.iArrFld[i6 + 1]++);
                    Test0381.instanceCount = (Test0381.instanceCount--);
                    Test0381.instanceCount = i1;
                    f1 += (float) (d + (Math.min(i5, i3) + (Test0381.instanceCount + i5)));
                    i7 += (--Test0381.iFld);
                    i4 = (int) (Test0381.sArrFld[(int) (l2)] &= (short) (-Float.intBitsToFloat(i2)));
                    Test0381.instanceCount = (i1 = (int) ((i1 - i6) * (--fArr1[i3])));
                }
            }
        }
        long meth_res = i1 + i2 + l1 + Double.doubleToLongBits(d) + i3 + i4 + l2 + i5 + i6 + i7 +
            Float.floatToIntBits(f1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth2(int i15, long l3, int i16) {

        int i17=-16419;
        int i18=-3;
        int i19=19076;
        int i20=142;
        int i21=48205;
        int i22=-59490;
        int i23=-47;
        int i24=-6;
        int i25=-44258;
        int[] iArr =new
                    int[N];
        float f3=1.330F;
        short s2=32476;
        byte by=-17;

        FuzzerUtils.init(iArr, -14);

        for (i17 = 1; i17 < 148; i17++) {
            try {
                Test0381.iFld1 = (-10802 / i17);
                i18 = (i16 / -1815797856);
                iArr[i17] = (i16 % i15);
            } catch (ArithmeticException a_e) {}
            for (i19 = 1; i19 < 11; i19++) {
                short s1=21421;
                s1 += (short)i19;
            }
            i20 += (int) Test0381.fFld;
        }
        for (f3 = 12; f3 < 222; f3++) {
            for (i22 = (int)(f3); i22 < 8; i22++) {
                i21 -= (int)l3;
                for (i24 = 1; i24 < 1; ++i24) {
                    s2 += (short)i18;
                }
                by -= (byte)i22;
                i25 /= (int)(s2 | 1);
                Test0381.instanceCount *= Test0381.iFld1;
                i15 += Test0381.iFld1;
                i25 = i23;
            }
        }
        vMeth2_check_sum += i15 + l3 + i16 + i17 + i18 + i19 + i20 + Float.floatToIntBits(f3) + i21 + i22 + i23 + i24 +
            i25 + s2 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i12, int i13) {

        float f2=-1.542F;
        int i14=-205, i26=-18873, i27=3;
        boolean b=true;
        long l4=40L;
        byte by1=52;

        for (f2 = 15; f2 < 324; f2++) {
            vMeth2(Test0381.iFld1, -28448L, -239);
            for (i26 = 1; i26 < 5; ++i26) {
                i12 += (i26 * i26);
                Test0381.instanceCount *= -249;
                b = false;
                Test0381.fFld *= l4;
                Test0381.iFld1 += (int) (51022L + (i26 * i26));
                Test0381.iArrFld[(int) (f2 - 1)] -= (int) Test0381.instanceCount;
                Test0381.iFld *= i12;
                Test0381.iFld += i26;
                if (b) continue;
                Test0381.iFld += by1;
            }
            by1 = (byte)-11486;
            Test0381.iFld1 += (int) (f2 * f2);
        }
        vMeth1_check_sum += i12 + i13 + Float.floatToIntBits(f2) + i14 + i26 + i27 + (b ? 1 : 0) + l4 + by1;
    }

    public static void vMeth(long l) {

        int i=13, i8=-60, i9=8, i10=-159, i11=3;
        float f=10.574F;
        float[] fArr =new float[N];
        short s=-20439;
        boolean b1=true;

        FuzzerUtils.init(fArr, -32.690F);

        i = 1;
        do {
            switch (((((int) (-25.95252 + (Test0381.iFld--))) >>> 1) % 4) + 102) {
            case 102:
                f -= (++l);
                break;
            case 103:
                Test0381.iFld = (int) (fArr[i + 1] + (Test0381.iFld--));
                break;
            case 104:
                switch (((i % 3) * 5) + 51) {
                case 65:
                    iMeth(--Test0381.iArrFld[i + 1], (int) ((++Test0381.iFld) + fArr[i]));
                    break;
                case 64:
                    Test0381.iFld = (++Test0381.iFld);
                    for (i8 = 1; 7 > i8; ++i8) {
                        for (i10 = 1; i10 < 2; i10++) {
                            Test0381.iFld1 = i;
                            Test0381.dFld -= l;
                            Test0381.dFld -= 11;
                        }
                        i9 += i8;
                        s += (short)(0 + (i8 * i8));
                        vMeth1(-4120, Test0381.iFld1);
                    }
                    break;
                case 54:
                    Test0381.iFld1 += i11;
                default:
                    if (b1) break;
                }
                break;
            case 105:
                Test0381.iFld1 += (59 + (i * i));
                break;
            }
        } while (++i < 239);
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + s + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public void mainTest(String[] strArr1) {

        int i28=-12;
        int i29=213;
        int i30=10;
        int i31=-62466;
        int i32=124;
        int i33=1;
        int i34=245;
        int i35=-61556;
        int i36=87;
        int i37=181;
        int[] iArr1 =new
                    int[N];
        int[][] iArr2 =new int[N][N];
        short s3=11246;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -182);
        FuzzerUtils.init(iArr2, 54003);
        FuzzerUtils.init(lArr, 34236L);

        vMeth(38800L);
        iArr1[(Test0381.iFld1 >>> 1) % N] += Test0381.iFld;
        for (i28 = 7; 302 > i28; i28++) {
            boolean b2=false;
            for (i30 = 4; i30 < 85; i30++) {
                for (i32 = i28; 2 > i32; ++i32) {
                    Test0381.iFld += (i32 + i28);
                    Test0381.instanceCount += (long) Test0381.fFld;
                    iArr2 = iArr2;
                }
                for (i34 = i28; i34 < 2; i34++) {
                    Test0381.instanceCount |= 54;
                    Test0381.instanceCount = 6;
                    Test0381.fFld *= Test0381.iFld1;
                    Test0381.fFld = Test0381.instanceCount;
                }
                i35 += (((i30 * i30) + i31) - i35);
                Test0381.instanceCount += (i30 * i30);
            }
            Test0381.instanceCount += (i28 * i28);
            switch (((i28 % 2) * 5) + 70) {
            case 77:
            case 74:
                Test0381.fFld += s3;
                i33 = (int) Test0381.instanceCount;
                break;
            default:
                Test0381.iArrFld = iArr1;
                i33 += (((i28 * Test0381.iFld) + i31) - i34);
                if (b2) continue;
            }
            i29 += (i28 - i34);
        }
        for (i36 = 385; i36 > 21; --i36) {
            lArr[i36 - 1] += (long) Test0381.dFld;
        }
        lArr = lArr;
        Test0381.iFld = i29;
        Test0381.instanceCount *= 135;
        i37 += (int) Test0381.instanceCount;
        Test0381.dFld -= s3;

        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 i35 s3 = " + i34 + "," + i35 + "," + s3);
        FuzzerUtils.out.println("i36 i37 iArr1 = " + i36 + "," + i37 + "," + FuzzerUtils.checkSum(iArr1));
        FuzzerUtils.out.println("iArr2 lArr = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0381.instanceCount Test0381.iFld Test0381.iFld1 = " + Test0381.instanceCount + "," + Test0381.iFld +
                "," + Test0381.iFld1);
        FuzzerUtils.out.println("Test0381.dFld Test0381.fFld Test0381.iArrFld = " + Double.doubleToLongBits(Test0381.dFld) + "," +
                Float.floatToIntBits(Test0381.fFld) + "," + FuzzerUtils.checkSum(Test0381.iArrFld));
        FuzzerUtils.out.println("Test0381.sArrFld = " + FuzzerUtils.checkSum(Test0381.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0381 _instance = new Test0381();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
