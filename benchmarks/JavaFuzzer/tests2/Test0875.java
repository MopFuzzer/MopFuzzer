// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0875 {

    public static final int N = 400;

    public static long instanceCount=-1932885880L;
    public static float fFld=2.932F;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0875.lArrFld, 3298625757L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(double d, int i, double d1) {

        double d2=0.101958;
        int i1=-7;
        int i2=44029;
        int i3=-15389;
        int i4=-130;
        int i5=3;
        int[] iArr =new int[N];
        short s=18443;
        long l3=3564150544L;
        float f=0.280F;
        boolean b=true;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(iArr, 12);
        FuzzerUtils.init(bArr, false);

        for (d2 = 245; d2 > 15; d2 -= 3) {
            if (i != 0) {
                vMeth2_check_sum += Double.doubleToLongBits(d) + i + Double.doubleToLongBits(d1) +
                    Double.doubleToLongBits(d2) + i1 + i2 + i3 + s + l3 + i4 + i5 + Float.floatToIntBits(f) + (b ? 1 :
                    0) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
                return;
            }
            for (i2 = 20; i2 > 1; i2--) {
                i3 &= s;
                Test0875.instanceCount = (long) d;
                if (b) {
                    l3 = 1;
                    do {
                        iArr = iArr;
                        i1 = (int)1.33791;
                    } while (++l3 < 2);
                    for (i4 = i2; 2 > i4; ++i4) {
                        switch (((i2 >>> 1) % 4) + 30) {
                        case 30:
                            if (b) {
                                f -= i4;
                                if (b) break;
                                i5 = i3;
                            } else if (true) {
                                iArr = iArr;
                            } else if (b) {
                                if (b) break;
                            } else {
                                Test0875.instanceCount &= 50304;
                            }
                            break;
                        case 31:
                            i3 = (int)d2;
                            break;
                        case 32:
                            i1 -= i2;
                        case 33:
                            if (i1 != 0) {
                                vMeth2_check_sum += Double.doubleToLongBits(d) + i + Double.doubleToLongBits(d1) +
                                    Double.doubleToLongBits(d2) + i1 + i2 + i3 + s + l3 + i4 + i5 +
                                    Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
                                    FuzzerUtils.checkSum(bArr);
                                return;
                            }
                            break;
                        }
                    }
                } else {
                    bArr[(int)(d2 - 1)] = b;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2)
            + i1 + i2 + i3 + s + l3 + i4 + i5 + Float.floatToIntBits(f) + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(bArr);
    }

    public static void vMeth1(byte by, long l1, long l2) {

        double d3=0.124042, d4=-127.69172;
        int i6=-3, i7=44, i8=24000, i9=-6, i10=-46326, i11=-9, i12=53450;
        float f1=-1.226F;

        vMeth2(d3, i6, d3);
        d3 += d3;
        for (f1 = 23; f1 < 374; f1++) {
            i6 += (int)l1;
            for (d4 = 1; d4 < 5; d4++) {
                i7 += (int)f1;
                i7 >>= (int)-53205L;
                l1 += i8;
                l2 &= Test0875.instanceCount;
            }
            i8 = (int)61686L;
            for (i9 = (int)(f1); i9 < 5; i9++) {
                i8 = i10;
                for (i11 = 1; 1 > i11; i11++) {
                    Test0875.fFld %= 170;
                    Test0875.fFld += i11;
                }
            }
        }
        vMeth1_check_sum += by + l1 + l2 + Double.doubleToLongBits(d3) + i6 + Float.floatToIntBits(f1) + i7 +
            Double.doubleToLongBits(d4) + i8 + i9 + i10 + i11 + i12;
    }

    public static void vMeth(long l) {

        byte by1=-105;

        vMeth1(by1, Test0875.instanceCount, Test0875.instanceCount);
        vMeth_check_sum += l + by1;
    }

    public void mainTest(String[] strArr1) {

        int i13=-44333;
        int i14=62;
        int i15=-45;
        int i16=-12;
        int i17=-10;
        int i18=110;
        int i19=-11371;
        int i20=34582;
        int i21=1;
        int i22=18;
        int i23=43229;
        int i24=-105;
        int i25=-18415;
        int[] iArr1 =new int[N];
        boolean b1=false;
        float f2=-2.807F;

        FuzzerUtils.init(iArr1, -6);

        vMeth(Test0875.instanceCount);
        for (i13 = 12; i13 < 339; i13++) {
            i14 = i13;
            for (i15 = 77; i15 > i13; i15--) {
                for (i17 = 1; i17 < 1; ++i17) {
                    Test0875.instanceCount -= i16;
                    b1 = b1;
                    Test0875.instanceCount = Test0875.instanceCount;
                    if (b1) continue;
                    i16 += (i17 * i17);
                    Test0875.fFld -= 34554;
                    try {
                        i16 = (i14 / iArr1[i13]);
                        i18 = (iArr1[i17] / -59268);
                        i18 = (i15 % -115);
                    } catch (ArithmeticException a_e) {}
                    Test0875.instanceCount = i18;
                }
            }
            Test0875.instanceCount *= Test0875.instanceCount;
            i16 += i13;
            Test0875.fFld *= i15;
            Test0875.fFld += i13;
            for (i19 = 4; 77 > i19; i19++) {
                short s1=-26206;
                i16 ^= (int)-53924L;
                s1 += (short)24705;
            }
        }
        for (f2 = 392; f2 > 23; f2--) {
            Test0875.instanceCount = i13;
            if (b1) {
                i14 = (int) Test0875.instanceCount;
                Test0875.fFld += i21;
                for (i22 = 1; 68 > i22; ++i22) {
                    Test0875.lArrFld[(int) (f2 + 1)] += i18;
                }
            } else if (false) {
                for (i24 = 2; i24 < 68; ++i24) {
                    if (b1) break;
                    Test0875.instanceCount = i24;
                }
            }
        }

        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("b1 i19 i20 = " + (b1 ? 1 : 0) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f2 i21 i22 = " + Float.floatToIntBits(f2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0875.instanceCount Test0875.fFld Test0875.lArrFld = " + Test0875.instanceCount + "," +
                Float.floatToIntBits(Test0875.fFld) + "," + FuzzerUtils.checkSum(Test0875.lArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0875 _instance = new Test0875();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
