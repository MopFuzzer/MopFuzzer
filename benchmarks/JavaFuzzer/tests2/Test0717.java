// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:46 2023
public class Test0717 {

    public static final int N = 400;

    public static long instanceCount=-97L;
    public static volatile short sFld=-29485;
    public static byte byFld=69;
    public static double dFld=75.40378;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0717.iArrFld, 105);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(long l1, int i11) {

        byte by=59;
        float f=-2.403F, f1=-1.840F;
        int i13=14926;
        int i14=-31895;
        int i15=-190;
        int i16=-44926;
        int i17=87;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -129);

        for (int i12 : iArr) {
            by = (byte)f;
            for (f1 = 1; f1 < 4; ++f1) {
                i13 += (int)(f1 * f1);
                i12 -= by;
            }
            for (i14 = 1; 4 > i14; ++i14) {
                i15 += i14;
                switch ((((i15 >>> 1) % 8) * 5) + 43) {
                case 68:
                    for (i16 = 1; i16 < 2; i16++) {
                        Test0717.instanceCount += i16;
                        l1 = i16;
                        i11 = Test0717.sFld;
                        iArr[i16 - 1] = i17;
                        i13 = 7;
                        iArr = iArr;
                    }
                    break;
                case 57:
                case 44:
                    f -= i13;
                    break;
                case 78:
                    Test0717.instanceCount = i12;
                    break;
                case 51:
                    if (i12 != 0) {
                    }
                    break;
                case 67:
                case 81:
                    i15 += i14;
                    break;
                case 73:
                    iArr[i14] = -2;
                    break;
                default:
                    i12 += (((i14 * i16) + i17) - Test0717.sFld);
                }
            }
        }
        long meth_res = l1 + i11 + by + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 +
            i17 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i3, int i4) {

        int i5=13, i6=21524, i7=-9439, i8=2, i9=-12, i10=-148, i18=14, i19=251, i20=-4;
        double d=30.107458;

        for (i5 = 7; i5 < 160; i5++) {
            i6 = (int) ((++Test0717.instanceCount) * (i4++));
            for (i7 = 1; i7 < 10; ++i7) {
                for (i9 = 1; i9 < 2; ++i9) {
                    i8 |= iMeth1(Test0717.instanceCount, i9);
                }
                i4 |= 0;
                i8 += (int)-5289781277920415646L;
                Test0717.instanceCount ^= i7;
                for (i18 = 1; i18 < 2; ++i18) {
                    boolean b=true;
                    if (b) continue;
                    Test0717.byFld = (byte) 1;
                    Test0717.iArrFld[i5] += (int) Test0717.instanceCount;
                }
                for (d = 1; 2 > d; ++d) {
                    Test0717.instanceCount >>= Test0717.instanceCount;
                    i10 += (int) (((d * i6) + i10) - Test0717.instanceCount);
                }
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i18 + i19 + Double.doubleToLongBits(d) + i20;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth(long l, int i2) {


        l = (i2++);
        i2 += iMeth(3, i2);
        vSmallMeth_check_sum += l + i2;
    }

    public void mainTest(String[] strArr1) {

        int i=254, i1=30709, i21=-28006, i22=-79, i23=-10666, i24=-145, i25=7, i26=234;
        float f2=37.618F;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -3659884367364015093L);

        i <<= (~((-(++i)) * -3));
        i1 = 372;
        while ((i1 -= 3) > 0) {
            for (int smallinvoc = 0; smallinvoc < 62; smallinvoc++) vSmallMeth(Test0717.instanceCount, i1);
            for (i21 = 202; i21 > 7; i21--) {
                i *= i22;
                for (i23 = 2; i23 > i21; i23--) {
                    Test0717.dFld = i24;
                    i += i23;
                    Test0717.iArrFld[i21] = i23;
                }
                if (false) continue;
                f2 += i21;
                i24 -= (int)-4598754736542836707L;
                i24 += (i21 + Test0717.instanceCount);
                for (i25 = 1; 2 > i25; ++i25) {
                    i22 += i25;
                    if (true) continue;
                    i24 = (int) Test0717.instanceCount;
                    switch (((i1 % 5) * 5) + 51) {
                    case 72:
                        f2 = i26;
                        if (true) continue;
                        break;
                    case 62:
                    case 61:
                        switch (((i21 % 3) * 5) + 84) {
                        case 85:
                            lArr[i1 + 1] *= i23;
                            Test0717.instanceCount <<= i23;
                            f2 -= f2;
                            break;
                        case 87:
                            Test0717.dFld = Test0717.dFld;
                            break;
                        case 92:
                            i26 += Test0717.sFld;
                            break;
                        }
                        i26 >>= (int) Test0717.instanceCount;
                        Test0717.iArrFld[i1 - 1] >>= 60564;
                    case 75:
                        i22 <<= (int) Test0717.instanceCount;
                        Test0717.instanceCount >>= i23;
                        break;
                    case 64:
                        i24 -= i24;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("f2 i25 i26 = " + Float.floatToIntBits(f2) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("lArr = " + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0717.instanceCount Test0717.sFld Test0717.byFld = " + Test0717.instanceCount + "," + Test0717.sFld +
                "," + Test0717.byFld);
        FuzzerUtils.out.println("Test0717.dFld Test0717.iArrFld = " + Double.doubleToLongBits(Test0717.dFld) + "," +
                FuzzerUtils.checkSum(Test0717.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0717 _instance = new Test0717();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  iMeth1 ->  iMeth1 iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
