// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:41 2023
public class Test0632 {

    public static final int N = 400;

    public static long instanceCount=-212L;
    public static volatile double dFld=-1.26972;
    public static volatile byte byFld=58;
    public static float fFld=0.130F;
    public static short sFld=-10203;
    public int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];
    public volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0632.fArrFld, 0.240F);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(byte by) {

        float f=0.111F;
        int i8=7;
        int i9=8;
        int i10=12813;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -113);

        for (int i7 : iArr) {
            switch ((((i7 >>> 1) % 2) * 5) + 35) {
            case 42:
                i7 = 66;
                for (f = 1; f < 4; ++f) {
                    Test0632.fArrFld[(int) (f)] += (float) Test0632.dFld;
                    Test0632.instanceCount = (long) f;
                    i7 += (int)-255400629L;
                    for (i9 = 1; i9 < 2; ++i9) {
                        iArr[(int)(f + 1)] *= (int)1.610F;
                        i7 &= -3;
                        Test0632.fArrFld[i9 + 1] += i8;
                        i8 += (i9 * i9);
                        Test0632.instanceCount += i9;
                        i8 += (int) Test0632.instanceCount;
                        i8 = i8;
                    }
                }
                break;
            case 43:
                iArr[(i8 >>> 1) % N] -= (int) Test0632.instanceCount;
                break;
            default:
                i7 -= (int) Test0632.instanceCount;
            }
        }
        vMeth1_check_sum += by + Float.floatToIntBits(f) + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i5, int i6) {

        int i11=-24234;
        int i12=22257;
        int i13=8;
        int i14=246;
        int i15=19484;
        int[] iArr1 =new int[N];
        short s=-17342;
        boolean b=true;
        double[] dArr =new double[N];
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, 12);
        FuzzerUtils.init(dArr, -29.84816);
        FuzzerUtils.init(lArr, -38509L);

        vMeth1(Test0632.byFld);
        for (i11 = 12; i11 < 312; ++i11) {
            s += (short) (((i11 * Test0632.instanceCount) + i12) - i11);
            i13 = 6;
            while (--i13 > 0) {
                Test0632.fFld += (i13 * i13);
                for (i14 = 1; i14 < 1; ++i14) {
                    iArr1[i13 + 1] += i12;
                    Test0632.instanceCount <<= i6;
                    dArr[i14] *= i15;
                    switch ((i11 % 6) + 88) {
                    case 88:
                        iArr1[i11] = (int) Test0632.instanceCount;
                        lArr[i13 - 1] -= Test0632.instanceCount;
                        break;
                    case 89:
                        try {
                            i5 = (iArr1[i14 + 1] % 186);
                            i12 = (1567842894 % i14);
                            i15 = (0 / iArr1[i11 - 1]);
                        } catch (ArithmeticException a_e) {}
                    case 90:
                        iArr1[i13 - 1] = i12;
                        i15 += i14;
                        break;
                    case 91:
                        Test0632.byFld *= (byte) -6;
                        break;
                    case 92:
                        if (b) continue;
                    case 93:
                        Test0632.dFld += 2;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i11 + i12 + s + i13 + i14 + i15 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i4) {

        int i16=11552;
        int i17=14;
        int i18=-3;
        int i19=12;
        int i20=111;
        int i21=46394;
        int i22=-4;
        int i23=9;
        int[] iArr2 =new int[N];
        boolean b1=true;

        FuzzerUtils.init(iArr2, -45763);

        vMeth(134, i4);
        for (i16 = 10; i16 < 163; ++i16) {
            for (i18 = 1; i18 < 10; i18++) {
                iArr2[i18] &= i16;
            }
            if (b1) continue;
            for (i20 = 1; i20 < 10; ++i20) {
                Test0632.instanceCount /= (Test0632.instanceCount | 1);
                i19 = i4;
                switch ((i20 % 1) + 106) {
                case 106:
                    try {
                        iArr2[i16 - 1] = (-1699438614 / iArr2[i20 - 1]);
                        iArr2[i16 + 1] = (i21 / -76);
                        i4 = (-25657 % iArr2[i20 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i19 += i20;
                    break;
                }
                for (i22 = 1; i22 < 2; i22++) {
                    if (b1) continue;
                    i4 -= (int) Test0632.fFld;
                    i4 += i22;
                }
            }
        }
        long meth_res = i4 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-14;
        int i1=152;
        int i2=11;
        int i3=63617;
        int i24=4;
        int[][] iArr3 =new int[N][N];
        double d=1.21012;
        double d1=7.84071;
        double[] dArr1 =new double[N];
        byte by1=106;
        boolean b2=false;

        FuzzerUtils.init(dArr1, 0.87354);
        FuzzerUtils.init(iArr3, 110);

        for (i = 2; i < 197; i++) {
            i2 = 129;
            do {
                i3 = 1;
                while (++i3 < 1) {
                    iArrFld[i2] = (int) (((d * d) - (i * i2)) * Test0632.instanceCount);
                    d1 *= (iMeth(146) + Test0632.fFld);
                    i1 += (((i3 * Test0632.instanceCount) + Test0632.fFld) - i);
                    iArrFld[i3] *= (int) Test0632.instanceCount;
                    dArr1[i + 1] += Test0632.instanceCount;
                    Test0632.sFld = (short) i;
                    Test0632.byFld <<= by1;
                }
                switch ((((i2 >>> 1) % 3) * 5) + 14) {
                case 28:
                    i1 -= 40;
                    Test0632.fFld -= i3;
                    iArrFld[i2 + 1] -= -246;
                    lArrFld[i] = i2;
                case 15:
                    dArr1[i] += Test0632.fFld;
                    break;
                case 18:
                    i1 += -14;
                default:
                    switch ((((i >>> 1) % 3) * 5) + 121) {
                    case 130:
                        Test0632.byFld = (byte) i3;
                        iArrFld = iArrFld;
                        Test0632.instanceCount &= 1132515455450050209L;
                        Test0632.instanceCount += (i2 * i1);
                        break;
                    case 134:
                        i24 = 1;
                        while (++i24 < 1) {
                            switch (((i % 10) * 5) + 32) {
                            case 77:
                                lArrFld[i24 - 1] = i3;
                                i1 *= i3;
                                break;
                            case 47:
                                i1 += (i24 * i24);
                                if (b2) continue;
                                try {
                                    i1 = (37871 / iArr3[i24 + 1][i + 1]);
                                    i1 = (-43314 / iArrFld[i]);
                                    i1 = (iArrFld[i24 - 1] % 33);
                                } catch (ArithmeticException a_e) {}
                                Test0632.fArrFld[i2] = i24;
                            case 36:
                                b2 = b2;
                                break;
                            case 66:
                                Test0632.instanceCount = i;
                                break;
                            case 33:
                                i1 = -14;
                                break;
                            case 44:
                                Test0632.instanceCount = i24;
                                break;
                            case 53:
                                Test0632.instanceCount += i24;
                                break;
                            case 52:
                                try {
                                    i1 = (iArr3[i][i24 - 1] / 229);
                                    iArrFld[i24 + 1] = (iArrFld[i] / i1);
                                    i1 = (iArr3[i + 1][i - 1] % 151827992);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 40:
                                i1 >>= -2;
                                break;
                            case 72:
                                i1 = i3;
                                break;
                            default:
                                i1 &= (int)-165L;
                            }
                        }
                        break;
                    case 122:
                        i1 -= i24;
                    }
                }
            } while (--i2 > 0);
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d d1 = " + i3 + "," + Double.doubleToLongBits(d) + "," +
            Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("by1 i24 b2 = " + by1 + "," + i24 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("dArr1 iArr3 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0632.instanceCount Test0632.dFld Test0632.byFld = " + Test0632.instanceCount + "," +
                Double.doubleToLongBits(Test0632.dFld) + "," + Test0632.byFld);
        FuzzerUtils.out.println("Test0632.fFld Test0632.sFld iArrFld = " + Float.floatToIntBits(Test0632.fFld) + "," + Test0632.sFld +
            "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0632.fArrFld lArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0632.fArrFld))
            + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0632 _instance = new Test0632();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
