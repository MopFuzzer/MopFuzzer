// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0114 {

    public static final int N = 400;

    public static long instanceCount=5291180033408278317L;
    public int iFld=122;
    public static short sFld=18507;
    public static double dFld=64.40836;
    public static boolean bFld=true;
    public static int[] iArrFld =new int[N];
    public short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0114.iArrFld, 47081);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i4, short s, short s1) {

        boolean b=true;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 43991);

        b = true;
        iArr = iArr;
        vMeth2_check_sum += i4 + s + s1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1() {

        int i3=-97, i5=-52, i6=-41503, i7=-7500, i8=-56210, i9=-32984;
        float f=-6.964F;
        float[][] fArr =new float[N][N];
        boolean b2=true;
        long[] lArr =new long[N];

        FuzzerUtils.init(fArr, 105.574F);
        FuzzerUtils.init(lArr, -7L);

        i3 = (int)(i3 + (fArr[(-37604 >>> 1) % N][(i3 >>> 1) % N] = (lArr[(i3 >>> 1) % N]++)));
        vMeth2(i3, Test0114.sFld, Test0114.sFld);
        for (i5 = 4; i5 < 204; i5++) {
            Test0114.iArrFld = Test0114.iArrFld;
            if (b2) {
                for (i7 = 8; i7 > 1; --i7) {
                    try {
                        i8 = (-128 / i7);
                        i6 = (i3 % 15316);
                        i6 = (235 / i6);
                    } catch (ArithmeticException a_e) {}
                    i8 = (int) Test0114.instanceCount;
                    i6 += i6;
                    try {
                        i6 = (i8 / 19477);
                        i8 = (i8 / -2110098849);
                        i6 = (Test0114.iArrFld[i7 + 1] % i5);
                    } catch (ArithmeticException a_e) {}
                    i9 = 1;
                    do {
                        boolean b1=false;
                        b1 = b1;
                        f = 2.523F;
                        lArr = lArr;
                        Test0114.iArrFld[i7 + 1] = 140;
                    } while (++i9 < 2);
                }
            } else {
                i8 += (233 + (i5 * i5));
            }
        }
        vMeth1_check_sum += i3 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + (b2 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(byte by, int i2) {

        int i10=-222, i11=-9, i12=-97, i13=3, i14=-202, i15=-152, i16=-62001, i17=-14, i18=13, i19=6;
        boolean b3=false;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 4L);

        vMeth1();
        for (i10 = 14; 336 > i10; i10++) {
            lArr1[i10] *= Test0114.sFld;
            Test0114.instanceCount += i10;
            if (b3) {
                i11 *= i10;
                for (i12 = 1; i12 < 5; i12++) {
                    for (i14 = i12; 2 > i14; ++i14) {
                        Test0114.dFld /= (Test0114.instanceCount | 1);
                    }
                    lArr1[i10 - 1] &= i2;
                }
            } else {
                for (i16 = 1; i16 < 5; ++i16) {
                    try {
                        i11 = (32685 % i10);
                        i11 = (i11 % -10);
                        i13 = (8758 % i10);
                    } catch (ArithmeticException a_e) {}
                    for (i18 = 2; i18 > 1; i18--) {
                        if (i13 != 0) {
                            vMeth_check_sum += by + i2 + i10 + i11 + i12 + i13 + i14 + i15 + (b3 ? 1 : 0) + i16 + i17 +
                                i18 + i19 + FuzzerUtils.checkSum(lArr1);
                            return;
                        }
                        Test0114.instanceCount = Test0114.sFld;
                    }
                }
                vMeth_check_sum += by + i2 + i10 + i11 + i12 + i13 + i14 + i15 + (b3 ? 1 : 0) + i16 + i17 + i18 + i19 +
                    FuzzerUtils.checkSum(lArr1);
                return;
            }
        }
        vMeth_check_sum += by + i2 + i10 + i11 + i12 + i13 + i14 + i15 + (b3 ? 1 : 0) + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-96.94913;
        int i=6, i1=-8, i20=-16686, i21=-3, i22=-143, i23=153, i24=2;
        float[] fArr1 =new float[N];
        long[] lArr2 =new long[N];

        FuzzerUtils.init(fArr1, 76.784F);
        FuzzerUtils.init(lArr2, -28L);

        iFld = Math.abs((int)((d - iFld) * Math.max(iFld, iFld)));
        for (i = 5; i < 177; ++i) {
            switch ((i % 2) + 51) {
            case 51:
                vMeth((byte)(112), iFld);
                iFld *= i1;
                i20 = 1;
                while (++i20 < 146) {
                    i1 = i20;
                }
                break;
            case 52:
                Test0114.instanceCount += (i * i);
                for (i21 = 146; i21 > 9; i21--) {
                    fArr1[i21 - 1] = 22540;
                    try {
                        i22 = (i22 % 123);
                        i22 = (197 / i1);
                        i22 = (33678 / i1);
                    } catch (ArithmeticException a_e) {}
                    iFld *= iFld;
                    Test0114.iArrFld[i - 1] >>= (int) -4184556489L;
                    Test0114.iArrFld[i21] += i1;
                    for (i23 = 1; i23 < 2; ++i23) {
                        iFld += (((i23 * i24) + Test0114.instanceCount) - Test0114.instanceCount);
                        i24 = -11;
                        i1 += (i23 ^ Test0114.instanceCount);
                        i24 <<= -12673;
                        i24 <<= i22;
                        i22 >>= -11185;
                        if (Test0114.bFld) {
                            Test0114.dFld += i22;
                            i22 += 5;
                            fArr1[i21 - 1] = Test0114.instanceCount;
                            lArr2[i23 + 1] *= i22;
                        } else {
                            if (Test0114.bFld) break;
                        }
                        i24 -= 44769;
                    }
                    Test0114.instanceCount *= i20;
                    i22 *= (int)d;
                }
                break;
            default:
                sArrFld = sArrFld;
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 fArr1 = " + i23 + "," + i24 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("lArr2 = " + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0114.instanceCount iFld Test0114.sFld = " + Test0114.instanceCount + "," + iFld + "," +
                Test0114.sFld);
        FuzzerUtils.out.println("Test0114.dFld Test0114.bFld Test0114.iArrFld = " + Double.doubleToLongBits(Test0114.dFld) + "," +
                (Test0114.bFld ? 1 : 0) + "," + FuzzerUtils.checkSum(Test0114.iArrFld));
        FuzzerUtils.out.println("sArrFld = " + FuzzerUtils.checkSum(sArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0114 _instance = new Test0114();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
