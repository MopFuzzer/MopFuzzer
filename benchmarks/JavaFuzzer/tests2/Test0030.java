// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:12 2023
public class Test0030 {

    public static final int N = 400;

    public static long instanceCount=7375549861262466170L;
    public static short sFld=5887;
    public static int iFld=31939;
    public static float fFld=-19.967F;
    public static double dFld=-62.47565;
    public static byte byFld=-121;
    public static int iFld1=6;
    public int iFld2=64873;
    public int[] iArrFld =new int[N];
    public static volatile long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0030.lArrFld, 13L);
    }

    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i5, long l1, byte by1) {

        int i6=-50648;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, -13);

        i5 = i5;
        iArr[(Test0030.iFld >>> 1) % N] *= i5;
        Test0030.fFld += (float) Test0030.dFld;
        i6 = 1;
        do {
            Test0030.iFld += (int) Test0030.dFld;
            i5 -= Test0030.iFld;
        } while (++i6 < 392);
        iArr[(62267 >>> 1) % N] = Test0030.iFld;
        long meth_res = i5 + l1 + by1 + i6 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        int i4=-41734;
        int i7=-36083;
        int i8=-5;
        int[] iArr1 =new int[N];
        boolean b=true;

        FuzzerUtils.init(iArr1, 59540);

        i4 -= (int) (-206 + ((Test0030.instanceCount >>= i4) + (Test0030.instanceCount * 30)));
        i4 = (int) ((iMeth1(i4, 3052786273101807194L, Test0030.byFld) - Test0030.instanceCount) - Test0030.byFld);
        b = b;
        for (i7 = 14; i7 < 288; i7 += 3) {
            switch ((i7 % 1) + 6) {
            case 6:
                Test0030.instanceCount += Test0030.iFld1;
                Test0030.instanceCount += (i7 * i4);
                break;
            }
            iArr1[i7] <<= i7;
            Test0030.fFld = Test0030.sFld;
            i8 += i8;
            Test0030.iFld1 |= (int) Test0030.instanceCount;
            Test0030.iFld1 -= -10;
            Test0030.dFld += -50208L;
            iArr1[i7] <<= (int) Test0030.instanceCount;
            Test0030.byFld = (byte) i7;
        }
        long meth_res = i4 + (b ? 1 : 0) + i7 + i8 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i1, long l) {

        int i2=217;
        int i3=11;
        int i9=7657;
        int i10=206;
        int[] iArr2 =new int[N];
        byte by=68;
        long l2=-3L;
        float[] fArr =new float[N];
        double[] dArr =new double[N];

        FuzzerUtils.init(fArr, 2.491F);
        FuzzerUtils.init(dArr, 102.129133);
        FuzzerUtils.init(iArr2, 7);

        fArr = (fArr = fArr);
        Test0030.sFld = (short) (i1 + Test0030.lArrFld[(i1 >>> 1) % N]);
        i2 = 1;
        while (++i2 < 126) {
            switch (((((Test0030.sFld - i1) >>> 1) % 3) * 5) + 119) {
            case 131:
                i3 = 1;
                do {
                    by -= (byte)(lMeth() * i3);
                    dArr[i3 + 1] = l;
                } while (++i3 < 12);
                for (i9 = 1; i9 < 12; ++i9) {
                    Test0030.iFld += (121 + (i9 * i9));
                    i10 -= i10;
                    iArr2[i2] = (int)l;
                    Test0030.fFld = Test0030.iFld1;
                    iArr2 = iArr2;
                    Test0030.instanceCount <<= -3385;
                    Test0030.instanceCount *= l2;
                }
            case 128:
                i10 -= i3;
                break;
            case 134:
                Test0030.fFld += (-112 + (i2 * i2));
                break;
            }
        }
        long meth_res = i1 + l + i2 + i3 + by + i9 + i10 + l2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-46111, i11=-27829, i12=-24367, i13=7, i14=9, i15=-35;
        long l3=7L;
        boolean b1=false;
        float f=-73.754F;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 0.433F);

        iArrFld[(48800 >>> 1) % N] >>= (int) (((i >>> Test0030.instanceCount) - iMeth(2, Test0030.instanceCount)) - Test0030.iFld1);
        l3 = 1;
        do {
            Test0030.iFld1 = (int) Test0030.instanceCount;
            switch ((int)(((l3 % 9) * 5) + 19)) {
            case 23:
                Test0030.dFld *= Test0030.iFld;
                iFld2 -= iFld2;
                i = Test0030.iFld;
                for (i11 = 202; i11 > 2; --i11) {
                    Test0030.dFld += Test0030.iFld;
                    i13 = 2;
                    do {
                        if (b1) {
                            if (b1) continue;
                            Test0030.instanceCount += (((i13 * Test0030.byFld) + i14) - iFld2);
                            Test0030.instanceCount = i14;
                            Test0030.instanceCount += i13;
                        } else {
                            i12 = -156;
                            Test0030.iFld -= (int) Test0030.fFld;
                            if (b1) continue;
                            i14 <<= 5;
                        }
                        Test0030.iFld += i13;
                        Test0030.iFld += (-6 + (i13 * i13));
                        switch (((i11 % 8) * 5) + 107) {
                        case 126:
                            i15 += (i13 + i);
                            b1 = b1;
                            Test0030.instanceCount >>= i14;
                        case 113:
                            i15 = (int) Test0030.instanceCount;
                            Test0030.instanceCount -= i14;
                            break;
                        case 127:
                            fArr1[i11] *= i12;
                            iArrFld[i11] *= i14;
                            break;
                        case 116:
                            Test0030.lArrFld[(int) (l3 + 1)] = -81;
                            break;
                        case 139:
                            iArrFld[(int)(l3)] += (int)l3;
                            break;
                        case 114:
                            Test0030.fFld += (i13 * i13);
                        case 128:
                            Test0030.byFld = (byte) i13;
                            break;
                        case 137:
                            iArrFld[i13] ^= Test0030.sFld;
                            break;
                        }
                    } while ((i13 -= 2) > 0);
                }
            case 57:
                i = Test0030.iFld;
                break;
            case 42:
                iFld2 += (int)(l3 + iFld2);
                break;
            case 25:
                f *= Test0030.fFld;
                break;
            case 56:
                Test0030.instanceCount >>>= l3;
                break;
            case 40:
                i14 += 58294;
            case 59:
                Test0030.dFld -= l3;
                break;
            case 36:
                iArrFld[(int)(l3)] -= (int)l3;
                break;
            case 27:
                f += l3;
                break;
            }
        } while (++l3 < 124);

        FuzzerUtils.out.println("i l3 i11 = " + i + "," + l3 + "," + i11);
        FuzzerUtils.out.println("i12 i13 b1 = " + i12 + "," + i13 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i14 i15 f = " + i14 + "," + i15 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0030.instanceCount Test0030.sFld Test0030.iFld = " + Test0030.instanceCount + "," + Test0030.sFld +
                "," + Test0030.iFld);
        FuzzerUtils.out.println("Test0030.fFld Test0030.dFld Test0030.byFld = " + Float.floatToIntBits(Test0030.fFld) + "," +
                Double.doubleToLongBits(Test0030.dFld) + "," + Test0030.byFld);
        FuzzerUtils.out.println("Test0030.iFld1 iFld2 iArrFld = " + Test0030.iFld1 + "," + iFld2 + "," +
            FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0030.lArrFld = " + FuzzerUtils.checkSum(Test0030.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0030 _instance = new Test0030();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
