// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:49 2023
public class Test0784 {

    public static final int N = 400;

    public static long instanceCount=3651052083L;
    public static float fFld=-1.377F;
    public static int iFld=254;
    public volatile double dFld=-43.68726;
    public static float[] fArrFld =new float[N];
    public static volatile int[][] iArrFld =new int[N][N];
    public static long[] lArrFld =new long[N];
    public static short[] sArrFld =new short[N];

    static {
        FuzzerUtils.init(Test0784.fArrFld, -29.415F);
        FuzzerUtils.init(Test0784.iArrFld, 51077);
        FuzzerUtils.init(Test0784.lArrFld, 173L);
        FuzzerUtils.init(Test0784.sArrFld, (short) -14761);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i, int i1, int i2) {

        int i3=-10, i4=1, i5=15438, i6=-14, i7=-124;
        boolean b=true;
        double[] dArr =new double[N];
        byte[] byArr =new byte[N];
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(dArr, 42.117095);
        FuzzerUtils.init(byArr, (byte)-44);
        FuzzerUtils.init(lArr, 1691442772L);

        i1 += i1;
        i2 *= i2;
        for (i3 = 22; i3 < 388; i3++) {
            for (i5 = 1; i5 < 5; ++i5) {
                dArr[i5 + 1] -= i;
                i4 = (int) Test0784.instanceCount;
                byArr[i5 + 1] <<= (byte) Test0784.instanceCount;
                try {
                    i4 = (i4 / -43);
                    i1 = (i1 % -40681);
                    i = (i3 / -850600670);
                } catch (ArithmeticException a_e) {}
                i7 = 1;
                while (++i7 < 2) {
                    Test0784.instanceCount += i7;
                    Test0784.fFld -= i1;
                    i += -122;
                    lArr[i3 - 1][i7] = 6;
                    Test0784.fArrFld[i7 + 1] *= Test0784.instanceCount;
                    if (b) break;
                }
            }
        }
        vMeth1_check_sum += i + i1 + i2 + i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth() {

        boolean b1=true, b2=false;
        int i9=-20713;
        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 4);

        vMeth1(Test0784.iFld, Test0784.iFld, 27424);
        b1 = b2;
        Test0784.instanceCount |= 4962;
        Test0784.iArrFld[(Test0784.iFld >>> 1) % N][(Test0784.iFld >>> 1) % N] = (int) Test0784.instanceCount;
        Test0784.iArrFld[(Test0784.iFld >>> 1) % N][(-11901 >>> 1) % N] += Test0784.iFld;
        for (int i8 : iArr) {
            iArr[(i8 >>> 1) % N] *= Test0784.iFld;
            i9 = 1;
            do {
                Test0784.fFld *= -24;
            } while (++i9 < 4);
        }
        Test0784.iFld = i9;
        long meth_res = (b1 ? 1 : 0) + (b2 ? 1 : 0) + i9 + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth() {

        double d=-1.79658;
        int i10=-3510, i11=8278, i12=5, i13=-58311;
        boolean b3=true;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, true);

        Test0784.instanceCount *= (lMeth() + Test0784.iFld);
        for (d = 6; 136 > d; d++) {
            if (i10 != 0) {
                vMeth_check_sum += Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + (b3 ? 1 : 0) +
                    FuzzerUtils.checkSum(bArr);
                return;
            }
        }
        Test0784.fFld = (float) d;
        i11 = 1;
        do {
            Test0784.fFld += 24;
            Test0784.iFld += Test0784.iFld;
            for (i12 = 1; i12 < 5; i12++) {
                if (b3) continue;
                i13 *= -55;
                Test0784.instanceCount >>= i13;
                Test0784.instanceCount = Test0784.instanceCount;
            }
            Test0784.lArrFld[i11 - 1] = -12;
            Test0784.iFld += (int) Test0784.instanceCount;
            bArr[i11] = b3;
        } while (++i11 < 357);
        vMeth_check_sum += Double.doubleToLongBits(d) + i10 + i11 + i12 + i13 + (b3 ? 1 : 0) +
            FuzzerUtils.checkSum(bArr);
    }

    public void mainTest(String[] strArr1) {

        int i14=-3, i15=-21, i16=0, i17=-62, i18=28683, i19=-97, i20=-39057;
        byte by=-90;
        double d1=78.11041;
        boolean b4=true;

        vMeth();
        Test0784.iFld <<= Test0784.iFld;
        for (i14 = 10; 214 > i14; i14++) {
            Test0784.iFld = i15;
            for (i16 = 123; i16 > 5; i16 -= 2) {
                Test0784.instanceCount &= i15;
                Test0784.instanceCount += (((i16 * i15) + Test0784.instanceCount) - Test0784.iFld);
                Test0784.instanceCount = 3;
                for (i18 = 1; 3 > i18; ++i18) {
                    Test0784.fArrFld[i18 + 1] = Test0784.iFld;
                    by = (byte)i14;
                    Test0784.iArrFld[i18][i16 - 1] = by;
                }
                Test0784.instanceCount = 7;
                Test0784.sArrFld[i16 - 1] = (short) dFld;
                Test0784.instanceCount += i16;
                Test0784.sArrFld[i14 + 1] = (short) i18;
                Test0784.instanceCount += (((i16 * Test0784.instanceCount) + Test0784.instanceCount) - i14);
                switch (((i16 % 3) * 5) + 73) {
                case 76:
                    i19 += (((i16 * i19) + i14) - i18);
                    dFld += dFld;
                    i19 *= 19669;
                    dFld -= by;
                    break;
                case 86:
                    i19 ^= i19;
                    for (d1 = 1; 3 > d1; ++d1) {
                        Test0784.instanceCount += (long) (d1 * d1);
                        Test0784.iFld *= 75;
                        i15 -= (int) Test0784.instanceCount;
                        i20 = i20;
                        i15 += (int) Test0784.fFld;
                        i17 = i14;
                    }
                    break;
                case 81:
                    b4 = b4;
                }
            }
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("by d1 i20 = " + by + "," + Double.doubleToLongBits(d1) + "," + i20);
        FuzzerUtils.out.println("b4 = " + (b4 ? 1 : 0));

        FuzzerUtils.out.println("Test0784.instanceCount Test0784.fFld Test0784.iFld = " + Test0784.instanceCount + "," +
                Float.floatToIntBits(Test0784.fFld) + "," + Test0784.iFld);
        FuzzerUtils.out.println("dFld Test0784.fArrFld Test0784.iArrFld = " + Double.doubleToLongBits(dFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0784.fArrFld)) + "," + FuzzerUtils.checkSum(Test0784.iArrFld));
        FuzzerUtils.out.println("Test0784.lArrFld Test0784.sArrFld = " + FuzzerUtils.checkSum(Test0784.lArrFld) + "," +
                FuzzerUtils.checkSum(Test0784.sArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0784 _instance = new Test0784();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
