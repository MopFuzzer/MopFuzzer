// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:29 2023
public class Test0365 {

    public static final int N = 400;

    public static long instanceCount=25194L;
    public static double dFld=2.67202;
    public static short sFld=24622;
    public static byte byFld=56;
    public static int iFld=21613;
    public static byte[] byArrFld =new byte[N];
    public static int[] iArrFld =new int[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0365.byArrFld, (byte) 101);
        FuzzerUtils.init(Test0365.iArrFld, 16071);
        FuzzerUtils.init(Test0365.dArrFld, -2.23471);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=-6462;
        int i5=-40364;
        int i6=33505;
        int i7=-11;
        int i8=160;
        int i9=-41920;
        int[] iArr =new int[N];
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -216L);
        FuzzerUtils.init(iArr, 53);

        for (long l1 : lArr1) {
            i4 = i4;
            lArr1[(i5 >>> 1) % N] = i5;
            i5 *= i4;
            for (i6 = 1; i6 < 4; i6 += 2) {
                i5 += i7;
                i7 = i4;
                i4 >>= -14;
                iArr[i6] += i6;
                Test0365.sFld += (short) i5;
                Test0365.sFld -= (short) 2L;
                for (i8 = 1; 4 > i8; ++i8) {
                    Test0365.byArrFld[i6 - 1] -= (byte) i7;
                    l1 = i5;
                    if (true) continue;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth(long l) {

        short s1=-3571;
        int i2=-53615;
        int i3=-1;
        int i10=252;
        int[] iArr1 =new int[N];
        float f=-1.834F, f1=23.22F;
        boolean b=false;
        long l2=-167967775L;

        FuzzerUtils.init(iArr1, 13);

        Test0365.dFld = (((-190 | (long) (s1 + -12.13296)) + i2) * ((-(f * i2)) - Math.abs(f)));
        for (f1 = 6; f1 < 126; f1++) {
            s1 -= (short) (Test0365.instanceCount += iMeth());
            Test0365.instanceCount >>= i3;
            b = b;
            i3 -= (int) Test0365.instanceCount;
            for (l2 = (long)(f1); l2 < 13; ++l2) {
                i2 += (int)-1.116789;
                i10 += (int)(l2 ^ i2);
                b = b;
                i2 = i10;
                switch ((int)((f1 % 3) + 124)) {
                case 124:
                    i2 <<= (int) Test0365.instanceCount;
                    i10 += (int)(((l2 * i10) + s1) - i2);
                    i3 *= -244;
                    break;
                case 125:
                    Test0365.dFld = Test0365.instanceCount;
                case 126:
                    iArr1[(int)(l2 - 1)] -= -223;
                    break;
                }
            }
        }
        long meth_res = l + s1 + i2 + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i3 + (b ? 1 : 0) + l2 + i10
            + FuzzerUtils.checkSum(iArr1);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth(byte by, int i) {

        int i1=-129;
        int i11=47385;
        int i12=-14394;
        int i13=233;
        int i14=132;
        int[] iArr2 =new int[N];
        short s=30482;
        double d=97.29503;
        float f2=-56.855F, f3=-111.781F;
        long l3=-118L;
        long[] lArr =new long[N];
        boolean b1=true;

        FuzzerUtils.init(lArr, 337487254L);
        FuzzerUtils.init(iArr2, -2);

        i1 = 1;
        while (++i1 < 215) {
            s = (short)(s + ((i--) + (-(--lArr[i1 + 1]))));
            d *= byMeth(Test0365.instanceCount);
            for (i11 = i1; i11 < 7; i11++) {
                i12 -= i12;
                for (f2 = 1; f2 < 1; f2++) {
                    Test0365.byFld += (byte) i1;
                }
                f3 = Test0365.instanceCount;
                try {
                    iArr2[i11] = (-177 / i13);
                    iArr2[i11 + 1] = (-100 / iArr2[i11]);
                    i13 = (i1 % i11);
                } catch (ArithmeticException a_e) {}
            }
            for (l3 = 1; l3 < 7; ++l3) {
                i *= i14;
                if (b1) continue;
                f3 += (l3 - by);
                iArr2[(int)(l3 + 1)] += i12;
            }
        }
        i13 += i13;
        vMeth_check_sum += by + i + i1 + s + Double.doubleToLongBits(d) + i11 + i12 + Float.floatToIntBits(f2) + i13 +
            Float.floatToIntBits(f3) + l3 + i14 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        float f4=0.859F;
        int i15=-30, i16=5, i17=-24916, i18=9104, i19=10, i20=-64482;

        vMeth(Test0365.byFld, Test0365.iFld);
        Test0365.iFld = Test0365.iFld;
        Test0365.iFld = Test0365.iFld;
        Test0365.iFld += (int) Test0365.instanceCount;
        Test0365.iFld -= (int) f4;
        Test0365.iArrFld[(Test0365.iFld >>> 1) % N] -= Test0365.iFld;
        Test0365.iFld = Test0365.iFld;
        for (i15 = 5; i15 < 234; i15++) {
            boolean b3=true;
            Test0365.iFld += (int) Test0365.instanceCount;
            for (i17 = 110; 5 < i17; i17 -= 3) {
                boolean b2=true;
                i19 = 1;
                while (++i19 < 4) {
                    i18 ^= i15;
                }
                i20 = 1;
                while (++i20 < 4) {
                    Test0365.iFld = i18;
                    i16 -= (int) Test0365.dFld;
                    Test0365.iFld += (i20 ^ Test0365.instanceCount);
                    i18 ^= i20;
                    i16 -= i18;
                    Test0365.iFld += (((i20 * Test0365.instanceCount) + Test0365.instanceCount) - i18);
                    Test0365.instanceCount <<= -59752;
                    i16 += (i20 * i20);
                    Test0365.iArrFld[i15 + 1] <<= Test0365.iFld;
                    i16 -= i17;
                }
                Test0365.dArrFld[i15 + 1] *= Test0365.instanceCount;
                if (b2) break;
            }
            f4 += (i15 - i18);
            b3 = true;
            Test0365.instanceCount += (long) f4;
        }
        Test0365.byArrFld[(Test0365.iFld >>> 1) % N] = (byte) i19;
        Test0365.instanceCount = Test0365.iFld;

        FuzzerUtils.out.println("f4 i15 i16 = " + Float.floatToIntBits(f4) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 = " + i20);

        FuzzerUtils.out.println("Test0365.instanceCount Test0365.dFld Test0365.sFld = " + Test0365.instanceCount + "," +
                Double.doubleToLongBits(Test0365.dFld) + "," + Test0365.sFld);
        FuzzerUtils.out.println("Test0365.byFld Test0365.iFld Test0365.byArrFld = " + Test0365.byFld + "," + Test0365.iFld + "," +
                FuzzerUtils.checkSum(Test0365.byArrFld));
        FuzzerUtils.out.println("Test0365.iArrFld Test0365.dArrFld = " + FuzzerUtils.checkSum(Test0365.iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0365.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0365 _instance = new Test0365();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
