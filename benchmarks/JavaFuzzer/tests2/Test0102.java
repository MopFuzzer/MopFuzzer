// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0102 {

    public static final int N = 400;

    public static volatile long instanceCount=-53L;
    public static double dFld=98.130648;
    public int iFld=41;
    public static short sFld=-4377;
    public byte byFld=-74;
    public int[] iArrFld =new int[N];

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i1, int i2, float f) {

        int i3=-60606, i4=29, i5=8, i6=-27602, i7=7, i8=-254;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 2.24F);

        i2 = i1;
        for (i3 = 1; i3 < 144; ++i3) {
            for (i5 = 1; i5 < 11; ++i5) {
                fArr[i5 - 1] = f;
                fArr[i5 - 1] -= i1;
                f = i6;
            }
            i2 = i4;
            f += (i3 * i3);
            for (i7 = 1; i7 < 11; ++i7) {
                Test0102.instanceCount *= i4;
                if (true) continue;
                Test0102.instanceCount ^= Test0102.instanceCount;
                i2 -= (int) Test0102.dFld;
                i6 <<= (int)8L;
                fArr[i3] = (float) Test0102.dFld;
            }
        }
        vMeth_check_sum += i1 + i2 + Float.floatToIntBits(f) + i3 + i4 + i5 + i6 + i7 + i8 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static long lMeth(long l) {

        int i9=48948, i10=100, i11=-215, i12=-124, i13=14, i14=175, i15=120, i16=0;
        float f1=83.652F;
        short s=-10741;
        short[] sArr =new short[N];
        boolean b1=true;
        byte by=-62;
        long[] lArr =new long[N];

        FuzzerUtils.init(sArr, (short)-21486);
        FuzzerUtils.init(lArr, 8738648411730210033L);

        vMeth(i9, i9, f1);
        for (i10 = 3; 272 > i10; i10++) {
            i11 += s;
        }
        for (i12 = 3; i12 < 301; ++i12) {
            i9 *= (int) Test0102.instanceCount;
            for (i14 = 1; i14 < 6; i14++) {
                i9 += (i14 * i14);
                i16 = 1;
                do {
                    if (b1) {
                        i15 = i16;
                    } else {
                        sArr[(i14 >>> 1) % N] >>= (short) Test0102.instanceCount;
                        lArr[i12 - 1] -= i12;
                    }
                    i13 = i15;
                    i11 = by;
                    i9 |= s;
                } while (++i16 < 2);
            }
        }
        long meth_res = l + i9 + Float.floatToIntBits(f1) + i10 + i11 + s + i12 + i13 + i14 + i15 + i16 + (b1 ? 1 : 0)
            + by + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vSmallMeth(int i) {

        boolean b=false;

        b = (((305275303956741985L + lMeth(Test0102.instanceCount)) + i) != i);
        vSmallMeth_check_sum += i + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i17=55260;
        int i18=-222;
        int i19=0;
        int i20=-2;
        int i21=-4;
        int i22=39032;
        int i23=-19789;
        int i24=-226;
        int i25=0;
        int i26=-117;
        int[][] iArr =new
                    int[N][N];
        float f2=-121.141F;
        boolean b2=false;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, 36293);
        FuzzerUtils.init(lArr1, 48077L);

        for (int smallinvoc=0; smallinvoc<692; smallinvoc++) vSmallMeth(iFld);
        i17 = 1;
        while (++i17 < 395) {
            switch ((i17 % 2) + 31) {
            case 31:
                for (f2 = 64; f2 > 2; --f2) {
                    i19 = 1;
                    while ((i19 += 2) < 2) {
                        iArr[(-58 >>> 1) % N][i19 + 1] -= (int)2.971F;
                        iArrFld[i17 - 1] -= i18;
                        iFld += (((i19 * f2) + i17) - i19);
                    }
                    for (i20 = 2; i20 > 1; i20--) {
                        i18 += (int) Test0102.instanceCount;
                    }
                    iFld = iFld;
                    i18 ^= 49279;
                    iFld += (int)f2;
                }
                b2 = b2;
                iArrFld[i17 - 1] >>>= i18;
            case 32:
                Test0102.instanceCount <<= i22;
                break;
            default:
                for (i23 = 3; i23 < 64; ++i23) {
                    lArr1[i17] <<= 204L;
                    lArr1[i17 - 1] += Test0102.instanceCount;
                    iArrFld = iArrFld;
                    iArr[i17 - 1][i17] += i24;
                    try {
                        iFld = (58952 / i23);
                        i24 = (i25 / i22);
                        iArrFld[i23] = (-43760 / iFld);
                    } catch (ArithmeticException a_e) {}
                    iFld %= (int) (Test0102.sFld | 1);
                    try {
                        i18 = (i23 % -37738);
                        i18 = (i22 / i17);
                        i24 = (-39501 % i24);
                    } catch (ArithmeticException a_e) {}
                    i26 -= i23;
                }
                i21 += (((i17 * Test0102.sFld) + i20) - i23);
                Test0102.instanceCount += -46458;
            }
            i18 = byFld;
            if (true) break;
            iArr[i17][i17] = i23;
        }

        FuzzerUtils.out.println("i17 f2 i18 = " + i17 + "," + Float.floatToIntBits(f2) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("b2 i22 i23 = " + (b2 ? 1 : 0) + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("iArr lArr1 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0102.instanceCount Test0102.dFld iFld = " + Test0102.instanceCount + "," +
                Double.doubleToLongBits(Test0102.dFld) + "," + iFld);
        FuzzerUtils.out.println("Test0102.sFld byFld iArrFld = " + Test0102.sFld + "," + byFld + "," +
            FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0102 _instance = new Test0102();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth lMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
