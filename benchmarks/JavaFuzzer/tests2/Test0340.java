// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:28 2023
public class Test0340 {

    public static final int N = 400;

    public static long instanceCount=676156093L;
    public int iFld=21877;
    public static int iFld1=-5;
    public static byte byFld=-124;
    public static boolean bFld=true;
    public static long lFld=-54752L;
    public static volatile short sFld=-3321;
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0340.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    public static int iMeth1(int i6, int i7) {


        Test0340.instanceCount -= ((--Test0340.iFld1) - i7);
        long meth_res = i6 + i7;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth2(long l1, int i10) {

        short s1=30200;
        float f1=1.942F;
        int i11=62431, i12=47747, i13=-118, i14=-157, i15=-9;
        long l2=-172L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, -39L);

        s1 = Test0340.byFld;
        f1 *= Test0340.iFld1;
        for (i11 = 2; i11 < 143; i11++) {
            f1 += i11;
            i13 = 1;
            while (++i13 < 11) {
                for (l2 = 1; l2 > 1; l2 -= 2) {
                    if (Test0340.bFld) {
                    } else {
                        lArr1[i13] = -4782;
                        i12 <<= (int) Test0340.lFld;
                    }
                    i14 -= (int)f1;
                    i12 = i10;
                    l1 -= l1;
                    Test0340.bArrFld[i11] = Test0340.bFld;
                    f1 += f1;
                }
                try {
                    Test0340.iFld1 = (15170 % Test0340.iFld1);
                    i12 = (i13 % i11);
                    i15 = (199249124 / i13);
                } catch (ArithmeticException a_e) {}
            }
        }
        long meth_res = l1 + i10 + s1 + Float.floatToIntBits(f1) + i11 + i12 + i13 + l2 + i14 + i15 +
            FuzzerUtils.checkSum(lArr1);
        iMeth2_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(double d1, int i8) {

        int i9=5075;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, 56L);

        i9 = 271;
        while ((i9 -= 3) > 0) {
            short s=-27844;
            s = (short)(lArr[i9] ^ (-iMeth2(-14456L, 16086)));
            i8 -= Test0340.iFld1;
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i1) {

        int i2=-212;
        int i3=28037;
        int i4=26157;
        int i5=3;
        int i16=-4399;
        int i17=37;
        int[] iArr =new int[N];
        float f=2.953F;
        double d=2.85158;
        long l=-361027444L;

        FuzzerUtils.init(iArr, 60);

        Test0340.iFld1 += Test0340.iFld1;
        i2 = 1;
        do {
            switch ((i2 % 2) + 78) {
            case 78:
                if (true) {
                    for (i3 = 1; i3 < 10; ++i3) {
                        Test0340.bArrFld[i2 + 1] = (((-Math.min(i1, i1)) - (46923 + f)) < ((Test0340.iFld1 - -40) % (((long) (f
                            + f)) | 1)));
                        Test0340.iFld1 -= (int) (Float.intBitsToFloat(--i5) * iMeth1(Test0340.iFld1, (int) (d * l)));
                        vMeth(d, i2);
                        for (i16 = 2; i16 > i3; i16 -= 3) {
                            try {
                                iArr[i2 + 1] = (i1 % -899618894);
                                Test0340.iFld1 = (iArr[i3 - 1] / Test0340.iFld1);
                                Test0340.iFld1 = (-48433 / iArr[i3 - 1]);
                            } catch (ArithmeticException a_e) {}
                            i5 += (int) Test0340.lFld;
                            Test0340.lFld += Test0340.iFld1;
                            Test0340.bFld = Test0340.bFld;
                        }
                        Test0340.sFld += (short) i3;
                        i17 += (((i3 * i5) + Test0340.instanceCount) - f);
                    }
                } else {
                    f += -11L;
                }
            case 79:
                l += i2;
            default:
                Test0340.lFld -= i1;
            }
        } while (++i2 < 152);
        long meth_res = i1 + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + l + i16 + i17 +
            FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=43556;
        int i18=50969;
        int i19=36120;
        int i20=8;
        int i21=6;
        int i22=-15983;
        int[] iArr1 =new int[N];
        long l3=193L;
        float f2=0.678F;
        double d2=46.16700;
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(byArr, (byte)96);
        FuzzerUtils.init(iArr1, -11);

        iFld <<= (int) (Test0340.instanceCount--);
        i = 169;
        while (--i > 0) {
            iFld += Math.min(Test0340.iFld1++, (int) ((Test0340.instanceCount * Test0340.instanceCount) * Test0340.iFld1));
            Test0340.iFld1 = (int) (iMeth(iFld) - -2.819F);
            iFld += (31109 + (i * i));
            if (Test0340.bFld) continue;
            iFld = (int) Test0340.lFld;
            l3 = 1;
            while (++l3 < 148) {
                Test0340.iFld1 -= 19846;
                Test0340.iFld1 += (int) Test0340.lFld;
                for (i18 = 1; 1 > i18; ++i18) {
                    byArr[i + 1][i] /= (byte) (Test0340.lFld | 1);
                    try {
                        iFld = (iArr1[(int)(l3 + 1)] / 1763489813);
                        iArr1[i - 1] = (i19 / iArr1[(int)(l3 - 1)]);
                        iFld = (Test0340.iFld1 / iArr1[i - 1]);
                    } catch (ArithmeticException a_e) {}
                    Test0340.lFld = i19;
                    iArr1[(int) (l3)] >>= Test0340.iFld1;
                    f2 += (i18 + l3);
                    Test0340.iFld1 = Test0340.byFld;
                    Test0340.instanceCount -= iFld;
                    iFld += (-132 + (i18 * i18));
                }
                Test0340.bArrFld[(int) (l3)] = Test0340.bFld;
                for (i20 = 1; 1 > i20; ++i20) {
                    Test0340.instanceCount -= (long) 105.250F;
                    Test0340.instanceCount += (i20 + f2);
                    Test0340.iFld1 += (i20 - Test0340.iFld1);
                    Test0340.instanceCount -= l3;
                    iArr1 = FuzzerUtils.int1array(N, (int)-12);
                }
                i21 += (int) Test0340.instanceCount;
                i22 = 1;
                do {
                    Test0340.lFld -= l3;
                    Test0340.iFld1 = (int) d2;
                } while (++i22 < 1);
            }
        }

        FuzzerUtils.out.println("i l3 i18 = " + i + "," + l3 + "," + i18);
        FuzzerUtils.out.println("i19 f2 i20 = " + i19 + "," + Float.floatToIntBits(f2) + "," + i20);
        FuzzerUtils.out.println("i21 i22 d2 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("byArr iArr1 = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0340.instanceCount iFld Test0340.iFld1 = " + Test0340.instanceCount + "," + iFld + "," +
                Test0340.iFld1);
        FuzzerUtils.out.println("Test0340.byFld Test0340.bFld Test0340.lFld = " + Test0340.byFld + "," + (Test0340.bFld ? 1 : 0) + "," +
                Test0340.lFld);
        FuzzerUtils.out.println("Test0340.sFld Test0340.bArrFld = " + Test0340.sFld + "," + FuzzerUtils.checkSum(Test0340.bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0340 _instance = new Test0340();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
