// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0438 {

    public static final int N = 400;

    public static volatile long instanceCount=59L;
    public byte byFld=92;
    public static boolean bFld=true;
    public static float fFld=2.427F;
    public static byte byFld1=-43;
    public short sFld=7417;
    public static long[][] lArrFld =new long[N][N];
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0438.lArrFld, -14L);
        FuzzerUtils.init(Test0438.dArrFld, -48.5628);
        FuzzerUtils.init(Test0438.iArrFld, 9567);
    }

    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(float f1, int i4, int i5) {

        int i6=7;
        int i7=-53095;
        int i8=-12;
        int i9=-9;
        int[] iArr1 =new int[N];
        double d=-32.76915;
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr1, 97);
        FuzzerUtils.init(fArr, 1.359F);

        iArr1 = iArr1;
        Test0438.lArrFld[(31678 >>> 1) % N] = Test0438.lArrFld[(i5 >>> 1) % N];
        for (i6 = 6; i6 < 139; i6++) {
            for (i8 = 12; i8 > 1; i8--) {
                i5 = -244;
                if (Test0438.bFld) continue;
                f1 = i7;
                Test0438.dArrFld[i6 - 1] -= Test0438.instanceCount;
                try {
                    iArr1[i6 + 1] = (i4 % 1752721254);
                    i5 = (-39742 % i8);
                    i9 = (i8 / 60639);
                } catch (ArithmeticException a_e) {}
                d = 1;
                do {
                    if (i6 != 0) {
                        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 +
                            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr1) +
                            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                        return;
                    }
                } while (++d < 2);
                f1 += (-168 + (i8 * i8));
                i9 <<= i7;
                f1 *= i4;
            }
            fArr[i6 - 1] = i8;
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + i4 + i5 + i6 + i7 + i8 + i9 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static byte byMeth() {

        int i10=165;
        int i11=-12;
        int i12=-215;
        int i13=-16298;
        int i14=-4;
        int i15=161;
        int i16=6;
        int[][] iArr2 =new int[N][N];
        double d1=-45.30554;
        boolean b=true;

        FuzzerUtils.init(iArr2, 10);

        vMeth1(Test0438.fFld, i10, i10);
        Test0438.bFld = Test0438.bFld;
        for (i11 = 9; i11 < 239; ++i11) {
            for (i13 = 1; 7 > i13; ++i13) {
                for (i15 = 1; i15 < 2; i15++) {
                    Test0438.instanceCount -= i11;
                    d1 = i12;
                    i12 = i13;
                    if (false) continue;
                    i14 = 56596;
                }
                switch ((i13 % 7) + 15) {
                case 15:
                    i14 += (i13 - i16);
                    if (b) break;
                    i10 *= i11;
                    Test0438.byFld1 += (byte) 3686;
                    break;
                case 16:
                    iArr2[i13 + 1][i13 + 1] -= (int) Test0438.fFld;
                    break;
                case 17:
                    iArr2[i11][i11 - 1] = i10;
                    break;
                case 18:
                    i14 = i14;
                    break;
                case 19:
                    Test0438.instanceCount ^= i14;
                case 20:
                    iArr2[i13 + 1][i11 - 1] = i16;
                case 21:
                    iArr2[i13][i11 + 1] >>>= i15;
                    break;
                default:
                    i14 += i13;
                }
            }
        }
        long meth_res = i10 + i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
            FuzzerUtils.checkSum(iArr2);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static void vMeth() {

        int i2=-57566;
        int i3=-2;
        int i17=14;
        int i18=13499;
        int i19=-11;
        int[][] iArr =new int[N][N];
        byte by=14;
        float f=1.504F;
        long l=213L;

        FuzzerUtils.init(iArr, 57722);

        i2 -= (int)-3838926503L;
        i2 ^= by;
        for (f = 12; f < 254; f++) {
            i2 -= iArr[(int)(f + 1)][(int)(f + 1)];
        }
        i2 >>= (byMeth() * i2);
        l = 1;
        do {
            for (i17 = 1; i17 < 5; i17++) {
                i2 -= i18;
                i19 = 2;
                do {
                    i18 *= (int)2.683F;
                    i2 += (int) Test0438.instanceCount;
                    i3 = i18;
                    i3 += i19;
                    Test0438.instanceCount = i18;
                    i18 += (-250 + (i19 * i19));
                } while (--i19 > 0);
            }
        } while (++l < 343);
        vMeth_check_sum += i2 + by + Float.floatToIntBits(f) + i3 + l + i17 + i18 + i19 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i=8582, i1=-8, i20=-65240, i21=189, i22=-12, i23=7, i24=7, i25=95, i26=-4;
        double d2=74.123944;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, -95.113F);

        Test0438.instanceCount += ((Math.abs(i) + byFld) - (Math.min(i, i) / (i | 1)));
        i1 = 1;
        do {
            i = Math.min(i1, Math.min((int) (i1 - Test0438.instanceCount), i1 + i1));
            vMeth();
            i = i1;
            i = i1;
            for (i20 = 73; i20 > i1; i20 -= 2) {
                if (true) {
                    i = i20;
                    i += i21;
                    Test0438.iArrFld[i1 - 1] = i21;
                    for (i22 = 1; i22 < 1; ++i22) {
                        i23 += (((i22 * i22) + i23) - sFld);
                        i *= i21;
                        Test0438.instanceCount = i1;
                        Test0438.instanceCount += i22;
                    }
                } else if (Test0438.bFld) {
                    Test0438.instanceCount = i22;
                    d2 *= 63961;
                    fArr1[i20] *= (float)d2;
                }
                for (i24 = 1; i24 < 1; i24++) {
                    i21 = (int) Test0438.fFld;
                    d2 += i24;
                    i21 *= (int) Test0438.fFld;
                    Test0438.bFld = Test0438.bFld;
                    i23 &= i;
                    Test0438.iArrFld[i1 - 1] += i20;
                    i26 += i25;
                    Test0438.iArrFld[i24 + 1] *= i26;
                }
                i26 >>= i26;
                Test0438.iArrFld[i20] *= i1;
            }
        } while (++i1 < 345);

        FuzzerUtils.out.println("i i1 i20 = " + i + "," + i1 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("d2 i24 i25 = " + Double.doubleToLongBits(d2) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 fArr1 = " + i26 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0438.instanceCount byFld Test0438.bFld = " + Test0438.instanceCount + "," + byFld + "," +
                (Test0438.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0438.fFld Test0438.byFld1 sFld = " + Float.floatToIntBits(Test0438.fFld) + "," + Test0438.byFld1 +
            "," + sFld);
        FuzzerUtils.out.println("Test0438.lArrFld Test0438.dArrFld Test0438.iArrFld = " + FuzzerUtils.checkSum(Test0438.lArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0438.dArrFld)) + "," + FuzzerUtils.checkSum(Test0438.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0438 _instance = new Test0438();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
