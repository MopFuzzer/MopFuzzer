// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:34 2023
public class Test0471 {

    public static final int N = 400;

    public static long instanceCount=14L;
    public int iFld=59482;
    public static short sFld=-25677;
    public static byte[] byArrFld =new byte[N];
    public static float[] fArrFld =new float[N];
    public static long[][] lArrFld =new long[N][N];

    static {
        FuzzerUtils.init(Test0471.byArrFld, (byte) 124);
        FuzzerUtils.init(Test0471.fArrFld, 0.987F);
        FuzzerUtils.init(Test0471.lArrFld, -4730462953041266630L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth(int i) {

        int[] iArr =new int[N];

        FuzzerUtils.init(iArr, 73);

        i += (int) ((Test0471.instanceCount + i) * iArr[(254 >>> 1) % N]);
        vSmallMeth_check_sum += i + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i2, int i3, byte by) {

        int i4=8;
        int i5=0;
        int i6=-122;
        int i7=39386;
        int[] iArr1 =new int[N];
        float f=0.445F, f1=-66.674F;
        double d=-1.9851;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, -49194);
        FuzzerUtils.init(lArr, 0L);

        try {
            iArr1[(i3 >>> 1) % N] -= (int)lArr[(i2 >>> 1) % N];
        }
        catch (UserDefinedExceptionTest exc1) {
            for (i4 = 4; 230 > i4; i4++) {
                for (f = i4; f < 7; ++f) {
                    i6 = (int) ((Test0471.byArrFld[(int) (f)]++) * (Math.abs(Test0471.instanceCount) * Test0471.instanceCount));
                    vSmallMeth(-14);
                    Test0471.fArrFld[(int) (f)] = i6;
                    f1 = -6;
                    Test0471.instanceCount *= i4;
                    i5 += i6;
                    for (d = 1; d < 1; d++) {
                        Test0471.instanceCount >>>= Test0471.instanceCount;
                        i3 = i7;
                        iArr1[(int)(d)] -= i4;
                        Test0471.instanceCount = i6;
                    }
                }
            }
        }
        vMeth_check_sum += i2 + i3 + by + i4 + i5 + Float.floatToIntBits(f) + i6 + Float.floatToIntBits(f1) +
            Double.doubleToLongBits(d) + i7 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(short s, long l, int i1) {

        byte by1=-28;
        int i8=31408;
        int i9=77;
        int i10=-12;
        int i11=-8;
        int i12=13;
        int i13=-12;
        int[][] iArr2 =new int[N][N];
        float f2=-24.209F;
        double d1=1.128984;

        FuzzerUtils.init(iArr2, -14);

        vMeth(8, -19, by1);
        Test0471.lArrFld = Test0471.lArrFld;
        for (i8 = 3; 232 > i8; i8 += 3) {
            i9 >>= -176;
            for (i10 = 1; i10 < 20; ++i10) {
                iArr2[i8][i8] -= (int)f2;
                i11 += (((i10 * f2) + i1) - i11);
                f2 += (((i10 * i9) + i9) - i10);
                iArr2[i10][i8 - 1] += (int)l;
                switch ((i8 % 1) + 5) {
                case 5:
                    for (i12 = 1; 2 > i12; ++i12) {
                        i11 *= (int)f2;
                        i1 -= i8;
                        i9 >>= i8;
                        d1 = i9;
                    }
                    break;
                default:
                    iArr2[i10 + 1][i10 - 1] >>= i13;
                }
            }
        }
        long meth_res = s + l + i1 + by1 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + i12 + i13 +
            Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l1=12608L;
        int i14=8;
        int i15=-10;
        int i16=-61354;
        int i17=-7;
        int i18=-138;
        int i19=11363;
        int i20=6;
        int i21=11;
        int i22=77;
        int i23=-58293;
        int i24=8;
        int[] iArr3 =new int[N];
        boolean b=true;
        float f3=-101.5F;
        byte by2=102;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr3, 38458);
        FuzzerUtils.init(dArr, 2.404);

        for (int smallinvoc=0; smallinvoc<916; smallinvoc++) vSmallMeth(--iFld);
        if (true) {
            switch (((iFld >>> 1) % 9) + 1) {
            case 1:
                vSmallMeth((int) (16.45543 - (lMeth(Test0471.sFld, Test0471.instanceCount, iFld) * Test0471.sFld)));
                for (l1 = 371; l1 > 2; --l1) {
                    for (i15 = 2; i15 < 68; i15++) {
                        Test0471.instanceCount >>= iFld;
                        if (b) continue;
                        i17 = 1;
                        do {
                            iFld += (((i17 * iFld) + iFld) - l1);
                            i16 = iFld;
                            i14 += (i17 - l1);
                            i14 -= i16;
                            i16 += (int)f3;
                            Test0471.fArrFld[i17] *= i17;
                        } while (++i17 < 2);
                        for (i18 = (int)(l1); i18 < 2; i18++) {
                            try {
                                iArr3[i15 - 1] = (60554 % i19);
                                i19 = (iArr3[i15 + 1] % i15);
                                i14 = (-175 / iArr3[i15 - 1]);
                            } catch (ArithmeticException a_e) {}
                        }
                        for (i20 = 1; i20 < 2; ++i20) {
                            i21 = i14;
                            i22 += Test0471.sFld;
                            try {
                                iFld = (i14 % i21);
                                iArr3[i20] = (iArr3[i20 + 1] % iFld);
                                i21 = (i21 / i15);
                            } catch (ArithmeticException a_e) {}
                            b = b;
                            by2 += (byte)(i20 * i20);
                        }
                    }
                    i19 += (int)-79L;
                    iFld -= (int)f3;
                    iFld -= i15;
                    dArr[(int)(l1 - 1)] = i16;
                    for (i23 = 1; i23 < 68; i23++) {
                        Test0471.instanceCount = l1;
                        Test0471.instanceCount = 53;
                    }
                }
            case 2:
                dArr[(i20 >>> 1) % N] = i21;
                break;
            case 3:
                iArr3 = iArr3;
                break;
            case 4:
                i21 = (int) Test0471.instanceCount;
                break;
            case 5:
                i21 = (int)l1;
            case 6:
                Test0471.instanceCount += (long) f3;
            case 7:
                Test0471.instanceCount ^= Test0471.instanceCount;
                break;
            case 8:
                i14 = i19;
                break;
            case 9:
                dArr[(i19 >>> 1) % N] += 1;
                break;
            }
        } else if (true) {
            i16 <<= Test0471.sFld;
        } else {
            i24 = i22;
        }

        FuzzerUtils.out.println("l1 i14 i15 = " + l1 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 b i17 = " + i16 + "," + (b ? 1 : 0) + "," + i17);
        FuzzerUtils.out.println("f3 i18 i19 = " + Float.floatToIntBits(f3) + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("by2 i23 i24 = " + by2 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("iArr3 dArr = " + FuzzerUtils.checkSum(iArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0471.instanceCount iFld Test0471.sFld = " + Test0471.instanceCount + "," + iFld + "," +
                Test0471.sFld);
        FuzzerUtils.out.println("Test0471.byArrFld Test0471.fArrFld Test0471.lArrFld = " + FuzzerUtils.checkSum(Test0471.byArrFld) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0471.fArrFld)) + "," +
                FuzzerUtils.checkSum(Test0471.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0471 _instance = new Test0471();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth lMeth
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
