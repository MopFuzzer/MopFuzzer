// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0829 {

    public static final int N = 400;

    public static volatile long instanceCount=3694774108L;
    public static double dFld=-72.4835;
    public static float fFld=0.616F;
    public static volatile short sFld=-29916;
    public int iFld=-207;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0829.iArrFld, -14);
    }

    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i1, int i2) {

        long l=-236L;
        long[] lArr =new long[N];
        int i3=3;
        int i4=60635;
        int i5=13;
        int i6=5;
        int i7=-25545;
        int i8=14297;
        int[] iArr =new int[N];
        float f1=-2.878F;
        boolean b=false;
        byte by1=1;
        double[] dArr =new double[N], dArr1 =new double[N];

        FuzzerUtils.init(iArr, -31100);
        FuzzerUtils.init(dArr, -3.121407);
        FuzzerUtils.init(lArr, 41095L);
        FuzzerUtils.init(dArr1, 61.120056);

        l = 1;
        while (++l < 239) {
            i2 = (int)l;
            for (i3 = 1; i3 < 7; i3++) {
                iArr[(int)(l - 1)] *= (int)f1;
                dArr[(int)(l + 1)] += i3;
                iArr[i3 + 1] = (int)1.62084;
            }
            i1 *= i4;
            i4 >>= (int) Test0829.instanceCount;
            for (i5 = 7; i5 > 1; i5 -= 3) {
                switch ((i5 % 8) + 109) {
                case 109:
                    for (i7 = i5; i7 < 4; ++i7) {
                        if (b) break;
                        f1 -= Test0829.instanceCount;
                        lArr[(int)(l)] += i3;
                        Test0829.instanceCount += (-1147805822L + (i7 * i7));
                    }
                    break;
                case 110:
                    Test0829.instanceCount = -13;
                case 111:
                    iArr[(int)(l - 1)] -= -122;
                    break;
                case 112:
                    Test0829.instanceCount += Test0829.instanceCount;
                case 113:
                    dArr1[(int)(l + 1)] += i1;
                    break;
                case 114:
                    i6 = i4;
                case 115:
                    Test0829.instanceCount *= (long) Test0829.dFld;
                    break;
                case 116:
                    i4 += 3;
                    break;
                default:
                    i4 = by1;
                }
            }
        }
        long meth_res = i1 + i2 + l + i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + i8 + (b ? 1 : 0) + by1 +
            FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth() {

        int i9=-5, i10=-1360, i11=2, i12=115, i13=147, i14=-879, i15=-51052;
        boolean b1=true;
        float[][] fArr =new float[N][N];

        FuzzerUtils.init(fArr, -12.506F);

        Test0829.instanceCount = sMeth(i9, i9);
        for (i10 = 3; i10 < 318; i10++) {
            i9 += i11;
            Test0829.instanceCount *= i9;
            Test0829.fFld -= i11;
            i9 += (int)-171L;
            fArr[i10 + 1][i10 + 1] -= -43;
            Test0829.instanceCount += (((i10 * Test0829.instanceCount) + i11) - i10);
            Test0829.iArrFld[i10 - 1] *= i9;
            Test0829.fFld += (i10 + Test0829.instanceCount);
            for (i12 = 1; i12 < 5; i12++) {
                i13 <<= i12;
                for (i14 = 1; i14 < 2; ++i14) {
                    i9 += i14;
                    if (b1) continue;
                }
            }
        }
        vMeth_check_sum += i9 + i10 + i11 + i12 + i13 + i14 + i15 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static float fMeth() {

        int i=10;
        int i16=-43222;
        int i17=64102;
        int i18=-206;
        int i19=-32707;
        int[][] iArr1 =new int[N][N];
        float f=-121.301F;
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)-40);
        FuzzerUtils.init(iArr1, -86);

        for (byte by : byArr) {
            double d=0.83676;
            i = (int) (-((Test0829.instanceCount * i) - (i + i)));
            d = ((f--) + Test0829.instanceCount);
            i >>= (int) ((i = (i - by)) + ((i -= (int) 211L) - (Test0829.instanceCount--)));
            vMeth();
            Test0829.instanceCount >>= 5302580894654597219L;
            i <<= 56752;
            for (i16 = 1; 4 > i16; i16++) {
                Test0829.sFld += (short) (1508140506234653773L + (i16 * i16));
            }
            Test0829.fFld = Test0829.instanceCount;
            i -= (int) Test0829.instanceCount;
        }
        for (i18 = 4; i18 < 273; i18++) {
            i += (-133 + (i18 * i18));
            Test0829.instanceCount = i17;
            iArr1 = iArr1;
        }
        long meth_res = i + Float.floatToIntBits(f) + i16 + i17 + i18 + i19 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by2=42;

        fMeth();
        iFld = 0;
        Test0829.iArrFld = Test0829.iArrFld;
        Test0829.dFld = Test0829.fFld;
        Test0829.instanceCount = by2;
        iFld += (int)-51861L;

        FuzzerUtils.out.println("by2 = " + by2);

        FuzzerUtils.out.println("Test0829.instanceCount Test0829.dFld Test0829.fFld = " + Test0829.instanceCount + "," +
                Double.doubleToLongBits(Test0829.dFld) + "," + Float.floatToIntBits(Test0829.fFld));
        FuzzerUtils.out.println("Test0829.sFld iFld Test0829.iArrFld = " + Test0829.sFld + "," + iFld + "," +
                FuzzerUtils.checkSum(Test0829.iArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0829 _instance = new Test0829();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
