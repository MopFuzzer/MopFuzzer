// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:21 2023
public class Test0208 {

    public static final int N = 400;

    public static volatile long instanceCount=-3308231304199958014L;
    public static int iFld=171;
    public static float fFld=0.328F;
    public static short sFld=2197;
    public static byte byFld=69;
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0208.dArrFld, -124.124114);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i4, int i5) {

        int i6=-167, i7=108, i8=49, i9=-2531, i10=4;
        double d=-77.45371;
        boolean b1=true;

        i4 += Test0208.iFld;
        i6 = 1;
        while (++i6 < 373) {
            for (i7 = 1; 5 > i7; i7++) {
                i5 >>= 0;
                for (i9 = 2; i9 > i6; i9--) {
                    i4 -= (int)-12L;
                    Test0208.fFld += -122.57F;
                }
                i8 = i10;
                if (b1) {
                    if (false) {
                        i4 += (i7 * i7);
                        if (i4 != 0) {
                            vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + (b1 ? 1
                                : 0);
                            return;
                        }
                        i4 += i5;
                    } else {
                        i4 = (int)d;
                    }
                    i5 += (((i7 * Test0208.instanceCount) + i7) - Test0208.sFld);
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + (b1 ? 1 : 0);
    }

    public static double dMeth(int i2, int i3, boolean b) {

        float f=2.460F, f1=-122.786F;
        int i11=-10;
        int i12=-36913;
        int i13=-26547;
        int[] iArr1 =new int[N];
        byte by=14;
        long[] lArr =new long[N];

        FuzzerUtils.init(iArr1, 4);
        FuzzerUtils.init(lArr, -42L);

        Test0208.iFld += (int) (f - (++f));
        vMeth(-37926, i2);
        iArr1[(110 >>> 1) % N] -= 28369;
        for (i11 = 8; i11 < 148; i11 += 2) {
            i12 = (int)-117.129887;
            i2 <<= (int)-4276062742785464299L;
            i12 &= 6;
            i13 = 1;
            while (++i13 < 22) {
                f1 = 1;
                do {
                    iArr1[i11] += (int)f;
                    i2 = (int) Test0208.instanceCount;
                    Test0208.iFld += (int) (((f1 * Test0208.sFld) + i11) - i11);
                } while (++f1 < 1);
                by += (byte)(i13 - i2);
                if (b) continue;
                lArr[i13] >>= -17610;
            }
        }
        long meth_res = i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f) + i11 + i12 + i13 + Float.floatToIntBits(f1) +
            by + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vSmallMeth(int i, int i1) {

        boolean b2=false;

        dMeth(Test0208.iFld, i1, b2);
        i1 = 14;
        vSmallMeth_check_sum += i + i1 + (b2 ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i14=-36071;
        int i15=9;
        int i16=-13315;
        int i17=-226;
        int i18=8;
        int i19=-37204;
        int i20=-35813;
        int[] iArr =new int[N];
        float f2=0.245F;
        double d1=-1.81882;
        long l=119L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(iArr, -14);
        FuzzerUtils.init(lArr1, -205L);

        Test0208.iFld -= (iArr[(14 >>> 1) % N] ^= Test0208.iFld);
        for (int smallinvoc = 0; smallinvoc < 112; smallinvoc++) vSmallMeth(Test0208.iFld, Test0208.iFld);
        i14 = 1;
        do {
            i15 = 1;
            while (++i15 < 191) {
                Test0208.iFld = -193;
            }
            Test0208.iFld *= 57;
            Test0208.iFld = i15;
            for (f2 = 9; 191 > f2; f2 += 3) {
                for (i17 = i14; i17 < 4; ++i17) {
                    Test0208.dArrFld = Test0208.dArrFld;
                    Test0208.iFld += (i17 ^ i14);
                    Test0208.instanceCount = i15;
                    Test0208.byFld += (byte) -3;
                    i16 -= (int) Test0208.instanceCount;
                    lArr1[i17] /= (i18 | 1);
                    Test0208.instanceCount = i16;
                    i16 = Test0208.sFld;
                    i16 -= i14;
                }
            }
            for (i19 = 2; i19 < 191; ++i19) {
                Test0208.dArrFld[i19] -= i17;
                i20 -= (int)-9L;
                Test0208.instanceCount -= (long) 1.45528;
                i20 = i18;
                i16 = (int)d1;
                i20 -= Test0208.byFld;
            }
            l = 1;
            while (++l < 191) {
                boolean b3=false;
                i16 = Test0208.byFld;
                if (b3) {
                    i16 = i18;
                }
            }
        } while (++i14 < 131);
        Test0208.instanceCount <<= i19;

        FuzzerUtils.out.println("i14 i15 f2 = " + i14 + "," + i15 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 d1 = " + i19 + "," + i20 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("l iArr lArr1 = " + l + "," + FuzzerUtils.checkSum(iArr) + "," +
            FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0208.instanceCount Test0208.iFld Test0208.fFld = " + Test0208.instanceCount + "," + Test0208.iFld +
                "," + Float.floatToIntBits(Test0208.fFld));
        FuzzerUtils.out.println("Test0208.sFld Test0208.byFld Test0208.dArrFld = " + Test0208.sFld + "," + Test0208.byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0208.dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0208 _instance = new Test0208();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  dMeth ->  dMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth dMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
