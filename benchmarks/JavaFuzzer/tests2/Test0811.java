// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0811 {

    public static final int N = 400;

    public static long instanceCount=-201L;
    public static float fFld=40.335F;
    public static double dFld=-2.127640;
    public static byte byFld=1;
    public boolean bFld=false;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0811.lArrFld, -3162021613L);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth(int i12, int i13) {

        int i14=6956;
        int i15=-24818;
        int i16=-7;
        int i17=-137;
        int i18=-8;
        int[] iArr2 =new int[N];
        short s1=21044;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(iArr2, 106);
        FuzzerUtils.init(fArr1, 0.187F);

        i14 = 1;
        while (++i14 < 369) {
            for (i15 = 1; i15 < 5; ++i15) {
                Test0811.instanceCount -= i13;
                for (i17 = i15; 2 > i17; ++i17) {
                    Test0811.fFld -= -58.130F;
                }
            }
            iArr2[i14 + 1] += s1;
            s1 += (short)i14;
            i13 += (((i14 * i18) + Test0811.fFld) - Test0811.fFld);
            iArr2[i14] = (int) Test0811.instanceCount;
            i16 = i18;
            fArr1[i14 + 1] = Test0811.instanceCount;
            try {
                i18 = (i13 / i17);
                i16 = (14750 / i14);
                i18 = (i17 % iArr2[i14 + 1]);
            } catch (ArithmeticException a_e) {}
            try {
                i16 = (i16 / -401167051);
                iArr2[i14 + 1] = (i13 % i12);
                i13 = (i18 / i13);
            } catch (ArithmeticException a_e) {}
        }
        Test0811.dFld -= i13;
        i13 -= i15;
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + i18 + s1 + FuzzerUtils.checkSum(iArr2) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(float f, float f1, long l) {

        int i8=1;
        int i9=-13;
        int i10=-91;
        int i11=-73;
        int i19=24899;
        int i20=132;
        int[][] iArr1 =new int[N][N];
        short s=2798;
        short[] sArr =new short[N];
        double d2=100.64919;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.818F);
        FuzzerUtils.init(iArr1, -35887);
        FuzzerUtils.init(sArr, (short)-21826);

        fArr[(i8 >>> 1) % N] %= ((Test0811.instanceCount - l) | 1);
        s *= (short) (((i8 * -38368) - (--i8)) + ((long) (d2 - f1) >> Test0811.instanceCount));
        i9 = 1;
        do {
            i8 += (i9 * i9);
            l >>= ((--i8) + (l--));
            for (i10 = 1; i10 < 5; ++i10) {
                iArr1 = (iArr1 = iArr1);
                i8 *= (int)d2;
                Test0811.lArrFld[i10 + 1] += (iArr1[i10 - 1][i10 - 1]++);
                iArr1[i10 + 1][i9] = (int)(sArr[i9 - 1] * lMeth(i11, i10));
            }
        } while (++i9 < 312);
        Test0811.byFld += (byte) i10;
        for (i19 = 5; i19 < 227; ++i19) {
            d2 = l;
            l *= l;
            iArr1[i19 - 1][i19] <<= (int) Test0811.instanceCount;
        }
        vMeth_check_sum += Float.floatToIntBits(f) + Float.floatToIntBits(f1) + l + i8 + s +
            Double.doubleToLongBits(d2) + i9 + i10 + i11 + i19 + i20 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(sArr);
    }

    public int iMeth(int i5) {

        int i6=202;
        int i7=48658;
        int i22=6;
        int i23=38;
        int[] iArr3 =new int[N];

        FuzzerUtils.init(iArr3, 5);

        for (i6 = 9; i6 < 367; ++i6) {
            vMeth(Test0811.fFld, Test0811.fFld, Test0811.instanceCount);
            i7 += i6;
            i5 -= (int) Test0811.instanceCount;
        }
        for (int i21 : iArr3) {
            i5 = -54402;
            if (true) {
                if (bFld) continue;
            }
            i7 ^= 57;
            i21 *= 45679;
            i7 -= i5;
        }
        for (i22 = 8; i22 < 150; i22++) {
            i7 <<= i5;
        }
        i23 -= -12;
        i5 *= (int) Test0811.instanceCount;
        long meth_res = i5 + i6 + i7 + i22 + i23 + FuzzerUtils.checkSum(iArr3);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=14483;
        int i1=-63;
        int i2=-7;
        int i3=-56024;
        int i4=-78;
        int i24=14;
        int i25=-1174;
        int i26=12;
        int i27=-204;
        int i28=8;
        int i29=-6;
        int[] iArr =new
                    int[N];
        double d=0.106348, d1=101.92720, d3=-102.92379;
        byte by=6;
        boolean b=true;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -122L);
        FuzzerUtils.init(iArr, -2);

        for (i = 7; 303 > i; ++i) {
            Test0811.fFld %= ((((-lArr[i + 1]) - (++i1)) * iArr[i - 1]) | 1);
            Test0811.instanceCount = (long) (d--);
            i1 += (i - i1);
        }
        for (d1 = 148; d1 > 6; d1 -= 2) {
            for (i3 = 14; i3 < 353; i3++) {
                i4 += (((i3 * by) + Test0811.instanceCount) - i);
            }
            Test0811.instanceCount = Math.max(iArr[(int) (d1 - 1)], iMeth(i3));
        }
        i24 = 1;
        while (++i24 < 313) {
            i2 -= i4;
            if (b) break;
            for (d3 = 2; d3 < 80; ++d3) {
                switch ((int)(((d3 % 2) * 5) + 104)) {
                case 113:
                    Test0811.instanceCount = -20562;
                    if (bFld) {
                        i2 = 48594;
                        Test0811.fFld += Test0811.instanceCount;
                        for (i26 = 1; i26 < 2; ++i26) {
                            Test0811.instanceCount = i3;
                            Test0811.dFld = i25;
                        }
                    }
                    break;
                case 110:
                    Test0811.fFld += Test0811.byFld;
                    for (i28 = 1; i28 < 2; ++i28) {
                        iArr[(int)(d3 + 1)] = i25;
                        Test0811.instanceCount += (i28 ^ Test0811.instanceCount);
                        i25 = (int)d1;
                        i1 = i;
                        i1 -= (int) Test0811.instanceCount;
                        i25 >>>= i27;
                        Test0811.fFld += i28;
                        i4 = i28;
                    }
                    break;
                default:
                    if (b) continue;
                }
            }
        }

        FuzzerUtils.out.println("i i1 d = " + i + "," + i1 + "," + Double.doubleToLongBits(d));
        FuzzerUtils.out.println("d1 i2 i3 = " + Double.doubleToLongBits(d1) + "," + i2 + "," + i3);
        FuzzerUtils.out.println("i4 by i24 = " + i4 + "," + by + "," + i24);
        FuzzerUtils.out.println("b d3 i25 = " + (b ? 1 : 0) + "," + Double.doubleToLongBits(d3) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 lArr iArr = " + i29 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0811.instanceCount Test0811.fFld Test0811.dFld = " + Test0811.instanceCount + "," +
                Float.floatToIntBits(Test0811.fFld) + "," + Double.doubleToLongBits(Test0811.dFld));
        FuzzerUtils.out.println("Test0811.byFld bFld Test0811.lArrFld = " + Test0811.byFld + "," + (bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0811.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0811 _instance = new Test0811();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
