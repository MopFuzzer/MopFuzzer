// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0821 {

    public static final int N = 400;

    public static long instanceCount=-37887L;
    public static byte byFld=14;
    public static int iFld=10;
    public float fFld=-1.221F;
    public static float[] fArrFld =new float[N];
    public volatile long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0821.fArrFld, -6.881F);
        FuzzerUtils.init(Test0821.iArrFld, -28754);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(boolean b, long l1) {

        int i6=-1, i7=-9, i8=-60276, i9=60330, i10=48495, i11=-14, i12=47745, i13=13;
        float f=2.819F;
        byte by=93;
        double d1=-60.97832;
        short s1=-2286;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -2265066040474983468L);

        Test0821.instanceCount *= i6;
        i7 = 1;
        while (++i7 < 218) {
            i6 -= (int)f;
            for (i8 = 1; i8 < 7; i8++) {
                f = f;
                Test0821.fArrFld[i7 - 1] = i8;
                for (i10 = 1; i10 < 2; i10++) {
                    i11 += (i10 - i7);
                    i6 += i7;
                }
                Test0821.instanceCount -= by;
                d1 *= i9;
                s1 += (short)(((i8 * i8) + i11) - i9);
                for (i12 = i8; i12 < 2; ++i12) {
                    i6 = (int) Test0821.instanceCount;
                    lArr[i8] += (long)d1;
                }
            }
        }
        vMeth2_check_sum += (b ? 1 : 0) + l1 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + by +
            Double.doubleToLongBits(d1) + s1 + i12 + i13 + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1(int i1, long l, int i2) {

        int i3=-9, i4=-51198, i5=-19219, i14=14, i15=129, i16=3, i17=-204;
        double d=21.2215;
        boolean b1=true;
        short s2=-14811;

        for (i3 = 1; i3 < 219; ++i3) {
            i5 = (int)((i5++) * (l - (d - l)));
            if (false) continue;
            vMeth2(b1, l);
            for (i14 = i3; i14 < 7; i14++) {
                i15 >>= -10082;
            }
            for (i16 = 1; i16 < 7; ++i16) {
                Test0821.instanceCount >>= i14;
                d -= i1;
                if (i16 != 0) {
                    vMeth1_check_sum += i1 + l + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i14 +
                        i15 + i16 + i17 + s2;
                    return;
                }
                i17 %= (int)(i17 | 1);
                Test0821.instanceCount = s2;
                i1 += i16;
            }
            i4 += (i3 * i3);
            Test0821.byFld = (byte) i1;
        }
        vMeth1_check_sum += i1 + l + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + (b1 ? 1 : 0) + i14 + i15 + i16 +
            i17 + s2;
    }

    public static void vMeth() {

        int i=-229;
        int i18=-45582;
        int i19=-13782;
        int i20=-205;
        int i21=0;
        int i22=11953;
        int i23=186;
        int i24=5;
        int[] iArr =new int[N];
        short s=13485;
        double d2=27.80065, d3=28.82615;
        long l2=3415808713L;
        float f1=31.953F;
        boolean b2=false;

        FuzzerUtils.init(iArr, 65412);

        i += (int)12L;
        s = (short)i;
        vMeth1(i, Test0821.instanceCount, i);
        iArr[(-64197 >>> 1) % N] -= (int) Test0821.instanceCount;
        for (i18 = 11; i18 < 259; i18 += 3) {
            for (i20 = 1; i20 < 19; ++i20) {
                for (d2 = 1; d2 < 2; ++d2) {
                    s = (short)i20;
                }
            }
            for (l2 = 1; l2 < 19; l2++) {
                for (d3 = 1; d3 < 2; ++d3) {
                    Test0821.instanceCount >>>= l2;
                    f1 *= Test0821.iFld;
                    i22 = (int) Test0821.instanceCount;
                    b2 = b2;
                    Test0821.fArrFld[(int) (d3)] /= -3552L;
                }
            }
        }
        vMeth_check_sum += i + s + i18 + i19 + i20 + i21 + Double.doubleToLongBits(d2) + i22 + l2 + i23 +
            Double.doubleToLongBits(d3) + i24 + Float.floatToIntBits(f1) + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i25=-10, i26=55, i27=0, i28=-189;
        boolean b3=false;
        double d4=0.51296;
        short s3=-5604;
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(byArr, (byte)-94);

        vMeth();
        i25 = 1;
        while (++i25 < 268) {
            lArrFld[i25 - 1] = i25;
            Test0821.iArrFld[i25 - 1] = Test0821.iFld;
            i26 = 1;
            do {
                if (b3) break;
                Test0821.iFld <<= (int) Test0821.instanceCount;
                Test0821.fArrFld = Test0821.fArrFld;
                for (i27 = 1; i27 < 1; i27++) {
                    i28 ^= Test0821.iFld;
                    Test0821.iFld += (i27 + Test0821.byFld);
                    if (b3) break;
                    switch ((i26 % 6) + 122) {
                    case 122:
                        Test0821.iFld <<= (int) -8013L;
                        switch (((i26 % 8) * 5) + 22) {
                        case 35:
                            Test0821.iFld -= -8;
                            Test0821.fArrFld[i26] = 35293;
                            fFld *= Test0821.instanceCount;
                            Test0821.iArrFld[i27] *= (int) 39.746F;
                            break;
                        case 59:
                            fFld *= Test0821.instanceCount;
                            Test0821.iFld += i27;
                            i28 ^= i27;
                            break;
                        case 48:
                            Test0821.iFld += (i27 + i27);
                            Test0821.fArrFld[i26 + 1] = i28;
                            switch (((-9 >>> 1) % 5) + 93) {
                            case 93:
                                if (b3) break;
                                i28 = i26;
                                i28 |= Test0821.iFld;
                                lArrFld[i25] = (long)d4;
                                break;
                            case 94:
                                i28 <<= (int) Test0821.instanceCount;
                                break;
                            case 95:
                                try {
                                    Test0821.iArrFld[i26] = (Test0821.iFld / 90);
                                    i28 = (i26 / -11126);
                                    Test0821.iFld = (Test0821.iArrFld[i26 + 1] / Test0821.iArrFld[i25 - 1]);
                                } catch (ArithmeticException a_e) {}
                                break;
                            case 96:
                                b3 = b3;
                                break;
                            case 97:
                                if (b3) continue;
                            }
                            break;
                        case 27:
                            i28 += (4 + (i27 * i27));
                        case 55:
                            Test0821.byFld <<= (byte) Test0821.iFld;
                            break;
                        case 43:
                            d4 *= i27;
                            break;
                        case 40:
                            Test0821.iFld = -2;
                            break;
                        case 29:
                            s3 %= (short)8;
                            break;
                        }
                        break;
                    case 123:
                        Test0821.iFld += (i27 * Test0821.instanceCount);
                    case 124:
                        d4 += d4;
                        break;
                    case 125:
                        d4 -= Test0821.instanceCount;
                        break;
                    case 126:
                        Test0821.instanceCount >>= i28;
                        break;
                    case 127:
                        byArr[i27 + 1][i25 - 1] -= (byte)i25;
                    default:
                        try {
                            i28 = (-161 % i25);
                            Test0821.iFld = (181 / i26);
                            Test0821.iFld = (Test0821.iFld % Test0821.iFld);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            } while (++i26 < 94);
        }

        FuzzerUtils.out.println("i25 i26 b3 = " + i25 + "," + i26 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i27 i28 d4 = " + i27 + "," + i28 + "," + Double.doubleToLongBits(d4));
        FuzzerUtils.out.println("s3 byArr = " + s3 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0821.instanceCount Test0821.byFld Test0821.iFld = " + Test0821.instanceCount + "," + Test0821.byFld +
                "," + Test0821.iFld);
        FuzzerUtils.out.println("fFld Test0821.fArrFld lArrFld = " + Float.floatToIntBits(fFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0821.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("Test0821.iArrFld = " + FuzzerUtils.checkSum(Test0821.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0821 _instance = new Test0821();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
