// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:53 2023
public class Test0877 {

    public static final int N = 400;

    public static long instanceCount=3124435484L;
    public static boolean bFld=false;
    public byte byFld=115;
    public static short sFld=-17104;
    public static volatile int iFld=179;
    public static volatile float fFld=96.318F;
    public static volatile double dFld=-113.92468;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0877.iArrFld, -1);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i14=5, i15=-159, i16=-14724, i17=6;
        byte by=-4;
        double d1=1.1965;
        long[] lArr =new long[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(lArr, -37553L);
        FuzzerUtils.init(fArr, 1.793F);

        i14 = 1;
        while (++i14 < 265) {
            Test0877.iFld = (int) Test0877.fFld;
            Test0877.fFld *= Test0877.iFld;
            Test0877.instanceCount -= by;
            for (i15 = i14; i15 < 6; i15++) {
                i17 = 1;
                while (++i17 < 1) {
                    Test0877.iArrFld[i17 + 1] = Test0877.iFld;
                    lArr = lArr;
                    Test0877.iArrFld[i17 - 1] *= Test0877.iFld;
                    i16 += (i17 | (long) Test0877.fFld);
                    Test0877.iFld -= (int) -13L;
                    by += (byte)d1;
                    d1 += Test0877.iFld;
                    Test0877.iArrFld[i15] *= (int) Test0877.fFld;
                    fArr[i15] = Test0877.instanceCount;
                }
            }
        }
        long meth_res = i14 + by + i15 + i16 + i17 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1() {

        int i10=-9, i11=1, i12=127, i13=-211, i18=-65434, i19=2;
        double d=-5.65359;
        float f1=-30.240F;

        for (i10 = 3; 298 > i10; ++i10) {
            for (i12 = 1; i12 < 6; ++i12) {
                Test0877.iArrFld[i12] *= (int) (d++);
                i13 -= (int) (Test0877.sFld - (iMeth() - f1));
                i11 *= i12;
                Test0877.instanceCount = i12;
                if (i12 != 0) {
                    vMeth1_check_sum += i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
                        i18 + i19;
                    return;
                }
                if (false) break;
                Test0877.iArrFld[i12 - 1] = (int) Test0877.instanceCount;
                Test0877.instanceCount += i12;
                Test0877.iArrFld[i12 - 1] = (int) -4L;
                for (i18 = 1; i18 < 2; ++i18) {
                    Test0877.instanceCount = -6;
                    i19 >>= 40970;
                    Test0877.iFld = i18;
                }
            }
        }
        vMeth1_check_sum += i10 + i11 + i12 + i13 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i18 + i19;
    }

    public static void vMeth(int i5, boolean b, int i6) {

        short s=25479;
        int i7=-121, i8=-56781, i9=30233, i20=0, i21=-5, i22=-40;
        long l=1727108578L;
        long[] lArr1 =new long[N];
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(dArr, -45.119704);
        FuzzerUtils.init(lArr1, -23181795886872581L);

        Test0877.instanceCount >>= (long) (((s - i5) + (++i5)) - dArr[(i7 >>> 1) % N][(i6 >>> 1) % N]);
        for (i8 = 2; i8 < 164; i8++) {
            i5 = (int)(++l);
            vMeth1();
            Test0877.iArrFld[i8 - 1] *= Test0877.iFld;
            for (i20 = 1; i20 < 10; i20++) {
                Test0877.iArrFld[i8 + 1] = i9;
                i22 = 2;
                while (--i22 > 0) {
                    if (true) continue;
                    Test0877.sFld += (short) i22;
                    lArr1[i22] = s;
                    if (Test0877.bFld) {
                        i7 /= (int)(s | 1);
                        Test0877.fFld *= i21;
                        Test0877.fFld += (((i22 * i9) + i20) - i9);
                    } else if (Test0877.bFld) {
                        i9 -= (int) Test0877.dFld;
                    }
                }
            }
        }
        vMeth_check_sum += i5 + (b ? 1 : 0) + i6 + s + i7 + i8 + i9 + l + i20 + i21 + i22 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public void mainTest(String[] strArr1) {

        int i=23615, i1=18946, i2=82, i3=28287, i4=1, i23=70, i24=-5, i25=6, i26=-13, i27=137, i28=-7, i29=-127;
        float f=21.352F;
        float[][] fArr1 =new float[N][N];
        double d2=2.33238;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr1, 56.754F);

        i = (int)(--f);
        i1 = 1;
        do {
            Test0877.bFld = false;
            i2 = 197;
            while (--i2 > 0) {
                i = i2;
                if (bArr[i2]) continue;
                for (i3 = 1; i3 < 1; i3++) {
                    i -= byFld;
                    i4 = (int) ((Test0877.instanceCount--) + i4);
                    Test0877.instanceCount += (long) -74.25F;
                }
            }
            vMeth(i4, Test0877.bFld, -243);
            for (i23 = 9; i23 < 197; i23++) {
                Test0877.instanceCount += (long) f;
                Test0877.iFld &= Test0877.iFld;
            }
            for (i25 = 11; i25 < 197; i25 += 3) {
                Test0877.instanceCount += i25;
            }
            i26 += i1;
            fArr1[i1][i1 - 1] -= i23;
            fArr1[i1 + 1][i1 + 1] = 0;
            for (d2 = 7; d2 < 197; d2++) {
                f = i4;
                Test0877.instanceCount *= Test0877.instanceCount;
                for (i28 = 2; i28 > i1; i28--) {
                    Test0877.iFld -= 55420;
                    Test0877.iArrFld[i28 - 1] *= (int) Test0877.instanceCount;
                    try {
                        i27 = (i2 / i3);
                        i29 = (-10288412 / i23);
                        i24 = (i29 / 120);
                    } catch (ArithmeticException a_e) {}
                    i27 = i24;
                    Test0877.instanceCount |= i25;
                    Test0877.fFld = i;
                    Test0877.dFld += i29;
                }
            }
        } while (++i1 < 127);

        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 d2 i27 = " + i26 + "," + Double.doubleToLongBits(d2) + "," + i27);
        FuzzerUtils.out.println("i28 i29 bArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0877.instanceCount Test0877.bFld byFld = " + Test0877.instanceCount + "," + (Test0877.bFld ? 1 :
            0) + "," + byFld);
        FuzzerUtils.out.println("Test0877.sFld Test0877.iFld Test0877.fFld = " + Test0877.sFld + "," + Test0877.iFld + "," +
                Float.floatToIntBits(Test0877.fFld));
        FuzzerUtils.out.println("Test0877.dFld Test0877.iArrFld = " + Double.doubleToLongBits(Test0877.dFld) + "," +
                FuzzerUtils.checkSum(Test0877.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0877 _instance = new Test0877();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
