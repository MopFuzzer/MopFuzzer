// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:51 2023
public class Test0843 {

    public static final int N = 400;

    public static volatile long instanceCount=-207L;
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0843.fArrFld, -2.317F);
        FuzzerUtils.init(Test0843.lArrFld, -3127687990809529843L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    public static short sMeth(int i3, int i4, long l) {

        double d=0.86986;
        int i6=12;
        int i7=-253;
        int i8=46;
        int i9=27771;
        int[] iArr =new int[N];
        float f=2.175F;
        boolean b=true;
        long l1=47757L;

        FuzzerUtils.init(iArr, -14);

        i3 -= (int)d;
        for (int i5 : iArr) {
            for (i6 = 1; i6 < 4; ++i6) {
                i5 += (i6 - i3);
            }
            Test0843.instanceCount >>= i3;
            i4 -= (int)f;
            if (b) continue;
            Test0843.fArrFld[(i5 >>> 1) % N] = (float) d;
            for (i8 = 1; i8 < 4; i8++) {
                i5 += (33 + (i8 * i8));
            }
        }
        l1 = 1;
        while (++l1 < 236) {
            i9 *= (int)l1;
            Test0843.instanceCount += (l1 - l);
            i9 = i8;
            i9 += (int)(((l1 * i3) + l) - i9);
        }
        long meth_res = i3 + i4 + l + Double.doubleToLongBits(d) + i6 + i7 + Float.floatToIntBits(f) + (b ? 1 : 0) + i8
            + i9 + l1 + FuzzerUtils.checkSum(iArr);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public static void vMeth1(byte by) {

        int i1=59, i2=181, i10=-2248;
        short s=14941;
        boolean b1=false;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -8039582701880493658L);

        for (i1 = 278; i1 > 9; i1--) {
            sMeth(i1, i1, Test0843.instanceCount);
            i2 *= i2;
            i2 += i1;
            i2 = (int) Test0843.instanceCount;
            i2 += (i1 | i1);
            i10 = 1;
            do {
                double d1=-8.36543;
                i2 += (i10 * i2);
                s += (short)(((i10 * by) + by) - i1);
                i2 = i2;
                d1 -= i2;
                if (b1) continue;
                Test0843.instanceCount *= i2;
                d1 += s;
                lArr[i10] = i10;
            } while (++i10 < 6);
        }
        vMeth1_check_sum += by + i1 + i2 + i10 + s + (b1 ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth(int i) {


        vMeth1((byte)(114));
        vMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i11=62329;
        int i12=-13;
        int i13=60;
        int i14=-77;
        int i15=63219;
        int i16=-13;
        int[] iArr1 =new int[N];
        byte by1=-60;
        float f1=2.1005F;
        double d2=2.26406;
        double[] dArr =new double[N];
        boolean b2=false;

        FuzzerUtils.init(iArr1, 9);
        FuzzerUtils.init(dArr, 10.20171);

        vMeth(i11);
        i11 -= by1;
        i12 = 1;
        while (++i12 < 216) {
            for (f1 = 6; f1 < 116; ++f1) {
                for (i14 = 1; 2 > i14; ++i14) {
                    i13 += (i14 * i14);
                    Test0843.instanceCount = (long) d2;
                }
                i11 *= (int) Test0843.instanceCount;
                i16 = 1;
                do {
                    i11 += (int)(-137L + (i16 * i16));
                    Test0843.instanceCount >>= Test0843.instanceCount;
                    i15 = i15;
                    i11 >>= i15;
                    iArr1[(int)(f1)] = i14;
                    i13 += i14;
                    Test0843.instanceCount -= -5;
                    i11 *= -1;
                    switch ((i16 % 4) + 16) {
                    case 16:
                        by1 >>= (byte)9114;
                    case 17:
                        i13 *= i12;
                    case 18:
                        Test0843.instanceCount = i16;
                        if (b2) continue;
                        dArr[i16 + 1] -= 9208750613890136725L;
                        Test0843.instanceCount = i15;
                        break;
                    case 19:
                        i13 += (((i16 * i16) + i11) - i16);
                        Test0843.lArrFld[(int) (f1 - 1)] = i15;
                        break;
                    default:
                        Test0843.lArrFld = Test0843.lArrFld;
                        if (false) {
                            iArr1 = iArr1;
                            i13 = -9;
                        } else {
                            try {
                                i11 = (i11 % i11);
                                i13 = (1447403395 / i12);
                                i15 = (-152 / iArr1[i16 - 1]);
                            } catch (ArithmeticException a_e) {}
                        }
                    }
                } while (++i16 < 2);
            }
        }

        FuzzerUtils.out.println("i11 by1 i12 = " + i11 + "," + by1 + "," + i12);
        FuzzerUtils.out.println("f1 i13 i14 = " + Float.floatToIntBits(f1) + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 d2 i16 = " + i15 + "," + Double.doubleToLongBits(d2) + "," + i16);
        FuzzerUtils.out.println("b2 iArr1 dArr = " + (b2 ? 1 : 0) + "," + FuzzerUtils.checkSum(iArr1) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0843.instanceCount Test0843.fArrFld Test0843.lArrFld = " + Test0843.instanceCount + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0843.fArrFld)) + "," + FuzzerUtils.checkSum(Test0843.lArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0843 _instance = new Test0843();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
