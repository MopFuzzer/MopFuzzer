// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:35 2023
public class Test0484 {

    public static final int N = 400;

    public static long instanceCount=51170L;
    public static boolean bFld=false;
    public static double dFld=-8.107233;
    public static int iFld=-110;
    public static int iFld1=-119;
    public static byte byFld=124;
    public static int[] iArrFld =new int[N];
    public static int[] iArrFld1 =new int[N];
    public byte[][] byArrFld =new byte[N][N];
    public float[] fArrFld =new float[N];
    public static double[] dArrFld =new double[N];

    static {
        FuzzerUtils.init(Test0484.iArrFld, -19345);
        FuzzerUtils.init(Test0484.iArrFld1, -36336);
        FuzzerUtils.init(Test0484.dArrFld, -2.51992);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i2=57194, i3=4, i4=38, i5=6, i6=9;
        double d=-110.109742;
        float f=-122.164F;
        long[][] lArr =new long[N][N];

        FuzzerUtils.init(lArr, -199L);

        for (i2 = 216; i2 > 11; i2--) {
            if (Test0484.bFld) {
                for (i4 = 1; i4 < 8; i4++) {
                    i5 = (int) Test0484.instanceCount;
                    for (d = 1; 2 > d; ++d) {
                        lArr = FuzzerUtils.long2array(N, (long)-123L);
                        lArr[i2 - 1][i4 + 1] -= i3;
                        i6 += (int)(d * d);
                        i3 = (int) Test0484.instanceCount;
                    }
                    i6 *= i4;
                    Test0484.instanceCount = Test0484.instanceCount;
                    f += Test0484.instanceCount;
                }
            } else {
                i6 = i5;
            }
            Test0484.iArrFld[i2 + 1] -= i5;
            Test0484.instanceCount += i2;
        }
        long meth_res = i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + i6 + Float.floatToIntBits(f) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i1) {

        int i7=-226;
        int i8=176;
        int i9=26664;
        int i10=12;
        int[] iArr =new int[N];
        int[][] iArr1 =new int[N][N];
        double[][] dArr =new double[N][N];

        FuzzerUtils.init(iArr, 149);
        FuzzerUtils.init(iArr1, 5);
        FuzzerUtils.init(dArr, 96.56081);

        iArr[(i1 >>> 1) % N] *= (iMeth() - i1);
        iArr1 = FuzzerUtils.int2array(N, (int)-97);
        Test0484.instanceCount -= Test0484.instanceCount;
        i1 = -9;
        i1 -= 22970;
        for (i7 = 2; i7 < 351; i7++) {
            i1 = (int) Test0484.instanceCount;
            Test0484.instanceCount = -221;
            dArr = dArr;
            switch ((i7 % 1) + 62) {
            case 62:
                Test0484.instanceCount = i8;
            default:
                for (i9 = 1; 5 > i9; ++i9) {
                    if (i1 != 0) {
                        vMeth_check_sum += i1 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) +
                            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    i8 += (i9 * i9);
                    try {
                        i1 = (i10 % -175);
                        i10 = (Test0484.iArrFld[i9 - 1] / -15);
                        i1 = (Test0484.iArrFld1[i9] / i7);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        vMeth_check_sum += i1 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vSmallMeth(int i, long l) {


        vMeth(7);
        i *= (int) Test0484.dFld;
        vSmallMeth_check_sum += i + l;
    }

    public void mainTest(String[] strArr1) {

        float f1=-10.292F;
        int i11=8, i12=164, i13=34041, i14=-52821, i15=-10, i16=-70, i17=11741;
        short s=8831;

        for (int smallinvoc = 0; smallinvoc < 276; smallinvoc++) vSmallMeth(Test0484.iFld, -223L);
        Test0484.iArrFld1[(Test0484.iFld >>> 1) % N] = (int) Test0484.instanceCount;
        Test0484.iFld ^= (int) Test0484.instanceCount;
        f1 *= Test0484.iFld;
        i11 += i11;
        i11 -= (int)2.629F;
        i11 = (int) Test0484.instanceCount;
        for (i12 = 22; i12 < 388; i12++) {
            long l1=7023461969475317731L;
            Test0484.iArrFld1[i12] += Test0484.iFld;
            if (Test0484.bFld) {
                Test0484.iArrFld[i12 + 1] -= (int) l1;
                i13 &= (int)l1;
            } else if (Test0484.bFld) {
                Test0484.iArrFld1[i12 - 1] >>= i13;
                byArrFld[i12 - 1] = byArrFld[i12 - 1];
            } else if (Test0484.bFld) {
                switch (((i13 >>> 1) % 8) + 7) {
                case 7:
                    Test0484.iFld = (int) f1;
                    break;
                case 8:
                    for (i14 = 69; i14 > 2; --i14) {
                        fArrFld[i12] = (float) Test0484.dFld;
                        Test0484.iFld = i14;
                        Test0484.iFld = (int) l1;
                        Test0484.instanceCount = l1;
                        Test0484.iFld = (int) f1;
                        l1 *= i11;
                        Test0484.iFld = s;
                        for (i16 = 1; i16 < 2; i16++) {
                            Test0484.iFld += (((i16 * i11) + i13) - i11);
                            f1 += ((long)i16 ^ (long)i17);
                            l1 = Test0484.instanceCount;
                            i11 = Test0484.iFld;
                        }
                    }
                    try {
                        i15 = (i16 % 15050);
                        i11 = (Test0484.iArrFld1[i12 + 1] / -47415);
                        Test0484.iFld1 = (i16 % 1773942190);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 9:
                    Test0484.dFld = Test0484.byFld;
                    break;
                case 10:
                    Test0484.instanceCount = l1;
                    break;
                case 11:
                    i11 += i12;
                    break;
                case 12:
                    f1 = f1;
                    break;
                case 13:
                    i15 *= (int) Test0484.instanceCount;
                case 14:
                    Test0484.iArrFld1[i12 - 1] -= (int) Test0484.dFld;
                    break;
                default:
                    l1 += (i12 * i12);
                }
            } else {
                i17 = Test0484.iFld;
            }
        }

        FuzzerUtils.out.println("f1 i11 i12 = " + Float.floatToIntBits(f1) + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("s i16 i17 = " + s + "," + i16 + "," + i17);

        FuzzerUtils.out.println("Test0484.instanceCount Test0484.bFld Test0484.dFld = " + Test0484.instanceCount + "," + (Test0484.bFld ? 1
                : 0) + "," + Double.doubleToLongBits(Test0484.dFld));
        FuzzerUtils.out.println("Test0484.iFld Test0484.iFld1 Test0484.byFld = " + Test0484.iFld + "," + Test0484.iFld1 + "," + Test0484.byFld);
        FuzzerUtils.out.println("Test0484.iArrFld Test0484.iArrFld1 byArrFld = " + FuzzerUtils.checkSum(Test0484.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0484.iArrFld1) + "," + FuzzerUtils.checkSum(byArrFld));
        FuzzerUtils.out.println("fArrFld Test0484.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0484.dArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0484 _instance = new Test0484();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
