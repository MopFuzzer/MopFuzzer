// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:50 2023
public class Test0803 {

    public static final int N = 400;

    public static long instanceCount=3460518029L;
    public static boolean bFld=false;
    public static volatile double dFld=1.29639;
    public static long[] lArrFld =new long[N];
    public static int[] iArrFld =new int[N];
    public static byte[] byArrFld =new byte[N];

    static {
        FuzzerUtils.init(Test0803.lArrFld, 12L);
        FuzzerUtils.init(Test0803.iArrFld, -2);
        FuzzerUtils.init(Test0803.byArrFld, (byte) 27);
    }

    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(float f1) {

        float f2=-63.154F, f3=96.556F;
        int i5=151, i6=58812, i7=-244, i8=236;
        short s=-27575;
        byte by=15;
        double d=84.1292;

        for (f2 = 9; f2 < 234; f2++) {
            s *= (short)140;
            i5 += (int)((long)f2 ^ (long)f1);
            try {
                i5 = (i5 / i5);
                i5 = (i5 / -770);
                i5 = (i5 % i5);
            } catch (ArithmeticException a_e) {}
            s += (short)(((f2 * by) + f2) - i5);
        }
        Test0803.lArrFld[(i5 >>> 1) % N] -= i5;
        Test0803.iArrFld[(i5 >>> 1) % N] = i5;
        by += (byte)f1;
        for (i6 = 3; i6 < 172; i6++) {
            for (f3 = 1; f3 < 9; f3++) {
                i7 = 10;
                Test0803.instanceCount -= i8;
                i7 = i6;
                i5 += i8;
                d = Test0803.instanceCount;
            }
        }
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i5 + s + by + i6 + i7 +
            Float.floatToIntBits(f3) + i8 + Double.doubleToLongBits(d);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth(long l1) {

        int i4=28594;
        int i9=-46;
        int i10=-61224;
        int[] iArr1 =new int[N];
        float f=-1.297F;
        boolean b=false;
        byte by1=-37;
        double d1=1.25416;

        FuzzerUtils.init(iArr1, 5);

        i4 *= (i4 - (++iArr1[(i4 >>> 1) % N]));
        i4 >>= (int)(((f - i4) - (i4 - 14L)) - (i4 - (0.973F - (--iArr1[(62025 >>> 1) % N]))));
        iArr1[(i4 >>> 1) % N] <<= iArr1[(i4 >>> 1) % N];
        b = (b = bMeth(f));
        i4 = i4;
        i4 = i4;
        i9 = 1;
        while (++i9 < 321) {
            i4 = i4;
            i4 <<= by1;
            i10 = 5;
            while (--i10 > 0) {
                i4 += (((i10 * f) + i10) - i10);
                i4 += (56480 + (i10 * i10));
            }
            i4 -= (int)d1;
            l1 *= i10;
        }
        Test0803.instanceCount = -120;
        long meth_res = l1 + i4 + Float.floatToIntBits(f) + (b ? 1 : 0) + i9 + by1 + i10 + Double.doubleToLongBits(d1)
            + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i=48;
        int i1=158;
        int i2=12;
        int i3=205;
        int i11=35065;
        int i12=-34428;
        int[] iArr =new int[N];
        long l=33041L;
        float f4=0.698F;
        short s1=29527;
        short[] sArr =new short[N];

        FuzzerUtils.init(iArr, -60);
        FuzzerUtils.init(sArr, (short)-29815);

        i |= (((iArr[(251 >>> 1) % N]--) & (i * i)) * i);
        i1 = 1;
        do {
            i = (int)(((i - i) + sArr[i1]) - (i1 - (-(-(i1 - l)))));
            i = 6;
            for (i2 = 1; i2 < 9; ++i2) {
                Test0803.instanceCount -= (long) dMeth(Test0803.instanceCount);
                if (Test0803.bFld) continue;
                if (true) continue;
                for (i11 = 1; 2 > i11; i11++) {
                    Test0803.iArrFld[i2] *= (int) l;
                    i += (i11 | i12);
                    l = Test0803.instanceCount;
                    if (Test0803.bFld) continue;
                    f4 = s1;
                    Test0803.instanceCount += (((i11 * Test0803.instanceCount) + i11) - i3);
                }
            }
        } while (++i1 < 177);
        vMeth_check_sum += i + i1 + l + i2 + i3 + i11 + i12 + Float.floatToIntBits(f4) + s1 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i13=2, i14=47937, i15=-142, i16=6538, i17=64438, i18=-35, i19=-2, i20=-23459, i21=-131, i22=3, i23=154,
            i24=48917, i25=12;
        byte by2=13;
        float f5=-46.1005F;

        vMeth();
        Test0803.iArrFld[(i13 >>> 1) % N] <<= 37582;
        Test0803.instanceCount += by2;
        for (i14 = 285; i14 > 7; i14--) {
            if (Test0803.bFld) {
                i13 += (int)-87.428F;
                for (i16 = 2; 90 > i16; i16++) {
                    Test0803.instanceCount >>= Test0803.instanceCount;
                    Test0803.byArrFld[i16 + 1] -= (byte) Test0803.instanceCount;
                    Test0803.instanceCount = -48587;
                }
            }
            Test0803.dFld += i16;
            Test0803.lArrFld[i14 + 1] -= i15;
        }
        for (i18 = 10; 277 > i18; i18++) {
            Test0803.instanceCount += (((i18 * i13) + i17) - by2);
            i17 = i16;
            Test0803.instanceCount -= 66;
            for (f5 = 1; 94 > f5; f5++) {
                Test0803.iArrFld[(int) (f5 + 1)] >>>= i16;
            }
            i19 >>>= i19;
            for (i21 = 3; i21 < 94; ++i21) {
                for (i23 = 1; 2 > i23; i23 += 3) {
                    i22 += (i23 * Test0803.instanceCount);
                    switch (((i25 >>> 1) % 3) + 8) {
                    case 8:
                        Test0803.instanceCount = Test0803.instanceCount;
                        i20 += (i23 - i16);
                        i20 -= (int) Test0803.instanceCount;
                        break;
                    case 9:
                        i19 = i20;
                        Test0803.instanceCount &= i17;
                        if (true) break;
                        break;
                    case 10:
                        if (true) break;
                        break;
                    default:
                        i17 |= (int)-141L;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i13 by2 i14 = " + i13 + "," + by2 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 f5 = " + i18 + "," + i19 + "," + Float.floatToIntBits(f5));
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);

        FuzzerUtils.out.println("Test0803.instanceCount Test0803.bFld Test0803.dFld = " + Test0803.instanceCount + "," + (Test0803.bFld ? 1
                : 0) + "," + Double.doubleToLongBits(Test0803.dFld));
        FuzzerUtils.out.println("Test0803.lArrFld Test0803.iArrFld Test0803.byArrFld = " + FuzzerUtils.checkSum(Test0803.lArrFld) + ","
                + FuzzerUtils.checkSum(Test0803.iArrFld) + "," + FuzzerUtils.checkSum(Test0803.byArrFld));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0803 _instance = new Test0803();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
