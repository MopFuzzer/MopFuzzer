// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:45 2023
public class Test0715 {

    public static final int N = 400;

    public static long instanceCount=146L;
    public float fFld=6.540F;
    public static double dFld=-88.22786;
    public volatile byte byFld=-122;
    public static boolean bFld=true;
    public short sFld=9614;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1() {

        int i2=-9, i3=54603, i4=-61339, i5=-31892, i6=3060, i7=-9;
        double d=33.88596;
        short s1=-22432;
        float f=-1.514F;
        float[] fArr =new float[N];
        byte by1=-108;
        boolean b=false;

        FuzzerUtils.init(fArr, -110.897F);

        i2 += i2;
        for (i3 = 181; i3 > 3; i3 -= 2) {
            i4 = i2;
            for (d = 1; 17 > d; ++d) {
                Test0715.instanceCount *= i4;
                s1 += (short)(((d * i4) + i4) - f);
                switch ((int)((d % 6) + 47)) {
                case 47:
                case 48:
                    s1 = by1;
                    break;
                case 49:
                    for (i6 = 1; i6 < 2; i6++) {
                        i2 += 6;
                        fArr[i6 - 1] += Test0715.instanceCount;
                        i5 <<= (int) Test0715.instanceCount;
                    }
                case 50:
                    i2 *= i6;
                    i7 = (int) Test0715.instanceCount;
                    i5 *= i5;
                case 51:
                    i2 += (int)(d * i5);
                    break;
                case 52:
                    if (b) break;
                    break;
                default:
                    Test0715.instanceCount = (long) 1.896F;
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + Double.doubleToLongBits(d) + i5 + s1 + Float.floatToIntBits(f) + by1 + i6 +
            i7 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i1=-94;
        int i9=-56794;
        int i10=44098;
        int i11=-8;
        int[] iArr =new int[N];
        short s=-28256;
        boolean b1=true;
        float f1=-2.828F;

        FuzzerUtils.init(iArr, 101);

        i1 = (int) ((-(++Test0715.instanceCount)) + (Double.longBitsToDouble(3986024337495147199L) + (Test0715.instanceCount -
            s)));
        vMeth1();
        Test0715.instanceCount >>= -51046;
        s += (short)i1;
        for (int i8 : iArr) {
            if (b1) break;
            i9 = 1;
            do {
                if (b1) continue;
                switch (((i9 % 2) * 5) + 104) {
                case 110:
                    iArr[i9 - 1] = -61473;
                    try {
                        i1 = (7480 % i9);
                        i8 = (3650 % i1);
                        i8 = (i8 % -30120);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 108:
                    f1 += (((i9 * i1) + Test0715.instanceCount) - i8);
                    for (i10 = 1; i10 < 1; ++i10) {
                        try {
                            iArr[i10] = (i9 / i10);
                            i11 = (i8 % i1);
                            i8 = (27051 / i1);
                        } catch (ArithmeticException a_e) {}
                        Test0715.dFld += i11;
                    }
                default:
                    if (i10 != 0) {
                        vMeth_check_sum += i1 + s + (b1 ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10 + i11 +
                            FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
            } while (++i9 < 4);
        }
        vMeth_check_sum += i1 + s + (b1 ? 1 : 0) + i9 + Float.floatToIntBits(f1) + i10 + i11 +
            FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(byte by) {

        int i12=32785;
        int i13=-25098;
        int i14=-64;
        int i15=-84;
        int i16=-8;
        int i17=10077;
        int i18=10;
        int[] iArr1 =new int[N];
        short s2=-26554;
        long l=6091647957301524272L;
        boolean b2=true;

        FuzzerUtils.init(iArr1, -77);

        vMeth();
        for (i12 = 2; i12 < 139; ++i12) {
            for (i14 = i12; i14 < 11; i14++) {
                s2 *= (short)i12;
                i15 <<= i13;
            }
        }
        iArr1[(i15 >>> 1) % N] -= -110;
        for (l = 12; 247 > l; ++l) {
            Test0715.dFld -= Test0715.instanceCount;
        }
        for (i17 = 327; i17 > 20; i17--) {
            i18 *= i14;
            i18 = 29012;
        }
        if (b2) {
            i18 >>>= -6;
            i13 <<= i14;
        } else {
            iArr1[(i18 >>> 1) % N] = i14;
        }
        long meth_res = by + i12 + i13 + i14 + i15 + s2 + l + i16 + i17 + i18 + (b2 ? 1 : 0) +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-8;
        int i19=6;
        int i20=-118;
        int i21=46954;
        int i22=116;
        int i23=-31402;
        int i24=29751;
        int[] iArr2 =new int[N];
        int[][] iArr3 =new
                    int[N][N];
        double d1=-42.125051;
        double[] dArr =new double[N];
        float f2=98.1021F;
        boolean[][] bArr =new boolean[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr2, -61791);
        FuzzerUtils.init(dArr, -1.40310);
        FuzzerUtils.init(iArr3, 12);

        fFld = (((--i) + iMeth(byFld)) * Test0715.instanceCount);
        bArr[(i >>> 1) % N][(i >>> 1) % N] = false;
        for (d1 = 232; d1 > 7; d1 -= 2) {
            for (f2 = 2; f2 < 224; ++f2) {
                try {
                    i19 = (40367 / iArr2[(int)(d1 - 1)]);
                    i20 = (i / -10878);
                    i20 = (i19 % i20);
                } catch (ArithmeticException a_e) {}
                dArr = dArr;
            }
            if (Test0715.bFld) {
                iArr2[(int) (d1 + 1)] <<= (int) Test0715.instanceCount;
                for (i21 = 9; i21 < 224; i21++) {
                    i20 += (int) Test0715.instanceCount;
                    iArr3 = iArr3;
                    i >>= i;
                    i19 <<= i21;
                    i22 >>>= (int)-73L;
                    i23 = 2;
                    do {
                        switch ((i21 % 2) + 31) {
                        case 31:
                            switch ((i21 % 5) + 3) {
                            case 3:
                                i22 += (i23 * byFld);
                                iArr3[i23 - 1][(int)(d1 - 1)] /= (int)(i19 | 1);
                                switch ((int)((d1 % 4) + 10)) {
                                case 10:
                                    bArr[i23 - 1][i21] = Test0715.bFld;
                                    i19 ^= i19;
                                    i22 = (int) Test0715.instanceCount;
                                    break;
                                case 11:
                                    i *= i21;
                                    break;
                                case 12:
                                    if (Test0715.bFld) break;
                                    i24 = i21;
                                    iArr3[i21][i23 + 1] = -135;
                                case 13:
                                    i24 += (int) Test0715.instanceCount;
                                    try {
                                        i19 = (i % i19);
                                        iArr3[(int)(d1)][i21] = (i19 / -117);
                                        i19 = (58109 % i21);
                                    } catch (ArithmeticException a_e) {}
                                    break;
                                default:
                                    i19 = i19;
                                }
                            case 4:
                                i19 = i21;
                                break;
                            case 5:
                                i >>= byFld;
                                break;
                            case 6:
                                iArr2[(int)(d1 - 1)] = i21;
                                break;
                            case 7:
                                sFld -= (short)i24;
                                break;
                            }
                            break;
                        case 32:
                            i += (((i23 * i) + i20) - byFld);
                            break;
                        }
                    } while (--i23 > 0);
                }
            } else if (true) {
                i >>= i21;
            } else if (Test0715.bFld) {
                bArr[(int)(d1)] = bArr[(int)(d1 + 1)];
            }
        }

        FuzzerUtils.out.println("i d1 i19 = " + i + "," + Double.doubleToLongBits(d1) + "," + i19);
        FuzzerUtils.out.println("f2 i20 i21 = " + Float.floatToIntBits(f2) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("bArr iArr2 dArr = " + FuzzerUtils.checkSum(bArr) + "," + FuzzerUtils.checkSum(iArr2) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0715.instanceCount fFld Test0715.dFld = " + Test0715.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Double.doubleToLongBits(Test0715.dFld));
        FuzzerUtils.out.println("byFld Test0715.bFld sFld = " + byFld + "," + (Test0715.bFld ? 1 : 0) + "," + sFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0715 _instance = new Test0715();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
