// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:46 2023
public class Test0725 {

    public static final int N = 400;

    public static long instanceCount=-49167L;
    public int iFld=5;
    public static boolean bFld=false;
    public static long lFld=191L;
    public static float fFld=2.969F;
    public byte byFld=29;
    public static double[] dArrFld =new double[N];
    public static int[] iArrFld =new int[N];
    public static float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0725.dArrFld, 2.602);
        FuzzerUtils.init(Test0725.iArrFld, 25);
        FuzzerUtils.init(Test0725.fArrFld, 0.567F);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static boolean bMeth(long l3, byte by, int i9) {


        i9 ^= (int)l3;
        long meth_res = l3 + by + i9;
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static long lMeth(long l2, int i3, int i4) {

        int i5=-53838;
        int i6=-5;
        int i7=4317;
        int i8=98;
        int i10=175;
        int[] iArr =new int[N];
        short s=2475;
        short[] sArr =new short[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(iArr, 132);
        FuzzerUtils.init(byArr, (byte)-34);
        FuzzerUtils.init(sArr, (short)810);

        for (i5 = 9; 179 > i5; i5++) {
            for (i7 = i5; 9 > i7; i7++) {
                try {
                    i6 = (-1375960519 % i8);
                    iArr[i5] = (-64304 / iArr[i7 + 1]);
                    i4 = (-19232 % i4);
                } catch (ArithmeticException a_e) {}
            }
            Test0725.bFld = bMeth(-44980L, (byte) (73), i3);
            i3 = (int) Test0725.instanceCount;
            i3 += (int)(-36804L + (i5 * i5));
            switch (((i5 % 1) * 5) + 40) {
            case 45:
                Test0725.dArrFld[(i5 >>> 1) % N] = s;
                switch (((i3 >>> 1) % 5) + 11) {
                case 11:
                    iArr[i5 + 1] = i5;
                    byArr[i5] = (byte)i3;
                    iArr[i5 - 1] ^= 0;
                    break;
                case 12:
                    i10 = 1;
                    while (++i10 < 9) {
                        Test0725.lFld >>>= i6;
                        sArr[i5] += (short) Test0725.fFld;
                    }
                    break;
                case 13:
                    Test0725.lFld -= l2;
                    break;
                case 14:
                    i3 = i6;
                    break;
                case 15:
                    iArr[i5 - 1] = i10;
                default:
                    i8 = (int)l2;
                }
                break;
            }
        }
        long meth_res = l2 + i3 + i4 + i5 + i6 + i7 + i8 + s + i10 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(long l, long l1) {

        int i12=-6;
        int i13=42261;
        int i15=-37446;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, -13);

        iFld -= (int)lMeth(-2944528126L, iFld, 28140);
        for (int i11 : iArr1) {
            double d1=-1.35266;
            i11 ^= i11;
            if (i11 != 0) {
                vMeth_check_sum += l + l1 + i12 + i13 + i15 + FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (i12 = 4; i12 > 1; --i12) {
                Test0725.lFld = i13;
                Test0725.fFld += i12;
                iFld += (((i12 * Test0725.lFld) + l) - i13);
                iArr1[i12] -= (int) Test0725.lFld;
            }
            d1 += l1;
            Test0725.lFld += (long) Test0725.fFld;
        }
        Test0725.instanceCount <<= 18947;
        i15 = 1;
        do {
            iFld += (i15 - i12);
            iFld = 14;
        } while (++i15 < 302);
        vMeth_check_sum += l + l1 + i12 + i13 + i15 + FuzzerUtils.checkSum(iArr1);
    }

    public void mainTest(String[] strArr1) {

        double d=-74.41800, d2=-2.104988;
        int i=-9, i1=58, i2=7, i16=-28, i17=5, i18=167, i19=38, i20=-51391, i21=44203, i22=51453;
        float f=-1.181F;
        short s2=-24818;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, false);

        for (d = 9; d < 269; ++d) {
            for (i1 = 4; i1 < 97; ++i1) {
                vMeth(8853191772626204051L, Test0725.lFld);
                i = i1;
                i += (((i1 * i1) + i1) - i1);
                Test0725.dArrFld[(int) (d)] = d;
                bArr[i1 + 1] = Test0725.bFld;
                iFld *= (int) Test0725.instanceCount;
            }
            i16 = 1;
            do {
                Test0725.iArrFld[i16] = i16;
                iFld = i1;
                if (Test0725.bFld) continue;
                Test0725.iArrFld[i16] *= (int) Test0725.fFld;
            } while (++i16 < 97);
            for (f = 6; 97 > f; ++f) {
                for (i18 = 1; i18 < 2; ++i18) {
                    s2 = (short)i16;
                    Test0725.iArrFld[i18 - 1] += (int) Test0725.instanceCount;
                    s2 += (short) (((i18 * i19) + i16) - Test0725.lFld);
                    i19 -= i19;
                    d2 += 11;
                    Test0725.fArrFld[i18] *= iFld;
                    byFld >>= (byte)i2;
                    i17 *= i16;
                }
            }
            if (true) break;
        }
        iFld *= i19;
        for (i20 = 10; i20 < 202; i20++) {
            iFld = -60297;
            i22 += (((i20 * i1) + i2) - f);
            i22 = (int) Test0725.lFld;
            if (Test0725.bFld) continue;
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i16 f = " + i2 + "," + i16 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("s2 d2 i20 = " + s2 + "," + Double.doubleToLongBits(d2) + "," + i20);
        FuzzerUtils.out.println("i21 i22 bArr = " + i21 + "," + i22 + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0725.instanceCount iFld Test0725.bFld = " + Test0725.instanceCount + "," + iFld + "," +
                (Test0725.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0725.lFld Test0725.fFld byFld = " + Test0725.lFld + "," + Float.floatToIntBits(Test0725.fFld) +
            "," + byFld);
        FuzzerUtils.out.println("Test0725.dArrFld Test0725.iArrFld Test0725.fArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0725.dArrFld)) + "," + FuzzerUtils.checkSum(Test0725.iArrFld) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0725.fArrFld)));

        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0725 _instance = new Test0725();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  bMeth ->  bMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
