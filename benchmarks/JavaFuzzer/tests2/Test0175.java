// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:20 2023
public class Test0175 {

    public static final int N = 400;

    public static long instanceCount=-4L;
    public static double dFld=2.6795;
    public byte byFld=78;
    public static int iFld=-81;
    public static long[] lArrFld =new long[N];
    public static byte[] byArrFld =new byte[N];
    public static boolean[] bArrFld =new boolean[N];

    static {
        FuzzerUtils.init(Test0175.lArrFld, 46057L);
        FuzzerUtils.init(Test0175.byArrFld, (byte) 26);
        FuzzerUtils.init(Test0175.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    public static double dMeth(int i8, int i9, int i10) {

        double d1=-119.955;
        int[] iArr1 =new int[N];

        FuzzerUtils.init(iArr1, -13);

        d1 += i9;
        Test0175.instanceCount >>= i10;
        iArr1[(i8 >>> 1) % N] *= i10;
        long meth_res = i8 + i9 + i10 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static void vMeth() {

        int i5=7;
        int i6=254;
        int i7=170;
        int i11=-61301;
        int i12=-185;
        int i13=-34;
        int[] iArr =new int[N];
        float f=-2.500F;
        double d=63.92775;
        boolean b=true;

        FuzzerUtils.init(iArr, 7);

        i5 = 1;
        while (++i5 < 397) {
            for (i6 = i5; i6 < 4; ++i6) {
                i7 |= (int)(((i7 * i5) - (12 * (i7 += i5))) - 3919513563L);
                i7 <<= (int) (-1463 * ((-917327521L - (f + i7)) * (Test0175.instanceCount - Test0175.instanceCount)));
                i7 += (13621 + (i6 * i6));
                Test0175.instanceCount = (long) (++f);
                i7 = (int)((d--) + (--iArr[i6]));
            }
            i7 -= (int)dMeth(i7, i7, i5);
            i7 = i5;
            if (b) {
                for (i11 = i5; i11 < 4; i11++) {
                    d = i12;
                    i13 = 1;
                    do {
                        i12 = -7961;
                    } while (++i13 < 1);
                    Test0175.lArrFld = Test0175.lArrFld;
                }
            } else if (b) {
                i12 %= (int)(i7 | 1);
            } else {
                d = i11;
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i11 + i12 + i13 + (b ?
            1 : 0) + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i2) {

        int i3=46;
        int i4=9;
        int i14=-119;
        int[] iArr2 =new int[N];
        float f1=2.63F;

        FuzzerUtils.init(iArr2, -2);

        for (i3 = 10; i3 < 199; ++i3) {
            vMeth();
        }
        i14 = 1;
        do {
            Test0175.byArrFld[i14] -= (byte) i3;
            i4 += (int) Test0175.instanceCount;
            f1 = 1;
            do {
                if (true) break;
                i4 = i14;
                iArr2[i14] >>= i3;
                i2 = (int) Test0175.instanceCount;
                Test0175.instanceCount <<= i2;
                i4 += (int)((long)f1 ^ i14);
                i4 >>= i4;
                iArr2[(int)(f1)] -= i2;
                i2 += i2;
            } while (++f1 < 5);
        } while (++i14 < 330);
        long meth_res = i2 + i3 + i4 + i14 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-40938;
        int i1=-37;
        int i15=4;
        int i16=29609;
        int i18=12;
        int i19=112;
        int i20=44133;
        int i21=45;
        int[] iArr3 =new int[N];
        float f2=-67.892F;
        double[] dArr =new double[N];

        FuzzerUtils.init(iArr3, -5);
        FuzzerUtils.init(dArr, -43.77884);

        for (i = 10; i < 365; i += 2) {
            i1 = iMeth(i);
            i1 += (i + i);
        }
        for (i15 = 6; i15 < 128; i15++) {
            i1 *= (int) Test0175.dFld;
            Test0175.lArrFld = Test0175.lArrFld;
            i1 = (int)f2;
            Test0175.bArrFld = FuzzerUtils.boolean1array(N, (boolean) true);
            switch (((i15 % 2) * 5) + 56) {
            case 63:
                i1 = i;
                for (i18 = 1; i18 < 205; i18++) {
                    switch (((i18 % 7) * 5) + 93) {
                    case 101:
                        i19 += (i18 | Test0175.instanceCount);
                        i16 = (int) Test0175.instanceCount;
                        i1 *= (int) Test0175.instanceCount;
                        i16 *= (int) Test0175.instanceCount;
                        break;
                    case 97:
                        switch (((i15 % 2) * 5) + 70) {
                        case 79:
                            dArr[i18 + 1] += Test0175.instanceCount;
                            byFld -= (byte)i19;
                            Test0175.lArrFld[i18] >>= i16;
                            iArr3[(i15 >>> 1) % N] = Test0175.iFld;
                            break;
                        case 78:
                            i16 = i1;
                            iArr3 = iArr3;
                            switch (((i18 % 1) * 5) + 55) {
                            case 57:
                                for (i20 = 1; i20 < 2; i20++) {
                                    Test0175.instanceCount ^= i18;
                                    i21 = i21;
                                }
                                Test0175.dFld -= -2.843F;
                                Test0175.instanceCount += (i18 ^ i20);
                                break;
                            }
                            Test0175.instanceCount += i18;
                            break;
                        }
                    case 94:
                        f2 = i1;
                        break;
                    case 118:
                    case 108:
                        i19 = i21;
                        break;
                    case 122:
                        Test0175.iFld += i18;
                    case 96:
                        Test0175.iFld /= (int) (Test0175.instanceCount | 1);
                        break;
                    }
                }
            case 62:
            }
        }

        FuzzerUtils.out.println("i i1 i15 = " + i + "," + i1 + "," + i15);
        FuzzerUtils.out.println("i16 f2 i18 = " + i16 + "," + Float.floatToIntBits(f2) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("iArr3 dArr = " + FuzzerUtils.checkSum(iArr3) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0175.instanceCount Test0175.dFld byFld = " + Test0175.instanceCount + "," +
                Double.doubleToLongBits(Test0175.dFld) + "," + byFld);
        FuzzerUtils.out.println("Test0175.iFld Test0175.lArrFld Test0175.byArrFld = " + Test0175.iFld + "," +
                FuzzerUtils.checkSum(Test0175.lArrFld) + "," + FuzzerUtils.checkSum(Test0175.byArrFld));
        FuzzerUtils.out.println("Test0175.bArrFld = " + FuzzerUtils.checkSum(Test0175.bArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0175 _instance = new Test0175();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
