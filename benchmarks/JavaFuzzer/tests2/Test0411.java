// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:31 2023
public class Test0411 {

    public static final int N = 400;

    public static long instanceCount=11618L;
    public static volatile int iFld=-10;
    public static volatile float fFld=45.392F;
    public static int[][] iArrFld =new int[N][N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0411.iArrFld, 2117);
        FuzzerUtils.init(Test0411.lArrFld, -12375L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vSmallMeth() {

        short[] sArr1 =new short[N];

        FuzzerUtils.init(sArr1, (short)22616);

        Test0411.iFld += (--Test0411.iFld);
        vSmallMeth_check_sum += FuzzerUtils.checkSum(sArr1);
    }

    public static void vMeth() {

        int i8=-19562, i9=68, i10=-228, i11=-51180, i12=37897, i13=-193, i14=-7;
        double d1=-2.8991;
        float f1=30.227F;
        short s1=-3159;

        vSmallMeth();
        for (i8 = 4; i8 < 182; ++i8) {
            switch (((i8 % 8) * 5) + 104) {
            case 108:
                i9 *= i9;
                break;
            case 116:
                i9 = i8;
                d1 %= ((long) (Test0411.fFld) | 1);
                switch ((((i8 >>> 1) % 2) * 5) + 19) {
                case 26:
                    for (i10 = 1; 9 > i10; ++i10) {
                        boolean b1=false;
                        if (b1) break;
                        for (f1 = i8; 2 > f1; ++f1) {
                            Test0411.iArrFld = FuzzerUtils.int2array(N, (int) -104);
                            Test0411.instanceCount = Test0411.instanceCount;
                        }
                        b1 = b1;
                        Test0411.iFld += (i10 * i10);
                        Test0411.iFld >>= s1;
                    }
                case 20:
                    i9 += i9;
                    break;
                }
                break;
            case 125:
                i11 += i8;
                break;
            case 137:
                d1 += Test0411.instanceCount;
                break;
            case 134:
                Test0411.lArrFld[i8 - 1] = Test0411.iFld;
                break;
            case 136:
                try {
                    i12 = (185 % i9);
                    Test0411.iArrFld[i8 + 1][i8] = (i10 % -35);
                    i13 = (-34328 / i12);
                } catch (ArithmeticException a_e) {}
            case 114:
                Test0411.instanceCount = i14;
                break;
            case 138:
                i9 += i8;
            }
        }
        vMeth_check_sum += i8 + i9 + Double.doubleToLongBits(d1) + i10 + i11 + Float.floatToIntBits(f1) + i12 + s1 +
            i13 + i14;
    }

    public static boolean bMeth(int i, int i1) {

        int i2=-21007, i3=-219, i4=9, i5=43655, i6=4, i7=8, i15=-130, i16=-165;
        double d=-67.100381;
        float f=-1.513F;
        float[] fArr =new float[N];
        short s2=11911;

        FuzzerUtils.init(fArr, -2.946F);

        for (i2 = 343; i2 > 14; i2 -= 2) {
            for (i4 = 1; i4 < 10; i4++) {
                d = (Test0411.iFld += (int) ((f + i2) * i));
                for (i6 = i4; i6 < 2; i6++) {
                    vMeth();
                }
                for (i15 = i2; i15 < 2; i15++) {
                    i = 7;
                    d = i6;
                    try {
                        i3 = (i3 % 59978);
                        i = (i / i3);
                        i7 = (i / -122);
                    } catch (ArithmeticException a_e) {}
                    d -= f;
                    Test0411.iArrFld[i4 - 1][i4 + 1] += 69;
                }
                i3 = (int) Test0411.instanceCount;
                fArr[i2 - 1] = s2;
                Test0411.instanceCount = i16;
                i7 = -12650;
            }
        }
        long meth_res = i + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i6 + i7 +
            i15 + i16 + s2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public void mainTest(String[] strArr1) {

        boolean b=true;
        int i17=-11;
        int i18=0;
        int i19=-8037;
        int i20=-115;
        int i21=261;
        int i22=14;
        int[] iArr =new int[N];
        short s3=13229;
        short[] sArr =new short[N];
        double d2=-2.90786;

        FuzzerUtils.init(sArr, (short)21676);
        FuzzerUtils.init(iArr, 231);

        sArr = (sArr = (sArr = (sArr = sArr)));
        for (int smallinvoc=0; smallinvoc<925; smallinvoc++) vSmallMeth();
        iArr[(14 >>> 1) % N] -= (int)((++iArr[(-176 >>> 1) % N]) + -62856L);
        b = bMeth(2, 8220);
        for (i17 = 7; i17 < 302; ++i17) {
            for (i19 = 5; i19 < 85; ++i19) {
                Test0411.iFld /= (int) (Test0411.instanceCount | 1);
                i20 = (int) Test0411.instanceCount;
                i20 *= (int) Test0411.instanceCount;
                Test0411.iFld -= 51295;
                i20 -= i20;
                b = true;
                Test0411.iFld <<= (int) Test0411.instanceCount;
                i20 >>= (int)-28396L;
            }
            if (true) {
                Test0411.iFld += (i17 ^ i20);
                Test0411.instanceCount = Test0411.iFld;
                for (i21 = 1; i21 < 85; ++i21) {
                    i18 += (int)9L;
                    Test0411.iArrFld[i21 + 1] = iArr;
                    Test0411.iFld += -166;
                    if (false) {
                        s3 += (short) (i21 | Test0411.instanceCount);
                        i22 *= i21;
                        if (false) {
                            s3 = s3;
                            i18 |= i20;
                            Test0411.iFld += i21;
                            i18 = i18;
                        } else if (b) {
                            iArr[i21 - 1] <<= (int)5035959176322450798L;
                        } else {
                            Test0411.fFld = Test0411.instanceCount;
                        }
                    } else if (b) {
                        iArr[i17] %= (int) (Test0411.instanceCount | 1);
                    } else if (b) {
                        Test0411.instanceCount *= (long) d2;
                    } else {
                        Test0411.iArrFld[i17][i17 + 1] *= (int) Test0411.instanceCount;
                    }
                }
            } else if (true) {
                i22 = Test0411.iFld;
            } else if (true) {
            }
        }

        FuzzerUtils.out.println("b i17 i18 = " + (b ? 1 : 0) + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 s3 d2 = " + i22 + "," + s3 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("sArr iArr = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0411.instanceCount Test0411.iFld Test0411.fFld = " + Test0411.instanceCount + "," + Test0411.iFld +
                "," + Float.floatToIntBits(Test0411.fFld));
        FuzzerUtils.out.println("Test0411.iArrFld Test0411.lArrFld = " + FuzzerUtils.checkSum(Test0411.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0411.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0411 _instance = new Test0411();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth bMeth
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  vMeth ->  vMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
