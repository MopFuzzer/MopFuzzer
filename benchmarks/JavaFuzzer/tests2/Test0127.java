// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:17 2023
public class Test0127 {

    public static final int N = 400;

    public static long instanceCount=-83L;
    public static byte byFld=15;
    public static volatile short sFld=13020;
    public static double dFld=1.62704;
    public static float fFld=2.793F;
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0127.lArrFld, 0L);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i4, long l1, int i5) {

        int i6=178, i7=-222, i8=-8, i9=-14897, i10=-60773, i11=142, i12=-11534;
        float f=76.263F;
        byte[][] byArr =new byte[N][N];

        FuzzerUtils.init(byArr, (byte)42);

        i6 = 178;
        do {
            for (i7 = 17; 1 < i7; --i7) {
                Test0127.instanceCount += i6;
                i5 += (8 + (i7 * i7));
                Test0127.instanceCount >>= 45118;
                l1 += (i7 ^ Test0127.instanceCount);
                i5 += (i7 * Test0127.byFld);
            }
            for (i9 = 17; i9 > i6; i9--) {
                i11 = 1;
                while (++i11 < 1) {
                    Test0127.byFld = (byte) 8;
                    i10 <<= (int)5321L;
                }
                for (f = i6; f < 1; ++f) {
                    Test0127.sFld <<= (short) Test0127.instanceCount;
                    Test0127.dFld *= l1;
                    byArr[i6][i6] = (byte)i7;
                }
            }
        } while ((i6 -= 2) > 0);
        vMeth1_check_sum += i4 + l1 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i12 +
            FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth() {

        int i2=0;
        int i3=-8;
        int i13=247;
        int i14=11;
        int[][] iArr =new int[N][N];
        float f1=114.264F;
        boolean b=true;

        FuzzerUtils.init(iArr, 12);

        for (i2 = 10; i2 < 269; ++i2) {
            vMeth1(i3, Test0127.instanceCount, i3);
            i3 += i3;
            i3 *= i2;
            f1 += (i2 * i2);
            Test0127.instanceCount = (long) f1;
            b = b;
            i3 <<= Test0127.byFld;
        }
        i3 |= i2;
        i3 = (int)-2.779F;
        i3 -= (int)f1;
        Test0127.byFld = (byte) i2;
        for (i13 = 245; i13 > 10; --i13) {
            Test0127.instanceCount += (((i13 * i14) + i3) - i13);
            iArr[i13 - 1][i13 - 1] -= i2;
        }
        vMeth_check_sum += i2 + i3 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i13 + i14 + FuzzerUtils.checkSum(iArr);
    }

    public static void vSmallMeth(long l, double d, int i1) {


        vMeth();
        i1 -= i1;
        vSmallMeth_check_sum += l + Double.doubleToLongBits(d) + i1;
    }

    public void mainTest(String[] strArr1) {

        int i=-11;
        int i15=-6647;
        int i16=-29026;
        int i17=42918;
        int i18=128;
        int[] iArr1 =new int[N];
        int[] iArr2 =new int[N];
        double d1=-112.110678;
        long l2=-22L, l3=7745588793217941306L;
        boolean b1=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, -40.586F);
        FuzzerUtils.init(iArr1, 3);
        FuzzerUtils.init(iArr2, -14742);

        i = 1;
        while (++i < 266) {
            fArr = FuzzerUtils.float1array(N, (float)-2.464F);
        }
        for (int smallinvoc = 0; smallinvoc < 713; smallinvoc++) vSmallMeth(27985L, Test0127.dFld, i);
        iArr1[(90 >>> 1) % N] &= (int) Test0127.instanceCount;
        iArr2[(i >>> 1) % N] += i;
        for (d1 = 12; d1 < 352; ++d1) {
            l2 = 1;
            do {
                Test0127.lArrFld = FuzzerUtils.long1array(N, (long) -6L);
                Test0127.instanceCount = l2;
                Test0127.instanceCount = (long) Test0127.fFld;
                i16 = 1;
                do {
                    Test0127.instanceCount -= (long) Test0127.fFld;
                    i15 += i;
                    i15 += (((i16 * i15) + l2) - i15);
                    i15 += i;
                    i15 += (i16 ^ i15);
                    i15 += (i16 * i16);
                } while (++i16 < 1);
                Test0127.instanceCount += 89L;
                i15 += (5575 + (l2 * l2));
                i15 &= (int) Test0127.instanceCount;
            } while (++l2 < 74);
            i15 += (int) (((d1 * i16) + l2) - Test0127.fFld);
            for (i17 = 2; i17 < 74; ++i17) {
                i15 >>>= i16;
                Test0127.fFld *= Test0127.instanceCount;
                if (b1) break;
                if (b1) {
                    Test0127.dFld -= i17;
                } else {
                    Test0127.dFld += i;
                }
                l3 >>= i17;
                Test0127.fFld = l2;
            }
        }

        FuzzerUtils.out.println("i d1 i15 = " + i + "," + Double.doubleToLongBits(d1) + "," + i15);
        FuzzerUtils.out.println("l2 i16 i17 = " + l2 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 b1 l3 = " + i18 + "," + (b1 ? 1 : 0) + "," + l3);
        FuzzerUtils.out.println("fArr iArr1 iArr2 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
            FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0127.instanceCount Test0127.byFld Test0127.sFld = " + Test0127.instanceCount + "," + Test0127.byFld +
                "," + Test0127.sFld);
        FuzzerUtils.out.println("Test0127.dFld Test0127.fFld Test0127.lArrFld = " + Double.doubleToLongBits(Test0127.dFld) + "," +
                Float.floatToIntBits(Test0127.fFld) + "," + FuzzerUtils.checkSum(Test0127.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0127 _instance = new Test0127();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
