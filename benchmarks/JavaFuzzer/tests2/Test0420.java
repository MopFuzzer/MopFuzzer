// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0420 {

    public static final int N = 400;

    public static long instanceCount=3766730865634013484L;
    public static int iFld=-11;
    public static boolean bFld=true;
    public volatile int iFld1=3;
    public int iFld2=0;
    public static int[] iArrFld =new int[N];

    static {
        FuzzerUtils.init(Test0420.iArrFld, -57052);
    }

    public static long vMeth_check_sum = 0;
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static void vMeth(int i1) {


        i1 <<= Test0420.iFld;
        vMeth_check_sum += i1;
    }

    public static long lMeth() {

        long l=119L;
        long[][] lArr =new long[N][N];
        int i9=235;
        int i10=60201;
        int i11=176;
        int i12=192;
        int i13=-42;
        int i14=4170;
        int i15=-4;
        int[] iArr =new int[N];
        float f1=-117.1001F;
        boolean b1=false;

        FuzzerUtils.init(iArr, 25893);
        FuzzerUtils.init(lArr, 4195134897427445589L);

        for (l = 6; l < 249; ++l) {
            for (i10 = 1; i10 < 7; ++i10) {
                iArr[(int) (l + 1)] = Test0420.iFld;
                i9 += (((i10 * i10) + i11) - i12);
                switch ((int)((l % 1) + 64)) {
                case 64:
                    f1 += (((i10 * i10) + i12) - i12);
                    for (i13 = 1; i13 < 2; i13++) {
                        i12 *= (int)l;
                        i9 += (int) Test0420.instanceCount;
                        switch ((i13 % 7) + 104) {
                        case 104:
                            i9 = i13;
                            Test0420.iFld >>= i9;
                            break;
                        case 105:
                            i11 += (i13 * i13);
                            lArr[i13 + 1][(int)(l - 1)] = i13;
                            break;
                        case 106:
                            Test0420.instanceCount *= i12;
                            break;
                        case 107:
                            b1 = b1;
                            break;
                        case 108:
                            i9 = (int) Test0420.instanceCount;
                            break;
                        case 109:
                            Test0420.instanceCount += i13;
                            break;
                        case 110:
                            i15 = -45334;
                            break;
                        default:
                            iArr[i13] -= i10;
                        }
                    }
                default:
                    Test0420.iFld |= i10;
                }
            }
        }
        long meth_res = l + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + i13 + i14 + (b1 ? 1 : 0) + i15 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth1(int i3, int i4) {

        int i5=12, i6=-10, i7=121, i8=3, i16=-62460;
        double d=2.99731;
        byte by1=-75;

        for (i5 = 12; i5 < 239; ++i5) {
            for (i7 = 1; 7 > i7; i7++) {
                i4 = (int)lMeth();
                Test0420.instanceCount += (i7 * i7);
                Test0420.iArrFld[i5] *= 218;
                Test0420.iFld = (int) Test0420.instanceCount;
                d /= (Test0420.instanceCount | 1);
                i3 = i7;
                i16 = 1;
                while (++i16 < 2) {
                    i3 |= i16;
                    try {
                        i4 = (i3 / Test0420.iArrFld[i5 - 1]);
                        i6 = (i16 % i5);
                        i6 = (Test0420.iFld % -140);
                    } catch (ArithmeticException a_e) {}
                    i8 <<= i5;
                    by1 -= (byte) Test0420.instanceCount;
                    Test0420.instanceCount = by1;
                    d = Test0420.instanceCount;
                }
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + i7 + i8 + Double.doubleToLongBits(d) + i16 + by1;
    }

    public static void vSmallMeth(int i2, float f, boolean b) {


        vMeth1(225, i2);
        vSmallMeth_check_sum += i2 + Float.floatToIntBits(f) + (b ? 1 : 0);
    }

    public void mainTest(String[] strArr1) {

        int i=2228, i17=11, i18=113, i19=6, i20=-14, i21=32389;
        byte by=-109;
        float f2=-1.425F;
        double d1=0.73073;
        short s=-16935;
        long l1=-23475L;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 10L);

        i = (by++);
        vMeth(i);
        Test0420.iFld = (int) Test0420.instanceCount;
        for (int smallinvoc = 0; smallinvoc < 164; smallinvoc++) vSmallMeth(Test0420.iFld, 0.793F, Test0420.bFld);
        for (i17 = 24; i17 < 393; i17++) {
            f2 *= Test0420.instanceCount;
            for (i19 = 68; i19 > 4; i19 -= 3) {
                Test0420.iArrFld[i19] -= i;
                switch ((i17 % 6) + 72) {
                case 72:
                case 73:
                    i18 += (i19 | i17);
                    i21 = 1;
                    while ((i21 += 2) < 4) {
                        Test0420.instanceCount = (long) f2;
                        i20 = i21;
                        f2 -= i21;
                        Test0420.bFld = Test0420.bFld;
                        switch (((i21 % 8) * 5) + 39) {
                        case 55:
                            if (Test0420.bFld) {
                                i = i17;
                                Test0420.instanceCount += i19;
                                Test0420.iArrFld[i19] = (int) 39L;
                            } else {
                                Test0420.instanceCount += i21;
                                by = (byte)i20;
                                Test0420.iArrFld[i17] = iFld1;
                            }
                            iFld1 = iFld1;
                            break;
                        case 47:
                            Test0420.iArrFld[i21 - 1] = i21;
                            d1 = iFld2;
                            i20 += i;
                            break;
                        case 65:
                            if (Test0420.bFld) break;
                            Test0420.bFld = Test0420.bFld;
                            break;
                        case 45:
                            Test0420.instanceCount += i21;
                            break;
                        case 75:
                            Test0420.iArrFld = Test0420.iArrFld;
                            break;
                        case 52:
                            i18 += (i21 + s);
                            break;
                        case 74:
                            lArr1 = lArr1;
                        case 73:
                        default:
                            s = (short) Test0420.instanceCount;
                        }
                    }
                    break;
                case 74:
                    Test0420.iFld += i19;
                    break;
                case 75:
                    Test0420.iArrFld = Test0420.iArrFld;
                    break;
                case 76:
                    Test0420.instanceCount >>= Test0420.instanceCount;
                    break;
                case 77:
                    iFld2 = i21;
                    break;
                default:
                    i += (((i19 * Test0420.iFld) + s) - l1);
                }
            }
        }

        FuzzerUtils.out.println("i by i17 = " + i + "," + by + "," + i17);
        FuzzerUtils.out.println("i18 f2 i19 = " + i18 + "," + Float.floatToIntBits(f2) + "," + i19);
        FuzzerUtils.out.println("i20 i21 d1 = " + i20 + "," + i21 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("s l1 lArr1 = " + s + "," + l1 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0420.instanceCount Test0420.iFld Test0420.bFld = " + Test0420.instanceCount + "," + Test0420.iFld +
                "," + (Test0420.bFld ? 1 : 0));
        FuzzerUtils.out.println("iFld1 iFld2 Test0420.iArrFld = " + iFld1 + "," + iFld2 + "," +
                FuzzerUtils.checkSum(Test0420.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0420 _instance = new Test0420();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth vMeth1 vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
