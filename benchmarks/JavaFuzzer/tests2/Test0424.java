// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:32 2023
public class Test0424 {

    public static final int N = 400;

    public static long instanceCount=-5747611531846681042L;
    public volatile double dFld=95.116574;
    public static volatile float fFld=0.246F;
    public static volatile long lFld=-162L;
    public static boolean bFld=true;
    public volatile float fFld1=9.949F;
    public static boolean[] bArrFld =new boolean[N];
    public static int[] iArrFld =new int[N];
    public static double[] dArrFld =new double[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0424.bArrFld, true);
        FuzzerUtils.init(Test0424.iArrFld, -2);
        FuzzerUtils.init(Test0424.dArrFld, 2.18169);
    }

    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i6=31146, i7=-160, i8=60, i9=65260, i10=-14, i11=-55481, i12=223, i13=8, i14=13321;
        byte by=1;
        boolean b=true;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.733F);

        i6 = by;
        Test0424.bArrFld[(i6 >>> 1) % N] = b;
        for (i7 = 10; i7 < 179; i7++) {
            for (i9 = 1; i9 < 9; ++i9) {
                Test0424.instanceCount &= 35405;
                i10 += (((i9 * i6) + i9) - i8);
                for (i11 = 1; i11 < 2; ++i11) {
                    i12 += (i11 - Test0424.instanceCount);
                }
                Test0424.instanceCount += i8;
                Test0424.iArrFld[i7 + 1] += i12;
                i6 = i11;
            }
            i6 = (int)2969596007145197982L;
            for (i13 = 1; i13 < 9; i13++) {
                i8 *= i12;
                fArr[i13] -= 0;
            }
        }
        long meth_res = i6 + by + (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12 + i13 + i14 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static byte byMeth() {

        int i4=-3, i5=-152, i15=-6, i16=-5, i17=89, i18=-25242, i19=34181;
        double d=0.66296;
        double[] dArr =new double[N];
        float f=0.203F;

        FuzzerUtils.init(dArr, 124.68025);

        for (i4 = 2; i4 < 304; ++i4) {
            if (Test0424.bArrFld[i4]) continue;
            i5 -= i4;
            iMeth();
            i5 <<= i4;
            i15 = 1;
            while (++i15 < 5) {
                if (i5 != 0) {
                }
                try {
                    i5 = (i5 % i4);
                    i5 = (i15 / i5);
                    i5 = (i5 / Test0424.iArrFld[i4 - 1]);
                } catch (ArithmeticException a_e) {}
                d = -200L;
            }
        }
        for (i16 = 3; 152 > i16; ++i16) {
            Test0424.iArrFld[i16] *= (int) f;
            f = Test0424.instanceCount;
            for (i18 = i16; i18 < 11; i18++) {
                dArr[i16 - 1] = i16;
                Test0424.iArrFld[i16 + 1] >>= i15;
            }
        }
        long meth_res = i4 + i5 + i15 + Double.doubleToLongBits(d) + i16 + i17 + Float.floatToIntBits(f) + i18 + i19 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public long lMeth(int i2, int i3) {

        short s=4945;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -9L);

        lArr[(i3 >>> 1) % N] -= byMeth();
        i3 = i2;
        s = (short) Test0424.instanceCount;
        Test0424.instanceCount *= Test0424.instanceCount;
        Test0424.dArrFld[(i2 >>> 1) % N] = dFld;
        long meth_res = i2 + i3 + s + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-142, i1=-95, i20=9907, i21=-44, i22=-58324, i23=-13, i24=19689, i25=-8;
        byte by1=98;
        short s1=23219;
        float[] fArr1 =new float[N];

        FuzzerUtils.init(fArr1, 63.930F);

        for (i = 5; i < 248; i++) {
            Test0424.instanceCount *= (((Test0424.instanceCount * 2950) + (--i1)) * (lMeth(i, i1) * by1));
            i1 = s1;
            for (i20 = i; 103 > i20; i20++) {
                Test0424.fFld += (float) 109.65578;
                i21 += i21;
                for (i22 = 1; i22 < 1; ++i22) {
                    i1 *= i1;
                    Test0424.instanceCount = 5L;
                    by1 *= (byte)dFld;
                    fArr1 = fArr1;
                    i23 ^= i;
                    i23 >>= -14;
                    Test0424.instanceCount = by1;
                    Test0424.iArrFld[i20 + 1] = s1;
                    i21 = (int) Test0424.lFld;
                    i23 += -13454;
                }
                switch ((i20 % 4) + 101) {
                case 101:
                    i21 += i20;
                    for (i24 = 1; i24 < 1; i24++) {
                        float f1=-80.610F;
                        i25 += (((i24 * i22) + Test0424.instanceCount) - Test0424.instanceCount);
                        if (Test0424.bFld) {
                            Test0424.bFld = Test0424.bFld;
                            if (true) {
                                try {
                                    Test0424.iArrFld[i - 1] = (Test0424.iArrFld[i] % i23);
                                    i25 = (Test0424.iArrFld[i - 1] % -80);
                                    Test0424.iArrFld[i24] = (i20 / -61944);
                                } catch (ArithmeticException a_e) {}
                                try {
                                    i23 = (i20 % 10849);
                                    i23 = (Test0424.iArrFld[i24 + 1] % i23);
                                    i25 = (Test0424.iArrFld[i24 + 1] / 243);
                                } catch (ArithmeticException a_e) {}
                            }
                        } else if (Test0424.bFld) {
                            i21 -= (int)1.543F;
                        } else if (Test0424.bFld) {
                            Test0424.instanceCount += (i24 * i);
                            Test0424.dArrFld[i - 1] -= fFld1;
                            lArrFld[i] = i21;
                        } else {
                            i21 = (int)f1;
                        }
                    }
                    break;
                case 102:
                    Test0424.instanceCount >>= 89;
                case 103:
                    Test0424.iArrFld[i20] -= i22;
                    break;
                case 104:
                    Test0424.fFld += (i20 * i20);
                default:
                    i25 /= (int)(i23 | 1);
                }
            }
        }

        FuzzerUtils.out.println("i i1 by1 = " + i + "," + i1 + "," + by1);
        FuzzerUtils.out.println("s1 i20 i21 = " + s1 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 fArr1 = " + i25 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0424.instanceCount dFld Test0424.fFld = " + Test0424.instanceCount + "," +
                Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test0424.fFld));
        FuzzerUtils.out.println("Test0424.lFld Test0424.bFld fFld1 = " + Test0424.lFld + "," + (Test0424.bFld ? 1 : 0) + "," +
            Float.floatToIntBits(fFld1));
        FuzzerUtils.out.println("Test0424.bArrFld Test0424.iArrFld Test0424.dArrFld = " + FuzzerUtils.checkSum(Test0424.bArrFld) + ","
                + FuzzerUtils.checkSum(Test0424.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0424.dArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0424 _instance = new Test0424();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
