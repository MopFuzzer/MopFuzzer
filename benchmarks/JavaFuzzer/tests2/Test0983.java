// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:58 2023
public class Test0983 {

    public static final int N = 400;

    public static volatile long instanceCount=-653520160171337863L;
    public float fFld=-29.407F;
    public static float fFld1=0.976F;
    public static int[] iArrFld =new int[N];
    public static volatile float[] fArrFld =new float[N];

    static {
        FuzzerUtils.init(Test0983.iArrFld, -3);
        FuzzerUtils.init(Test0983.fArrFld, -76.528F);
    }

    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(short s, long l) {

        int i11=-14, i12=9, i13=-164;
        long l1=51753L;
        double d=-68.79912, d1=-58.60388;

        Test0983.fFld1 += Test0983.fFld1;
        i11 += i11;
        i12 = 1;
        while (++i12 < 304) {
            try {
                i11 = (Test0983.iArrFld[i12] / i11);
                Test0983.iArrFld[i12 + 1] = (-48115 % i12);
                i11 = (i11 / Test0983.iArrFld[i12 - 1]);
            } catch (ArithmeticException a_e) {}
            s = (short)i12;
            if (i11 != 0) {
                vMeth_check_sum += s + l + i11 + i12 + l1 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) +
                    i13;
                return;
            }
            l = i12;
            l1 = 1;
            while (++l1 < 5) {
                l <<= i11;
                Test0983.instanceCount += (l1 ^ i11);
            }
            i11 *= i12;
            d = 80;
            for (d1 = i12; 5 > d1; d1++) {
                i11 += (int)d1;
                Test0983.fFld1 = i13;
            }
        }
        vMeth_check_sum += s + l + i11 + i12 + l1 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i13;
    }

    public static int iMeth() {

        int i5=-14, i6=215, i7=25702, i8=-5, i9=45, i10=117;
        float f=-86.835F;
        short s1=-21489;
        double d2=0.35791;
        long[] lArr =new long[N];

        FuzzerUtils.init(lArr, -51L);

        Test0983.iArrFld[(i5 >>> 1) % N] += (int) (lArr[(i5 >>> 1) % N] += Test0983.iArrFld[(i5 >>> 1) % N]);
        for (i6 = 11; i6 < 372; i6++) {
            f += (((i6 * f) + i6) - i7);
            for (i8 = 1; i8 < 5; i8++) {
                i7 += (188 + (i8 * i8));
                i10 = 1;
                while (++i10 < 2) {
                    vMeth(s1, Test0983.instanceCount);
                    Test0983.fFld1 = (float) d2;
                    i5 = i10;
                    Test0983.iArrFld[i8 - 1] = (int) d2;
                    i7 += (int)(93.688F + (i10 * i10));
                    i7 += (int) Test0983.instanceCount;
                    Test0983.instanceCount = -78L;
                    Test0983.fArrFld[i6 - 1] = i10;
                    try {
                        i9 = (i9 % -206);
                        i7 = (i10 % -40447);
                        i9 = (i10 / i7);
                    } catch (ArithmeticException a_e) {}
                }
            }
        }
        long meth_res = i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 + s1 + Double.doubleToLongBits(d2) +
            FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i3, int i4) {

        int i14=-11306, i15=-48407, i16=-13, i17=-8, i18=2, i19=-90, i20=-4, i21=75, i22=26851;
        byte by=110;
        long l2=-8558L;
        short s2=16624;
        double d3=-1.78066;

        Test0983.instanceCount += iMeth();
        for (i14 = 6; i14 < 123; ++i14) {
            for (i16 = 1; i16 < 13; i16++) {
                for (i18 = 2; i18 > 1; i18--) {
                    i3 += (i18 ^ (long) Test0983.fFld1);
                    Test0983.fFld1 *= i15;
                    by *= (byte)l2;
                    i20 <<= i16;
                }
                for (i21 = 1; i21 < 2; ++i21) {
                    i15 = (int) Test0983.fFld1;
                    Test0983.iArrFld[i16 - 1] = (int) Test0983.fFld1;
                    s2 += (short)d3;
                    i3 *= i3;
                    Test0983.iArrFld[i21 - 1] <<= i3;
                    i17 += 126;
                }
            }
        }
        long meth_res = i3 + i4 + i14 + i15 + i16 + i17 + i18 + i19 + by + l2 + i20 + i21 + i22 + s2 +
            Double.doubleToLongBits(d3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-6603, i1=26972, i2=25362;
        short s3=-13854;

        i = (--i);
        i = (int) (Math.max(i * i, i) - (Test0983.iArrFld[(i >>> 1) % N] + (Test0983.instanceCount - fFld)));
        for (i1 = 1; i1 < 316; i1++) {
            Test0983.iArrFld[i1] = (int) ((Test0983.iArrFld[i1] + lMeth(i1, i)) - i1);
            i2 += (i1 * i1);
            i += (int) Test0983.instanceCount;
            Test0983.fArrFld[i1] *= i2;
            i += (i1 * i1);
            s3 -= (short)i2;
        }
        i <<= -14730;

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("s3 = " + s3);

        FuzzerUtils.out.println("Test0983.instanceCount fFld Test0983.fFld1 = " + Test0983.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Float.floatToIntBits(Test0983.fFld1));
        FuzzerUtils.out.println("Test0983.iArrFld Test0983.fArrFld = " + FuzzerUtils.checkSum(Test0983.iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0983.fArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0983 _instance = new Test0983();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
