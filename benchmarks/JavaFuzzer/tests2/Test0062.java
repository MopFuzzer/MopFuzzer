// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:14 2023
public class Test0062 {

    public static final int N = 400;

    public static long instanceCount=61355L;
    public static volatile float fFld=-2.638F;
    public static volatile boolean bFld=false;
    public static double dFld=72.87931;
    public static short sFld=11070;
    public static byte byFld=106;
    public static int[][] iArrFld =new int[N][N];
    public static float[] fArrFld =new float[N];
    public static long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0062.iArrFld, -15194);
        FuzzerUtils.init(Test0062.fArrFld, -2.570F);
        FuzzerUtils.init(Test0062.lArrFld, -966882171L);
    }

    public static long vMeth_check_sum = 0;
    public static long sMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long sMeth1_check_sum = 0;

    public static void vMeth(int i2) {

        int i3=-59003;
        int i4=139;
        int i5=-8;
        int[] iArr =new int[N];
        short s=-24554;
        long[] lArr =new long[N];
        float[] fArr =new float[N];

        FuzzerUtils.init(iArr, -46);
        FuzzerUtils.init(lArr, 3L);
        FuzzerUtils.init(fArr, 1.202F);

        for (i3 = 7; i3 < 160; ++i3) {
            Test0062.fFld += (((Test0062.instanceCount - Test0062.fFld) + (i2 - i3)) + ((-125 - Test0062.fFld) - (Test0062.instanceCount -
                i5)));
            i5 += (++i4);
            try {
                iArr[i3] = (-45 % i3);
                i4 = (i3 % i4);
                i5 = (-24407 / iArr[i3]);
            } catch (ArithmeticException a_e) {}
            s *= (short)lArr[i3 + 1];
            Test0062.instanceCount += (i3 * i3);
            iArr = (iArr = (iArr = (iArr = FuzzerUtils.int1array(N, (int)-58))));
            if (Test0062.bFld) break;
        }
        i5 -= ((i4 <<= 0) - s);
        fArr[(i3 >>> 1) % N] += ((Test0062.instanceCount++) + ((i4 * -147) + Test0062.instanceCount));
        vMeth_check_sum += i2 + i3 + i4 + i5 + s + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i15, float f1) {

        byte by=38;
        short s3=4582;

        i15 >>= (i15 -= (i15 + Math.abs(i15)));
        Test0062.iArrFld[(i15 >>> 1) % N][(i15 >>> 1) % N] -= (int) (((i15++) ^ (i15 * i15)) * Test0062.fFld);
        Test0062.iArrFld[(29240 >>> 1) % N][(i15 >>> 1) % N] -= (((Test0062.iArrFld[(-74 >>> 1) % N][(i15 >>> 1) % N]--) * (by
                - i15)) - ((s3 - i15) / (Test0062.iArrFld[(25687 >>> 1) % N][(i15 >>> 1) % N] | 1)));
        long meth_res = i15 + Float.floatToIntBits(f1) + by + s3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth1(long l2, int i18, long l3) {

        int i19=12357, i20=-52591, i21=-22486, i22=41905;
        float f3=-61.298F;
        long[] lArr1 =new long[N];

        FuzzerUtils.init(lArr1, 2108271546588887128L);

        Test0062.dFld *= Test0062.instanceCount;
        for (i19 = 1; i19 < 332; ++i19) {
            l2 += (((i19 * i20) + Test0062.instanceCount) - i18);
            i18 = i20;
        }
        for (float f2 : Test0062.fArrFld) {
            switch (((i19 >>> 1) % 7) + 112) {
            case 112:
                for (i21 = 1; i21 < 4; i21++) {
                    l3 = i22;
                    i22 += i21;
                    l2 += (i21 + i22);
                    i18 += (i21 * i21);
                    l3 += i19;
                    lArr1[i21 + 1] = -41;
                }
                break;
            case 113:
                i22 += Test0062.sFld;
                f3 = i19;
            case 114:
                Test0062.instanceCount = (long) Test0062.dFld;
                break;
            case 115:
                if (Test0062.bFld) continue;
                break;
            case 116:
                if (true) break;
            case 117:
                i20 = 14;
                break;
            case 118:
                i18 &= i19;
                break;
            }
        }
        long meth_res = l2 + i18 + l3 + i19 + i20 + i21 + i22 + Float.floatToIntBits(f3) + FuzzerUtils.checkSum(lArr1);
        sMeth1_check_sum += meth_res;
        return (short)meth_res;
    }

    public static int iMeth1(int i17) {

        int i23=-10, i24=13005, i25=-6, i26=-49, i27=2, i28=13439, i29=3;
        byte by2=94;
        long[] lArr2 =new long[N];

        FuzzerUtils.init(lArr2, 4L);

        Test0062.dFld += (sMeth1(Test0062.instanceCount, i17, Test0062.instanceCount) - 69);
        for (i23 = 6; i23 < 223; ++i23) {
            i25 = 1;
            do {
                for (i26 = 1; i26 > 1; i26 -= 2) {
                    i17 -= by2;
                    Test0062.bFld = Test0062.bFld;
                    lArr2[i26 + 1] += (long) Test0062.fFld;
                    i24 += i26;
                }
                i27 = (int) Test0062.instanceCount;
                Test0062.iArrFld[i23][i25 - 1] += (int) 45.18650;
                for (i28 = 1; 1 > i28; i28++) {
                    i17 %= (int)(i28 | 1);
                    Test0062.instanceCount -= i27;
                    i29 += (int)(-8L + (i28 * i28));
                }
                i27 += (int) Test0062.instanceCount;
            } while (++i25 < 7);
        }
        long meth_res = i17 + i23 + i24 + i25 + i26 + i27 + by2 + i28 + i29 + FuzzerUtils.checkSum(lArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static short sMeth(int i9, float f, long l) {

        int i10=-176;
        int i11=-3;
        int i12=68;
        int i13=-35498;
        int i14=14;
        int i16=-12;
        int[] iArr1 =new int[N];
        int[] iArr2 =new int[N];
        short s2=14040;
        short[] sArr =new short[N];
        long l1=-7342339173503972165L;
        byte[][] byArr =new byte[N][N];
        boolean[] bArr1 =new boolean[N];

        FuzzerUtils.init(byArr, (byte)-116);
        FuzzerUtils.init(sArr, (short)30454);
        FuzzerUtils.init(bArr1, false);
        FuzzerUtils.init(iArr1, 116);
        FuzzerUtils.init(iArr2, -6);

        for (i10 = 12; i10 < 301; i10++) {
            l -= (i9--);
            for (i12 = 1; i12 < 6; i12++) {
                l += (5 + (i12 * i12));
            }
            i13 |= (++byArr[i10][(i13 >>> 1) % N]);
            i14 = 1;
            do {
                if ((((Test0062.dFld * i11) + (-Integer.reverseBytes(i13))) > (sArr[i10 + 1]++)) == bArr1[i14 - 1])
                    break;
                f += i14;
                iArr1 = iArr2;
                s2 -= (short) iMeth(i13--, Test0062.fFld);
                for (l1 = i14; l1 < 1; ++l1) {
                    byte by1=-123;
                    by1 += (byte)(-5 + (l1 * l1));
                }
                i16 = (i11 - iArr1[i10]);
                i13 = (iMeth1(i16) * i14);
                l >>= Test0062.byFld;
            } while (++i14 < 6);
        }
        long meth_res = i9 + Float.floatToIntBits(f) + l + i10 + i11 + i12 + i13 + i14 + s2 + l1 + i16 +
            FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(bArr1) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=10, i1=-199, i6=4, i7=8, i8=8, i30=4075, i31=115, i32=41658;
        short s1=12550;
        boolean[] bArr =new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i = 15; i < 397; i++) {
            vMeth(i);
            i1 += 4;
            i6 = 66;
            do {
                for (i7 = 1; 1 < i7; --i7) {
                    Test0062.instanceCount = (long) ((Test0062.dFld * (Test0062.dFld++)) - s1);
                    i1 >>= i;
                    if (bArr[i6]) break;
                    i8 -= (i1++);
                    sMeth(i7, Test0062.fFld, Test0062.instanceCount);
                }
                i1 += (((i6 * i8) + i7) - Test0062.instanceCount);
            } while (--i6 > 0);
            if (false) continue;
            try {
                i8 = (i8 / i1);
                i1 = (-65469 % i8);
                i8 = (i1 / i);
            } catch (ArithmeticException a_e) {}
            i30 = 1;
            do {
                i1 = i;
                Test0062.instanceCount = (long) Test0062.dFld;
                for (i31 = 1; i31 < 1; i31++) {
                    Test0062.lArrFld[i] = i30;
                    i32 = (int) Test0062.instanceCount;
                    Test0062.fFld += i32;
                    Test0062.lArrFld[i] = i6;
                    switch ((((i6 >>> 1) % 1) * 5) + 28) {
                    case 32:
                        i32 -= -7;
                        break;
                    }
                    i1 = -2;
                    i8 = i1;
                    Test0062.dFld -= i30;
                }
                Test0062.iArrFld[i30 + 1][i30 - 1] ^= i7;
                i8 >>= i1;
                i8 += (i30 * i32);
                Test0062.byFld -= (byte) Test0062.instanceCount;
            } while (++i30 < 66);
        }

        FuzzerUtils.out.println("i i1 i6 = " + i + "," + i1 + "," + i6);
        FuzzerUtils.out.println("i7 i8 s1 = " + i7 + "," + i8 + "," + s1);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0062.instanceCount Test0062.fFld Test0062.bFld = " + Test0062.instanceCount + "," +
                Float.floatToIntBits(Test0062.fFld) + "," + (Test0062.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0062.dFld Test0062.sFld Test0062.byFld = " + Double.doubleToLongBits(Test0062.dFld) + "," +
                Test0062.sFld + "," + Test0062.byFld);
        FuzzerUtils.out.println("Test0062.iArrFld Test0062.fArrFld Test0062.lArrFld = " + FuzzerUtils.checkSum(Test0062.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0062.fArrFld)) + "," + FuzzerUtils.checkSum(Test0062.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("sMeth1_check_sum: " + sMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0062 _instance = new Test0062();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  iMeth ->  iMeth sMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 sMeth mainTest
//DEBUG  sMeth1 ->  sMeth1 iMeth1 sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
