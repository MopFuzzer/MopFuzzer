// Generated by Java* Fuzzer test generator (1.0.001). Fri Dec  8 09:12:21 2023
public class Test0201 {

    public static final int N = 400;

    public static long instanceCount=2757752106L;
    public static int iFld=677;
    public static volatile boolean bFld=true;
    public static double dFld=-23.79263;
    public static byte byFld=8;
    public float fFld=-114.145F;
    public static short sFld=30178;
    public static short[] sArrFld =new short[N];
    public int[] iArrFld =new int[N];
    public long[] lArrFld =new long[N];

    static {
        FuzzerUtils.init(Test0201.sArrFld, (short) -22287);
    }

    public static long sMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static float fMeth(int i4, long l) {

        double[] dArr =new double[N];

        FuzzerUtils.init(dArr, 109.108618);

        Test0201.sArrFld[(i4 >>> 1) % N] = (short) (-dArr[(i4 >>> 1) % N]);
        long meth_res = i4 + l + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth() {

        byte by1=0;
        int i8=190;
        int i9=0;
        int i10=165;
        int i11=12;
        int i12=-8;
        int[] iArr =new int[N];
        short s=27475;
        float f1=-2.560F;
        double d=-2.101793;

        FuzzerUtils.init(iArr, 0);

        Test0201.iFld >>= by1;
        for (i8 = 1; i8 < 204; ++i8) {
            switch (((i8 % 10) * 5) + 14) {
            case 28:
                i10 = 1;
                while (++i10 < 8) {
                    Test0201.iFld -= i8;
                    for (i11 = 1; i11 < 1; i11++) {
                        Test0201.instanceCount -= s;
                        f1 += Test0201.instanceCount;
                        i12 = (int)-112.997F;
                        i9 *= (int)123401245L;
                        d = Test0201.instanceCount;
                        iArr = FuzzerUtils.int1array(N, (int)-12);
                    }
                    if (Test0201.bFld) {
                        iArr[i10] = i11;
                    } else {
                        i9 >>>= (int) Test0201.instanceCount;
                        vMeth_check_sum += by1 + i8 + i9 + i10 + i11 + i12 + s + Float.floatToIntBits(f1) +
                            Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr);
                        return;
                    }
                }
            case 39:
                i9 += i11;
                break;
            case 59:
                i12 = -7;
                break;
            case 42:
                iArr[i8] += i9;
                break;
            case 16:
                Test0201.iFld = i9;
                break;
            case 24:
                d += i12;
                break;
            case 22:
                s = (short)i9;
            case 64:
                f1 -= Test0201.instanceCount;
                break;
            case 34:
                i9 += i8;
            case 63:
                Test0201.iFld -= s;
                break;
            default:
                iArr[i8] += (int)1726124830L;
            }
        }
        vMeth_check_sum += by1 + i8 + i9 + i10 + i11 + i12 + s + Float.floatToIntBits(f1) + Double.doubleToLongBits(d)
            + FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(byte by) {

        int i5=13, i6=6, i7=-12, i13=-150, i14=60, i15=-31, i16=-3;
        short s1=-30345;

        i5 &= (--i5);
        for (i6 = 10; i6 < 342; i6++) {
            vMeth();
            Test0201.instanceCount *= Test0201.instanceCount;
            i5 ^= i7;
            s1 -= (short)1.35709;
            i7 += s1;
            i7 = 12;
            Test0201.dFld %= (by | 1);
            i7 = -1;
            for (i13 = i6; i13 < 5; ++i13) {
                Test0201.iFld -= i14;
                for (i15 = i6; 1 > i15; ++i15) {
                    i5 += (int)-122.46201;
                    Test0201.instanceCount -= i5;
                }
            }
        }
        long meth_res = by + i5 + i6 + i7 + s1 + i13 + i14 + i15 + i16;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static short sMeth(int i1, int i2) {

        float f=126.996F;
        int i3=-129;
        int i18=0;
        int i19=94;
        int i20=-9;
        int i21=-7503;
        int[] iArr1 =new int[N];
        byte[] byArr =new byte[N];

        FuzzerUtils.init(byArr, (byte)-103);
        FuzzerUtils.init(iArr1, -1);

        for (f = 4; f < 175; ++f) {
            fMeth(i3, lMeth(Test0201.byFld));
            i3 += (int)(f * f);
            i2 <<= (int) Test0201.instanceCount;
            Test0201.instanceCount = Test0201.instanceCount;
            i1 >>= i2;
        }
        for (int i17 : iArr1) {
            for (i18 = 1; 4 > i18; ++i18) {
                iArr1 = iArr1;
                i2 += i3;
                i20 = 1;
                while (++i20 < 2) {
                    Test0201.instanceCount = Test0201.iFld;
                    Test0201.instanceCount <<= i18;
                    i21 += i18;
                    Test0201.bFld = Test0201.bFld;
                }
            }
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f) + i3 + i18 + i19 + i20 + i21 + FuzzerUtils.checkSum(byArr) +
            FuzzerUtils.checkSum(iArr1);
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-172;
        int i22=-3;
        int i23=-69;
        int i24=-10;
        int i25=64541;
        int i26=-24435;
        int[] iArr2 =new int[N];
        float f2=0.125F;
        float[] fArr =new float[N];

        FuzzerUtils.init(fArr, 0.249F);
        FuzzerUtils.init(iArr2, 2);

        i >>>= (int)((-sMeth(i, i)) + -11L);
        switch ((((i >>> 1) % 7) * 5) + 91) {
        case 123:
            i22 = 1;
            while (++i22 < 125) {
                fArr[i22 - 1] = Test0201.instanceCount;
                f2 = 201;
                while (--f2 > 0) {
                    fFld *= 105584277L;
                    for (i23 = (int)(f2); i23 < 1; ++i23) {
                        Test0201.iFld = Test0201.iFld;
                        Test0201.sFld <<= (short) Test0201.iFld;
                        i24 += (i23 * i23);
                        Test0201.iFld = (int) Test0201.instanceCount;
                        i += (int) Test0201.instanceCount;
                        fFld = i23;
                        try {
                            Test0201.iFld = (iArr2[i22 + 1] % iArr2[i22 - 1]);
                            i24 = (-36676 / i23);
                            iArrFld[(int) (f2)] = (Test0201.iFld % 184);
                        } catch (ArithmeticException a_e) {}
                        Test0201.iFld += i23;
                        i24 += (i23 | Test0201.byFld);
                    }
                    Test0201.instanceCount = -6L;
                    Test0201.dFld = i23;
                    i = (int) Test0201.instanceCount;
                    Test0201.instanceCount >>= i23;
                    for (i25 = (int)(f2); 1 > i25; ++i25) {
                        lArrFld[i25 + 1] *= Test0201.iFld;
                        switch ((i25 % 2) + 66) {
                        case 66:
                            Test0201.iFld += (i25 * i24);
                            break;
                        case 67:
                            fFld += i25;
                            fFld /= (i24 | 1);
                            Test0201.iFld = i22;
                            break;
                        }
                    }
                    Test0201.iFld *= i25;
                    fFld = (float) Test0201.dFld;
                }
                Test0201.dFld = -14L;
            }
            break;
        case 94:
            i = Test0201.iFld;
            break;
        case 104:
            i26 *= 24180;
            break;
        case 96:
            Test0201.instanceCount = i23;
            break;
        case 103:
            lArrFld[(i22 >>> 1) % N] -= i25;
            break;
        case 102:
            Test0201.iFld += 4484;
            break;
        case 118:
            Test0201.iFld &= -51;
            break;
        }

        FuzzerUtils.out.println("i i22 f2 = " + i + "," + i22 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 fArr iArr2 = " + i26 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0201.instanceCount Test0201.iFld Test0201.bFld = " + Test0201.instanceCount + "," + Test0201.iFld +
                "," + (Test0201.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0201.dFld Test0201.byFld fFld = " + Double.doubleToLongBits(Test0201.dFld) + "," + Test0201.byFld
            + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0201.sFld Test0201.sArrFld iArrFld = " + Test0201.sFld + "," +
                FuzzerUtils.checkSum(Test0201.sArrFld) + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test0201 _instance = new Test0201();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  fMeth ->  fMeth sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
