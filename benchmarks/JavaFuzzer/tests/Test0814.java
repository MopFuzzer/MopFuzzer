// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test0814 {

    public static final int N = 400;

    public static volatile long instanceCount = 54L;
    public static float fFld = 17.136F;
    public static short sFld = 780;
    public static volatile int iFld = 12;
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0814.iArrFld, -56714);
    }

    public byte byFld = -127;
    public long[] lArrFld = new long[N];

    public static void main(String[] strArr) {

        try {
            Test0814 _instance = new Test0814();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public int iMeth1(int i14, int i15) {

        int i16 = 11, i17 = -3560, i18 = -54, i19 = -14, i20 = 237;
        double d = 100.91783;
        boolean b1 = false;
        short s = -18111;

        i16 = 1;
        while (++i16 < 317) {
            lArrFld[i16] += i15;
            Test0814.iArrFld[i16] ^= i16;
            for (i17 = 1; i17 < 5; i17++) {
                d += Test0814.instanceCount;
                if (b1) {
                    Test0814.instanceCount /= (i18 | 1);
                    i15 += i17;
                } else if (true) {
                    i19 = 2;
                    do {
                        i15 = -26599;
                    } while ((i19 -= 3) > 0);
                    if (b1) {
                        i15 = (int) Test0814.fFld;
                        Test0814.iArrFld[i17 + 1] >>= i15;
                    } else {
                        i18 = i15;
                        s *= (short) i20;
                    }
                } else {
                    Test0814.instanceCount = Test0814.instanceCount;
                }
            }
        }
        long meth_res = i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d) + i19 + (b1 ? 1 : 0) + s + i20;
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public int iMeth(int i9, int i10, int i11) {

        int i12 = -2, i13 = 11, i21 = 2, i22 = -22354, i23 = -195;
        double d1 = 85.27220, d2 = -112.34930;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 99.968F);

        for (i12 = 2; i12 < 165; i12++) {
            i11 = (i13++);
            Test0814.iArrFld[i12] *= (iMeth1(i11, i10) - byFld);
            try {
                i10 = (i13 / -194);
                Test0814.iArrFld[i12 - 1] = (i11 / 150);
                i9 = (i11 % i13);
            } catch (ArithmeticException a_e) {
            }
            Test0814.instanceCount += Test0814.instanceCount;
            d1 = Test0814.instanceCount;
            for (d2 = i12; 10 > d2; d2++) {
                switch ((i12 % 2) + 24) {
                    case 24:
                        fArr[(int) (d2 + 1)] = Test0814.instanceCount;
                        break;
                    case 25:
                        byFld = (byte) Test0814.fFld;
                    default:
                        for (i22 = 1; i22 > 1; i22--) {
                            Test0814.fFld -= i9;
                            Test0814.instanceCount += (i22 ^ i21);
                            Test0814.instanceCount -= Test0814.sFld;
                            i9 *= i23;
                        }
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + i21 +
                i22 + i23 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth(long l, int i2, long l1) {

        int i3 = 0, i4 = 12, i5 = 53506, i6 = -91, i7 = -7, i8 = -5, i24 = -24574, i25 = 3;
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 3L);

        for (i3 = 9; i3 < 225; i3++) {
            for (i5 = i3; i5 < 7; i5++) {
                for (i7 = 1; i7 < 1; ++i7) {
                    l1 -= i5;
                    if (b) continue;
                    lArr[i7 - 1] |= ((l + iMeth(i2, -215, i8)) - i3);
                    l1 = (long) Test0814.fFld;
                }
                Test0814.fFld = 10;
                i8 += (((i5 * i4) + Test0814.instanceCount) - i4);
                i4 = i3;
                Test0814.iArrFld[i5 + 1] += 185;
            }
            for (i24 = 1; i24 < 7; ++i24) {
                Test0814.fFld = l1;
            }
            l = Test0814.iFld;
            Test0814.iFld = -5;
        }
        vMeth_check_sum += l + i2 + l1 + i3 + i4 + i5 + i6 + i7 + i8 + (b ? 1 : 0) + i24 + i25 +
                FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i = -3, i1 = -11, i26 = 16739, i27 = 103, i28 = 5, i29 = 48, i30 = 0, i31 = 243, i32 = 5077;
        long l2 = 18359L;
        short s1 = 15514;
        short[] sArr = new short[N];
        float[] fArr1 = new float[N];

        FuzzerUtils.init(sArr, (short) 2727);
        FuzzerUtils.init(fArr1, -2.122F);

        for (i = 1; i < 266; i++) {
            Test0814.fFld -= (((i1 *= i1) + Test0814.fFld) * (sArr[i]++));
            vMeth(Test0814.instanceCount, -36015, Test0814.instanceCount);
            Test0814.sFld += (short) i;
            for (i26 = 1; 95 > i26; i26++) {
                i1 -= i1;
                i27 *= i26;
            }
            Test0814.iFld ^= i;
            for (i28 = 5; i28 < 95; ++i28) {
                i27 = i27;
                Test0814.instanceCount = i27;
                lArrFld[i28 - 1] += i27;
                Test0814.instanceCount <<= 209;
                i27 -= (int) Test0814.fFld;
                i29 += i28;
                Test0814.iArrFld = Test0814.iArrFld;
            }
            switch ((i % 2) + 73) {
                case 73:
                    for (l2 = 5; l2 < 95; ++l2) {
                        i31 = 1;
                        while (++i31 < 2) {
                            Test0814.iArrFld[i + 1] -= i27;
                            Test0814.instanceCount -= i;
                            s1 = (short) Test0814.instanceCount;
                            fArr1[i31 - 1] = -6821996495192124612L;
                            i1 = (int) Test0814.instanceCount;
                            Test0814.instanceCount *= i;
                            i30 *= i29;
                            i1 += i31;
                            i32 += i31;
                            i32 -= (int) 2.101798;
                        }
                        i27 -= i26;
                    }
                    break;
                case 74:
                    i27 += i;
            }
        }

        FuzzerUtils.out.println("i i1 i26 = " + i + "," + i1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l2 i30 i31 = " + l2 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("s1 i32 sArr = " + s1 + "," + i32 + "," + FuzzerUtils.checkSum(sArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0814.instanceCount Test0814.fFld byFld = " + Test0814.instanceCount + "," +
                Float.floatToIntBits(Test0814.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test0814.sFld Test0814.iFld Test0814.iArrFld = " + Test0814.sFld + "," + Test0814.iFld + "," +
                FuzzerUtils.checkSum(Test0814.iArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
