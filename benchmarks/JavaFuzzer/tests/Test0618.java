// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test0618 {

    public static final int N = 400;

    public static long instanceCount = -8L;
    public static volatile int iFld = 32;
    public static double dFld = -2.92735;
    public static volatile boolean bFld = false;
    public static float fFld = 0.816F;
    public static boolean[] bArrFld = new boolean[N];
    public static long vSmallMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0618.bArrFld, false);
    }

    public static byte byMeth() {

        int i3 = -12;
        int[] iArr = new int[N];

        FuzzerUtils.init(iArr, 61826);

        Test0618.instanceCount = Test0618.iFld;
        iArr[(Test0618.iFld >>> 1) % N] += (int) Test0618.instanceCount;
        Test0618.iFld = Test0618.iFld;
        iArr = iArr;
        if (Test0618.bFld) {
            iArr = iArr;
            Test0618.iFld = (int) Test0618.dFld;
            i3 = 1;
            while (++i3 < 132) {
                Test0618.dFld = 9L;
                Test0618.iFld = Test0618.iFld;
                if (Test0618.bFld) continue;
                Test0618.iFld -= -36796;
                Test0618.instanceCount += i3;
                Test0618.instanceCount = i3;
                iArr[i3 - 1] = Test0618.iFld;
            }
        } else {
            Test0618.instanceCount = i3;
        }
        long meth_res = i3 + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static float fMeth(int i2, long l, float f) {


        byMeth();
        Test0618.iFld = (int) Test0618.instanceCount;
        i2 <<= (int) l;
        f += Test0618.instanceCount;
        long meth_res = i2 + l + Float.floatToIntBits(f);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void vSmallMeth(int i, int i1) {

        boolean b = false;

        Test0618.instanceCount = (long) (((31703 + Math.max(i, i)) * fMeth(Test0618.iFld, Test0618.instanceCount, Test0618.fFld)) + i);
        b = b;
        vSmallMeth_check_sum += i + i1 + (b ? 1 : 0);
    }

    public static void main(String[] strArr) {

        try {
            Test0618 _instance = new Test0618();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i4 = -9572;
        int i5 = -21041;
        int i6 = 22284;
        int i7 = 114;
        int i8 = -10;
        int i9 = -6940;
        int i10 = 162;
        int i11 = 3;
        int i12 = -40772;
        int i13 = -42575;
        int i14 = 14524;
        int i15 = -8;
        int i16 = -23453;
        int[] iArr1 = new int[N];
        byte by = 91;
        long l1 = 2765404912L;
        double d = 0.14271;

        FuzzerUtils.init(iArr1, -12);

        for (int smallinvoc = 0; smallinvoc < 285; smallinvoc++) vSmallMeth(Test0618.iFld, 180);
        Test0618.iFld -= Test0618.iFld;
        for (i4 = 11; 188 > i4; ++i4) {
            Test0618.bArrFld[i4] = Test0618.bFld;
            Test0618.dFld += -14;
            Test0618.fFld = -59622;
            i6 = 1;
            while (++i6 < 142) {
                for (i7 = 1; i7 < 1; i7++) {
                    by += (byte) (-4 + (i7 * i7));
                    Test0618.instanceCount = Test0618.instanceCount;
                    i5 = -124;
                }
                l1 += i5;
            }
        }
        i9 = 1;
        while (++i9 < 275) {
            for (i10 = 4; i10 < 91; ++i10) {
                for (d = 2; d > i9; --d) {
                    Test0618.dFld = -57892;
                }
                i12 += i4;
                for (i13 = 2; i13 > i9; i13 -= 2) {
                    i5 = (int) Test0618.fFld;
                    Test0618.dFld -= Test0618.iFld;
                    Test0618.dFld = 132;
                    by >>= (byte) -14;
                }
            }
            Test0618.fFld -= Test0618.fFld;
            if (Test0618.bFld) continue;
            i14 = i6;
            if (Test0618.bFld) {
                for (i15 = 5; i15 < 91; i15++) {
                    i12 ^= 107;
                    iArr1[i9] += i6;
                    Test0618.fFld -= Test0618.fFld;
                }
            } else if (Test0618.bFld) {
                by += (byte) (14 + (i9 * i9));
            }
        }

        FuzzerUtils.out.println("i4 i5 i6 = " + i4 + "," + i5 + "," + i6);
        FuzzerUtils.out.println("i7 i8 by = " + i7 + "," + i8 + "," + by);
        FuzzerUtils.out.println("l1 i9 i10 = " + l1 + "," + i9 + "," + i10);
        FuzzerUtils.out.println("i11 d i12 = " + i11 + "," + Double.doubleToLongBits(d) + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);
        FuzzerUtils.out.println("i16 iArr1 = " + i16 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0618.instanceCount Test0618.iFld Test0618.dFld = " + Test0618.instanceCount + "," + Test0618.iFld +
                "," + Double.doubleToLongBits(Test0618.dFld));
        FuzzerUtils.out.println("Test0618.bFld Test0618.fFld Test0618.bArrFld = " + (Test0618.bFld ? 1 : 0) + "," +
                Float.floatToIntBits(Test0618.fFld) + "," + FuzzerUtils.checkSum(Test0618.bArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  fMeth ->  fMeth vSmallMeth mainTest Test
//DEBUG  byMeth ->  byMeth fMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
