// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test0889 {

    public static final int N = 400;

    public static long instanceCount = 142L;
    public static int iFld = 36167;
    public static int[] iArrFld = new int[N];
    public static long[] lArrFld = new long[N];
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0889.iArrFld, 2);
        FuzzerUtils.init(Test0889.lArrFld, 1760068671L);
    }

    public double dFld = 0.124010;
    public byte byFld = 12;

    public static int iMeth() {

        float f2 = 0.841F;
        int i9 = 33760, i10 = -54, i11 = -65, i12 = -3, i13 = 56854;
        byte by1 = 59;
        short s1 = 18171;
        double d = -1.77025;

        Test0889.iArrFld[(62565 >>> 1) % N] += (int) -2617339872287557313L;
        f2 += i9;
        switch (((i9 >>> 1) % 9) + 95) {
            case 95:
                Test0889.lArrFld[(i9 >>> 1) % N] -= -200L;
                for (i10 = 9; i10 < 293; ++i10) {
                    Test0889.iArrFld = Test0889.iArrFld;
                    i12 = 1;
                    while (++i12 < 6) {
                        f2 = i12;
                        by1 ^= (byte) i10;
                        if (i12 != 0) {
                        }
                        Test0889.instanceCount += (i12 ^ i9);
                        i13 = 1;
                        while (++i13 < 1) {
                            if (true) {
                                i9 <<= i13;
                            } else {
                                i9 += i13;
                            }
                        }
                    }
                }
                break;
            case 96:
                i11 -= -2;
                break;
            case 97:
                i11 *= -62704;
            case 98:
                Test0889.iArrFld[(1 >>> 1) % N] = 134;
                break;
            case 99:
                i9 *= (int) Test0889.instanceCount;
                break;
            case 100:
                i9 += s1;
                break;
            case 101:
                Test0889.instanceCount >>= i13;
                break;
            case 102:
                Test0889.instanceCount += i10;
                break;
            case 103:
                d = s1;
                break;
            default:
                i9 = i13;
        }
        long meth_res = Float.floatToIntBits(f2) + i9 + i10 + i11 + i12 + by1 + i13 + s1 + Double.doubleToLongBits(d);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0889 _instance = new Test0889();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public long lMeth1(int i7, int i8, float f1) {

        int i14 = 38733, i15 = -2, i16 = 34870;
        byte by2 = -114;
        byte[] byArr = new byte[N];
        boolean b1 = false;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 6885611284847539511L);
        FuzzerUtils.init(byArr, (byte) -71);

        Test0889.iArrFld[(i8 >>> 1) % N] >>= (int) lArr[(i7 >>> 1) % N];
        i7 = (int) (((i7 + Test0889.instanceCount) * iMeth()) - f1);
        switch (((i8 >>> 1) % 3) + 109) {
            case 109:
                dFld += i8;
                Test0889.instanceCount = -3;
                break;
            case 110:
                i8 *= (int) dFld;
                Test0889.instanceCount *= Test0889.instanceCount;
            case 111:
                Test0889.instanceCount = i7;
                f1 -= i7;
                for (i14 = 171; i14 > 5; i14 -= 3) {
                    i15 *= i15;
                    if (b1) {
                        i8 += (i14 * i14);
                        Test0889.instanceCount += (((i14 * by2) + i15) - i8);
                    }
                    Test0889.iArrFld[i14 + 1] >>= i16;
                }
                break;
            default:
                i7 = (int) Test0889.instanceCount;
        }
        long meth_res = i7 + i8 + Float.floatToIntBits(f1) + i14 + i15 + by2 + (b1 ? 1 : 0) + i16 +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public long lMeth(int i2) {

        int i3 = -60308, i4 = -231, i5 = 0, i6 = -38703, i17 = -9, i18 = 18602;
        float f = 0.149F;
        byte by = -12;
        short s = 8819;

        for (i3 = 5; i3 < 191; ++i3) {
            for (i5 = 1; i5 < 9; i5++) {
                f -= 49861;
                by = (byte) (i2 - i4);
                i2 += (i5 + s);
            }
            i6 += (i3 * i3);
            i6 -= (int) lMeth1(i3, i5, f);
            i17 = 1;
            do {
                f += Test0889.instanceCount;
                i6 -= i4;
                i18 = 1;
                do {
                    i4 = i3;
                    i6 += (i18 * i18);
                    i2 = (int) Test0889.instanceCount;
                    i2 += 11;
                } while (++i18 < 1);
            } while (++i17 < 9);
        }
        long meth_res = i2 + i3 + i4 + i5 + i6 + Float.floatToIntBits(f) + by + s + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i = 8345, i1 = -62, i19 = -57, i20 = 4932, i21 = -208, i22 = 19, i23 = 10, i24 = 15, i25 = -32309, i26 = -9, i27 = -9;
        boolean b = false;
        short s2 = -23004;
        float f3 = 0.405F;

        i = 1;
        do {
            try {
                i1 = (i % i);
                i1 = (i / i1);
                Test0889.iArrFld[i + 1] = (i % Test0889.iArrFld[i]);
            } catch (ArithmeticException a_e) {
            }
            b = b;
            Test0889.instanceCount = (-14 + lMeth(i1));
            i1 += i;
            for (i19 = 3; i19 < 153; i19++) {
                s2 = (short) -36.65744;
                i1 += i;
                i20 <<= i1;
                for (i21 = 1; 2 > i21; ++i21) {
                    i1 += (i21 * i21);
                    i20 = i19;
                }
                i22 += i19;
                f3 *= f3;
                i22 -= byFld;
                i20 += i19;
            }
        } while (++i < 164);
        i23 = 1;
        do {
            i1 += i21;
            for (i24 = i23; i24 < 75; i24++) {
                i25 += i24;
                Test0889.instanceCount = byFld;
                for (i26 = 1; i26 < 1; i26 += 2) {
                    Test0889.iFld += i27;
                    dFld = Test0889.instanceCount;
                    Test0889.iArrFld = Test0889.iArrFld;
                    dFld = byFld;
                    i25 >>= i;
                    f3 -= Test0889.instanceCount;
                    Test0889.iArrFld[i23] += Test0889.iFld;
                    Test0889.instanceCount = (long) f3;
                }
            }
        } while (++i23 < 336);

        FuzzerUtils.out.println("i i1 b = " + i + "," + i1 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i19 i20 s2 = " + i19 + "," + i20 + "," + s2);
        FuzzerUtils.out.println("i21 i22 f3 = " + i21 + "," + i22 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 = " + i26 + "," + i27);

        FuzzerUtils.out.println("Test0889.instanceCount dFld byFld = " + Test0889.instanceCount + "," +
                Double.doubleToLongBits(dFld) + "," + byFld);
        FuzzerUtils.out.println("Test0889.iFld Test0889.iArrFld Test0889.lArrFld = " + Test0889.iFld + "," +
                FuzzerUtils.checkSum(Test0889.iArrFld) + "," + FuzzerUtils.checkSum(Test0889.lArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
