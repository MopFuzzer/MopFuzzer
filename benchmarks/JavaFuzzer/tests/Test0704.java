// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test0704 {

    public static final int N = 400;

    public static long instanceCount = -182L;
    public static double dFld = 1.66418;
    public static volatile float fFld = -101.911F;
    public static volatile short sFld = 10076;
    public static byte byFld = 55;
    public static int[] iArrFld = new int[N];
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0704.iArrFld, -5);
    }

    public int iFld = 3;

    public static void vMeth1(long l1) {

        int i3 = -74, i4 = -61717, i5 = -5591, i6 = 36635, i7 = -17251, i8 = -101, i9 = 11, i10 = 113, i11 = -146;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -84.118727);

        Test0704.instanceCount = i3;
        for (i4 = 6; i4 < 292; i4++) {
            for (i6 = i4; i6 < 6; ++i6) {
                for (i8 = 1; 1 > i8; i8++) {
                    i9 += (i8 * i4);
                    i7 += i8;
                    dArr[i6 - 1] = Test0704.instanceCount;
                    Test0704.dFld += Test0704.dFld;
                    l1 = i5;
                }
                i7 += (i6 + Test0704.fFld);
                i5 += (((i6 * i9) + l1) - i5);
                for (i10 = 1; i10 < 1; i10++) {
                    Test0704.fFld += i7;
                }
                i11 *= (int) l1;
                Test0704.iArrFld[i4 - 1] = (int) l1;
            }
        }
        vMeth1_check_sum += l1 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(byte by, int i2, float f) {

        int i12 = 13, i13 = -21954, i14 = -9, i15 = -33247;
        short s = 7010;
        boolean b = false;

        vMeth1(Test0704.instanceCount);
        i12 = 1;
        do {
            for (i13 = 1; i13 < 7; ++i13) {
                i15 = 1;
                while (++i15 < 2) {
                    i2 = s;
                    i14 *= (int) Test0704.instanceCount;
                    Test0704.dFld = 1.72235;
                    Test0704.instanceCount += i15;
                    i2 *= (int) 9.40808;
                }
                if (i13 != 0) {
                    vMeth_check_sum += by + i2 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + s + (b ? 1 : 0);
                    return;
                }
                if (b) {
                    switch ((((i15 >>> 1) % 2) * 5) + 113) {
                        case 115:
                            if (b) break;
                            b = true;
                            break;
                        case 123:
                            Test0704.iArrFld[i12] = i14;
                    }
                } else if (b) {
                    Test0704.instanceCount *= Test0704.instanceCount;
                } else if (false) {
                    Test0704.instanceCount += i13;
                }
            }
        } while (++i12 < 232);
        vMeth_check_sum += by + i2 + Float.floatToIntBits(f) + i12 + i13 + i14 + i15 + s + (b ? 1 : 0);
    }

    public static long lMeth(long l, double d, int i1) {

        byte by1 = 52;
        int i16 = -40954, i17 = -19, i18 = 13, i19 = 244;
        boolean b1 = false;
        double d1 = 0.108352;

        vMeth(by1, i1, Test0704.fFld);
        i1 += (int) Test0704.instanceCount;
        i16 = 1;
        do {
            i1 -= i1;
            if (b1) break;
            for (i17 = 1; i17 < 5; i17++) {
                i18 += (int) -5.37934;
                for (d1 = i17; d1 < 2; ++d1) {
                    i1 *= -20665;
                    try {
                        i19 = (i16 % i17);
                        Test0704.iArrFld[i16 + 1] = (i16 % 48205);
                        i18 = (164 / i16);
                    } catch (ArithmeticException a_e) {
                    }
                    Test0704.sFld *= (short) i1;
                    i1 += (int) (((d1 * by1) + Test0704.instanceCount) - i1);
                    Test0704.iArrFld = Test0704.iArrFld;
                    Test0704.fFld -= Test0704.fFld;
                    Test0704.sFld += (short) ((long) d1 ^ Test0704.instanceCount);
                }
            }
        } while (++i16 < 304);
        long meth_res = l + Double.doubleToLongBits(d) + i1 + by1 + i16 + (b1 ? 1 : 0) + i17 + i18 +
                Double.doubleToLongBits(d1) + i19;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0704 _instance = new Test0704();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 28575;
        int i20 = -31196;
        int i21 = 176;
        int i22 = -1;
        int i23 = 12971;
        int i24 = -3;
        int i25 = 93;
        int i26 = -36607;
        int i27 = 14;
        int i28 = -154;
        int i29 = -5;
        int[] iArr = new int[N];
        boolean b2 = true;

        FuzzerUtils.init(iArr, 91);

        i = (int) ((Math.min(i, i) - 32602) * (i = (int) lMeth(Test0704.instanceCount, Test0704.dFld, i)));
        i >>= (int) Test0704.instanceCount;
        i *= i20;
        b2 = b2;
        i21 = 1;
        do {
            for (i22 = i21; i22 < 80; i22++) {
                if (true) {
                    for (i24 = 1; 1 > i24; i24 += 3) {
                        i *= (int) 13156L;
                        i += 12894;
                        Test0704.iArrFld[i22] -= (int) 993970860L;
                        if (b2) continue;
                        i25 += (i24 + i23);
                        b2 = b2;
                        i23 += i24;
                        Test0704.instanceCount += Test0704.instanceCount;
                        Test0704.instanceCount = iFld;
                    }
                    for (i26 = 1; i26 > 1; --i26) {
                        i20 -= -176;
                        i20 -= i;
                        Test0704.sFld -= (short) iFld;
                    }
                    for (i28 = 1; 1 > i28; ++i28) {
                        Test0704.dFld += 4;
                        i20 -= i23;
                    }
                } else if (b2) {
                    i27 = (int) Test0704.instanceCount;
                } else {
                    Test0704.byFld += (byte) i29;
                    i29 = Test0704.sFld;
                }
                Test0704.fFld *= i23;
                Test0704.instanceCount += (long) (26.611F + (i22 * i22));
                iArr[i21 - 1] *= i20;
            }
        } while (++i21 < 315);

        FuzzerUtils.out.println("i i20 b2 = " + i + "," + i20 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0704.instanceCount Test0704.dFld Test0704.fFld = " + Test0704.instanceCount + "," +
                Double.doubleToLongBits(Test0704.dFld) + "," + Float.floatToIntBits(Test0704.fFld));
        FuzzerUtils.out.println("Test0704.sFld iFld Test0704.byFld = " + Test0704.sFld + "," + iFld + "," + Test0704.byFld);
        FuzzerUtils.out.println("Test0704.iArrFld = " + FuzzerUtils.checkSum(Test0704.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
