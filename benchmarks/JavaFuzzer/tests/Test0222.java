// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0222 {

    public static final int N = 400;

    public static long instanceCount = -3102157393L;
    public static byte byFld = -69;
    public static int iFld = -30628;
    public static volatile short sFld = 10726;
    public static long lFld = 1L;
    public static volatile boolean bFld = false;
    public static volatile double dFld = 0.68864;
    public static int[] iArrFld1 = new int[N];
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0222.iArrFld1, -116);
    }

    public long lFld1 = 3337748127792761958L;
    public volatile int[] iArrFld = new int[N];
    public float[] fArrFld = new float[N];

    public static void vSmallMeth(double d) {

        int i = 29178;
        byte by = 61;

        i *= by;
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + i + by;
    }

    public static void vMeth1() {

        float f = 0.141F;
        int i5 = 143;
        int[] iArr = new int[N];

        FuzzerUtils.init(iArr, -14);

        f += i5;
        i5 &= 24484;
        i5 = 6763;
        iArr[(i5 >>> 1) % N] &= 564;
        i5 = i5;
        i5 -= i5;
        vMeth1_check_sum += Float.floatToIntBits(f) + i5 + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i4) {

        double d1 = 2.30008;
        long l = -1930120836L;
        int i6 = -2956;
        int i7 = 203;
        int[] iArr1 = new int[N];
        boolean b = false;
        float f1 = 1.275F;

        FuzzerUtils.init(iArr1, -56798);

        vMeth1();
        d1 += d1;
        i4 >>>= (int) -3029680988453320724L;
        for (l = 7; l < 142; l++) {
            switch ((int) ((l % 5) + 37)) {
                case 37:
                    Test0222.byFld += (byte) l;
                case 38:
                    switch (((i6 >>> 1) % 10) + 51) {
                        case 51:
                            i7 = 1;
                            do {
                                Test0222.instanceCount = -28482;
                                i4 += (i7 ^ i4);
                                Test0222.instanceCount *= l;
                            } while (++i7 < 12);
                            switch ((int) ((l % 7) + 109)) {
                                case 109:
                                    Test0222.instanceCount += l;
                                    Test0222.byFld -= (byte) 10;
                                    i4 = i6;
                                    break;
                                case 110:
                                    iArr1[(int) (l + 1)] -= (int) Test0222.instanceCount;
                                case 111:
                                    b = true;
                                    break;
                                case 112:
                                case 113:
                                    d1 *= i4;
                                case 114:
                                case 115:
                                    Test0222.iFld += (34149 + (l * l));
                                    break;
                            }
                            break;
                        case 52:
                            i4 += (int) f1;
                            break;
                        case 53:
                            f1 -= -15443;
                            break;
                        case 54:
                            Test0222.instanceCount = -183L;
                            break;
                        case 55:
                            i6 = (int) f1;
                            break;
                        case 56:
                            i6 += (int) (l ^ Test0222.instanceCount);
                            break;
                        case 57:
                            Test0222.iFld *= i4;
                            break;
                        case 58:
                            Test0222.instanceCount += Test0222.iFld;
                            break;
                        case 59:
                            i6 += (int) (l * l);
                            break;
                        case 60:
                            f1 += l;
                        default:
                            Test0222.instanceCount = Test0222.sFld;
                    }
                    break;
                case 39:
                    f1 += (l * l);
                    break;
                case 40:
                    i4 *= i4;
                    break;
                case 41:
                    Test0222.iFld -= -117;
                    break;
            }
        }
        long meth_res = i4 + Double.doubleToLongBits(d1) + l + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f1) +
                FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {

        int i2 = 44842, i3 = 947, i8 = -10, i9 = 13, i10 = 29653, i11 = 123;
        double d2 = -13.62930, d3 = 1.24140;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 0.423F);

        for (i2 = 24; 390 > i2; ++i2) {
            fArr[i2] += iMeth(i3);
        }
        for (i8 = 8; i8 < 203; i8++) {
            d2 = 8;
            do {
                Test0222.instanceCount = 19500;
                if (Test0222.bFld) {
                    Test0222.iFld = (int) 2.136F;
                    i3 += Test0222.byFld;
                } else if (Test0222.bFld) {
                    Test0222.iArrFld1[(int) (d2 - 1)] = i3;
                    for (i10 = i8; i10 < 1; i10++) {
                        int i12 = -11;
                        Test0222.iFld = (int) Test0222.instanceCount;
                        d3 -= i10;
                        i12 += (((i10 * Test0222.lFld) + Test0222.lFld) - i8);
                        if (false) break;
                        if (i8 != 0) {
                            vMeth_check_sum += i2 + i3 + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 +
                                    Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                    }
                    vMeth_check_sum += i2 + i3 + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 +
                            Double.doubleToLongBits(d3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                    return;
                }
            } while (--d2 > 0);
        }
        vMeth_check_sum += i2 + i3 + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 + Double.doubleToLongBits(d3) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void main(String[] strArr) {

        try {
            Test0222 _instance = new Test0222();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i1 = -243, i13 = -49754, i14 = 10, i15 = -14, i16 = 49129, i17 = -167, i18 = -59, i19 = -6909, i20 = 65;
        double d4 = -43.125074;
        double[] dArr = new double[N];
        float f2 = 0.907F;

        FuzzerUtils.init(dArr, 41.123758);

        for (int smallinvoc = 0; smallinvoc < 894; smallinvoc++) vSmallMeth(dArr[(i1 >>> 1) % N]);
        iArrFld[(i1 >>> 1) % N] -= i1;
        vMeth();
        fArrFld[(i1 >>> 1) % N] -= -3;
        for (d4 = 8; d4 < 153; d4 += 2) {
            for (i14 = 9; i14 < 348; ++i14) {
                i1 = (int) f2;
                i16 = 1;
                do {
                    Test0222.byFld *= (byte) i17;
                    Test0222.iArrFld1[(int) (d4 - 1)] <<= i13;
                    iArrFld[i14] -= Test0222.iFld;
                    iArrFld[i16 - 1] = i18;
                } while (++i16 < 2);
                Test0222.lFld >>= 21203;
                i15 = 4;
                switch ((int) (((d4 % 2) * 5) + 125)) {
                    case 134:
                        i18 = i14;
                        for (i19 = 1; i19 < 2; ++i19) {
                            Test0222.bFld = Test0222.bFld;
                            iArrFld[i19 + 1] += i18;
                            fArrFld[i14] = i20;
                            Test0222.iArrFld1[i19] = (int) Test0222.instanceCount;
                            i20 = i20;
                            Test0222.instanceCount = Test0222.sFld;
                            switch (((i20 >>> 1) % 3) + 24) {
                                case 24:
                                    switch ((int) ((d4 % 2) + 100)) {
                                        case 100:
                                            i15 += i19;
                                            Test0222.instanceCount += i19;
                                            i18 += i14;
                                            Test0222.dFld = i13;
                                        case 101:
                                            i1 += (((i19 * Test0222.lFld) + i16) - i13);
                                    }
                                case 25:
                                    i20 = (int) Test0222.instanceCount;
                                case 26:
                                    Test0222.iArrFld1[i14 - 1] = Test0222.sFld;
                                    break;
                            }
                        }
                        break;
                    case 129:
                        dArr[i14] = Test0222.byFld;
                        break;
                    default:
                        lFld1 += Test0222.sFld;
                }
            }
        }

        FuzzerUtils.out.println("i1 d4 i13 = " + i1 + "," + Double.doubleToLongBits(d4) + "," + i13);
        FuzzerUtils.out.println("i14 i15 f2 = " + i14 + "," + i15 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 dArr = " + i19 + "," + i20 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0222.instanceCount Test0222.byFld Test0222.iFld = " + Test0222.instanceCount + "," + Test0222.byFld +
                "," + Test0222.iFld);
        FuzzerUtils.out.println("Test0222.sFld Test0222.lFld Test0222.bFld = " + Test0222.sFld + "," + Test0222.lFld + "," + (Test0222.bFld ? 1
                : 0));
        FuzzerUtils.out.println("Test0222.dFld lFld1 iArrFld = " + Double.doubleToLongBits(Test0222.dFld) + "," + lFld1 + "," +
                FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0222.iArrFld1 fArrFld = " + FuzzerUtils.checkSum(Test0222.iArrFld1) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
