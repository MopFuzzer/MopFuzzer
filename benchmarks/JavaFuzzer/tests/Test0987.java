// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test0987 {

    public static final int N = 400;

    public static volatile long instanceCount = 0L;
    public static float fFld = -101.848F;
    public static boolean bFld = false;
    public static volatile double dFld = 0.79934;
    public static byte byFld = 26;
    public static short sFld = -4783;
    public static long[] lArrFld = new long[N];
    public static int[] iArrFld = new int[N];
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0987.lArrFld, -10L);
        FuzzerUtils.init(Test0987.iArrFld, 8);
    }

    public int[] iArrFld1 = new int[N];

    public static void vMeth1(int i2) {

        int i3 = -64106, i4 = -38688, i5 = -7, i6 = 5735, i7 = 31484;
        double[] dArr1 = new double[N];

        FuzzerUtils.init(dArr1, -1.100893);

        for (i3 = 15; i3 < 287; i3++) {
            i5 = 1;
            while (++i5 < 6) {
                Test0987.fFld += i5;
                Test0987.lArrFld[i5 + 1] <<= Test0987.instanceCount;
                i4 *= i2;
                i2 ^= (int) 3L;
                for (i6 = 1; i6 < 1; ++i6) {
                    switch ((i3 % 10) + 10) {
                        case 10:
                            i2 >>= 225;
                            break;
                        case 11:
                            if (Test0987.bFld) break;
                            if (Test0987.bFld) {
                                Test0987.iArrFld[i3 - 1] >>= i4;
                                Test0987.instanceCount <<= i4;
                                Test0987.iArrFld[i5 + 1] = (int) Test0987.instanceCount;
                                i2 += i6;
                            } else {
                                Test0987.dFld += i7;
                            }
                        case 12:
                            Test0987.instanceCount -= i5;
                            break;
                        case 13:
                            Test0987.iArrFld[i5] |= i2;
                            break;
                        case 14:
                            i7 = i6;
                            break;
                        case 15:
                            Test0987.fFld += (i6 * i6);
                            break;
                        case 16:
                            Test0987.instanceCount += (4L + (i6 * i6));
                            break;
                        case 17:
                            Test0987.fFld -= Test0987.instanceCount;
                            break;
                        case 18:
                            dArr1[i3 - 1] += i7;
                            break;
                        case 19:
                            i4 = (int) Test0987.fFld;
                        default:
                            i2 = i2;
                    }
                }
            }
        }
        vMeth1_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static void vMeth() {

        int i = 60, i1 = 52156;
        double[] dArr = new double[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(dArr, 86.50908);
        FuzzerUtils.init(fArr, 0.335F);

        for (i = 7; i < 237; i++) {
            Test0987.instanceCount *= ((i1 >>= (int) (Test0987.instanceCount - i)) - (Test0987.instanceCount = (-(i - i1))));
            i1 += (int) (11L * (Test0987.instanceCount - (Test0987.instanceCount * Test0987.instanceCount)));
            dArr[i + 1] += (i1 + (59338L - (i1--)));
            vMeth1(i);
            i1 = (int) -3681355331L;
            i1 += i;
            i1 = i1;
        }
        if (true) {
            i1 -= (int) Test0987.instanceCount;
            Test0987.lArrFld[(i >>> 1) % N] = i1;
        } else if (Test0987.bFld) {
            i1 = Test0987.byFld;
            fArr[(i >>> 1) % N] += i1;
            i1 = i;
            i1 -= (int) Test0987.fFld;
        }
        vMeth_check_sum += i + i1 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vSmallMeth() {

        short s = -23923;

        vMeth();
        Test0987.dFld = s;
        vSmallMeth_check_sum += s;
    }

    public static void main(String[] strArr) {

        try {
            Test0987 _instance = new Test0987();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i8 = 56, i9 = -5, i10 = 32445, i11 = 40192, i12 = -60962, i13 = -95, i14 = -62, i15 = 1;
        long l = -14L;

        for (int smallinvoc = 0; smallinvoc < 137; smallinvoc++) vSmallMeth();
        for (i8 = 7; i8 < 326; ++i8) {
            i9 *= i8;
            i9 = i8;
            i9 = Test0987.byFld;
            i9 <<= i8;
        }
        for (l = 7; l < 343; ++l) {
            Test0987.instanceCount = (long) Test0987.fFld;
            i11 = 75;
            do {
                i10 -= (int) Test0987.dFld;
            } while (--i11 > 0);
            if (Test0987.bFld) {
                for (i12 = 3; i12 < 75; i12++) {
                    i10 -= i13;
                    for (i14 = i12; 2 > i14; ++i14) {
                        i10 += (int) Test0987.instanceCount;
                        switch ((int) ((l % 3) + 82)) {
                            case 82:
                            case 83:
                                i10 += (((i14 * Test0987.fFld) + i14) - l);
                                Test0987.fFld += Test0987.fFld;
                                i13 >>= (int) Test0987.instanceCount;
                                Test0987.iArrFld[(int) (l + 1)] *= i13;
                            case 84:
                                i10 += i9;
                                break;
                        }
                        i9 += (94 + (i14 * i14));
                        Test0987.sFld += (short) (-166L + (i14 * i14));
                        i9 -= (int) l;
                        Test0987.instanceCount = i9;
                    }
                    i9 -= i14;
                    i9 += 3;
                }
                Test0987.iArrFld[(int) (l + 1)] -= i12;
                Test0987.instanceCount <<= i15;
                i15 |= (int) l;
            } else if (Test0987.bFld) {
                if (true) break;
            } else if (Test0987.bFld) {
                iArrFld1[(int) (l)] += (int) Test0987.fFld;
            }
        }

        FuzzerUtils.out.println("i8 i9 l = " + i8 + "," + i9 + "," + l);
        FuzzerUtils.out.println("i10 i11 i12 = " + i10 + "," + i11 + "," + i12);
        FuzzerUtils.out.println("i13 i14 i15 = " + i13 + "," + i14 + "," + i15);

        FuzzerUtils.out.println("Test0987.instanceCount Test0987.fFld Test0987.bFld = " + Test0987.instanceCount + "," +
                Float.floatToIntBits(Test0987.fFld) + "," + (Test0987.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0987.dFld Test0987.byFld Test0987.sFld = " + Double.doubleToLongBits(Test0987.dFld) + "," +
                Test0987.byFld + "," + Test0987.sFld);
        FuzzerUtils.out.println("Test0987.lArrFld Test0987.iArrFld iArrFld1 = " + FuzzerUtils.checkSum(Test0987.lArrFld) + "," +
                FuzzerUtils.checkSum(Test0987.iArrFld) + "," + FuzzerUtils.checkSum(iArrFld1));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  vMeth1 ->  vMeth1 vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
