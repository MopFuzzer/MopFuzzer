// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0226 {

    public static final int N = 400;

    public static volatile long instanceCount = -889087215L;
    public static volatile boolean bFld = true;
    public static double dFld = 0.73678;
    public static short sFld = -18201;
    public static volatile long[] lArrFld = new long[N];
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0226.lArrFld, 7117L);
    }

    public static void vSmallMeth(int i3, int i4, float f) {


        i4 = i3;
        vSmallMeth_check_sum += i3 + i4 + Float.floatToIntBits(f);
    }

    public static void vMeth(int i7, int i8, int i9) {

        int i10 = -4, i11 = -4, i12 = -12, i13 = -88;
        double d = 2.58214;
        float f1 = 1.482F;
        float[] fArr = new float[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(fArr, 24.912F);
        FuzzerUtils.init(lArr, -2774026561L);

        for (i10 = 4; i10 < 208; ++i10) {
            d += i10;
            fArr[i10 + 1] += (i8--);
            i7 += (int) (-(-(i9 + Test0226.instanceCount)));
            vSmallMeth(211, i8, 45.57F);
            i7 = (int) f1;
            lArr[i10] += 606803502L;
            Test0226.instanceCount = i10;
            if (i9 != 0) {
                vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) +
                        i12 + i13 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
                return;
            }
            for (i12 = 1; i12 < 8; ++i12) {
                i11 = (int) Test0226.instanceCount;
            }
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i12 + i13
                + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i5, int i6, long l) {

        int i14 = -1;
        int i15 = -206;
        int i16 = 58849;
        int i17 = -7;
        int i18 = -8;
        int[] iArr = new int[N];
        double d1 = 54.91902;
        float f2 = 103.209F;
        float[] fArr1 = new float[N];

        FuzzerUtils.init(iArr, -2);
        FuzzerUtils.init(fArr1, -2.552F);

        i5 *= i5;
        vMeth(i5, i5, 95);
        i14 = 1;
        while ((i14 += 2) < 286) {
            d1 -= i14;
            for (i15 = 1; i15 < 11; i15++) {
                f2 = 15755;
                Test0226.lArrFld = Test0226.lArrFld;
                Test0226.lArrFld[i14] = i14;
                l += (i15 * i15);
            }
            iArr[i14] = -3;
            f2 -= i5;
        }
        fArr1[(11 >>> 1) % N] *= i15;
        for (i17 = 8; i17 < 163; i17++) {
            iArr[i17 - 1] -= i14;
            i18 = (int) d1;
        }
        long meth_res = i5 + i6 + l + i14 + Double.doubleToLongBits(d1) + i15 + i16 + Float.floatToIntBits(f2) + i17 +
                i18 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0226 _instance = new Test0226();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -10;
        int i1 = -58;
        int i2 = 31941;
        int i19 = 15609;
        int i20 = 4;
        int i21 = -49286;
        int i22 = -16575;
        int i23 = -26666;
        int[] iArr1 = new int[N];
        float f3 = -67.68F;
        double d2 = -2.95151;
        double[] dArr = new double[N];

        FuzzerUtils.init(iArr1, 34983);
        FuzzerUtils.init(dArr, 0.44764);

        for (i = 14; i < 277; i++) {
            i2 = 1;
            do {
                byte by = -80;
                for (int smallinvoc = 0; smallinvoc < 1; smallinvoc++)
                    vSmallMeth((int) (((i2 + i2) + (-9.902F - i2)) -
                            (iMeth(i, i1, -4489551902436592735L) + 5)), i2, f3);
                Test0226.instanceCount = -4500;
                try {
                    i1 = (i1 % i2);
                    i1 = (i2 % 15878);
                    i1 = (-14621 / i1);
                } catch (ArithmeticException a_e) {
                }
                by = (byte) i1;
                i1 = i2;
                for (i19 = 1; i19 < 1; ++i19) {
                    try {
                        i1 = (i / i20);
                        iArr1[i] = (iArr1[i19] % 31943);
                        i1 = (i1 / 143695524);
                    } catch (ArithmeticException a_e) {
                    }
                    iArr1[i2 - 1] |= (int) Test0226.instanceCount;
                    iArr1[i19 + 1] <<= (int) -8030L;
                    i20 -= by;
                    i1 <<= i1;
                }
                i1 *= i20;
                for (i21 = 1; i21 > 1; i21 -= 2) {
                    i20 = i21;
                    iArr1 = iArr1;
                }
                i22 += (i2 | Test0226.instanceCount);
            } while (++i2 < 96);
            iArr1[i - 1] = 10;
            for (d2 = 96; d2 > 5; d2--) {
                try {
                    i20 = (-106 / iArr1[i]);
                    iArr1[(int) (d2 - 1)] = (i21 / 37380);
                    i22 = (1577277778 / i1);
                } catch (ArithmeticException a_e) {
                }
                Test0226.instanceCount &= i22;
                i20 = (int) f3;
                switch (((i % 10) * 5) + 72) {
                    case 78:
                        f3 *= i21;
                        if (Test0226.bFld) continue;
                    case 85:
                        Test0226.instanceCount -= i;
                        Test0226.dFld -= i20;
                        i22 >>= i23;
                        i1 += (int) d2;
                        break;
                    case 86:
                        i1 += (int) d2;
                        break;
                    case 98:
                        Test0226.instanceCount >>= Test0226.instanceCount;
                        break;
                    case 122:
                        i1 -= i21;
                        break;
                    case 106:
                        Test0226.lArrFld[(int) (d2 + 1)] = Test0226.sFld;
                        break;
                    case 116:
                        i23 += (int) Test0226.instanceCount;
                        break;
                    case 113:
                        i1 -= 51553;
                        break;
                    case 121:
                        dArr[i] *= i22;
                        break;
                    case 89:
                        if (Test0226.bFld) break;
                        break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f3 i19 i20 = " + Float.floatToIntBits(f3) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 d2 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i23 iArr1 dArr = " + i23 + "," + FuzzerUtils.checkSum(iArr1) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0226.instanceCount Test0226.bFld Test0226.dFld = " + Test0226.instanceCount + "," + (Test0226.bFld ? 1
                : 0) + "," + Double.doubleToLongBits(Test0226.dFld));
        FuzzerUtils.out.println("Test0226.sFld Test0226.lArrFld = " + Test0226.sFld + "," + FuzzerUtils.checkSum(Test0226.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth iMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
