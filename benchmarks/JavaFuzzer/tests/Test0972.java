// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test0972 {

    public static final int N = 400;

    public static long instanceCount = -9L;
    public static volatile float fFld = 0.346F;
    public static short sFld = 24645;
    public static boolean bFld = false;
    public static long[] lArrFld = new long[N];
    public static volatile byte[][] byArrFld = new byte[N][N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0972.lArrFld, -2002109586L);
        FuzzerUtils.init(Test0972.byArrFld, (byte) 3);
    }

    public int iFld = -40546;
    public volatile int iFld1 = 13;
    public double[] dArrFld = new double[N];

    public static void vMeth2(int i5, int i6) {

        int i7 = -52, i8 = 32904, i9 = -239, i10 = 43741, i11 = 35848, i12 = -5, i13 = -6, i14 = -8, i15 = -59902;
        double d1 = -2.120902;
        long l2 = 186L;
        boolean b = false;

        i6 = i5;
        for (i7 = 257; i7 > 5; --i7) {
            i8 -= (int) d1;
        }
        for (i9 = 8; i9 < 236; i9++) {
            i6 = (int) Test0972.instanceCount;
            i6 *= i9;
            for (l2 = i9; l2 < 7; ++l2) {
                i5 *= -218;
                for (i12 = 1; i12 < 1; ++i12) {
                    i6 = (int) d1;
                    Test0972.fFld += (((i12 * Test0972.instanceCount) + i12) - l2);
                    if (b) continue;
                }
                for (i14 = 1; i14 < 1; ++i14) {
                    Test0972.instanceCount = -9;
                    i13 *= -13;
                }
            }
        }
        vMeth2_check_sum += i5 + i6 + i7 + i8 + Double.doubleToLongBits(d1) + i9 + i10 + l2 + i11 + i12 + i13 + (b ? 1
                : 0) + i14 + i15;
    }

    public static void vMeth1(int i4, long l1, short s1) {

        int i16 = -39239;
        int i17 = -52;
        int i18 = -308;
        int i19 = -229;
        int i20 = 24378;
        int i21 = 27861;
        int i22 = -206;
        int[] iArr1 = new int[N];
        int[] iArr2 = new
                int[N];
        byte by = 96;
        double d2 = 0.84225;

        FuzzerUtils.init(iArr1, 6103);
        FuzzerUtils.init(iArr2, 187);

        vMeth2(i4, i4);
        for (i16 = 11; 236 > i16; i16++) {
            if (i17 != 0) {
                vMeth1_check_sum += i4 + l1 + s1 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + by +
                        Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
                return;
            }
        }
        for (i18 = 3; i18 < 376; i18++) {
            Test0972.lArrFld[i18] <<= Test0972.instanceCount;
            l1 += i18;
            try {
                i17 = (i16 / iArr1[i18]);
                i4 = (36809 / i17);
                iArr2[i18] = (i18 % iArr1[i18 - 1]);
            } catch (ArithmeticException a_e) {
            }
            for (i20 = i18; 5 > i20; ++i20) {
                l1 += i21;
                i22 += (i20 | l1);
                i19 *= i22;
                by = (byte) i21;
                by -= (byte) d2;
                iArr2[i20 - 1] -= (int) Test0972.fFld;
                iArr2 = iArr2;
            }
        }
        vMeth1_check_sum += i4 + l1 + s1 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + by + Double.doubleToLongBits(d2) +
                FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(short s, long l, int i2) {

        int i3 = 56676;
        int i23 = -1;
        int i24 = -13349;
        int[] iArr3 = new int[N];
        int[] iArr4 = new int[N];
        float f = 0.503F;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(iArr3, 2910);
        FuzzerUtils.init(iArr4, 195);
        FuzzerUtils.init(byArr, (byte) 5);

        i3 = 1;
        do {
            l *= (((5 * i3) + (-i3)) + (Math.min(i2, i2) - Math.max(i3, 129)));
            vMeth1(i2, 4312730251080285878L, s);
            i2 = 2;
            for (f = 1; 5 > f; f += 3) {
                iArr3[i3] -= i23;
                switch (((i3 % 4) * 5) + 125) {
                    case 126:
                        i24 = 1;
                        do {
                            i23 *= i23;
                            iArr3[i24 - 1] ^= i2;
                            i2 >>= i2;
                            i23 = i23;
                            i2 += i24;
                            iArr3 = iArr4;
                            i2 = i2;
                        } while (++i24 < 5);
                    case 134:
                        l = s;
                    case 139:
                        byArr[i3] = (byte) i24;
                        break;
                    case 140:
                        i2 = (int) 2806672890L;
                        break;
                }
            }
        } while (++i3 < 368);
        vMeth_check_sum += s + l + i2 + i3 + Float.floatToIntBits(f) + i23 + i24 + FuzzerUtils.checkSum(iArr3) +
                FuzzerUtils.checkSum(iArr4) + FuzzerUtils.checkSum(byArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0972 _instance = new Test0972();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d = -11.20786;
        int i = -11;
        int i1 = 8639;
        int i25 = 0;
        int i26 = 61752;
        int i27 = -245;
        int i28 = 57169;
        int i29 = -37859;
        int i30 = -9;
        int i31 = 64973;
        int i32 = 235;
        int[] iArr = new
                int[N];
        byte by1 = 44;
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, 60547);
        FuzzerUtils.init(fArr, 35.201F);

        d *= (iArr[(iFld >>> 1) % N] += (int) ((-32938 + iFld) + (d - Test0972.instanceCount)));
        for (i = 4; i < 373; ++i) {
            Test0972.lArrFld[i + 1] += (long) (dArrFld[i - 1] = (Math.min(Test0972.instanceCount, Test0972.instanceCount) + (i1 *
                    iFld)));
            vMeth(Test0972.sFld, Test0972.instanceCount, iFld);
            i1 += i;
            Test0972.lArrFld[i] += i1;
            iFld1 += (int) (-3882580107L + (i * i));
            switch (((i >>> 1) % 8) + 27) {
                case 27:
                    iArr[(iFld >>> 1) % N] *= iFld;
                    for (i25 = 68; i25 > 2; i25--) {
                        Test0972.instanceCount += (((i25 * i1) + iFld) - iFld1);
                        fArr = fArr;
                        iArr[i] -= 89;
                    }
                    for (i27 = 2; i27 < 68; i27++) {
                        by1 = by1;
                        Test0972.instanceCount = i27;
                        Test0972.fFld += Test0972.instanceCount;
                        Test0972.byArrFld[i27 - 1][i - 1] |= (byte) Test0972.instanceCount;
                        switch (((i % 3) * 5) + 66) {
                            case 75:
                                for (i29 = 1; i29 < 2; i29++) {
                                    iFld = (int) Test0972.fFld;
                                    Test0972.bFld = Test0972.bFld;
                                    Test0972.lArrFld[i - 1] = Test0972.instanceCount;
                                }
                                Test0972.instanceCount >>= i30;
                                break;
                            case 74:
                                i1 += 0;
                                i1 += (i27 * i27);
                                i26 &= -10;
                                for (i31 = 1; 2 > i31; ++i31) {
                                    iArr[i31] = i29;
                                    i1 = i32;
                                }
                            case 76:
                                try {
                                    i30 = (iFld % 2097528329);
                                    i32 = (i1 / 733338683);
                                    iFld1 = (iFld / -32);
                                } catch (ArithmeticException a_e) {
                                }
                                break;
                        }
                    }
                case 28:
                case 29:
                    by1 |= (byte) iFld1;
                    break;
                case 30:
                    Test0972.instanceCount *= i28;
                    break;
                case 31:
                case 32:
                    iArr[i] = iFld;
                case 33:
                    i28 += (int) Test0972.fFld;
                    break;
                case 34:
                    iFld -= i27;
                default:
                    i1 -= i30;
            }
        }

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 by1 i29 = " + i28 + "," + by1 + "," + i29);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("iArr fArr = " + FuzzerUtils.checkSum(iArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0972.instanceCount iFld Test0972.fFld = " + Test0972.instanceCount + "," + iFld + "," +
                Float.floatToIntBits(Test0972.fFld));
        FuzzerUtils.out.println("Test0972.sFld iFld1 Test0972.bFld = " + Test0972.sFld + "," + iFld1 + "," + (Test0972.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0972.lArrFld dArrFld Test0972.byArrFld = " + FuzzerUtils.checkSum(Test0972.lArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test0972.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
