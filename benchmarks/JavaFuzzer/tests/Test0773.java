// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test0773 {

    public static final int N = 400;

    public static long instanceCount = 8042L;
    public static long[] lArrFld = new long[N];
    public static byte[][] byArrFld = new byte[N][N];
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0773.lArrFld, -56543L);
        FuzzerUtils.init(Test0773.byArrFld, (byte) -57);
    }

    public static int iMeth1(int i5) {

        float f1 = 1.460F, f2 = 1.307F;
        int i6 = -179;
        int i7 = 188;
        int i9 = -59956;
        int i10 = -46133;
        int i11 = 1;
        int i12 = -237;
        int[] iArr = new int[N];
        short s = -14656;
        byte by = 49;

        FuzzerUtils.init(iArr, 93);

        i5 -= i5;
        for (f1 = 10; f1 < 305; f1++) {
            i7 = 1;
            do {
                f2 = Test0773.instanceCount;
            } while (++i7 < 6);
            i6 -= i5;
            s += (short) f1;
            for (i9 = 1; i9 < 6; ++i9) {
                i6 += (((i9 * i7) + i6) - f2);
                by = (byte) i6;
                i10 = i6;
                for (i11 = (int) (f1); i11 < 2; i11++) {
                    Test0773.instanceCount = 49;
                    Test0773.instanceCount = 44;
                }
                Test0773.instanceCount <<= i9;
                iArr[(int) (f1 - 1)] = 4;
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f1) + i6 + i7 + Float.floatToIntBits(f2) + s + i9 + i10 + by + i11 +
                i12 + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(long l) {

        int i3 = -57;
        int i4 = 168;
        int i13 = 0;
        int i14 = 1;
        int[] iArr1 = new int[N];
        long l1 = -5639400420747917142L;
        short s1 = 19150;
        float f3 = -44.870F;
        float f4 = -55.979F;
        float[] fArr = new float[N];
        boolean b = false;

        FuzzerUtils.init(fArr, 0.1020F);
        FuzzerUtils.init(iArr1, -216);

        for (i3 = 6; i3 < 213; i3 += 3) {
            i4 += (((i3 * l) + l1) - i4);
        }
        l *= iMeth1(i3);
        s1 = (short) l1;
        f3 *= i3;
        i4 += i4;
        for (f4 = 14; f4 < 259; ++f4) {
            i4 >>= i4;
            switch ((int) (((f4 % 5) * 5) + 3)) {
                case 20:
                    if (b) break;
                    iArr1[(int) (f4 + 1)] = (int) Test0773.instanceCount;
                    if (b) {
                        i14 = 1;
                        do {
                            i13 += (i14 * i14);
                            iArr1[i14 - 1] *= (int) l1;
                        } while (++i14 < 7);
                    } else if (b) {
                        i13 = i3;
                    }
                    break;
                case 7:
                    i4 = 30260;
                case 23:
                    i13 = (int) l;
                case 15:
                    b = b;
                    break;
                case 28:
                    f3 = -90;
                default:
                    s1 += (short) (f4 * f4);
            }
        }
        long meth_res = l + i3 + i4 + l1 + s1 + Float.floatToIntBits(f3) + Float.floatToIntBits(f4) + i13 + (b ? 1 : 0)
                + i14 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth() {

        int i = 130;
        int i1 = 84;
        int i2 = 41985;
        int i15 = 12005;
        int i16 = 9;
        int[][] iArr2 = new int[N][N];
        float f = -109.357F;
        byte by1 = 123;
        boolean b1 = true;
        double d = 117.128383;
        double[][] dArr = new double[N][N];

        FuzzerUtils.init(iArr2, 0);
        FuzzerUtils.init(dArr, 1.23762);

        for (i = 3; i < 165; ++i) {
            i2 = 1;
            do {
                i1 += (int) ((f--) + (iMeth(Test0773.instanceCount) - i));
                i1 = -179;
            } while (++i2 < 10);
            by1 += (byte) i;
            for (i15 = i; i15 < 10; ++i15) {
                if (b1) break;
                i1 -= i16;
                i16 = i1;
                iArr2[i15 + 1][i15 + 1] = (int) Test0773.instanceCount;
                dArr[i][i - 1] -= d;
                b1 = b1;
                Test0773.instanceCount += i1;
                i1 *= (int) d;
            }
            Test0773.instanceCount = i2;
        }
        long meth_res = i + i1 + i2 + Float.floatToIntBits(f) + by1 + i15 + i16 + (b1 ? 1 : 0) +
                Double.doubleToLongBits(d) + FuzzerUtils.checkSum(iArr2) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0773 _instance = new Test0773();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        boolean b2 = true;
        float f6 = -94.656F;
        double d1 = 35.107900;
        double[] dArr1 = new double[N];
        int i18 = 160;
        int i19 = -23166;
        int i20 = -137;
        int i21 = -597;
        int i22 = 0;
        int i23 = -57889;
        int i24 = 62131;
        int[] iArr3 = new int[N];

        FuzzerUtils.init(iArr3, -7);
        FuzzerUtils.init(dArr1, 114.90595);

        lMeth();
        for (int i17 : iArr3) {
            b2 = b2;
            i17 = i17;
            f6 += i17;
            switch ((((i17 >>> 1) % 7) * 5) + 111) {
                case 114:
                    for (d1 = 1; d1 < 63; d1++) {
                        Test0773.lArrFld[(int) (d1)] -= i17;
                        switch ((int) ((d1 % 5) + 104)) {
                            case 104:
                                for (i19 = 2; i19 > 1; i19 -= 3) {
                                    i20 += (((i19 * i17) + f6) - i19);
                                }
                                break;
                            case 105:
                                i17 *= i18;
                                b2 = true;
                                i18 = i19;
                                iArr3[(int) (d1)] += (int) Test0773.instanceCount;
                                break;
                            case 106:
                                switch (((i17 >>> 1) % 4) + 113) {
                                    case 113:
                                        for (i21 = 1; i21 < 2; i21++) {
                                            if (b2) continue;
                                            i20 /= (int) (i18 | 1);
                                            i20 += (i21 ^ i17);
                                            i17 += i21;
                                        }
                                        i18 += (int) (d1 - Test0773.instanceCount);
                                        Test0773.instanceCount += (49805 + (d1 * d1));
                                        break;
                                    case 114:
                                        i17 += i18;
                                        for (i23 = 1; i23 < 2; i23++) {
                                            f6 += Test0773.instanceCount;
                                            Test0773.instanceCount |= i21;
                                            dArr1[(int) (d1)] = 3158;
                                            iArr3[i23 + 1] *= i23;
                                            i20 -= i23;
                                        }
                                    case 115:
                                        iArr3[(int) (d1)] = i18;
                                    case 116:
                                        i20 <<= 67;
                                        break;
                                }
                                break;
                            case 107:
                                i18 = (int) f6;
                                break;
                            case 108:
                                Test0773.instanceCount += (long) (d1 + i21);
                                break;
                        }
                    }
                    break;
                case 141:
                    i18 *= (int) Test0773.instanceCount;
                    break;
                case 135:
                    i22 &= i18;
                case 116:
                    Test0773.instanceCount <<= Test0773.instanceCount;
                case 123:
                    iArr3[(64370 >>> 1) % N] -= (int) f6;
                    break;
                case 146:
                    Test0773.instanceCount += 52581L;
                case 128:
                    Test0773.byArrFld[(i21 >>> 1) % N][(i24 >>> 1) % N] += (byte) i24;
                    break;
            }
        }

        FuzzerUtils.out.println("b2 f6 d1 = " + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f6) + "," +
                Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 iArr3 dArr1 = " + i24 + "," + FuzzerUtils.checkSum(iArr3) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0773.instanceCount Test0773.lArrFld Test0773.byArrFld = " + Test0773.instanceCount + "," +
                FuzzerUtils.checkSum(Test0773.lArrFld) + "," + FuzzerUtils.checkSum(Test0773.byArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
