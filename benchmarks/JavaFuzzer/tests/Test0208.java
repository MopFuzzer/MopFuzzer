// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0208 {

    public static final int N = 400;

    public static long instanceCount = -187L;
    public static volatile int iFld = -20259;
    public static byte byFld = -14;
    public static boolean bFld = false;
    public static int iFld1 = 13;
    public static short[] sArrFld = new short[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0208.sArrFld, (short) -19026);
    }

    public int[] iArrFld = new int[N];

    public static int iMeth(int i15) {

        double d1 = -127.103759;
        int i16 = 58652;
        int i17 = 3;
        int i18 = -4546;
        int i19 = -14;
        int i20 = -2;
        int[] iArr1 = new int[N];
        byte by2 = 46;
        float f4 = -1.663F;
        short s = -13097;
        boolean b = false;
        boolean[] bArr = new boolean[N];
        long l1 = 52113L;
        long l2 = 1805695501805421945L;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -10L);
        FuzzerUtils.init(iArr1, 2);
        FuzzerUtils.init(bArr, true);

        for (d1 = 16; d1 < 274; d1++) {
            i17 = 1;
            do {
                try {
                    i16 = (-152 % i16);
                    i15 = (i15 % -57743);
                    i15 = (i15 / i15);
                } catch (ArithmeticException a_e) {
                }
                i16 -= i15;
                i16 *= by2;
                i16 <<= (int) Test0208.instanceCount;
                for (i18 = 1; i18 < 3; ++i18) {
                    f4 -= i19;
                    lArr[i18] = i15;
                    switch ((i18 % 7) + 113) {
                        case 113:
                            switch ((i17 % 9) + 81) {
                                case 81:
                                case 82:
                                    switch ((int) (((d1 % 6) * 5) + 73)) {
                                        case 75:
                                            i19 = -1;
                                            Test0208.iFld += (i18 * i18);
                                            if (i19 != 0) {
                                            }
                                            break;
                                        case 90:
                                            i19 *= s;
                                            break;
                                        case 85:
                                            lArr[i18 - 1] = by2;
                                            break;
                                        case 97:
                                            f4 = s;
                                            break;
                                        case 101:
                                            Test0208.instanceCount = (long) -2.632F;
                                            break;
                                        case 100:
                                            i16 = (int) d1;
                                            break;
                                    }
                                    break;
                                case 83:
                                    if (b) continue;
                                    break;
                                case 84:
                                    Test0208.instanceCount >>>= i15;
                                    break;
                                case 85:
                                case 86:
                                    try {
                                        i16 = (i19 / i19);
                                        i20 = (i20 % -199);
                                        i19 = (iArr1[i18] / iArr1[(int) (d1 - 1)]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                                case 87:
                                case 88:
                                case 89:
                                    iArr1[(i15 >>> 1) % N] >>>= i18;
                                    break;
                                default:
                                    s += (short) (((i18 * i16) + i17) - i16);
                            }
                            break;
                        case 114:
                            Test0208.iFld += (94 + (i18 * i18));
                            break;
                        case 115:
                            if (Test0208.iFld != 0) {
                            }
                        case 116:
                            iArr1[i17 - 1] ^= i17;
                            break;
                        case 117:
                            Test0208.iFld = i15;
                            break;
                        case 118:
                            iArr1[i17] -= (int) l1;
                            break;
                        case 119:
                            bArr[(i17 >>> 1) % N] = false;
                        default:
                            l2 += i18;
                    }
                }
            } while ((i17 += 3) < 6);
        }
        long meth_res = i15 + Double.doubleToLongBits(d1) + i16 + i17 + by2 + i18 + i19 + Float.floatToIntBits(f4) + s
                + (b ? 1 : 0) + i20 + l1 + l2 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
                FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1(int i10) {

        int i11 = 37314;
        int i13 = -19385;
        int i14 = 48379;
        int i21 = -12;
        int i22 = -10;
        int[] iArr = new int[N];
        double d = -2.54549;
        double d2 = -20.88906;
        double[] dArr = new double[N];
        byte by1 = 83;
        float f3 = 2.66F;
        boolean b1 = true;

        FuzzerUtils.init(dArr, -21.126571);
        FuzzerUtils.init(iArr, 6);

        i11 = 1;
        do {
            i10 = Math.abs(i10 <<= i11);
            dArr[i11 + 1] -= (Test0208.instanceCount++);
        } while (++i11 < 227);
        i10 <<= (int) (((i11 + i11) * d) + (--iArr[(-56045 >>> 1) % N]));
        switch (((((int) (-(--Test0208.instanceCount))) >>> 1) % 3) + 58) {
            case 58:
                for (int i12 : iArr) {
                    for (i13 = 1; i13 < 4; i13++) {
                        by1 += (byte) (((i13 * i14) + Test0208.instanceCount) - f3);
                        i14 += (i13 * i13);
                        d *= (i11 + iMeth(i14));
                        d += i13;
                    }
                    for (d2 = 1; d2 < 4; d2++) {
                        Test0208.instanceCount += Test0208.instanceCount;
                    }
                    Test0208.sArrFld[(Test0208.iFld >>> 1) % N] = (short) f3;
                    i21 |= Test0208.byFld;
                }
                break;
            case 59:
                b1 = b1;
            case 60:
                iArr[(i11 >>> 1) % N] = Test0208.iFld;
                break;
            default:
                i14 <<= i22;
        }
        vMeth1_check_sum += i10 + i11 + Double.doubleToLongBits(d) + i13 + i14 + by1 + Float.floatToIntBits(f3) +
                Double.doubleToLongBits(d2) + i21 + (b1 ? 1 : 0) + i22 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(int i3, int i4, long l) {

        int i5 = 29840;
        int i6 = -19774;
        int i7 = 113;
        int i8 = 5;
        int i9 = 8;
        int[][] iArr2 = new int[N][N];
        int[] iArr3 = new int[N];
        float f1 = -1.503F, f2 = -42.451F;
        byte by = -80;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(iArr2, 32802);
        FuzzerUtils.init(byArr, (byte) -21);
        FuzzerUtils.init(iArr3, 131);

        i5 = 1;
        while (++i5 < 316) {
            switch (((i5 % 10) * 5) + 103) {
                case 134:
                    f1 += (i5 - i3);
                    i3 = (int) 141L;
                    i6 = 1;
                    do {
                        i4 += (((i6 * by) + l) - i6);
                    } while (++i6 < 5);
                    for (i7 = 5; 1 < i7; i7 -= 3) {
                        for (f2 = i7; f2 < 5; ++f2) {
                            vMeth1(Test0208.iFld);
                            l >>= -12;
                            i4 += (int) f2;
                            l -= -32146;
                            Test0208.iFld += (int) (f2 * f2);
                            iArr2[i5][(int) (f2 - 1)] >>= Test0208.iFld;
                            byArr[i5] = (byte) 12;
                        }
                    }
                    break;
                case 141:
                    iArr2[i5 + 1][i5 - 1] -= (int) f2;
                    break;
                case 131:
                    l = l;
                    break;
                case 144:
                    if (Test0208.bFld) continue;
                case 115:
                    l += (((i5 * i5) + l) - i5);
                case 125:
                    i9 -= -44601;
                    break;
                case 128:
                    i8 += (((i5 * f1) + i4) - i5);
                    break;
                case 117:
                case 106:
                    iArr2[i5 + 1][i5] ^= i7;
                case 132:
                    iArr2[i5 + 1][i5] -= i7;
            }
        }
        vMeth_check_sum += i3 + i4 + l + i5 + Float.floatToIntBits(f1) + i6 + by + i7 + i8 + Float.floatToIntBits(f2) +
                i9 + FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr3);
    }

    public static void main(String[] strArr) {

        try {
            Test0208 _instance = new Test0208();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -10, i1 = 55, i2 = -14, i25 = -40627, i26 = -12, i27 = 24111, i28 = -225, i29 = 34631, i30 = -8742, i31 = 28264;
        float f = 94.518F, f5 = -48.990F;
        double d3 = -115.118841;
        short s1 = 21892;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -12143014593730259L);

        for (i = 9; i < 186; ++i) {
            iArrFld[i - 1] = (--i1);
            for (f = 7; f < 142; ++f) {
                i1 += (int) (f * f);
                i2 -= iArrFld[(int) (f)];
                i2 += (int) (f * f);
                i1 += (int) (((f * i2) + i) - i);
                vMeth(i2, i1, Test0208.instanceCount);
                switch ((((-29 >>> 1) % 10) * 5) + 46) {
                    case 90:
                        i1 = 91;
                        break;
                    case 60:
                        for (i25 = 2; i25 > 1; i25--) {
                            i2 >>>= i25;
                            Test0208.bFld = Test0208.bFld;
                            i26 += i25;
                            d3 *= -12;
                        }
                        i27 = 1;
                        while ((i27 += 2) < 2) {
                            if (true) continue;
                            i2 += i27;
                            s1 += (short) i25;
                            i26 -= Test0208.iFld1;
                            f5 += (((i27 * i26) + Test0208.iFld1) - Test0208.iFld1);
                            f5 += Test0208.instanceCount;
                            Test0208.instanceCount *= Test0208.instanceCount;
                        }
                        d3 = 43.118888;
                        break;
                    case 96:
                        for (i28 = 1; 2 > i28; ++i28) {
                            i2 = i;
                            Test0208.instanceCount *= Test0208.instanceCount;
                        }
                        for (i30 = 1; i30 < 2; i30++) {
                            Test0208.iFld1 |= Test0208.iFld;
                            Test0208.byFld += (byte) Test0208.instanceCount;
                        }
                        break;
                    case 61:
                        lArr1[i] = i25;
                        break;
                    case 85:
                        iArrFld = iArrFld;
                        break;
                    case 79:
                        iArrFld[(int) (f)] *= (int) -4L;
                        break;
                    case 66:
                        Test0208.iFld = Test0208.byFld;
                        break;
                    case 54:
                        i1 *= -163;
                        break;
                    case 64:
                        i29 += (int) (3503163364L + (f * f));
                    case 77:
                        i29 = (int) Test0208.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 f = " + i + "," + i1 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i2 i25 i26 = " + i2 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("d3 i27 s1 = " + Double.doubleToLongBits(d3) + "," + i27 + "," + s1);
        FuzzerUtils.out.println("f5 i28 i29 = " + Float.floatToIntBits(f5) + "," + i28 + "," + i29);
        FuzzerUtils.out.println("i30 i31 lArr1 = " + i30 + "," + i31 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0208.instanceCount Test0208.iFld Test0208.byFld = " + Test0208.instanceCount + "," + Test0208.iFld +
                "," + Test0208.byFld);
        FuzzerUtils.out.println("Test0208.bFld Test0208.iFld1 iArrFld = " + (Test0208.bFld ? 1 : 0) + "," + Test0208.iFld1 + "," +
                FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0208.sArrFld = " + FuzzerUtils.checkSum(Test0208.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
