// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test0753 {

    public static final int N = 400;

    public static volatile long instanceCount = 6980262740555493741L;
    public static byte byFld = -100;
    public static float fFld = 0.885F;
    public static double dFld = 87.120191;
    public static byte[] byArrFld = new byte[N];
    public static int[] iArrFld = new int[N];
    public static float[] fArrFld = new float[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0753.byArrFld, (byte) -13);
        FuzzerUtils.init(Test0753.iArrFld, 52657);
        FuzzerUtils.init(Test0753.fArrFld, 1.514F);
    }

    public boolean bFld = true;
    public volatile int iFld = -52;
    public float fFld1 = 0.562F;

    public static void vMeth1() {

        int i3 = -183, i4 = -17671, i5 = -4, i6 = -18820;
        double d = -68.100810;
        float f = -2.344F, f1 = 23.266F;
        short s = 20379;
        byte by = -65;

        i3 += i3;
        d /= (i3 | 1);
        i3 = (int) f;
        for (i4 = 10; i4 < 371; ++i4) {
            i3 += s;
        }
        i3 -= (int) f;
        for (f1 = 238; 14 < f1; f1--) {
            d = i6;
            Test0753.byArrFld[(int) (f1)] = (byte) i5;
        }
        i5 <<= i3;
        i6 *= by;
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i4 + i5 + s +
                Float.floatToIntBits(f1) + i6 + by;
    }

    public static int iMeth(boolean b) {

        int i7 = -151, i8 = -47530, i9 = -64, i10 = -8, i11 = -192, i12 = 49613;

        vMeth1();
        Test0753.instanceCount *= -115;
        i7 = (int) 1.104065;
        i7 = Test0753.byFld;
        for (i8 = 7; 230 > i8; i8++) {
            i7 += (((i8 * i9) + Test0753.fFld) - i8);
            i10 = 1;
            do {
                for (i11 = 1; i11 < 1; ++i11) {
                    i12 += (10 + (i11 * i11));
                    i7 += (((i11 * i11) + i10) - i9);
                    i9 = i7;
                    i9 = (int) Test0753.dFld;
                    Test0753.iArrFld = Test0753.iArrFld;
                    i7 += i11;
                    Test0753.instanceCount += (((i11 * i8) + i9) - Test0753.instanceCount);
                }
            } while (++i10 < 7);
        }
        long meth_res = (b ? 1 : 0) + i7 + i8 + i9 + i10 + i11 + i12;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0753 _instance = new Test0753();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i1, int i2) {

        short s1 = -16129;
        short[][] sArr = new short[N][N];
        int i14 = -2;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -3622945533L);
        FuzzerUtils.init(sArr, (short) -6894);

        Test0753.instanceCount = iMeth(bFld);
        Test0753.iArrFld[(i1 >>> 1) % N] = i1;
        if (bFld) {
            lArr[(i2 >>> 1) % N] += i1;
            Test0753.iArrFld[(iFld >>> 1) % N] |= (int) 50L;
            for (int i13 : Test0753.iArrFld) {
                if (bFld) {
                    Test0753.iArrFld[(i13 >>> 1) % N] -= i2;
                    i1 += s1;
                } else {
                    if (false) continue;
                    i2 = (int) Test0753.instanceCount;
                    Test0753.fArrFld[(i1 >>> 1) % N] += Test0753.instanceCount;
                }
                fFld1 *= i14;
                sArr = sArr;
                if (bFld) continue;
            }
        } else if (bFld) {
            fFld1 = i1;
        } else if (bFld) {
            Test0753.dFld += i2;
        } else {
            i1 >>= i1;
        }
        vMeth_check_sum += i1 + i2 + s1 + i14 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
    }

    public void mainTest(String[] strArr1) {

        int i = -2, i15 = -144, i16 = 0, i17 = 55, i18 = -37, i19 = 3;

        i = Math.abs(i);
        vMeth(i, i);
        i15 = 1;
        do {
            for (i16 = 3; i16 < 104; ++i16) {
                for (i18 = 1; i18 < 2; ++i18) {
                    switch ((i18 % 2) + 55) {
                        case 55:
                            i19 = iFld;
                            Test0753.instanceCount = Test0753.instanceCount;
                            i17 <<= iFld;
                        case 56:
                            if (false) {
                                i17 = i19;
                                Test0753.iArrFld[i18 + 1] = i15;
                            } else if (true) {
                                i17 += i18;
                            } else {
                                Test0753.instanceCount += (i18 ^ i);
                            }
                            if (bFld) break;
                            switch ((i16 % 5) + 55) {
                                case 55:
                                    i += i16;
                                    fFld1 *= iFld;
                                    i = i19;
                                    Test0753.instanceCount = -131;
                                    break;
                                case 56:
                                    i19 *= Test0753.byFld;
                                    switch (((i16 >>> 1) % 1) + 83) {
                                        case 83:
                                            i >>= -43226;
                                            iFld = (int) Test0753.instanceCount;
                                            iFld -= (int) Test0753.instanceCount;
                                            break;
                                        default:
                                            i17 += (((i18 * i17) + i17) - i15);
                                    }
                                    break;
                                case 57:
                                    i19 += (-5 + (i18 * i18));
                                    Test0753.instanceCount += (((i18 * Test0753.instanceCount) + i17) - i);
                                    Test0753.instanceCount = (long) 1.192F;
                                    break;
                                case 58:
                                case 59:
                                    if (bFld) break;
                            }
                            break;
                    }
                }
            }
        } while (++i15 < 242);

        FuzzerUtils.out.println("i i15 i16 = " + i + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);

        FuzzerUtils.out.println("Test0753.instanceCount Test0753.byFld Test0753.fFld = " + Test0753.instanceCount + "," + Test0753.byFld +
                "," + Float.floatToIntBits(Test0753.fFld));
        FuzzerUtils.out.println("Test0753.dFld bFld iFld = " + Double.doubleToLongBits(Test0753.dFld) + "," + (bFld ? 1 : 0) +
                "," + iFld);
        FuzzerUtils.out.println("fFld1 Test0753.byArrFld Test0753.iArrFld = " + Float.floatToIntBits(fFld1) + "," +
                FuzzerUtils.checkSum(Test0753.byArrFld) + "," + FuzzerUtils.checkSum(Test0753.iArrFld));
        FuzzerUtils.out.println("Test0753.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0753.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
