// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test0664 {

    public static final int N = 400;

    public static long instanceCount = -12L;
    public static byte byFld = 97;
    public static int iFld = 14;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;
    public long[][] lArrFld = new long[N][N];

    public static int iMeth2() {

        int i13 = 2;
        int i14 = -59099;
        int i15 = -9031;
        int i16 = 54617;
        int i17 = 2467;
        int i18 = 215;
        int i19 = 3;
        int[][] iArr1 = new int[N][N];
        short s = 188;
        boolean b = false;
        boolean[] bArr1 = new boolean[N];
        float f = -15.518F;

        FuzzerUtils.init(iArr1, 10);
        FuzzerUtils.init(bArr1, false);

        i13 = 1;
        do {
            i14 = 1;
            do {
                Test0664.byFld += (byte) (i14 + Test0664.instanceCount);
                i15 >>= -13;
                i15 += (((i14 * Test0664.instanceCount) + i15) - i13);
                iArr1[i13][i13] = i13;
                i15 = s;
                i15 <<= i15;
                Test0664.instanceCount += i13;
            } while (++i14 < 10);
            bArr1[i13] = b;
            for (i16 = 10; i16 > i13; i16 -= 3) {
                i15 = (int) f;
                for (i18 = 1; i18 > 1; --i18) {
                    i19 = i14;
                    i17 *= s;
                }
            }
        } while (++i13 < 160);
        long meth_res = i13 + i14 + i15 + s + (b ? 1 : 0) + i16 + i17 + Float.floatToIntBits(f) + i18 + i19 +
                FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr1);
        iMeth2_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth1(int i7, int i8) {

        int i9 = 23;
        int i10 = -174;
        int i11 = -39500;
        int i12 = 63;
        int[] iArr = new int[N];
        double d = 0.123490;
        short s1 = 4117;
        boolean[] bArr = new boolean[N];

        FuzzerUtils.init(iArr, 42239);
        FuzzerUtils.init(bArr, true);

        for (i9 = 12; i9 < 230; i9++) {
            for (d = 1; 7 > d; ++d) {
                i7 += (int) ((long) d ^ i11);
                iArr[(int) (d - 1)] &= (++iArr[(int) (d - 1)]);
                if (bArr[i9 - 1]) break;
                i11 -= (((i9 + i7) - i7) + i10);
                i7 += (int) ((long) d | Test0664.instanceCount);
                i7 += (int) (d * d);
                i12 = 1;
                do {
                    Test0664.instanceCount += Math.abs((int) ((-117.403F + iMeth2()) + Test0664.instanceCount));
                    i7 = i8;
                    s1 = (short) Test0664.instanceCount;
                    i7 = (int) Test0664.instanceCount;
                    iArr[(int) (d - 1)] &= i9;
                    Test0664.instanceCount = i11;
                } while (++i12 < 2);
            }
        }
        long meth_res = i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i11 + i12 + s1 + FuzzerUtils.checkSum(iArr) +
                FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i1, int i2) {

        int i3 = -26531, i4 = 13, i5 = -14, i6 = -24400, i20 = 195, i21 = -15241;
        boolean b1 = true;
        float f1 = 1.333F, f2 = -2.57F;
        short s2 = -16591;

        i3 = 1;
        while (++i3 < 210) {
            for (i4 = 1; i4 < 8; ++i4) {
                i6 = 1;
                do {
                    i2 += i6;
                    i1 += (i6 ^ Test0664.instanceCount);
                    i1 += ((i5++) * iMeth1(i2, i3));
                } while (++i6 < 2);
                switch ((i3 % 2) + 52) {
                    case 52:
                        for (i20 = 1; i20 < 2; ++i20) {
                            i5 += (i20 - i20);
                            if (b1) continue;
                            Test0664.instanceCount <<= -6;
                            i5 -= Test0664.byFld;
                            Test0664.instanceCount = i2;
                            f1 -= i5;
                            i21 &= (int) Test0664.instanceCount;
                        }
                        break;
                    case 53:
                        s2 = (short) Test0664.instanceCount;
                        break;
                    default:
                        f2 -= Test0664.instanceCount;
                }
            }
        }
        long meth_res = i1 + i2 + i3 + i4 + i5 + i6 + i20 + i21 + (b1 ? 1 : 0) + Float.floatToIntBits(f1) + s2 +
                Float.floatToIntBits(f2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0664 _instance = new Test0664();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth() {

        int i = -4612;

        i = (int) Test0664.instanceCount;
        vMeth_check_sum += i;
    }

    public void mainTest(String[] strArr1) {

        int i22 = 151;
        int i23 = 5;
        int i24 = 4;
        int i25 = -63486;
        int i26 = 4;
        int i27 = 51;
        int[] iArr2 = new int[N];
        float f3 = 0.781F, f5 = -47.783F;
        boolean b2 = false;

        FuzzerUtils.init(iArr2, 4);

        vMeth();
        Test0664.instanceCount <<= iMeth(-25791, Test0664.iFld);
        Test0664.iFld = -12118;
        i22 = 1;
        do {
            Test0664.iFld *= (int) Test0664.instanceCount;
            Test0664.iFld = 13;
            if (b2) {
                Test0664.iFld = (int) f3;
            } else if (b2) {
                for (i23 = 6; 202 > i23; i23++) {
                    if (b2) {
                        lArrFld[i22][i22 + 1] -= (long) f3;
                        switch (((Test0664.iFld >>> 1) % 5) + 85) {
                            case 85:
                                i24 = i23;
                                switch (((-39564 >>> 1) % 5) + 87) {
                                    case 87:
                                        for (i25 = 1; i25 < 2; ++i25) {
                                            float f4 = -1.865F;
                                            Test0664.instanceCount = 205;
                                            f4 = -113;
                                            i24 = (int) Test0664.instanceCount;
                                            Test0664.instanceCount += (((i25 * i26) + Test0664.instanceCount) - Test0664.byFld);
                                        }
                                        b2 = true;
                                        for (f5 = 1; f5 < 2; f5++) {
                                            i27 += (int) f5;
                                            Test0664.instanceCount += (long) f5;
                                            i27 *= i25;
                                            i27 = -12888;
                                            i27 += (int) (f5 * i23);
                                        }
                                        iArr2[i22 - 1] = i25;
                                    case 88:
                                        f3 = Test0664.byFld;
                                        try {
                                            i26 = (i25 / -43080);
                                            i24 = (37092 % i22);
                                            i24 = (i24 / i24);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        Test0664.instanceCount = 13;
                                        break;
                                    case 89:
                                        Test0664.iFld = 134;
                                    case 90:
                                        iArr2 = iArr2;
                                        break;
                                    case 91:
                                        f3 += (i23 + Test0664.instanceCount);
                                        break;
                                }
                                break;
                            case 86:
                                i24 += i23;
                            case 87:
                                i24 >>>= i23;
                                break;
                            case 88:
                                Test0664.instanceCount = 9;
                                break;
                            case 89:
                                Test0664.byFld += (byte) i23;
                                break;
                        }
                    }
                }
            }
        } while (++i22 < 124);

        FuzzerUtils.out.println("i22 f3 i23 = " + i22 + "," + Float.floatToIntBits(f3) + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("b2 f5 i27 = " + (b2 ? 1 : 0) + "," + Float.floatToIntBits(f5) + "," + i27);
        FuzzerUtils.out.println("iArr2 = " + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0664.instanceCount Test0664.byFld Test0664.iFld = " + Test0664.instanceCount + "," + Test0664.byFld +
                "," + Test0664.iFld);
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
