// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test0101 {

    public static final int N = 400;

    public static long instanceCount = -12L;
    public static volatile int iFld = 195;
    public static byte byFld = 90;
    public static volatile boolean[] bArrFld = new boolean[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public static long vMeth3_check_sum = 0;

    static {
        FuzzerUtils.init(Test0101.bArrFld, false);
    }

    public int iFld1 = 49;

    public static void vMeth1() {


        Test0101.instanceCount = (Test0101.iFld--);
        vMeth1_check_sum += 0;
    }

    public static void vMeth3(long l1, int i3, int i4) {

        int i5 = -4;
        int i6 = 41;
        int i7 = 59776;
        int i8 = -65505;
        int i9 = 5;
        int i10 = 7996;
        int[] iArr1 = new int[N];
        double d = 0.111002, d1 = 0.6591, d2 = 0.64466;
        float f = 118.662F;
        boolean b1 = false;

        FuzzerUtils.init(iArr1, 43940);

        l1 >>= i4;
        try {
            for (i5 = 13; i5 < (337 + 400); ++i5) {
                if (i4 != 0) {
                    vMeth3_check_sum += l1 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) +
                            Double.doubleToLongBits(d1) + i7 + Float.floatToIntBits(f) + i8 + i9 + i10 +
                            Double.doubleToLongBits(d2) + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                Test0101.iFld >>>= -17021;
                iArr1[i5 + 1] += (int) d;
            }
            iArr1[(i5 >>> 1) % N] = (int) -62L;
            i3 = iArr1[i6];
            for (d1 = 1 - 400; d1 < 154; ++d1) {
                i7 += (int) f;
                for (i8 = (int) (d1); i8 < (4 + 400); ++i8) {
                    boolean b = false;
                    b = true;
                    d -= i7;
                    d *= i10;
                    iArr1 = iArr1;
                }
            }
        } catch (ArrayIndexOutOfBoundsException exc2) {
            d2 = i6;
        } catch (ArithmeticException exc3) {
            b1 = false;
        }
        vMeth3_check_sum += l1 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i7 +
                Float.floatToIntBits(f) + i8 + i9 + i10 + Double.doubleToLongBits(d2) + (b1 ? 1 : 0) +
                FuzzerUtils.checkSum(iArr1);
    }

    public static void main(String[] strArr) {

        try {
            Test0101 _instance = new Test0101();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth2(int i1) {

        int i2 = -5, i11 = 95, i12 = 229, i13 = -2938, i14 = 32296, i15 = 212, i16 = 247;
        double d3 = 24.10878;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -27070L);

        i2 = 1;
        do {
            vMeth3(Test0101.instanceCount, i2, Test0101.iFld);
            for (i11 = 1; i11 < 5; i11++) {
                lArr = lArr;
            }
            Test0101.instanceCount += (i2 + Test0101.instanceCount);
            switch (((i2 >>> 1) % 4) + 60) {
                case 60:
                    for (i13 = 1; i13 < 5; ++i13) {
                        Test0101.iFld = i11;
                        Test0101.iFld *= (int) d3;
                        i12 -= (int) Test0101.instanceCount;
                        for (i15 = i13; i15 < 2; ++i15) {
                            try {
                                i1 = (i12 % -54055);
                                i16 = (Test0101.iFld / -22);
                                Test0101.iFld = (53 % i2);
                            } catch (ArithmeticException a_e) {
                            }
                            Test0101.instanceCount *= Test0101.iFld;
                            i16 = (int) Test0101.instanceCount;
                            Test0101.byFld *= (byte) i1;
                        }
                    }
                    break;
                case 61:
                case 62:
                    i16 += (((i2 * Test0101.instanceCount) + i1) - i2);
                case 63:
                    iFld1 *= i1;
                    break;
                default:
                    i1 += (i2 - i14);
            }
        } while (++i2 < 338);
        vMeth2_check_sum += i1 + i2 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d3) + i15 + i16 +
                FuzzerUtils.checkSum(lArr);
    }

    public void vMeth(long l, int i) {

        int i17 = -5;
        int i18 = -4;
        int i19 = -23191;
        int i20 = 0;
        int i21 = -24094;
        int i22 = -198;
        int[][] iArr = new int[N][N];
        double d4 = 3.76792;

        FuzzerUtils.init(iArr, -14895);

        iArr[(i >>> 1) % N][(-51652 >>> 1) % N] = (int) Test0101.instanceCount;
        vMeth1();
        vMeth2(Test0101.iFld);
        for (i17 = 11; i17 < 184; ++i17) {
            switch ((((-175 >>> 1) % 7) * 5) + 44) {
                case 67:
                    Test0101.bArrFld = FuzzerUtils.boolean1array(N, (boolean) false);
                    break;
                case 61:
                    i18 = Test0101.iFld;
                case 75:
                    l = i17;
                    for (i19 = 1; i19 < 9; ++i19) {
                        l = i19;
                        try {
                            iFld1 = (i18 % iArr[(i17 >>> 1) % N][i17]);
                            i20 = (-239 / i17);
                            i20 = (733419793 % i);
                        } catch (ArithmeticException a_e) {
                        }
                        for (i21 = 2; i21 > 1; --i21) {
                            d4 = -42833;
                        }
                        Test0101.iFld = i;
                        Test0101.instanceCount -= (long) d4;
                    }
                    break;
                case 57:
                    Test0101.instanceCount += (i17 | i20);
                    break;
                case 74:
                    Test0101.instanceCount >>= -99L;
                    break;
                case 62:
                    Test0101.instanceCount = l;
                case 72:
                    iArr[i17 + 1][i17 - 1] <<= i;
                    break;
            }
        }
        vMeth_check_sum += l + i + i17 + i18 + i19 + i20 + i21 + i22 + Double.doubleToLongBits(d4) +
                FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23 = 124;
        int i24 = -38693;
        int i25 = -5;
        int i26 = -152;
        int i27 = 47200;
        int i28 = -173;
        int i29 = -8;
        int[] iArr2 = new int[N];
        int[][] iArr3 = new
                int[N][N];
        float f1 = 0.860F;
        short s = -13867;
        byte by = 57;
        boolean b2 = false;
        double d5 = 80.68641;

        FuzzerUtils.init(iArr2, -23422);
        FuzzerUtils.init(iArr3, -32570);

        vMeth(Test0101.instanceCount, 2938);
        iArr2[(Test0101.iFld >>> 1) % N] = Test0101.iFld;
        for (i23 = 7; i23 < 246; ++i23) {
            for (i25 = 3; 105 > i25; i25 += 3) {
                f1 += (i25 * i23);
                i24 *= 8;
                for (i27 = 1; i27 < 4; ++i27) {
                    iFld1 += (i27 ^ iFld1);
                    i26 = i26;
                    switch (((i27 % 8) * 5) + 56) {
                        case 60:
                            switch (((i27 % 3) * 5) + 93) {
                                case 99:
                                    Test0101.iFld ^= i27;
                                    f1 = s;
                                    break;
                                case 96:
                                case 97:
                                    Test0101.instanceCount >>= 3;
                                default:
                                    Test0101.iFld += i28;
                            }
                            i29 += i27;
                        case 87:
                            if (b2) {
                                Test0101.iFld <<= i27;
                                iArr2[i25] -= by;
                            } else {
                                iArr2[(i25 >>> 1) % N] += i26;
                                switch (((i25 % 8) * 5) + 110) {
                                    case 111:
                                        iFld1 += i27;
                                        i24 += (i27 * i27);
                                        Test0101.instanceCount += i27;
                                        iArr3[i23][i27 - 1] = i28;
                                        break;
                                    case 129:
                                        b2 = b2;
                                        break;
                                    case 128:
                                        iArr3[i25 - 1][i25] -= (int) Test0101.instanceCount;
                                        Test0101.iFld += (int) Test0101.instanceCount;
                                    case 123:
                                        s += (short) (((i27 * Test0101.iFld) + i23) - Test0101.byFld);
                                        f1 *= i23;
                                        break;
                                    case 127:
                                        s += (short) i27;
                                        break;
                                    case 136:
                                        Test0101.byFld = (byte) d5;
                                        break;
                                    case 124:
                                        i29 += (((i27 * i29) + f1) - iFld1);
                                    case 149:
                                        iFld1 += (i27 * i27);
                                        break;
                                    default:
                                        f1 -= Test0101.instanceCount;
                                }
                            }
                        case 61:
                            Test0101.instanceCount = 97;
                            break;
                        case 89:
                            Test0101.iFld *= (int) Test0101.instanceCount;
                        case 65:
                            Test0101.instanceCount = (long) d5;
                            break;
                        case 64:
                            iArr2 = iArr3[i25 + 1];
                            break;
                        case 86:
                            i24 += (i27 ^ i25);
                            break;
                        case 92:
                            i28 = i24;
                            break;
                        default:
                            i26 += (i27 * i25);
                    }
                }
            }
        }

        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 f1 i27 = " + i26 + "," + Float.floatToIntBits(f1) + "," + i27);
        FuzzerUtils.out.println("i28 s i29 = " + i28 + "," + s + "," + i29);
        FuzzerUtils.out.println("by b2 d5 = " + by + "," + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d5));
        FuzzerUtils.out.println("iArr2 iArr3 = " + FuzzerUtils.checkSum(iArr2) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0101.instanceCount Test0101.iFld Test0101.byFld = " + Test0101.instanceCount + "," + Test0101.iFld +
                "," + Test0101.byFld);
        FuzzerUtils.out.println("iFld1 Test0101.bArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test0101.bArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth3_check_sum: " + vMeth3_check_sum);
        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth mainTest
//DEBUG  vMeth3 ->  vMeth3 vMeth2 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
