// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test0412 {

    public static final int N = 400;

    public static long instanceCount = 8373712019782286613L;
    public static double dFld = 75.44024;
    public static int iFld = 27234;
    public static boolean bFld = false;
    public static byte byFld = 62;
    public static float fFld = 80.889F;
    public static boolean bFld1 = true;
    public static int[] iArrFld = new int[N];
    public static short[][] sArrFld = new short[N][N];
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0412.iArrFld, 39087);
        FuzzerUtils.init(Test0412.sArrFld, (short) 27988);
    }

    public short sFld = 26665;

    public static void vMeth() {

        int i9 = -10, i10 = -7, i11 = -177;
        boolean b = true;
        byte by = 34;

        i9 = 1;
        while (++i9 < 247) {
            Test0412.instanceCount = Test0412.instanceCount;
            Test0412.dFld -= -91L;
        }
        Test0412.iFld >>= i9;
        i10 = 1;
        do {
            Test0412.iFld += (i10 * i10);
            b = b;
            Test0412.iFld = i9;
            Test0412.iFld = i9;
            Test0412.sArrFld[(Test0412.iFld >>> 1) % N] = FuzzerUtils.short1array(N, (short) -4565);
            Test0412.iFld *= (int) Test0412.dFld;
            i11 = 1;
            while (++i11 < 5) {
                Test0412.instanceCount += (1090 + (i11 * i11));
                by += (byte) Test0412.iFld;
                b = false;
            }
        } while (++i10 < 330);
        vMeth_check_sum += i9 + i10 + (b ? 1 : 0) + i11 + by;
    }

    public static int iMeth1(int i6, double d, int i7) {

        double d1 = -113.107905;
        int i8 = -1, i12 = -12, i13 = 233, i14 = 215;
        long l1 = -4543433511190646978L;

        for (d1 = 9; 231 > d1; d1++) {
            vMeth();
            i7 = (int) -25101L;
            for (l1 = (long) (d1); l1 < 7; ++l1) {
                i7 = 110;
                Test0412.bFld = Test0412.bFld;
                Test0412.instanceCount += 124;
                switch ((int) ((l1 % 1) + 113)) {
                    case 113:
                        Test0412.instanceCount += (l1 ^ i6);
                        switch ((int) ((l1 % 1) + 99)) {
                            case 99:
                                for (i13 = 1; i13 < 1; ++i13) {
                                    i7 >>>= (int) l1;
                                    Test0412.instanceCount <<= i8;
                                    d -= i14;
                                    d -= i13;
                                }
                                break;
                            default:
                                try {
                                    i12 = (20818 % i13);
                                    i12 = (Test0412.iFld / -25);
                                    i8 = (-174 % i13);
                                } catch (ArithmeticException a_e) {
                                }
                        }
                        break;
                    default:
                        i12 -= i14;
                }
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d) + i7 + Double.doubleToLongBits(d1) + i8 + l1 + i12 + i13 + i14;
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(short s, int i1) {

        int i2 = 49464, i3 = 219, i4 = -4, i5 = 297, i15 = -237;
        long l = 3099L;
        long[] lArr1 = new long[N];
        double d2 = 2.50040;

        FuzzerUtils.init(lArr1, -6L);

        for (i2 = 4; i2 < 322; i2++) {
            for (i4 = 1; 5 > i4; i4++) {
                i5 += i4;
                l = 1;
                do {
                    Test0412.iArrFld = (Test0412.iArrFld = (Test0412.iArrFld = (Test0412.iArrFld = FuzzerUtils.int1array(N, (int) -2))));
                    Test0412.instanceCount *= (Test0412.instanceCount << (iMeth1(Test0412.iFld, Test0412.dFld, 117) + i5));
                } while (++l < 2);
                try {
                    Test0412.iFld = (Test0412.iArrFld[i4 + 1] / 649848232);
                    Test0412.iArrFld[i4 + 1] = (i2 / -39);
                    i1 = (Test0412.iArrFld[i2 - 1] / i2);
                } catch (ArithmeticException a_e) {
                }
                Test0412.byFld = (byte) -2;
            }
            Test0412.byFld += (byte) i1;
            i3 = (int) l;
        }
        lArr1[(-3367 >>> 1) % N] -= (long) Test0412.fFld;
        d2 = 1;
        do {
            i15 = 1;
            do {
                i3 = -1;
                Test0412.instanceCount += 14;
            } while (++i15 < 10);
        } while (++d2 < 154);
        long meth_res = s + i1 + i2 + i3 + i4 + i5 + l + Double.doubleToLongBits(d2) + i15 +
                FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0412 _instance = new Test0412();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -1, i16 = -70, i17 = -19121, i18 = 148, i19 = 6, i20 = -25, i21 = -38143, i22 = -27091, i23 = 5;
        long[] lArr = new long[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(lArr, -118L);
        FuzzerUtils.init(fArr, 77.903F);

        Test0412.iArrFld[(i >>> 1) % N] += (int) ((lArr[(i >>> 1) % N] - (i + Test0412.instanceCount)) + i);
        Test0412.dFld = iMeth(sFld, Test0412.iFld);
        Test0412.instanceCount = Test0412.iFld;
        for (i16 = 9; i16 < 168; ++i16) {
            for (i18 = i16; i18 < 158; i18++) {
                i19 += -4741;
                Test0412.instanceCount = Test0412.byFld;
                if (Test0412.bFld) {
                    Test0412.iFld = i17;
                    i17 += i;
                } else if (Test0412.bFld1) {
                    Test0412.iArrFld[i16] = Test0412.iFld;
                } else if (Test0412.bFld) {
                    if (Test0412.bFld) break;
                    for (i20 = 1; i20 > 1; i20--) {
                        Test0412.iFld %= (int) (i21 | 1);
                        Test0412.iFld += (i20 + sFld);
                    }
                    Test0412.iFld -= (int) -106.961F;
                } else {
                    Test0412.instanceCount += (long) Test0412.dFld;
                    Test0412.iArrFld[i18 - 1] <<= i;
                }
                for (i22 = 1; i22 < 1; i22++) {
                    i23 = i16;
                    Test0412.dFld += i18;
                    i += Test0412.iFld;
                    i17 += (i22 ^ (long) Test0412.fFld);
                    i17 = (int) -5L;
                    Test0412.iFld = -8;
                }
                try {
                    i23 = (Test0412.iFld % i22);
                    i17 = (i16 % 91);
                    i19 = (i16 % -45475);
                } catch (ArithmeticException a_e) {
                }
                fArr[i16 + 1] += Test0412.instanceCount;
                Test0412.fFld *= Test0412.iFld;
                i17 *= i18;
            }
            lArr[i16 - 1] = i21;
        }

        FuzzerUtils.out.println("i i16 i17 = " + i + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("lArr fArr = " + FuzzerUtils.checkSum(lArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0412.instanceCount Test0412.dFld Test0412.iFld = " + Test0412.instanceCount + "," +
                Double.doubleToLongBits(Test0412.dFld) + "," + Test0412.iFld);
        FuzzerUtils.out.println("Test0412.bFld Test0412.byFld Test0412.fFld = " + (Test0412.bFld ? 1 : 0) + "," + Test0412.byFld + "," +
                Float.floatToIntBits(Test0412.fFld));
        FuzzerUtils.out.println("sFld Test0412.bFld1 Test0412.iArrFld = " + sFld + "," + (Test0412.bFld1 ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0412.iArrFld));
        FuzzerUtils.out.println("Test0412.sArrFld = " + FuzzerUtils.checkSum(Test0412.sArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
