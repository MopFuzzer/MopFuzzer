// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test0350 {

    public static final int N = 400;

    public static long instanceCount = 9L;
    public static boolean bFld = false;
    public static float fFld = -81.745F;
    public static volatile byte byFld = 56;
    public static double dFld = -3.45924;
    public static short sFld = -16102;
    public static double[] dArrFld = new double[N];
    public static int[] iArrFld = new int[N];
    public static boolean[] bArrFld = new boolean[N];
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0350.dArrFld, -51.104740);
        FuzzerUtils.init(Test0350.iArrFld, 0);
        FuzzerUtils.init(Test0350.bArrFld, false);
    }

    public int iFld = 64871;
    public int iFld1 = 221;

    public static int iMeth2() {

        float f = -65.368F, f1 = -1.368F;
        int i5 = -38;
        int i6 = -7;
        int i7 = 25401;
        int i8 = -139;
        int i9 = 194;
        int i10 = 132;
        int[] iArr1 = new int[N];
        double d = 38.66152;
        short s = -4564;

        FuzzerUtils.init(iArr1, -24955);

        f += i5;
        d = i5;
        i5 += (int) -1.805F;
        for (i6 = 4; i6 < 339; i6++) {
            switch ((i6 % 10) + 70) {
                case 70:
                    for (f1 = 1; f1 < 5; f1++) {
                        Test0350.bFld = Test0350.bFld;
                        i5 += (int) (f1 + i6);
                        for (i9 = 1; i9 < 2; i9++) {
                            Test0350.dArrFld[(i9 >>> 1) % N] = i5;
                            Test0350.bFld = false;
                            i7 *= (int) f1;
                            d *= i5;
                            i8 += i9;
                        }
                        try {
                            i5 = (27370 % i8);
                            i8 = (59568 % i9);
                            i10 = (i8 % -61109);
                        } catch (ArithmeticException a_e) {
                        }
                    }
                    break;
                case 71:
                    iArr1[i6] -= i8;
                case 72:
                    i7 = 0;
                    break;
                case 73:
                    i8 = (int) Test0350.instanceCount;
                    break;
                case 74:
                    i5 += (16253 + (i6 * i6));
                    break;
                case 75:
                    iArr1[i6 + 1] = (int) d;
                    break;
                case 76:
                    if (true) continue;
                    break;
                case 77:
                    s *= (short) 82L;
                    break;
                case 78:
                    i5 = i6;
                    break;
                case 79:
                    i7 *= -56926;
                    break;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + Double.doubleToLongBits(d) + i6 + i7 + Float.floatToIntBits(f1)
                + i8 + i9 + i10 + s + FuzzerUtils.checkSum(iArr1);
        iMeth2_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth1(int i2) {

        int i3 = 30652;
        int i4 = 2;
        int[] iArr = new int[N];
        short s1 = 3914;
        float f2 = -2.629F;
        boolean[][] bArr = new boolean[N][N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(bArr, false);

        i3 = 1;
        while (++i3 < 246) {
            byte by = -47;
            by = (byte) (Test0350.instanceCount + (by - (i2 <<= (int) Test0350.instanceCount)));
            i2 -= (int) Float.intBitsToFloat(iArr[i3 - 1]);
            i4 = 1;
            do {
                i2 += i2;
                if (Test0350.bFld = (bArr[i4][i4] = Test0350.bFld)) break;
                i2 = (-iMeth2());
                iArr[i4 - 1] = (int) Test0350.instanceCount;
                i2 = -103;
                s1 = (short) f2;
                i2 = (int) Test0350.instanceCount;
                Test0350.instanceCount |= Test0350.instanceCount;
                try {
                    i2 = (i3 % i3);
                    i2 = (i2 / i2);
                    i2 = (i4 % -24792);
                } catch (ArithmeticException a_e) {
                }
                iArr[i3] -= s1;
            } while (++i4 < 7);
        }
        i2 >>>= i2;
        long meth_res = i2 + i3 + i4 + s1 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr) +
                FuzzerUtils.checkSum(bArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i, int i1) {

        int i11 = 175, i12 = 209, i13 = 2, i14 = 13, i15 = 39367;
        byte[] byArr = new byte[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(byArr, (byte) -74);
        FuzzerUtils.init(lArr, 37499L);

        Test0350.instanceCount = i;
        iMeth1(i1);
        Test0350.bFld = true;
        i1 /= (int) (i11 | 1);
        byArr[(i1 >>> 1) % N] += (byte) Test0350.fFld;
        i11 <<= (int) Test0350.instanceCount;
        for (i12 = 14; i12 < 359; i12 += 2) {
            i1 += i13;
            for (i14 = 1; i14 < 9; i14++) {
                i13 -= (int) Test0350.instanceCount;
            }
            lArr[i12] = i11;
            i15 *= 14447;
            i15 = i15;
            i1 = (int) 7120639094704786293L;
            i13 += (((i12 * i14) + i13) - Test0350.fFld);
        }
        long meth_res = i + i1 + i11 + i12 + i13 + i14 + i15 + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0350 _instance = new Test0350();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d1 = 2.69395;
        int i16 = -44990, i17 = 65201, i18 = -127, i19 = 10, i20 = -24273, i21 = 2088, i22 = 11, i23 = 990, i24 = -55230, i25 = 27;
        long l = 3387754806L;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, 92L);

        Test0350.instanceCount = iMeth(13, iFld);
        for (d1 = 9; d1 < 240; ++d1) {
            Test0350.iArrFld[(238 >>> 1) % N] = iFld;
            for (i17 = 5; i17 < 109; i17++) {
                i18 = i18;
                lArr1[i17 - 1] = i17;
                Test0350.bArrFld = Test0350.bArrFld;
                Test0350.instanceCount -= Test0350.byFld;
            }
            switch ((((112 >>> 1) % 8) * 5) + 39) {
                case 40:
                    for (i19 = 5; 109 > i19; i19++) {
                        Test0350.instanceCount <<= 11L;
                    }
                    break;
                case 49:
                    Test0350.iArrFld[(int) (d1 - 1)] = (int) Test0350.instanceCount;
                    Test0350.dFld -= Test0350.fFld;
                    for (i21 = 6; 109 > i21; i21++) {
                        for (i23 = 1; i23 < 2; ++i23) {
                            i20 += i23;
                            Test0350.dFld = Test0350.sFld;
                            switch (((56846 >>> 1) % 4) + 95) {
                                case 95:
                                    i18 = -54;
                                    Test0350.sFld -= (short) i19;
                                    if (false) {
                                        Test0350.dFld += Test0350.dFld;
                                        switch ((int) ((d1 % 7) + 28)) {
                                            case 28:
                                                Test0350.instanceCount += Test0350.instanceCount;
                                                i16 *= i24;
                                                lArr1[i21 + 1] += Test0350.instanceCount;
                                            case 29:
                                                i22 -= (int) -338885626L;
                                                Test0350.instanceCount += (((i23 * i18) + i17) - Test0350.fFld);
                                                Test0350.iArrFld[i23] = i17;
                                                break;
                                            case 30:
                                                iFld = (int) Test0350.instanceCount;
                                            case 31:
                                                iFld1 += (i23 ^ iFld1);
                                                break;
                                            case 32:
                                                lArr1[i23 - 1] >>= i22;
                                                break;
                                            case 33:
                                                i22 += (i23 - Test0350.fFld);
                                                break;
                                            case 34:
                                                i24 -= (int) Test0350.dFld;
                                                break;
                                            default:
                                                if (true) break;
                                        }
                                    } else {
                                        iFld1 -= i18;
                                    }
                                    break;
                                case 96:
                                    Test0350.instanceCount -= i17;
                                    break;
                                case 97:
                                    l += Test0350.sFld;
                                case 98:
                                    iFld1 %= (int) (iFld | 1);
                                    break;
                            }
                        }
                    }
                    break;
                case 60:
                    Test0350.instanceCount = i25;
                    break;
                case 51:
                    Test0350.instanceCount &= iFld1;
                    break;
                case 75:
                    Test0350.instanceCount = i21;
                    break;
                case 52:
                    Test0350.iArrFld[(int) (d1)] = -91;
                case 41:
                    i25 >>= (int) l;
                    break;
                case 64:
                    Test0350.dFld = Test0350.instanceCount;
                    break;
                default:
                    Test0350.iArrFld[(int) (d1 - 1)] += -11;
            }
        }

        FuzzerUtils.out.println("d1 i16 i17 = " + Double.doubleToLongBits(d1) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 l i25 = " + i24 + "," + l + "," + i25);
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0350.instanceCount Test0350.bFld Test0350.fFld = " + Test0350.instanceCount + "," + (Test0350.bFld ? 1
                : 0) + "," + Float.floatToIntBits(Test0350.fFld));
        FuzzerUtils.out.println("iFld Test0350.byFld Test0350.dFld = " + iFld + "," + Test0350.byFld + "," +
                Double.doubleToLongBits(Test0350.dFld));
        FuzzerUtils.out.println("Test0350.sFld iFld1 Test0350.dArrFld = " + Test0350.sFld + "," + iFld1 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0350.dArrFld)));
        FuzzerUtils.out.println("Test0350.iArrFld Test0350.bArrFld = " + FuzzerUtils.checkSum(Test0350.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0350.bArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
