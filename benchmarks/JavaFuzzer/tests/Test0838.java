// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test0838 {

    public static final int N = 400;

    public static long instanceCount = -949579354120479681L;
    public static byte byFld = 108;
    public static short sFld = -18375;
    public static int iFld = -5084;
    public static double dFld = 0.128005;
    public static int[] iArrFld = new int[N];
    public static byte[] byArrFld = new byte[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0838.iArrFld, 182);
        FuzzerUtils.init(Test0838.byArrFld, (byte) 24);
    }

    public static void vMeth1(int i3) {

        double d = 80.100060;
        int i4 = -15161, i5 = 18822, i6 = -145, i7 = -50510, i8 = 7, i9 = -142, i10 = -25471;

        d = i3;
        for (i4 = 23; i4 < 389; ++i4) {
            byte by = 120;
            i6 = 5;
            do {
                Test0838.iArrFld[i4 - 1] = i4;
            } while (--i6 > 0);
            i3 *= by;
            for (i7 = 5; i7 > 1; --i7) {
                Test0838.byFld += (byte) (((i7 * i6) + Test0838.sFld) - Test0838.instanceCount);
                i8 ^= (int) Test0838.instanceCount;
            }
            i9 = 1;
            while (++i9 < 5) {
                i10 = (int) d;
                i3 = i5;
                i3 += (((i9 * Test0838.instanceCount) + i7) - Test0838.sFld);
                i3 += -84;
                i3 += i9;
            }
            i3 = i6;
        }
        vMeth1_check_sum += i3 + Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + i10;
    }

    public static int iMeth(int i1, int i2, float f1) {

        int i11 = 23733, i12 = 47271, i13 = 14, i14 = 12, i15 = -10, i16 = -27438, i17 = 7, i18 = 8, i19 = -52;

        switch (((i1 >>> 1) % 3) + 47) {
            case 47:
                i1 *= (int) Test0838.instanceCount;
                break;
            case 48:
                i1 += i2;
                vMeth1(i2);
                for (i11 = 14; i11 < 275; i11++) {
                    Test0838.instanceCount <<= Test0838.instanceCount;
                }
                break;
            case 49:
                for (i13 = 3; i13 < 301; ++i13) {
                    i2 += 172;
                    i2 += i11;
                    Test0838.instanceCount -= i13;
                }
                Test0838.iArrFld[(i12 >>> 1) % N] += (int) Test0838.instanceCount;
                for (i15 = 7; 378 > i15; i15++) {
                    for (i17 = i15; i17 < 5; ++i17) {
                        f1 += -56;
                        i18 >>= i19;
                    }
                }
                break;
            default:
                Test0838.sFld -= (short) i15;
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i, float f) {

        boolean b = true, b1 = false;
        int i20 = 23109, i21 = -41516, i22 = -3, i23 = 6, i24 = -12, i25 = -54901;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 2.493F);

        try {
            iMeth(i, i, 104.198F);
            Test0838.instanceCount = i;
            i += Test0838.byFld;
            b = b1;
            for (i20 = 1; i20 < 226; ++i20) {
                for (i22 = i20; i22 < (7 + 400); ++i22) {
                    f = -25852;
                    i23 = i20;
                    switch ((i20 % 10) + 98) {
                        case 98:
                            for (i24 = 1; i24 < (1 + 400); ++i24) {
                                i25 += (i24 * i24);
                                fArr[i24] = Test0838.byFld;
                                i += (i24 + Test0838.instanceCount);
                                Test0838.instanceCount = i25;
                            }
                        case 99:
                            i23 = i24;
                            break;
                        case 100:
                            Test0838.iArrFld[i22 + 1] |= i25;
                        case 101:
                            i25 = (int) Test0838.instanceCount;
                            break;
                        case 102:
                            i25 += (i22 + i23);
                            break;
                        case 103:
                            i23 += (((i22 * i21) + i24) - i);
                        case 104:
                            if (i20 != 0) {
                                vMeth_check_sum += i + Float.floatToIntBits(f) + (b ? 1 : 0) + (b1 ? 1 : 0) + i20 + i21 +
                                        i22 + i23 + i24 + i25 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                                return;
                            }
                            break;
                        case 105:
                            Test0838.iFld += i21;
                            break;
                        case 106:
                            Test0838.iFld += -86;
                            break;
                        case 107:
                            i25 += i22;
                            break;
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException exc1) {
            Test0838.instanceCount += (long) Test0838.dFld;
        } finally {
            i21 = i21;
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + (b ? 1 : 0) + (b1 ? 1 : 0) + i20 + i21 + i22 + i23 + i24 + i25
                + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void main(String[] strArr) {

        try {
            Test0838 _instance = new Test0838();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d1 = 0.32779;
        int i26 = 38778, i27 = -60953, i28 = 239, i29 = 74;
        float f2 = 2.783F;
        boolean b2 = false;

        vMeth(Test0838.iFld, 1.496F);
        for (d1 = 4; 209 > d1; d1++) {
            i27 = 1;
            while (++i27 < 122) {
                switch ((i27 % 5) + 13) {
                    case 13:
                        for (i28 = 1; i28 > 1; --i28) {
                            Test0838.iFld = i26;
                            Test0838.byFld += (byte) (-33216 + (i28 * i28));
                            Test0838.iFld /= (int) (Test0838.byFld | 1);
                            Test0838.byFld %= (byte) ((long) (f2) | 1);
                            Test0838.iFld >>= (int) Test0838.instanceCount;
                            Test0838.iArrFld[(int) (d1)] = i26;
                            switch ((i27 % 2) + 91) {
                                case 91:
                                    Test0838.iFld -= i27;
                                case 92:
                                    switch ((((i28 >>> 1) % 4) * 5) + 106) {
                                        case 119:
                                        case 115:
                                        case 116:
                                            b2 = b2;
                                            i29 = 8;
                                            i26 = (int) Test0838.instanceCount;
                                            break;
                                        case 109:
                                            i29 = Test0838.iFld;
                                            switch ((i28 % 9) + 72) {
                                                case 72:
                                                    b2 = b2;
                                                    Test0838.iArrFld[i28 + 1] *= i26;
                                                case 73:
                                                    Test0838.sFld >>= (short) 62382;
                                                    Test0838.dFld += Test0838.instanceCount;
                                                    Test0838.sFld |= (short) i28;
                                                case 74:
                                                    try {
                                                        i26 = (-19571 % Test0838.iFld);
                                                        Test0838.iArrFld[i27] = (i28 / Test0838.iFld);
                                                        Test0838.iFld = (i29 % -218);
                                                    } catch (ArithmeticException a_e) {
                                                    }
                                                    b2 = b2;
                                                    i29 = i26;
                                                    i29 -= (int) Test0838.instanceCount;
                                                case 75:
                                                    f2 += i28;
                                                    Test0838.instanceCount += (i28 - f2);
                                                case 76:
                                                    Test0838.instanceCount = i27;
                                                    break;
                                                case 77:
                                                    Test0838.byArrFld[(int) (d1 - 1)] += (byte) Test0838.sFld;
                                                    break;
                                                case 78:
                                                    f2 += i28;
                                                    break;
                                                case 79:
                                                    f2 += i28;
                                                    break;
                                                case 80:
                                                    Test0838.dFld += -3;
                                                    break;
                                            }
                                        default:
                                            b2 = true;
                                    }
                                    break;
                            }
                        }
                        break;
                    case 14:
                        i26 += (i27 * i27);
                        break;
                    case 15:
                        try {
                            i26 = (i29 % i29);
                            Test0838.iFld = (i27 / 7370);
                            Test0838.iFld = (i28 % Test0838.iArrFld[(int) (d1 - 1)]);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 16:
                        Test0838.iFld *= 4144;
                        break;
                    case 17:
                        i29 = i27;
                        break;
                }
            }
        }

        FuzzerUtils.out.println("d1 i26 i27 = " + Double.doubleToLongBits(d1) + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 f2 = " + i28 + "," + i29 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("b2 = " + (b2 ? 1 : 0));

        FuzzerUtils.out.println("Test0838.instanceCount Test0838.byFld Test0838.sFld = " + Test0838.instanceCount + "," + Test0838.byFld +
                "," + Test0838.sFld);
        FuzzerUtils.out.println("Test0838.iFld Test0838.dFld Test0838.iArrFld = " + Test0838.iFld + "," +
                Double.doubleToLongBits(Test0838.dFld) + "," + FuzzerUtils.checkSum(Test0838.iArrFld));
        FuzzerUtils.out.println("Test0838.byArrFld = " + FuzzerUtils.checkSum(Test0838.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
