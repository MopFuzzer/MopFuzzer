// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:18 2023
public class Test0997 {

    public static final int N = 400;

    public static volatile long instanceCount = -1328L;
    public static boolean bFld = false;
    public static int[] iArrFld = new int[N];
    public static boolean[] bArrFld = new boolean[N];
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0997.iArrFld, -168);
        FuzzerUtils.init(Test0997.bArrFld, true);
    }

    public float fFld = -19.488F;
    public volatile double[] dArrFld = new double[N];

    public static void vSmallMeth(int i, int i1) {


        Test0997.iArrFld[(i >>> 1) % N] += i;
        vSmallMeth_check_sum += i + i1;
    }

    public static int iMeth2(int i9) {

        byte by = 81;
        int i10 = -60432, i11 = 47430, i12 = 11, i13 = -23806;
        float f1 = 93.711F;
        float[] fArr = new float[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(fArr, 0.356F);
        FuzzerUtils.init(lArr, -56911L);

        by = (byte) Test0997.instanceCount;
        Test0997.iArrFld[(i9 >>> 1) % N] >>= i9;
        for (i10 = 1; i10 < 204; ++i10) {
            fArr[i10] -= i9;
            i9 += (int) f1;
            lArr[i10 + 1] *= i11;
            lArr[i10] = by;
            i9 = i9;
            for (i12 = i10; 8 > i12; ++i12) {
                i11 ^= i13;
                i13 -= (int) f1;
                i11 += (i12 | i9);
                i11 += (int) Test0997.instanceCount;
                i9 += (int) Test0997.instanceCount;
                i13 |= i10;
            }
        }
        long meth_res = i9 + by + i10 + i11 + Float.floatToIntBits(f1) + i12 + i13 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth2_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth1() {

        int i6 = 10, i7 = 36, i8 = -35, i14 = -9, i15 = 38473;
        double d1 = 65.38153;
        float f2 = -68.630F;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -167L);

        for (i6 = 6; i6 < 139; i6++) {
            i8 = 1;
            do {
                i7 = (int) (iMeth2(i7) - 1.402F);
                d1 /= (i7 | 1);
                f2 -= f2;
                Test0997.instanceCount += i8;
                switch ((i8 % 7) + 34) {
                    case 34:
                        i14 = 1;
                        while (++i14 < 1) {
                            i7 <<= i8;
                            Test0997.instanceCount += i8;
                            Test0997.bFld = Test0997.bFld;
                            Test0997.instanceCount *= Test0997.instanceCount;
                            Test0997.instanceCount += (((i14 * i14) + i14) - i7);
                            d1 -= i7;
                            i15 += (((i14 * i6) + i7) - i7);
                        }
                    case 35:
                        f2 = i15;
                    case 36:
                        i7 += (245 + (i8 * i8));
                        break;
                    case 37:
                        Test0997.instanceCount = i14;
                        break;
                    case 38:
                        i15 ^= i7;
                        break;
                    case 39:
                        lArr1[i8 - 1] |= i14;
                        break;
                    case 40:
                        lArr1[i6] = i14;
                        break;
                }
            } while (++i8 < 12);
        }
        long meth_res = i6 + i7 + i8 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + i14 + i15 +
                FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0997 _instance = new Test0997();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public int iMeth(double d) {

        int i2 = -157, i3 = 8, i4 = 14245, i5 = 61;
        float f = -23.846F;
        byte by1 = 79;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -70.7766);

        for (i2 = 12; 200 > i2; ++i2) {
            switch (((Test0997.iArrFld[i2] >>> 1) % 3) + 15) {
                case 15:
                    i4 = 1;
                    do {
                        i3 = (int) (((Test0997.instanceCount * i3) + (-11631 + (12 - (i2 - i2)))) * (i3++));
                        Test0997.iArrFld[(i4 >>> 1) % N] += (int) Test0997.instanceCount;
                        for (f = 1; 1 > f; ++f) {
                            i5 >>= (-(iMeth1() - i5));
                            try {
                                Test0997.iArrFld[i4 + 1] = (Test0997.iArrFld[i4 + 1] % -27411);
                                i5 = (168 / i2);
                                i5 = (253375804 / i5);
                            } catch (ArithmeticException a_e) {
                            }
                            i3 += (int) ((long) f ^ i5);
                            Test0997.instanceCount = i5;
                            i3 -= (int) 234L;
                            dArr[(int) (f)] = Test0997.instanceCount;
                        }
                        fFld -= f;
                        if (i4 != 0) {
                        }
                        Test0997.bFld = Test0997.bFld;
                    } while (++i4 < 8);
                    break;
                case 16:
                    by1 >>= (byte) i2;
                    break;
                case 17:
                    i5 = -11;
                default:
                    i5 >>= i4;
            }
        }
        long meth_res = Double.doubleToLongBits(d) + i2 + i3 + i4 + Float.floatToIntBits(f) + i5 + by1 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {

        double d2 = 0.123626;
        int i16 = 10, i18 = -28900, i19 = 3, i20 = -81;
        long l = 62800L;
        long[] lArr2 = new long[N];
        byte by2 = -113;

        FuzzerUtils.init(lArr2, 12L);

        for (int smallinvoc = 0; smallinvoc < 635; smallinvoc++) vSmallMeth(iMeth(d2), i16);
        dArrFld = dArrFld;
        for (int i17 : Test0997.iArrFld) {
            for (l = 1; l < 63; ++l) {
                short s = -1172;
                fFld += (((l * i16) + i17) - s);
                by2 = (byte) i18;
                Test0997.instanceCount += Test0997.instanceCount;
                i19 = 1;
                while (++i19 < 2) {
                    if (Test0997.bFld) break;
                    i18 >>= i16;
                    i20 += (i19 - fFld);
                    switch ((((i19 >>> 1) % 9) * 5) + 46) {
                        case 89:
                            i20 += (i19 * i19);
                            break;
                        case 84:
                            Test0997.instanceCount = -40490;
                            i16 += i19;
                            Test0997.instanceCount -= Test0997.instanceCount;
                            break;
                        case 51:
                        case 61:
                            dArrFld[(int) (l)] = -238;
                            i20 += i19;
                            Test0997.iArrFld[i19] -= i20;
                            break;
                        case 64:
                            i16 = i18;
                            switch ((i19 % 2) + 72) {
                                case 72:
                                    Test0997.instanceCount += (i19 - i18);
                                    i20 = i19;
                                    i18 += (i19 - i16);
                                    break;
                                case 73:
                                    i16 |= i18;
                                    Test0997.bArrFld[i19] = Test0997.bFld;
                                    Test0997.instanceCount = i20;
                                    break;
                                default:
                                    Test0997.iArrFld[i19] -= i17;
                                    Test0997.iArrFld = Test0997.iArrFld;
                                    i18 = (int) Test0997.instanceCount;
                            }
                            break;
                        case 56:
                            i16 += (int) (-4L + (i19 * i19));
                        case 52:
                            i20 = (int) l;
                            break;
                        case 88:
                            lArr2[i19 - 1] <<= i18;
                            break;
                        case 49:
                            if (Test0997.bFld) continue;
                            break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("d2 i16 l = " + Double.doubleToLongBits(d2) + "," + i16 + "," + l);
        FuzzerUtils.out.println("i18 by2 i19 = " + i18 + "," + by2 + "," + i19);
        FuzzerUtils.out.println("i20 lArr2 = " + i20 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0997.instanceCount Test0997.bFld fFld = " + Test0997.instanceCount + "," + (Test0997.bFld ? 1 : 0)
                + "," + Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0997.iArrFld dArrFld Test0997.bArrFld = " + FuzzerUtils.checkSum(Test0997.iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," + FuzzerUtils.checkSum(Test0997.bArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
