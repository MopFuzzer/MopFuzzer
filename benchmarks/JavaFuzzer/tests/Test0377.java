// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:02 2023
public class Test0377 {

    public static final int N = 400;

    public static long instanceCount = 75L;
    public static float fFld = -2.369F;
    public static volatile double dFld = 1.25786;
    public static long lFld = -681937428L;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public volatile short sFld = 16321;

    public static int iMeth(int i3, int i4, int i5) {

        int i6 = -10;
        int i7 = 40113;
        int i8 = 150;
        int i9 = 174;
        int i10 = 0;
        int i11 = -9;
        int[] iArr2 = new int[N];
        double d = 2.81200;
        float f = 1.867F;

        FuzzerUtils.init(iArr2, 124);

        iArr2[(i5 >>> 1) % N] -= (int) -7586164625211440561L;
        Test0377.dFld += Test0377.dFld;
        i5 += i5;
        for (i6 = 1; 125 > i6; ++i6) {
            d = 1;
            while (++d < 13) {
                i7 += (int) (d * d);
                for (i8 = 1; i8 < 1; i8++) {
                    Test0377.instanceCount = 13;
                    iArr2[i8 - 1] = (int) -7417745763033924847L;
                    f += -170;
                }
                iArr2[i6] = 32472;
                i5 += (int) d;
                for (i10 = 1; i10 > 1; --i10) {
                    f *= (float) 90.10111;
                }
                i5 += (int) Test0377.lFld;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d) + i8 + i9 + Float.floatToIntBits(f) + i10 +
                i11 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {

        int i12 = -11216, i13 = -64149, i14 = 122, i15 = -46432, i16 = -7, i17 = 14, i18 = -9;
        boolean b = true, b1 = true;
        short s = -13804;

        iMeth(46961, i12, 9);
        for (i13 = 10; i13 < 360; ++i13) {
            if (b) {
                i14 += (((i13 * i13) + Test0377.fFld) - i12);
                for (i15 = 1; i15 < 5; i15++) {
                    for (i17 = 1; i17 < 2; i17++) {
                        Test0377.fFld = 241;
                        i16 -= i12;
                        i12 = i14;
                        if (b) {
                            i16 = i13;
                            i16 <<= i16;
                        } else if (b) {
                            i14 |= i13;
                        }
                        Test0377.dFld = 1;
                        i12 += s;
                    }
                }
                vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + s + (b1 ? 1 : 0);
                return;
            } else if (b1) {
                i14 = i12;
            } else {
                i12 = i16;
            }
        }
        vMeth1_check_sum += i12 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + s + (b1 ? 1 : 0);
    }

    public static void vMeth(long l, int i2) {

        float f1 = 62.137F;
        long l1 = 151L;
        long[] lArr = new long[N];
        int i19 = -138;
        int i20 = 3;
        int i21 = 160;
        int[] iArr1 = new int[N];
        short s1 = -29238;

        FuzzerUtils.init(iArr1, 46557);
        FuzzerUtils.init(lArr, -1063343361212938922L);

        switch (((i2 >>> 1) % 2) + 99) {
            case 99:
                Test0377.instanceCount -= (i2 - ((i2 + Test0377.instanceCount) + (i2 * i2)));
                iArr1[(i2 >>> 1) % N] += (int) (((i2 - 14) - (i2 + i2)) + Math.abs(Math.abs(Test0377.fFld)));
            case 100:
                vMeth1();
                f1 = 1;
                do {
                    i2 = (int) l1;
                    iArr1[(int) (f1)] >>= i2;
                    i19 = 1;
                    do {
                        for (i20 = 1; i20 < 1; ++i20) {
                            i2 >>>= i20;
                            lArr = lArr;
                        }
                        iArr1[(int) (f1)] += (int) l1;
                        i2 >>>= s1;
                        i2 += i19;
                        Test0377.instanceCount -= l1;
                    } while (++i19 < 5);
                } while (++f1 < 351);
                break;
        }
        vMeth_check_sum += l + i2 + Float.floatToIntBits(f1) + l1 + i19 + i20 + i21 + s1 + FuzzerUtils.checkSum(iArr1)
                + FuzzerUtils.checkSum(lArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0377 _instance = new Test0377();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 19184;
        int i1 = -22938;
        int i22 = 1;
        int i23 = 110;
        int i24 = 41232;
        int i25 = 5;
        int i26 = 35847;
        int i27 = 52740;
        int i28 = 12;
        int i29 = -122;
        int[] iArr = new
                int[N];
        byte by = 49;
        boolean b3 = true;
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, 29164);
        FuzzerUtils.init(fArr, 2.954F);

        i = 1;
        do {
            iArr[i + 1] -= i;
        } while (++i < 208);
        i1 = sFld;
        vMeth(5L, 224);
        for (i22 = 14; i22 < 313; ++i22) {
            i23 = i1;
            Test0377.lFld -= i24;
            iArr[i22] += (int) Test0377.lFld;
            i23 += (i22 - Test0377.lFld);
            i23 = (int) 2995097612183889335L;
            i1 ^= i;
        }
        i23 -= (int) 53.253F;
        i25 = 1;
        do {
            for (i26 = 4; i26 < 84; ++i26) {
                i1 |= i27;
                try {
                    iArr[(i >>> 1) % N] = (i27 % 34610);
                    iArr[i26 + 1] = (-142 / i1);
                    i27 = (iArr[i26] % -46254);
                } catch (ArithmeticException a_e) {
                }
                Test0377.fFld *= i25;
                Test0377.lFld = by;
                iArr[i25] *= i24;
                i1 += (i26 - i25);
                switch (((i26 % 5) * 5) + 50) {
                    case 63:
                        if (b3) {
                            for (i28 = 1; i28 < 2; i28++) {
                                boolean b2 = false;
                                fArr[i28] += i23;
                                iArr[i26 + 1] = i23;
                                switch (((i28 % 8) * 5) + 105) {
                                    case 131:
                                        Test0377.fFld += i28;
                                    case 127:
                                        Test0377.lFld -= Test0377.lFld;
                                        break;
                                    case 141:
                                        try {
                                            i24 = (i26 / i28);
                                            iArr[i26] = (i23 / -45955);
                                            iArr[i28] = (i23 / -137);
                                        } catch (ArithmeticException a_e) {
                                        }
                                        i24 = i29;
                                        break;
                                    case 113:
                                        sFld += (short) (i28 * i28);
                                        break;
                                    case 106:
                                        i1 += (((i28 * Test0377.instanceCount) + i28) - Test0377.instanceCount);
                                        break;
                                    case 119:
                                        i29 -= (int) Test0377.fFld;
                                        break;
                                    case 135:
                                        if (b2) continue;
                                        break;
                                    case 108:
                                        if (b2) break;
                                }
                            }
                        } else if (false) {
                            Test0377.dFld = i;
                        } else {
                            Test0377.dFld -= 24465;
                        }
                        break;
                    case 73:
                        Test0377.lFld = 216;
                        break;
                    case 52:
                        if (b3) continue;
                    case 51:
                        Test0377.fFld = i27;
                        break;
                    case 57:
                        i1 += (i26 - i28);
                        break;
                    default:
                        i23 <<= sFld;
                }
            }
        } while (++i25 < 299);

        FuzzerUtils.out.println("i i1 i22 = " + i + "," + i1 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 by = " + i26 + "," + i27 + "," + by);
        FuzzerUtils.out.println("i28 i29 b3 = " + i28 + "," + i29 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("iArr fArr = " + FuzzerUtils.checkSum(iArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0377.instanceCount sFld Test0377.fFld = " + Test0377.instanceCount + "," + sFld + "," +
                Float.floatToIntBits(Test0377.fFld));
        FuzzerUtils.out.println("Test0377.dFld Test0377.lFld = " + Double.doubleToLongBits(Test0377.dFld) + "," + Test0377.lFld);

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
