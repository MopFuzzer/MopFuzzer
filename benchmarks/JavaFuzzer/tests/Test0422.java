// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test0422 {

    public static final int N = 400;

    public static long instanceCount = -5286143471038068805L;
    public static short sFld = -21922;
    public static float fFld = -2.205F;
    public static int[] iArrFld = new int[N];
    public static long byMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0422.iArrFld, -13);
    }

    public static void vMeth(double d, float f1, int i12) {


        i12 = i12;
        f1 = i12;
        d = Test0422.instanceCount;
        vMeth_check_sum += Double.doubleToLongBits(d) + Float.floatToIntBits(f1) + i12;
    }

    public static int iMeth(int i11) {

        double d1 = -2.54248;
        float f2 = -1.33F;
        long l = -860664483L;
        int i13 = -77;
        int i14 = -2110;
        int i15 = -7;
        int i16 = 12;
        int i17 = -129;
        int i18 = 40698;
        int i19 = 131;
        int[] iArr1 = new int[N];

        FuzzerUtils.init(iArr1, 6);

        iArr1[(i11 >>> 1) % N] = (int) ((--i11) - -1.103922);
        iArr1[(225 >>> 1) % N] -= (i11++);
        vMeth(d1, f2, i11);
        l = 224;
        while ((l -= 3) > 0) {
            for (i13 = 1; i13 < 21; ++i13) {
                i14 = (int) f2;
                for (i15 = 1; 2 > i15; i15++) {
                    i16 = i11;
                    i16 = i15;
                }
                i11 += (i13 + i15);
                d1 = i13;
                for (i17 = 1; i17 < 2; ++i17) {
                    Test0422.instanceCount += (i17 * i17);
                    i14 = i18;
                    try {
                        i14 = (i18 / 14);
                        i19 = (i17 / 63638);
                        i18 = (iArr1[(int) (l)] % i13);
                    } catch (ArithmeticException a_e) {
                    }
                }
            }
        }
        long meth_res = i11 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + l + i13 + i14 + i15 + i16 + i17
                + i18 + i19 + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static byte byMeth(int i3, int i4, float f) {

        int i5 = 169, i6 = 110, i7 = -185, i8 = 0, i9 = 2, i10 = 13, i20 = 28249, i21 = -5;
        byte by = 124;
        boolean b = true;
        boolean[] bArr = new boolean[N];
        double d2 = 81.6896;

        FuzzerUtils.init(bArr, true);

        for (i5 = 186; i5 > 11; i5--) {
            i3 = (-(--i3));
            for (i7 = 9; 1 < i7; i7--) {
                Test0422.instanceCount += (((i7 * i8) + i4) - i7);
                switch ((((((int) (f + i8)) >>> 1) % 10) * 5) + 29) {
                    case 55:
                        by += (byte) (i7 * i7);
                        if (false) continue;
                        break;
                    case 38:
                        b = bArr[i7 + 1];
                        for (i9 = 1; i9 < 2; i9++) {
                            i10 >>= ((-Math.min(i6, 38662)) - ((i5 + i5) - iMeth(-11204)));
                        }
                        Test0422.instanceCount += i7;
                        for (i20 = 1; i20 < 2; i20++) {
                            Test0422.instanceCount = (long) f;
                            Test0422.instanceCount = i20;
                            by *= (byte) d2;
                        }
                        break;
                    case 50:
                        i10 *= Test0422.sFld;
                    case 64:
                        i3 -= by;
                    case 69:
                        i8 = (int) Test0422.instanceCount;
                        break;
                    case 45:
                    case 66:
                        Test0422.iArrFld[i7] <<= (int) Test0422.instanceCount;
                        break;
                    case 74:
                        Test0422.iArrFld[i5 + 1] ^= i21;
                        break;
                    case 68:
                        d2 = d2;
                    case 70:
                        if (true) continue;
                        break;
                    default:
                        Test0422.instanceCount -= (long) f;
                }
            }
        }
        long meth_res = i3 + i4 + Float.floatToIntBits(f) + i5 + i6 + i7 + i8 + by + (b ? 1 : 0) + i9 + i10 + i20 + i21
                + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(bArr);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0422 _instance = new Test0422();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 45;
        int i1 = 49854;
        int i2 = -11;
        int i22 = -248;
        int i23 = -4;
        int i24 = 0;
        int i25 = -14942;
        int i26 = -14;
        int i27 = 236;
        int[] iArr = new int[N];
        byte by1 = -109;
        double d3 = 2.5116;
        boolean b1 = true;
        long[] lArr = new long[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, -7);
        FuzzerUtils.init(lArr, -3670L);
        FuzzerUtils.init(fArr, 44.976F);

        for (i = 4; i < 258; i++) {
            switch ((i % 5) + 49) {
                case 49:
                    iArr = (iArr = (iArr = (iArr = iArr)));
                    i2 -= (int) lArr[i - 1];
                    i1 = (byMeth(i, i2, Test0422.fFld) + i2);
                    break;
                case 50:
                    fArr = fArr;
                    break;
                case 51:
                    Test0422.instanceCount = i;
                    by1 |= (byte) Test0422.instanceCount;
                    break;
                case 52:
                    Test0422.instanceCount >>= i2;
                    i2 = (int) Test0422.fFld;
                    i2 >>>= i2;
                case 53:
                    Test0422.instanceCount -= i2;
                    i2 = (int) Test0422.instanceCount;
                    break;
                default:
                    d3 = i;
                    b1 = b1;
            }
        }
        i2 -= (int) d3;
        for (i22 = 14; i22 < 262; i22++) {
            for (i24 = 101; 1 < i24; --i24) {
                for (i26 = 1; i26 < 2; i26++) {
                    switch ((i24 % 9) + 98) {
                        case 98:
                            Test0422.fFld += (((i26 * Test0422.instanceCount) + i26) - Test0422.instanceCount);
                            d3 += d3;
                            b1 = b1;
                            Test0422.fFld = i2;
                            break;
                        case 99:
                            i1 %= (int) (i2 | 1);
                            d3 *= i22;
                            i25 += (((i26 * i1) + i) - i25);
                            break;
                        case 100:
                            if (b1) continue;
                            try {
                                i23 = (i2 % i26);
                                i25 = (i1 % i22);
                                i27 = (i24 / i23);
                            } catch (ArithmeticException a_e) {
                            }
                            Test0422.iArrFld[i22 - 1] = i23;
                        case 101:
                            if (true) continue;
                            break;
                        case 102:
                        case 103:
                            Test0422.instanceCount += i26;
                        case 104:
                            i27 = Test0422.sFld;
                            break;
                        case 105:
                            by1 += (byte) i26;
                        case 106:
                            Test0422.instanceCount >>= i27;
                            break;
                        default:
                            by1 += (byte) i22;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("by1 d3 b1 = " + by1 + "," + Double.doubleToLongBits(d3) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("iArr lArr fArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0422.instanceCount Test0422.sFld Test0422.fFld = " + Test0422.instanceCount + "," + Test0422.sFld +
                "," + Float.floatToIntBits(Test0422.fFld));
        FuzzerUtils.out.println("Test0422.iArrFld = " + FuzzerUtils.checkSum(Test0422.iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  byMeth ->  byMeth mainTest
//DEBUG  iMeth ->  iMeth byMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth byMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
