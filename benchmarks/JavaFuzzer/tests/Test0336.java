// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test0336 {

    public static final int N = 400;

    public static long instanceCount = 4L;
    public static int iFld1 = -2;
    public static short sFld = -3258;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;
    public int iFld = 11412;
    public int iFld2 = 226;
    public boolean bFld = true;
    public float[] fArrFld = new float[N];
    public int[][] iArrFld = new int[N][N];

    public static void vMeth2(int i1) {

        int i2 = -182;
        int i3 = 126;
        int i4 = -10;
        int i5 = 2;
        int i6 = 230;
        int i7 = 5;
        int i8 = 43789;
        int i9 = 152;
        int[] iArr1 = new int[N];
        boolean b = true;
        boolean[] bArr = new boolean[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 163);

        if (b) {
            for (i2 = 7; 143 > i2; i2 += 2) {
                i3 -= i3;
                if (b) continue;
                bArr[i2] = b;
                for (i4 = 1; i4 < 23; ++i4) {
                    i3 += (41601 + (i4 * i4));
                }
                Test0336.iFld1 += (i2 ^ Test0336.iFld1);
                iArr1[i2 + 1] -= (int) Test0336.instanceCount;
                if (i3 != 0) {
                    vMeth2_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 +
                            FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
                    return;
                }
                for (i6 = i2; i6 < 23; ++i6) {
                    for (i8 = 1; i8 < 1; ++i8) {
                        Test0336.instanceCount = i6;
                        Test0336.instanceCount >>>= Test0336.iFld1;
                        Test0336.instanceCount = Test0336.instanceCount;
                    }
                }
            }
        }
        vMeth2_check_sum += i1 + i2 + i3 + (b ? 1 : 0) + i4 + i5 + i6 + i7 + i8 + i9 + FuzzerUtils.checkSum(bArr) +
                FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l1) {

        float f = 33.616F;
        byte by = 98;
        boolean b1 = true;
        boolean[] bArr1 = new boolean[N];
        int i10 = 2;
        int i11 = 95;
        int i12 = 0;
        int[] iArr2 = new int[N];
        double d = -2.120722;

        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr2, 12);

        f += (Test0336.iFld1++);
        Test0336.iFld1 *= (int) (l1 * (++Test0336.iFld1));
        vMeth2(Test0336.iFld1);
        by = (byte) Test0336.iFld1;
        Test0336.instanceCount = -55L;
        l1 = Test0336.iFld1;
        bArr1[(-253 >>> 1) % N] = b1;
        for (i10 = 5; i10 < 280; i10++) {
            Test0336.iFld1 <<= Test0336.iFld1;
        }
        Test0336.instanceCount -= Test0336.instanceCount;
        i12 = 1;
        do {
            iArr2 = iArr2;
            i11 >>>= i10;
            Test0336.instanceCount -= (long) d;
            i11 = i12;
        } while (++i12 < 245);
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + by + (b1 ? 1 : 0) + i10 + i11 + i12 +
                Double.doubleToLongBits(d) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(long l) {

        int i = -64478;
        int i13 = -162;
        int i14 = 59562;
        int[] iArr3 = new int[N];
        float f1 = 33.890F;
        float[] fArr = new float[N];
        boolean b2 = false;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(fArr, 121.126F);
        FuzzerUtils.init(iArr3, -129);

        i = 1;
        while (++i < 372) {
            vMeth1(l);
            Test0336.sFld = (short) Test0336.instanceCount;
            switch (((i % 2) * 5) + 54) {
                case 57:
                case 55:
                    lArr[i + 1] = Test0336.instanceCount;
                    fArr[i] -= l;
                    Test0336.iFld1 -= (int) f1;
                    break;
            }
        }
        for (i13 = 3; i13 < 122; i13++) {
            Test0336.iFld1 = 13;
            Test0336.instanceCount = i14;
            Test0336.iFld1 <<= i14;
            iArr3[i13 + 1] -= i14;
            if (b2) continue;
        }
        vMeth_check_sum += l + i + Float.floatToIntBits(f1) + i13 + i14 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3);
    }

    public static void main(String[] strArr) {

        try {
            Test0336 _instance = new Test0336();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        long l2 = 19L;
        long[] lArr1 = new long[N];
        int i15 = 3;
        int i16 = -27;
        int i17 = -1;
        int i18 = -6;
        int[] iArr = new int[N];
        double d1 = 104.18292, d2 = -2.99466;

        FuzzerUtils.init(iArr, 21106);
        FuzzerUtils.init(lArr1, -123315472L);

        iFld <<= (++iArr[(0 >>> 1) % N]);
        iFld -= (int) (Float.intBitsToFloat(iFld += iFld) - iFld);
        vMeth(Test0336.instanceCount);
        Test0336.instanceCount <<= iFld;
        for (l2 = 2; l2 < 268; ++l2) {
            iFld2 = i15;
            Test0336.instanceCount += l2;
            iArr[(int) (l2 + 1)] += (int) 2.977F;
        }
        for (float f2 : fArrFld) {
            Test0336.sFld = (short) i15;
            iFld *= (int) l2;
        }
        iArr[(i15 >>> 1) % N] = iFld2;
        for (float f3 : fArrFld) {
            i16 = 1;
            while (++i16 < 63) {
                iArr[i16 - 1] = Test0336.iFld1;
                Test0336.iFld1 >>>= i16;
                d1 += -13;
            }
            lArr1[(12 >>> 1) % N] /= 187;
            d2 = 1;
            while (++d2 < 63) {
                iFld <<= iFld;
                Test0336.instanceCount = l2;
                iFld = iFld;
                try {
                    iFld2 = (iArr[(int) (d2 - 1)] % -8803);
                    i15 = (39 / i16);
                    iArr[(int) (d2)] = (i16 / 238);
                } catch (ArithmeticException a_e) {
                }
                switch ((int) ((d2 % 9) + 34)) {
                    case 34:
                        for (i17 = 1; i17 > 1; --i17) {
                            Test0336.instanceCount += i18;
                            if (bFld) {
                                i15 = i16;
                                iArrFld = iArrFld;
                                Test0336.instanceCount += -9831;
                            } else if (false) {
                                Test0336.instanceCount = i16;
                            } else if (bFld) {
                                iFld2 >>= i15;
                            }
                        }
                        break;
                    case 35:
                        f3 = iFld2;
                        break;
                    case 36:
                        f3 += iFld2;
                    case 37:
                        Test0336.iFld1 = i17;
                        break;
                    case 38:
                        Test0336.iFld1 += (int) (d2 + l2);
                        break;
                    case 39:
                        d1 = 221;
                        break;
                    case 40:
                        iFld -= (int) d1;
                        break;
                    case 41:
                        d1 = i17;
                    case 42:
                        iArrFld[(int) (d2 - 1)][(int) (d2)] -= iFld2;
                        break;
                    default:
                        i15 += (int) (d2 * d2);
                }
            }
        }

        FuzzerUtils.out.println("l2 i15 i16 = " + l2 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("d1 d2 i17 = " + Double.doubleToLongBits(d1) + "," + Double.doubleToLongBits(d2) + ","
                + i17);
        FuzzerUtils.out.println("i18 iArr lArr1 = " + i18 + "," + FuzzerUtils.checkSum(iArr) + "," +
                FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0336.instanceCount iFld Test0336.iFld1 = " + Test0336.instanceCount + "," + iFld + "," +
                Test0336.iFld1);
        FuzzerUtils.out.println("Test0336.sFld iFld2 bFld = " + Test0336.sFld + "," + iFld2 + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("fArrFld iArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)) + "," +
                FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
