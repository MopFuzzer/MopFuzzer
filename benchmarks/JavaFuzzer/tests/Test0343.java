// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test0343 {

    public static final int N = 400;

    public static long instanceCount = -1L;
    public static double dFld = -1.41431;
    public static byte byFld = 20;
    public static long sMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public short sFld = 10841;

    public static void vMeth1(double d, int i11, int i12) {

        int i13 = 55;
        int i14 = 131;
        int i15 = -112;
        int[] iArr1 = new int[N];
        float f1 = 121.653F;

        FuzzerUtils.init(iArr1, -17185);

        for (i13 = 6; i13 < 215; i13++) {
            short s = -24922;
            d -= d;
            Test0343.byFld <<= (byte) i13;
            if (true) {
                i15 = 1;
                do {
                    iArr1[i13] = i12;
                    if (i12 != 0) {
                        vMeth1_check_sum += Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 +
                                Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i11 += (i15 * i15);
                    Test0343.instanceCount &= i11;
                    i11 >>= 57227;
                } while (++i15 < 8);
                Test0343.instanceCount = i15;
                Test0343.instanceCount = i12;
            } else {
                i14 += (((i13 * i13) + i12) - i15);
                f1 += i13;
                s -= (short) i11;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 + Float.floatToIntBits(f1) +
                FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, int i3, int i4) {

        int i5 = -181, i6 = 14576, i7 = 143, i8 = 21645, i9 = 28967, i10 = -9, i16 = -43976;
        double d1 = 13.17294;
        float f2 = 0.412F;
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -143L);

        Test0343.dFld /= (((--i3) + ((i2 = i2) + (i4 * Test0343.instanceCount))) | 1);
        i4 = (int) (-8170889446167426676L + Test0343.instanceCount);
        try {
            for (i5 = 9; i5 < 229; i5++) {
                for (i7 = 1; i7 < 7; i7++) {
                    for (i9 = 1; i9 < 2; i9++) {
                        float f = -67.656F;
                        f = (++Test0343.instanceCount);
                    }
                    vMeth1(Test0343.dFld, i5, i6);
                    if (i9 != 0) {
                        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i16 +
                                Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                                FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    switch ((i7 % 3) + 76) {
                        case 76:
                            if (b) {
                                i16 = 1;
                                while (++i16 < 2) {
                                    d1 -= -7929;
                                    i10 += (int) Test0343.dFld;
                                }
                                f2 += i9;
                            } else {
                                i10 += i4;
                            }
                            break;
                        case 77:
                            if (i4 != 0) {
                                vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i16 +
                                        Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + (b ? 1 : 0) +
                                        FuzzerUtils.checkSum(lArr);
                                return;
                            }
                        case 78:
                            lArr[i7] -= i16;
                            break;
                        default:
                            i6 += (i7 * Test0343.byFld);
                    }
                }
            }
        } catch (NegativeArraySizeException exc2) {
            i3 -= i7;
        } catch (ArithmeticException exc3) {
            i6 -= (int) d1;
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i16 + Double.doubleToLongBits(d1) +
                Float.floatToIntBits(f2) + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0343 _instance = new Test0343();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public short sMeth() {

        int i1 = 10;
        int i17 = 1;
        int[] iArr = new int[N];
        double[] dArr = new double[N];

        FuzzerUtils.init(iArr, -16250);
        FuzzerUtils.init(dArr, 0.64585);

        i1 -= 64919;
        iArr[(i1 >>> 1) % N] <<= (i1++);
        vMeth(i1, i1, i1);
        dArr[(i1 >>> 1) % N] -= i1;
        dArr[(-12 >>> 1) % N] = Test0343.instanceCount;
        i17 = 1;
        do {
            i1 += i1;
            Test0343.dFld -= i17;
            i1 *= (int) Test0343.dFld;
        } while (++i17 < 141);
        i1 += (int) Test0343.instanceCount;
        i1 -= -44990;
        iArr[(12 >>> 1) % N] |= i17;
        long meth_res = i1 + i17 + FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public void mainTest(String[] strArr1) {

        long l = -4068192243L;
        int i = -40572;
        int i18 = 164;
        int i19 = -5;
        int i20 = 210;
        int i21 = 241;
        int i22 = 239;
        int i23 = 63622;
        int[] iArr2 = new int[N];

        FuzzerUtils.init(iArr2, 13);

        for (l = 3; l < 392; ++l) {
            Test0343.dFld += ((i + sMeth()) + l);
            for (i18 = 4; i18 < 65; i18++) {
                switch (((4 >>> 1) % 1) + 60) {
                    case 60:
                        for (i20 = 1; 2 > i20; ++i20) {
                            switch (((i20 % 1) * 5) + 11) {
                                case 12:
                                    Test0343.dFld = i19;
                                    try {
                                        i = (i21 / iArr2[i20]);
                                        iArr2[i18] = (9 % i20);
                                        i21 = (20 % i18);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    break;
                            }
                        }
                        i &= -21675;
                        iArr2[i18] = Test0343.byFld;
                        Test0343.instanceCount += i18;
                        break;
                }
                i21 >>= (int) 12503L;
                Test0343.instanceCount = Test0343.instanceCount;
                i += i18;
                i19 += (int) Test0343.instanceCount;
                for (i22 = 1; i22 < 2; i22++) {
                    i21 = i22;
                    Test0343.instanceCount >>= i19;
                }
                sFld += (short) 10;
            }
        }
        i23 += i23;

        FuzzerUtils.out.println("l i i18 = " + l + "," + i + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 iArr2 = " + i22 + "," + i23 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0343.instanceCount Test0343.dFld Test0343.byFld = " + Test0343.instanceCount + "," +
                Double.doubleToLongBits(Test0343.dFld) + "," + Test0343.byFld);
        FuzzerUtils.out.println("sFld = " + sFld);

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  vMeth ->  vMeth sMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
