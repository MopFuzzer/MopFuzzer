// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test0116 {

    public static final int N = 400;

    public static long instanceCount = -166654146L;
    public static volatile double dFld = 107.34180;
    public static byte byFld = 105;
    public static volatile boolean bFld = true;
    public static boolean[] bArrFld = new boolean[N];
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0116.bArrFld, true);
        FuzzerUtils.init(Test0116.iArrFld, 14);
    }

    public volatile int iFld = 13;
    public volatile float fFld = -1.826F;
    public long[] lArrFld = new long[N];
    public byte[] byArrFld = new byte[N];

    public static void vMeth2(boolean b2) {

        int i2 = 10, i3 = 249, i4 = -5, i5 = -14, i6 = -29230, i7 = 176;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -1770108867L);

        Test0116.instanceCount = -12;
        i2 += (int) 46.455F;
        for (i3 = 19; i3 < 345; ++i3) {
            Test0116.iArrFld[i3] += i4;
            i5 = 1;
            do {
                b2 = b2;
                lArr[i3] = i2;
                i2 *= i2;
                if (b2) break;
            } while (++i5 < 5);
            for (i6 = 1; i6 < 5; i6++) {
                try {
                    i7 = (Test0116.iArrFld[i6 - 1] % i6);
                    i2 = (1996270236 / i5);
                    i7 = (Test0116.iArrFld[i6 - 1] / -102445036);
                } catch (ArithmeticException a_e) {
                }
                if (true) break;
                Test0116.iArrFld[i6 - 1] *= i4;
            }
        }
        i4 = i7;
        i2 = i7;
        vMeth2_check_sum += (b2 ? 1 : 0) + i2 + i3 + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(lArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0116 _instance = new Test0116();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth1() {

        float f1 = 5.194F;
        boolean b1 = true;
        int i1 = 4;
        int i8 = -2;
        int i9 = 47098;
        int i10 = 3;
        int[] iArr = new int[N];
        short s = -19835;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -70.118843);
        FuzzerUtils.init(iArr, -23294);

        iFld /= (int) (iFld | 1);
        dArr[(55 >>> 1) % N] -= (((iFld + -7712) * iArr[(iFld >>> 1) % N]) + ((-1 + (-2.908F + (iFld + Test0116.dFld))) -
                Math.abs(iFld)));
        for (int i : iArr) {
            i = (int) (((iFld * -1301) - lArrFld[(5 >>> 1) % N]) - ((iFld = (int) f1) * (i + iFld)));
            b1 = Test0116.bArrFld[(i >>> 1) % N];
            i1 = 4;
            while (--i1 > 0) {
                vMeth2(b1);
                for (i8 = 1; 1 > i8; ++i8) {
                    iFld -= (int) Test0116.instanceCount;
                    iFld += (i8 ^ s);
                    if (b1) continue;
                }
                i10 = 1;
                do {
                    i += -124;
                    Test0116.instanceCount = Test0116.instanceCount;
                    iFld += i10;
                } while (++i10 < 1);
            }
        }
        vMeth1_check_sum += Float.floatToIntBits(f1) + (b1 ? 1 : 0) + i1 + i8 + i9 + s + i10 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr);
    }

    public void vMeth(float f, boolean b) {

        float f2 = -26.570F;
        int i11 = -254, i12 = 13, i13 = -18608, i14 = 9, i15 = -226;
        short s1 = 31564;

        vMeth1();
        Test0116.iArrFld[(iFld >>> 1) % N] += iFld;
        for (f2 = 10; f2 < 350; ++f2) {
            Test0116.iArrFld = Test0116.iArrFld;
            Test0116.instanceCount += -2825510833L;
        }
        i12 = 1;
        do {
            Test0116.dFld = Test0116.dFld;
            for (i13 = i12; i13 < 6; i13++) {
                try {
                    iFld = (i11 / i12);
                    i11 = (-8781 / i14);
                    i11 = (i11 / -2110859569);
                } catch (ArithmeticException a_e) {
                }
                i15 += i13;
                switch ((i13 % 7) + 33) {
                    case 33:
                        s1 = (short) 87;
                        Test0116.instanceCount |= i14;
                        if (iFld != 0) {
                            vMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + Float.floatToIntBits(f2) + i11 + i12
                                    + i13 + i14 + i15 + s1;
                            return;
                        }
                        i14 -= iFld;
                    case 34:
                        f = Test0116.instanceCount;
                        break;
                    case 35:
                        byArrFld[i12 + 1] = (byte) i15;
                    case 36:
                        Test0116.instanceCount &= i15;
                        break;
                    case 37:
                        Test0116.iArrFld[i13 - 1] -= i11;
                        break;
                    case 38:
                        f += (((i13 * i14) + Test0116.instanceCount) - s1);
                        break;
                    case 39:
                        try {
                            Test0116.iArrFld[i12 - 1] = (-136 % Test0116.iArrFld[i12]);
                            Test0116.iArrFld[i12 + 1] = (i11 % -18140);
                            i14 = (i13 % 665160860);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    default:
                        Test0116.dFld *= Test0116.byFld;
                }
            }
        } while (++i12 < 267);
        vMeth_check_sum += Float.floatToIntBits(f) + (b ? 1 : 0) + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 +
                i15 + s1;
    }

    public void mainTest(String[] strArr1) {

        int i16 = 172;
        int i17 = 14;
        int i18 = -5395;
        int i20 = -13;
        int i21 = -24;
        int i22 = 7;
        int[][] iArr1 = new int[N][N];

        FuzzerUtils.init(iArr1, -10);

        vMeth(fFld, Test0116.bFld);
        i16 = 1;
        while (++i16 < 150) {
            Test0116.instanceCount += 14L;
            if (Test0116.bFld) break;
            Test0116.dFld *= Test0116.byFld;
            for (i17 = 6; i17 < 167; ++i17) {
                int i19 = -68;
                fFld = 3;
                Test0116.instanceCount = i16;
                iFld = 208;
                i19 += i18;
                i19 += (((i17 * i19) + fFld) - iFld);
                for (i20 = 1; i20 < 2; i20++) {
                    switch (((i16 % 1) * 5) + 89) {
                        case 93:
                    }
                    i19 += (i20 + i17);
                    iFld <<= -1;
                    Test0116.iArrFld[i20] = i17;
                    Test0116.instanceCount = 7;
                    Test0116.instanceCount *= i18;
                    iArr1 = iArr1;
                    fFld += (62168 + (i20 * i20));
                    i21 = -243;
                    lArrFld[i20 - 1] >>= i17;
                }
                if (Test0116.bFld) {
                    i18 = iFld;
                } else {
                    i22 = 1;
                    do {
                        i19 += i16;
                        if (Test0116.bFld) {
                            i19 += i16;
                            try {
                                iFld = (i18 % i20);
                                i19 = (iArr1[i17][i17 - 1] % i17);
                                iArr1[i17][i17 - 1] = (iFld / Test0116.iArrFld[i16 + 1]);
                            } catch (ArithmeticException a_e) {
                            }
                            byArrFld = byArrFld;
                        } else {
                            i19 *= (int) Test0116.instanceCount;
                        }
                    } while (++i22 < 2);
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("iArr1 = " + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0116.instanceCount iFld Test0116.dFld = " + Test0116.instanceCount + "," + iFld + "," +
                Double.doubleToLongBits(Test0116.dFld));
        FuzzerUtils.out.println("Test0116.byFld fFld Test0116.bFld = " + Test0116.byFld + "," + Float.floatToIntBits(fFld) + "," +
                (Test0116.bFld ? 1 : 0));
        FuzzerUtils.out.println("lArrFld Test0116.bArrFld Test0116.iArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
                FuzzerUtils.checkSum(Test0116.bArrFld) + "," + FuzzerUtils.checkSum(Test0116.iArrFld));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
