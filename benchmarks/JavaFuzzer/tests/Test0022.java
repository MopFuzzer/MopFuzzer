// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test0022 {

    public static final int N = 400;

    public static long instanceCount = 5L;
    public static short sFld = 26271;
    public static volatile float fFld = -1.571F;
    public static int iFld = 10575;
    public static int[] iArrFld = new int[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0022.iArrFld, 21464);
    }

    public byte byFld = 112;

    public static void vMeth1() {

        int i3 = -7, i5 = -137, i6 = 57845, i7 = 14, i8 = -8;
        boolean b = false;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 123.64F);

        Test0022.sFld -= (short) i3;
        Test0022.instanceCount >>>= i3;
        for (float f : fArr) {
            double d = 0.106473;
            int i4 = -173;
            i3 *= (int) d;
            d += i3;
            i4 = (int) Test0022.instanceCount;
            f = i3;
            for (i5 = 1; i5 < 4; ++i5) {
                f = i5;
                if (b) continue;
                i6 -= i3;
                if (b) break;
                for (i7 = 1; i7 < 2; i7++) {
                    Test0022.instanceCount -= i5;
                    Test0022.instanceCount <<= i3;
                }
            }
        }
        vMeth1_check_sum += i3 + i5 + i6 + (b ? 1 : 0) + i7 + i8 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth() {

        int i2 = -31762, i9 = 27213, i10 = -97;
        boolean b1 = true;
        double d1 = -1.58488;

        i2 = 1;
        while ((i2 += 2) < 295) {
            vMeth1();
            for (i9 = 1; i9 < 11; i9++) {
                Test0022.fFld -= 0L;
                if (b1) break;
                i10 += 8;
                switch ((((i10 >>> 1) % 1) * 5) + 31) {
                    case 35:
                        Test0022.iArrFld[i2] += i9;
                        i10 -= (int) Test0022.instanceCount;
                        Test0022.instanceCount = i10;
                        break;
                    default:
                        Test0022.fFld += Test0022.instanceCount;
                }
            }
            if (b1) {
                Test0022.fFld = Test0022.iFld;
                Test0022.instanceCount -= 8;
                d1 = d1;
            } else if (b1) {
                Test0022.instanceCount = -9L;
            } else {
                Test0022.instanceCount -= 37832;
            }
        }
        vMeth_check_sum += i2 + i9 + i10 + (b1 ? 1 : 0) + Double.doubleToLongBits(d1);
    }

    public static int iMeth() {

        int i11 = 11, i12 = 5, i13 = 47387, i14 = -181, i15 = -99, i16 = -60;
        double d2 = -87.9799;
        boolean b2 = true;

        vMeth();
        for (i11 = 4; i11 < 315; i11++) {
            Test0022.iFld += (int) d2;
            switch (((i11 % 6) * 5) + 28) {
                case 57:
                    try {
                        i12 = (i11 / 15627);
                        Test0022.iFld = (i11 % -246);
                        Test0022.iFld = (-1157906030 / Test0022.iFld);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 54:
                    Test0022.iArrFld[i11 + 1] |= Test0022.sFld;
                    for (i13 = 1; i13 < 5; i13++) {
                        Test0022.instanceCount -= i14;
                        i14 += (int) (-52.207F + (i13 * i13));
                        if (b2) break;
                        for (i15 = 1; i15 < 2; ++i15) {
                            if (Test0022.iFld != 0) {
                            }
                            Test0022.instanceCount += (i15 * i15);
                            i12 >>= i15;
                            Test0022.iFld <<= i11;
                        }
                    }
                case 30:
                    i12 >>= i16;
                case 45:
                    Test0022.fFld = i15;
                    break;
                case 58:
                    if (b2) continue;
                case 31:
                    i14 += (-24428 + (i11 * i11));
                    break;
                default:
                    d2 -= 13379L;
            }
        }
        long meth_res = i11 + i12 + Double.doubleToLongBits(d2) + i13 + i14 + (b2 ? 1 : 0) + i15 + i16;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0022 _instance = new Test0022();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 3;
        int i1 = 2;
        int i17 = 3;
        int i18 = -29031;
        int i19 = 13;
        int[] iArr = new int[N];
        boolean b3 = true;
        double d3 = 87.27362;
        double[][] dArr = new double[N][N];
        long[][] lArr = new long[N][N];
        float[] fArr1 = new float[N];

        FuzzerUtils.init(lArr, -4L);
        FuzzerUtils.init(fArr1, 2.304F);
        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(dArr, -119.110770);

        for (i = 1; i < 372; i++) {
            iMeth();
            Test0022.fFld = 33;
            i1 += Test0022.iFld;
            Test0022.instanceCount -= i1;
            i1 <<= Test0022.iFld;
            i17 = 1;
            do {
                switch ((i % 3) + 48) {
                    case 48:
                        i18 = 1;
                        do {
                            lArr[i17 - 1][i17] <<= Test0022.instanceCount;
                            byFld += (byte) i1;
                            Test0022.instanceCount += (i18 | Test0022.iFld);
                            b3 = b3;
                        } while (++i18 < 1);
                        i19 = 1;
                        while (++i19 < 1) {
                            Test0022.instanceCount &= Test0022.instanceCount;
                            fArr1[i + 1] += Test0022.instanceCount;
                            Test0022.fFld += (i19 * Test0022.iFld);
                            Test0022.instanceCount %= ((long) (Test0022.fFld) | 1);
                            Test0022.fFld -= -26945;
                            Test0022.iFld = i19;
                            i1 += (i19 * i19);
                        }
                        i1 >>= i;
                        Test0022.instanceCount = i17;
                        break;
                    case 49:
                        Test0022.iFld += (((i17 * Test0022.fFld) + i17) - i);
                        switch ((((i1 >>> 1) % 10) * 5) + 115) {
                            case 143:
                                Test0022.iFld += (i17 - i1);
                                Test0022.instanceCount += i17;
                                break;
                            case 153:
                                Test0022.fFld += Test0022.instanceCount;
                                try {
                                    i1 = (-22590 / i17);
                                    Test0022.iArrFld[i17 + 1] = (i18 % Test0022.iArrFld[i17]);
                                    i1 = (-512788293 / Test0022.iFld);
                                } catch (ArithmeticException a_e) {
                                }
                                byFld >>>= (byte) -21;
                                break;
                            case 126:
                            case 160:
                                lArr[i - 1][(Test0022.iFld >>> 1) % N] <<= i18;
                                break;
                            case 154:
                                Test0022.iFld = i18;
                                break;
                            case 124:
                                Test0022.instanceCount = i1;
                                break;
                            case 116:
                                iArr[i17 - 1] >>>= i18;
                            case 121:
                                i1 *= (int) Test0022.instanceCount;
                                break;
                            case 139:
                                Test0022.instanceCount *= (long) d3;
                                break;
                            case 158:
                                i1 += (int) Test0022.fFld;
                                break;
                        }
                    case 50:
                        fArr1[i17 + 1] -= i;
                        break;
                    default:
                        dArr[i17 + 1][(i1 >>> 1) % N] = -44L;
                }
            } while (++i17 < 68);
        }

        FuzzerUtils.out.println("i i1 i17 = " + i + "," + i1 + "," + i17);
        FuzzerUtils.out.println("i18 b3 i19 = " + i18 + "," + (b3 ? 1 : 0) + "," + i19);
        FuzzerUtils.out.println("d3 lArr fArr1 = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(lArr) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));
        FuzzerUtils.out.println("iArr dArr = " + FuzzerUtils.checkSum(iArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0022.instanceCount Test0022.sFld Test0022.fFld = " + Test0022.instanceCount + "," + Test0022.sFld +
                "," + Float.floatToIntBits(Test0022.fFld));
        FuzzerUtils.out.println("Test0022.iFld byFld Test0022.iArrFld = " + Test0022.iFld + "," + byFld + "," +
                FuzzerUtils.checkSum(Test0022.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
