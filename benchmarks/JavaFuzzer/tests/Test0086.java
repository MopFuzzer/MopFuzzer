// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test0086 {

    public static final int N = 400;

    public static long instanceCount = 763762366L;
    public static long lFld = 14L;
    public static long[][] lArrFld = new long[N][N];
    public static volatile float[][] fArrFld = new float[N][N];
    public static volatile byte[] byArrFld = new byte[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0086.lArrFld, 239L);
        FuzzerUtils.init(Test0086.fArrFld, -95.573F);
        FuzzerUtils.init(Test0086.byArrFld, (byte) 56);
    }

    public boolean bFld = false;
    public int[] iArrFld = new int[N];

    public static void vMeth1(int i6, byte by, int i7) {

        int i8 = -107;
        int i9 = -40476;
        int i10 = 587;
        int i11 = -370;
        int i12 = -14;
        int i13 = 62693;
        int i14 = -9;
        int[] iArr = new int[N];
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 149L);
        FuzzerUtils.init(iArr, 3);

        for (i8 = 8; 211 > i8; ++i8) {
            for (i10 = i8; i10 < 8; i10++) {
                i9 += i10;
            }
            if (b) break;
        }
        for (long l1 : lArr) {
            i11 = (int) l1;
            Test0086.fArrFld[(-8247 >>> 1) % N][(11 >>> 1) % N] = i7;
            i12 = 1;
            while (++i12 < 4) {
                switch (((i8 >>> 1) % 2) + 116) {
                    case 116:
                        l1 >>= i12;
                        Test0086.instanceCount -= i10;
                        break;
                    case 117:
                }
                for (i13 = 1; i13 < 1; ++i13) {
                    iArr[i13] -= i10;
                    i6 += (int) l1;
                    i14 = (int) 76.26512;
                }
            }
        }
        vMeth1_check_sum += i6 + by + i7 + i8 + i9 + i10 + i11 + (b ? 1 : 0) + i12 + i13 + i14 +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth(long l, double d, int i5) {

        byte by1 = 37;
        int i15 = 145;
        int i16 = 11;
        int i17 = -235;
        int i18 = -178;
        int i19 = -10;
        int i20 = 11;
        int[] iArr1 = new int[N];
        float f = 99.915F;
        double[][] dArr = new double[N][N];

        FuzzerUtils.init(dArr, 4.19010);
        FuzzerUtils.init(iArr1, 28476);

        vMeth1(i5, by1, i5);
        switch (((i5 >>> 1) % 9) + 117) {
            case 117:
                dArr[(i5 >>> 1) % N][(i5 >>> 1) % N] -= i5;
                i5 = i5;
                break;
            case 118:
                for (i15 = 18; 350 > i15; i15++) {
                    i16 *= (int) f;
                    i5 -= i15;
                    for (i17 = 1; 5 > i17; ++i17) {
                        i18 >>= i15;
                    }
                    iArr1[i15] -= i15;
                    for (i19 = 1; i19 < 5; i19++) {
                        l += (i19 - f);
                        i20 -= i20;
                        i5 += i15;
                        i20 = i17;
                    }
                }
            case 119:
                Test0086.lArrFld[(i18 >>> 1) % N] = Test0086.lArrFld[(i15 >>> 1) % N];
                break;
            case 120:
                f = i20;
                break;
            case 121:
                iArr1[(i17 >>> 1) % N] -= i18;
                break;
            case 122:
                iArr1[(-237 >>> 1) % N] += (int) 2.40329;
                break;
            case 123:
            case 124:
                by1 <<= (byte) i20;
                break;
            case 125:
                Test0086.byArrFld[(0 >>> 1) % N] -= (byte) i18;
        }
        vMeth_check_sum += l + Double.doubleToLongBits(d) + i5 + by1 + i15 + i16 + Float.floatToIntBits(f) + i17 + i18
                + i19 + i20 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i3 = 0, i4 = -60, i21 = 11154, i22 = -55490, i23 = -108, i24 = 2, i25 = -158;
        double d1 = 85.100744;
        float f1 = 2.494F;
        short s = -10637;

        for (i3 = 20; i3 < 392; i3++) {
            vMeth(-4768392084069703813L, 106.273, i4);
            d1 *= Test0086.instanceCount;
            Test0086.instanceCount &= i3;
        }
        i4 = (int) f1;
        for (i21 = 256; 8 < i21; i21 -= 2) {
            switch ((i21 % 9) + 37) {
                case 37:
                    for (i23 = 1; 13 > i23; i23 += 3) {
                        i22 += i23;
                        i4 = i21;
                        switch ((((i3 >>> 1) % 9) * 5) + 7) {
                            case 17:
                                Test0086.lArrFld[i21][i23 + 1] -= s;
                                i4 += i21;
                                i4 = i21;
                                i22 |= i23;
                                break;
                            case 46:
                                i25 -= i3;
                                break;
                            case 8:
                                Test0086.instanceCount -= i4;
                                break;
                            case 30:
                                s *= (short) i24;
                                break;
                            case 32:
                                Test0086.instanceCount -= i21;
                                break;
                            case 45:
                                i4 += (-18333 + (i23 * i23));
                                break;
                            case 9:
                                i4 += (int) (-31055L + (i23 * i23));
                                break;
                            case 51:
                                i24 >>= i3;
                                break;
                            case 21:
                                Test0086.instanceCount = i21;
                        }
                    }
                case 38:
                    i25 -= i22;
                    break;
                case 39:
                    Test0086.instanceCount = i25;
                    break;
                case 40:
                    i25 += (i21 * i21);
                    break;
                case 41:
                    Test0086.instanceCount = -122;
                    break;
                case 42:
                    f1 -= i3;
                    break;
                case 43:
                    i24 = (int) f1;
                case 44:
                    s += (short) i21;
                    break;
                case 45:
                    f1 -= f1;
                    break;
            }
        }
        long meth_res = i3 + i4 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + i21 + i22 + i23 + i24 + s +
                i25;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0086 _instance = new Test0086();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -14, i1 = -239, i2 = -35, i26 = 62952, i27 = 5, i28 = -138, i29 = -11, i30 = -45, i31 = 40327, i32 = -157;
        float f3 = 0.800F;
        double d2 = -53.69005;
        long l2 = -43694L;

        for (i = 6; i < 179; ++i) {
            i2 = 1;
            do {
                i1 /= (int) (Math.abs(Test0086.lArrFld[i][i]++) | 1);
                i1 = ((iMeth() - i1) + 114);
                iArrFld[i2 - 1] = i;
                i1 = (int) Test0086.instanceCount;
                i1 += i;
                if (bFld) continue;
            } while (++i2 < 145);
            iArrFld[i - 1] -= i2;
            for (i26 = 6; i26 < 145; i26++) {
                float f2 = -71.605F;
                i1 -= i1;
                for (i28 = 1; 2 > i28; i28++) {
                    i27 <<= i29;
                    i29 += i27;
                }
                f2 *= i26;
                if (bFld) break;
                bFld = bFld;
                i29 ^= (int) Test0086.instanceCount;
                i29 = i2;
            }
            f3 = f3;
        }
        i1 = i28;
        d2 += -48;
        for (l2 = 1; l2 < 140; ++l2) {
            Test0086.instanceCount = 236L;
            Test0086.lArrFld[(int) (l2)][(int) (l2)] >>= i30;
            for (i31 = 180; i31 > 6; i31 -= 3) {
                Test0086.instanceCount = Test0086.lFld;
                Test0086.lFld = i29;
                i29 = (int) Test0086.instanceCount;
                Test0086.fArrFld[(int) (l2 - 1)][i31 - 1] += i1;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 f3 d2 = " + i29 + "," + Float.floatToIntBits(f3) + "," +
                Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l2 i30 i31 = " + l2 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 = " + i32);

        FuzzerUtils.out.println("Test0086.instanceCount bFld Test0086.lFld = " + Test0086.instanceCount + "," + (bFld ? 1 : 0) +
                "," + Test0086.lFld);
        FuzzerUtils.out.println("Test0086.lArrFld Test0086.fArrFld Test0086.byArrFld = " + FuzzerUtils.checkSum(Test0086.lArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0086.fArrFld)) + "," + FuzzerUtils.checkSum(Test0086.byArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
