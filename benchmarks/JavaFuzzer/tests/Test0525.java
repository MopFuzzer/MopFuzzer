// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:06 2023
public class Test0525 {

    public static final int N = 400;

    public static volatile long instanceCount = 6196L;
    public static byte byFld = 1;
    public static volatile int iFld = -3;
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0525.iArrFld, 12);
    }

    public double dFld = -1.13201;
    public boolean bFld = true;

    public static int iMeth(float f1, float f2, long l) {

        int i11 = 2587, i12 = 161, i13 = 12843, i14 = -9, i15 = 118, i16 = -11, i17 = -9;

        i11 <<= -9;
        switch (((27514 >>> 1) % 2) + 107) {
            case 107:
                for (i12 = 3; i12 < 158; ++i12) {
                    for (i14 = i12; i14 < 10; ++i14) {
                        Test0525.byFld += (byte) (i14 * i14);
                        i15 += (i14 * i11);
                        for (i16 = 1; i16 < 1; i16++) {
                            i15 >>= i13;
                            i11 -= 220;
                            Test0525.iArrFld[i16] &= i13;
                            i13 += Test0525.iFld;
                        }
                        Test0525.byFld += (byte) (i14 + i16);
                        f1 *= Test0525.instanceCount;
                        Test0525.iArrFld[i12] = i16;
                        if (i11 != 0) {
                        }
                    }
                }
            case 108:
                i15 >>= i11;
            default:
                Test0525.iArrFld[(i13 >>> 1) % N] = (int) 0L;
        }
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + l + i11 + i12 + i13 + i14 + i15 + i16 +
                i17;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {

        int i7 = -10478, i8 = 6, i9 = 14, i10 = -14, i19 = -28979, i20 = -89, i21 = -41319, i22 = 253;
        float f3 = 1.1013F;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -102.100926);

        for (i7 = 6; i7 < 282; i7 += 3) {
            for (i9 = 1; 17 > i9; i9++) {
                i8 = (iMeth(-1.698F, f3, Test0525.instanceCount) * i9);
                i8 += (int) Test0525.instanceCount;
                Test0525.iArrFld[i9 - 1] *= i7;
                Test0525.iArrFld[i7] |= Test0525.iFld;
            }
            Test0525.iArrFld[i7] += i9;
        }
        for (int i18 : Test0525.iArrFld) {
            for (i19 = 4; i19 > 1; i19--) {
                dArr[i19 - 1] = -8343453841643302230L;
                for (i21 = 1; i21 < 2; ++i21) {
                    Test0525.iArrFld[i21] -= (int) Test0525.instanceCount;
                    i20 += (i21 + f3);
                    i20 = (int) Test0525.instanceCount;
                }
                try {
                    Test0525.iArrFld[i19] = (243 % i9);
                    i20 = (Test0525.iArrFld[i19] % i8);
                    Test0525.iFld = (Test0525.iFld / -237);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        vMeth1_check_sum += i7 + i8 + i9 + i10 + Float.floatToIntBits(f3) + i19 + i20 + i21 + i22 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(float f, int i1) {

        int i2 = -14, i3 = 248, i4 = -14, i5 = 11718, i6 = -223;
        double d = -1.128883;
        short s = 28914;

        for (i2 = 3; i2 < 186; ++i2) {
            Test0525.iArrFld[i2 + 1] |= Test0525.iArrFld[i2 - 1];
            for (i4 = 1; i4 < 9; ++i4) {
                i6 = 1;
                while (++i6 < 2) {
                    i1 += (i6 ^ i4);
                    d -= i6;
                    Test0525.iArrFld = (Test0525.iArrFld = (Test0525.iArrFld = Test0525.iArrFld));
                    d -= (-((i5 / (i5 | 1)) * d));
                    i3 &= (~Integer.reverseBytes(s * 107));
                }
                vMeth1();
                f += (i4 * i4);
                i1 = (int) f;
                d += 1.129381;
                if (Test0525.iFld != 0) {
                    vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 +
                            Double.doubleToLongBits(d) + s;
                    return;
                }
            }
        }
        i5 &= Test0525.iFld;
        vMeth_check_sum += Float.floatToIntBits(f) + i1 + i2 + i3 + i4 + i5 + i6 + Double.doubleToLongBits(d) + s;
    }

    public static void main(String[] strArr) {

        try {
            Test0525 _instance = new Test0525();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 42086, i23 = -150, i24 = 2, i25 = 13666, i26 = -14, i27 = -24640, i28 = -52903;
        float f4 = 0.641F;
        short s1 = -19445;

        i = 1;
        do {
            vMeth(f4, 27393);
            switch (((i % 3) * 5) + 38) {
                case 41:
                    Test0525.instanceCount += (i * i);
                    i23 = 1;
                    do {
                        Test0525.iFld += (52715 + (i23 * i23));
                        Test0525.instanceCount *= i23;
                        dFld += i;
                        Test0525.iFld *= Test0525.iFld;
                        switch (((Test0525.iFld >>> 1) % 1) + 122) {
                            case 122:
                                if (bFld) continue;
                                Test0525.iFld = i23;
                                s1 >>= (short) 0;
                        }
                        for (i24 = 1; i24 < 4; ++i24) {
                            Test0525.iFld = (int) Test0525.instanceCount;
                            i25 -= (int) Test0525.instanceCount;
                            i25 <<= i26;
                            i25 += (i24 - i24);
                            Test0525.byFld += (byte) i23;
                            Test0525.instanceCount -= (long) f4;
                            Test0525.iFld -= Test0525.iFld;
                            Test0525.instanceCount += i24;
                            Test0525.iFld -= Test0525.iFld;
                        }
                        Test0525.iFld += (i23 * i23);
                    } while ((i23 += 3) < 124);
                    for (i27 = 124; i27 > 4; --i27) {
                        Test0525.iFld = (int) dFld;
                        switch (((i27 % 2) * 5) + 125) {
                            case 126:
                                i28 += i27;
                                f4 -= -62682;
                                break;
                            case 132:
                                i26 += i27;
                                break;
                        }
                    }
                case 53:
                    dFld += i28;
                case 39:
                    s1 = (short) i23;
                    break;
            }
        } while (++i < 202);

        FuzzerUtils.out.println("i f4 i23 = " + i + "," + Float.floatToIntBits(f4) + "," + i23);
        FuzzerUtils.out.println("s1 i24 i25 = " + s1 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);

        FuzzerUtils.out.println("Test0525.instanceCount Test0525.byFld Test0525.iFld = " + Test0525.instanceCount + "," + Test0525.byFld +
                "," + Test0525.iFld);
        FuzzerUtils.out.println("dFld bFld Test0525.iArrFld = " + Double.doubleToLongBits(dFld) + "," + (bFld ? 1 : 0) +
                "," + FuzzerUtils.checkSum(Test0525.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
