// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test0832 {

    public static final int N = 400;

    public static volatile long instanceCount = 13L;
    public static int iFld = 75;
    public static short sFld = 5355;
    public static float fFld = -91.965F;
    public static byte byFld = -46;

    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long dMeth1_check_sum = 0;

    public static double dMeth1(float f) {

        int i2 = 15133;
        int i3 = 170;
        int i4 = 2;
        int i5 = -62;
        int i6 = -119;
        int[] iArr1 = new int[N];
        boolean b = true;
        boolean[] bArr = new boolean[N];
        float f1 = -58.601F;
        float[][] fArr = new float[N][N];
        double d2 = 0.54213;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(fArr, -11.646F);
        FuzzerUtils.init(lArr1, 3199244303L);
        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(iArr1, 47520);

        fArr[(Test0832.iFld >>> 1) % N][(6505 >>> 1) % N] *= Test0832.iFld;
        for (i2 = 8; i2 < 248; ++i2) {
            if (b) continue;
            i3 *= -19467;
            Test0832.instanceCount += (((i2 * Test0832.iFld) + i3) - f);
            bArr[i2 - 1] = b;
            Test0832.iFld += (i2 * i2);
            Test0832.sFld -= (short) Test0832.instanceCount;
            for (f1 = 7; f1 > 1; f1 -= 2) {
                Test0832.iFld <<= (int) Test0832.instanceCount;
                for (i5 = 1; i5 < 3; i5++) {
                    iArr1[i5] = 36;
                    Test0832.fFld *= (float) d2;
                }
                lArr1[(int) (f1)] >>>= Test0832.sFld;
            }
            if (b) break;
        }
        long meth_res = Float.floatToIntBits(f) + i2 + i3 + (b ? 1 : 0) + Float.floatToIntBits(f1) + i4 + i5 + i6 +
                Double.doubleToLongBits(d2) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(bArr) + FuzzerUtils.checkSum(iArr1);
        dMeth1_check_sum += meth_res;
        return (double) meth_res;
    }

    public static double dMeth() {

        double d1 = -19.98142;
        int i7 = 235;
        int i8 = -6;
        int i9 = -17772;
        int i10 = -26747;
        int i11 = 4;
        int[] iArr2 = new int[N];
        byte by = -118;
        long l1 = 0L;

        FuzzerUtils.init(iArr2, -86);

        Test0832.iFld *= ((Test0832.iFld++) - Test0832.iFld);
        d1 = dMeth1(Test0832.fFld);
        Test0832.fFld -= Test0832.instanceCount;
        Test0832.iFld *= (int) Test0832.instanceCount;
        for (i7 = 16; 378 > i7; ++i7) {
            Test0832.iFld += (i7 ^ by);
            Test0832.iFld = i7;
            Test0832.instanceCount &= i8;
            for (i9 = 1; i9 < 5; ++i9) {
                i10 >>= -8;
                try {
                    Test0832.iFld = (i10 / -18);
                    i11 = (iArr2[i9 - 1] / Test0832.iFld);
                    iArr2[i9 + 1] = (0 % Test0832.iFld);
                } catch (ArithmeticException a_e) {
                }
                i10 |= -4;
                Test0832.instanceCount += (((i9 * i10) + i10) - Test0832.sFld);
                i8 = by;
                Test0832.instanceCount += (((i9 * i8) + Test0832.fFld) - l1);
            }
        }
        long meth_res = Double.doubleToLongBits(d1) + i7 + i8 + by + i9 + i10 + i11 + l1 + FuzzerUtils.checkSum(iArr2);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static long lMeth(int i, int i1) {

        int i12 = -12;
        int i13 = -44;
        int i14 = -137;
        int i15 = -57925;
        int[] iArr3 = new int[N];
        long l2 = 3290393086L;
        long[] lArr = new long[N];
        long[][] lArr2 = new long[N][N];
        float f2 = -2.774F;
        boolean b1 = true;
        boolean[] bArr1 = new boolean[N];

        FuzzerUtils.init(lArr, 3301101080L);
        FuzzerUtils.init(iArr3, 180);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(lArr2, 40623L);

        lArr[(i >>> 1) % N] *= (long) (-dMeth());
        for (i12 = 396; i12 > 13; i12 -= 3) {
            l2 += i12;
            i *= Test0832.sFld;
            f2 = 1;
            while (++f2 < 12) {
                i14 = 1;
                do {
                    i13 -= (int) Test0832.fFld;
                    l2 -= (long) -2.3332;
                    iArr3[i12 + 1] >>= (int) Test0832.instanceCount;
                    l2 += (i14 * i13);
                    switch ((int) (((f2 % 8) * 5) + 114)) {
                        case 150:
                            Test0832.iFld = i12;
                            i15 += (i14 * i14);
                            l2 -= (long) Test0832.fFld;
                            break;
                        case 120:
                            l2 += (((i14 * l2) + Test0832.instanceCount) - i12);
                            break;
                        case 117:
                            bArr1[i14 + 1] = b1;
                            break;
                        case 121:
                            iArr3[(int) (f2)] -= (int) Test0832.instanceCount;
                            break;
                        case 126:
                            bArr1[(int) (f2)] = b1;
                            break;
                        case 145:
                            i15 <<= i;
                        case 119:
                            lArr2 = FuzzerUtils.long2array(N, (long) 14L);
                            break;
                        case 141:
                            Test0832.iFld &= i14;
                            break;
                    }
                } while (++i14 < 1);
            }
        }
        long meth_res = i + i1 + i12 + i13 + l2 + Float.floatToIntBits(f2) + i14 + i15 + (b1 ? 1 : 0) +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr1) +
                FuzzerUtils.checkSum(lArr2);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0832 _instance = new Test0832();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d = 42.121090;
        double[] dArr = new double[N];
        int i16 = 13;
        int i17 = 5;
        int i18 = 142;
        int i19 = 14;
        int i20 = -106;
        int i21 = 196;
        int i22 = 19296;
        int i23 = 6;
        int i24 = 3;
        int[] iArr = new int[N];
        long l3 = -3506940388L;

        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(dArr, 0.54535);

        d += (Test0832.iFld * (61.93958 - (Test0832.instanceCount++)));
        Test0832.iFld *= iArr[(Test0832.iFld >>> 1) % N];
        Test0832.iFld <<= (int) lMeth(-154, Test0832.iFld);
        Test0832.instanceCount -= Test0832.iFld;
        Test0832.iFld = Test0832.iFld;
        Test0832.fFld -= Test0832.iFld;
        iArr[(Test0832.iFld >>> 1) % N] -= Test0832.byFld;
        Test0832.iFld = (int) Test0832.instanceCount;
        i16 = 357;
        while ((i16 -= 3) > 0) {
            iArr = iArr;
        }
        for (i17 = 12; 197 > i17; ++i17) {
            Test0832.iFld += i17;
            Test0832.iFld &= i16;
            i19 = 1;
            do {
                Test0832.iFld = (int) l3;
                for (i20 = 1; i20 < 2; i20++) {
                    switch ((i17 % 1) + 117) {
                        case 117:
                        default:
                            Test0832.instanceCount += (((i20 * i18) + Test0832.iFld) - Test0832.sFld);
                            iArr[i20] *= -60527;
                    }
                    d = Test0832.iFld;
                    i18 = (int) l3;
                }
                i18 += (0 + (i19 * i19));
            } while ((i19 += 2) < 136);
            i22 = 1;
            do {
                Test0832.iFld = i16;
                for (i23 = 1; i23 < 1; i23++) {
                    i24 = i19;
                    l3 = i22;
                    i18 += i23;
                    Test0832.iFld |= i18;
                    dArr = dArr;
                }
            } while (++i22 < 136);
        }

        FuzzerUtils.out.println("d i16 i17 = " + Double.doubleToLongBits(d) + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 l3 = " + i18 + "," + i19 + "," + l3);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 iArr = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0832.instanceCount Test0832.iFld Test0832.sFld = " + Test0832.instanceCount + "," + Test0832.iFld +
                "," + Test0832.sFld);
        FuzzerUtils.out.println("Test0832.fFld Test0832.byFld = " + Float.floatToIntBits(Test0832.fFld) + "," + Test0832.byFld);

        FuzzerUtils.out.println("dMeth1_check_sum: " + dMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  dMeth1 ->  dMeth1 dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
