// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test0908 {

    public static final int N = 400;

    public static long instanceCount = -2382662940L;
    public static long lFld = -38019L;
    public static int iFld = -5;
    public static volatile double dFld = 85.83257;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public volatile long[] lArrFld = new long[N];
    public byte[] byArrFld = new byte[N];

    public static float fMeth(long l1, byte by) {

        int i7 = 11, i8 = -51, i9 = 236, i10 = -174, i11 = -254, i12 = 49607;
        boolean b1 = true;
        float f3 = 1.7F;
        short s = 2571;
        short[] sArr = new short[N];

        FuzzerUtils.init(sArr, (short) 25890);

        Test0908.iFld -= Test0908.iFld;
        for (i7 = 298; i7 > 11; --i7) {
            for (i9 = 6; 1 < i9; i9--) {
                b1 = b1;
                f3 -= -116;
                sArr[i7] -= (short) i10;
            }
            f3 *= i9;
            for (i11 = i7; i11 < 6; i11++) {
                i12 |= 54454;
                Test0908.lFld >>= Test0908.iFld;
                switch ((i11 % 5) + 25) {
                    case 25:
                        f3 += (i11 * i11);
                        Test0908.iFld += (((i11 * Test0908.instanceCount) + i12) - i10);
                        i10 = (int) l1;
                        f3 = f3;
                        break;
                    case 26:
                        try {
                            i8 = (i7 % 7684);
                            i12 = (38582 % Test0908.iFld);
                            i8 = (i8 % 44936);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 27:
                        Test0908.lFld += (((i11 * s) + Test0908.instanceCount) - Test0908.lFld);
                        break;
                    case 28:
                        s -= (short) 2.553F;
                        break;
                    case 29:
                        i12 += (((i11 * i8) + i10) - f3);
                }
            }
        }
        long meth_res = l1 + by + i7 + i8 + i9 + i10 + (b1 ? 1 : 0) + Float.floatToIntBits(f3) + i11 + i12 + s +
                FuzzerUtils.checkSum(sArr);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void vMeth(double d1, float f2) {

        byte by1 = 114;
        byte[] byArr = new byte[N];
        int i13 = -10, i14 = 124, i15 = -158, i16 = 193, i17 = 236, i18 = 61420;
        float[] fArr = new float[N];
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(byArr, (byte) -124);
        FuzzerUtils.init(fArr, 0.126F);
        FuzzerUtils.init(lArr, -14L);

        fMeth(Test0908.lFld, by1);
        byArr[(-12 >>> 1) % N] >>= (byte) Test0908.lFld;
        for (i13 = 4; 372 > i13; ++i13) {
            fArr[i13 - 1] = i14;
            f2 += (i13 * f2);
            i14 += Test0908.iFld;
            for (i15 = 1; i15 < 5; i15++) {
                for (i17 = 1; i17 < 2; i17++) {
                    if (i14 != 0) {
                        vMeth_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + by1 + i13 + i14 +
                                i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(byArr) +
                                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
                        return;
                    }
                    i14 += (i17 * i17);
                    i16 += (int) f2;
                    Test0908.iFld += i17;
                    Test0908.lFld = i18;
                    Test0908.lFld += 14;
                }
                lArr = lArr;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d1) + Float.floatToIntBits(f2) + by1 + i13 + i14 + i15 + i16 + i17 +
                i18 + FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(long l, double d, int i4) {

        float f1 = 0.739F;
        int i5 = 27614, i6 = -2, i19 = -1, i20 = 6, i21 = 152, i22 = 0, i23 = -55;
        boolean b = true;
        byte by2 = -35;

        f1 -= Test0908.lFld;
        for (i5 = 4; i5 < 147; ++i5) {
            b = (i6 != ((i6 = i6) + Math.abs(2.914F)));
        }
        vMeth(d, 2.485F);
        i6 = (int) Test0908.instanceCount;
        for (i19 = 5; 198 > i19; i19++) {
            i21 = 1;
            while (++i21 < 8) {
                for (i22 = 1; i22 < 1; i22++) {
                    i20 -= (int) -1.185F;
                    i20 = i5;
                    Test0908.lFld += Test0908.lFld;
                    switch ((((i19 >>> 1) % 2) * 5) + 68) {
                        case 69:
                            Test0908.iFld = -3793;
                            break;
                        case 77:
                            by2 = (byte) 2015L;
                        default:
                            Test0908.iFld = (int) f1;
                    }
                }
            }
        }
        long meth_res = l + Double.doubleToLongBits(d) + i4 + Float.floatToIntBits(f1) + i5 + i6 + (b ? 1 : 0) + i19 +
                i20 + i21 + i22 + i23 + by2;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0908 _instance = new Test0908();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i1 = -15;
        int i2 = -14;
        int i3 = -13;
        int i24 = -10;
        int i25 = -61392;
        int i26 = 0;
        int i27 = -13;
        int i28 = 3341;
        int i29 = 12;
        int[] iArr = new int[N];
        float f = 0.811F;
        byte by3 = -68;

        FuzzerUtils.init(iArr, 2023);

        for (int i : iArr) {
            i = iArr[(i >>> 1) % N];
            i1 = 1;
            do {
                iArr = iArr;
                f -= Test0908.instanceCount;
                for (i2 = 1; i2 < 1; i2++) {
                    i3 = (i3++);
                    i3 = 110;
                    if ((++i) < ((-(i - 1.472F)) - iMeth(Test0908.lFld, Test0908.dFld, Test0908.iFld))) break;
                }
                iArr[i1 - 1] -= (int) 109307549569290853L;
                Test0908.lFld += i1;
                iArr[i1] += (int) -3586431950L;
                i ^= (int) -4453L;
                Test0908.instanceCount <<= i2;
                Test0908.lFld += (i1 | Test0908.lFld);
            } while (++i1 < 63);
            Test0908.instanceCount += -5;
            Test0908.iFld >>= i;
            Test0908.iFld = i;
            lArrFld[(i2 >>> 1) % N] = Test0908.iFld;
            i <<= i3;
            byArrFld[(i1 >>> 1) % N] = (byte) -600770331L;
        }
        Test0908.lFld = i2;
        i3 = (int) 54101L;
        for (i24 = 9; i24 < 184; ++i24) {
            for (i26 = 4; 143 > i26; ++i26) {
                try {
                    Test0908.iFld = (i25 / -20859);
                    Test0908.iFld = (18657 / i2);
                    i27 = (i27 / 164);
                } catch (ArithmeticException a_e) {
                }
                Test0908.lFld ^= i26;
                for (i28 = 1; i28 < 2; i28++) {
                    i29 -= by3;
                    f += 29345L;
                }
            }
        }

        FuzzerUtils.out.println("i1 f i2 = " + i1 + "," + Float.floatToIntBits(f) + "," + i2);
        FuzzerUtils.out.println("i3 i24 i25 = " + i3 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 by3 iArr = " + i29 + "," + by3 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0908.instanceCount Test0908.lFld Test0908.iFld = " + Test0908.instanceCount + "," + Test0908.lFld +
                "," + Test0908.iFld);
        FuzzerUtils.out.println("Test0908.dFld lArrFld byArrFld = " + Double.doubleToLongBits(Test0908.dFld) + "," +
                FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
