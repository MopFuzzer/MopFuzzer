// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test0068 {

    public static final int N = 400;

    public static long instanceCount = 2974596832L;
    public static byte byFld = 75;
    public static volatile int iFld = -58271;
    public static float fFld = -76.357F;
    public static double dFld = 42.120012;
    public static volatile short[] sArrFld = new short[N];
    public static int[] iArrFld = new int[N];
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0068.sArrFld, (short) 10144);
        FuzzerUtils.init(Test0068.iArrFld, -2);
    }

    public short sFld = -10769;
    public double[] dArrFld = new double[N];

    public static void vSmallMeth(float f) {

        int i = -15681;

        i = ((-(i * i)) - 6690);
        vSmallMeth_check_sum += Float.floatToIntBits(f) + i;
    }

    public static void vMeth1(double d1) {

        int i8 = -250, i9 = -203;
        boolean b = false;

        for (i8 = 356; 11 < i8; i8--) {
            Test0068.iFld += i8;
            b = b;
            Test0068.fFld += i9;
            if (b) break;
            Test0068.iFld /= (int) (i9 | 1);
            switch ((i8 % 7) + 8) {
                case 8:
                    Test0068.sArrFld[i8 + 1] -= (short) Test0068.iFld;
                    b = b;
                    Test0068.iFld += (144 + (i8 * i8));
                    break;
                case 9:
                    i9 += -12;
                    d1 -= i8;
                    break;
                case 10:
                    Test0068.fFld += i8;
                    Test0068.iFld *= -134;
                    break;
                case 11:
                    Test0068.instanceCount <<= i8;
                    break;
                case 12:
                    Test0068.fFld += i9;
                    break;
                case 13:
                    Test0068.instanceCount += -12;
                    break;
                case 14:
                    i9 = i8;
                    break;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i8 + i9 + (b ? 1 : 0);
    }

    public static void vMeth(long l) {

        int i6 = 5;
        int i7 = -232;
        int[] iArr = new int[N];
        short s = -18557;
        double d2 = -24.113715;
        long[] lArr = new long[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, 229);
        FuzzerUtils.init(lArr, -17990L);
        FuzzerUtils.init(fArr, -2.117F);

        Test0068.iFld += (((Test0068.iFld--) - (13 - Test0068.iFld)) * ((++Test0068.iFld) - (Test0068.iFld--)));
        for (i6 = 260; i6 > 7; i6 -= 2) {
            Test0068.fFld += (float) ((iArr[i6 - 1] <<= (i7 - 44896)) - (++Test0068.dFld));
            vMeth1(Test0068.dFld);
            Test0068.fFld += s;
            Test0068.fFld = Test0068.iFld;
            Test0068.instanceCount = i7;
            try {
                i7 = (Test0068.iArrFld[i6 - 1] % iArr[i6 - 1]);
                Test0068.iArrFld[i6 - 1] = (Test0068.iFld / -49691190);
                i7 = (Test0068.iFld / i6);
            } catch (ArithmeticException a_e) {
            }
            Test0068.instanceCount += (i6 * Test0068.iFld);
            Test0068.iArrFld[i6] += (int) l;
            d2 = 1;
            do {
                i7 += (int) (d2 * d2);
                fArr[i6] = (float) d2;
                i7 >>>= -24449;
                Test0068.instanceCount += Test0068.iFld;
            } while (++d2 < 12);
        }
        vMeth_check_sum += l + i6 + i7 + s + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(iArr) +
                FuzzerUtils.checkSum(lArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth() {


        vMeth(Test0068.instanceCount);
        long meth_res = 0;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0068 _instance = new Test0068();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f1 = 55.596F;
        int i1 = 11894, i2 = -10, i3 = -3, i4 = -1693, i5 = -4, i10 = -22094, i11 = -6007, i12 = 4, i13 = -12, i14 = -6, i15 = 0, i16 = 21;
        double d = 119.62948;
        boolean b1 = true;

        for (int smallinvoc = 0; smallinvoc < 682; smallinvoc++) vSmallMeth(f1);
        i1 = (int) (Math.min(i1, i1) + ((-13L - (f1 + i1)) - (-(i1 | Test0068.byFld))));
        for (i2 = 10; i2 < 368; ++i2) {
            for (i4 = 3; i4 < 70; ++i4) {
                i1 = (int) (d - (iMeth() * i3));
                i1 = Test0068.byFld;
                Test0068.iFld -= i3;
                Test0068.instanceCount |= Test0068.instanceCount;
                Test0068.iFld += i4;
            }
            Test0068.iFld |= -11;
            i1 <<= i2;
            i1 += i2;
            i10 = 1;
            while (++i10 < 70) {
                Test0068.iArrFld[i10 + 1] *= (int) f1;
                d += Test0068.instanceCount;
                d = d;
                i5 = sFld;
                for (i11 = 1; 1 > i11; ++i11) {
                    i12 >>= 22983;
                    i5 |= i12;
                    try {
                        Test0068.iFld = (i10 % -81);
                        Test0068.iArrFld[i11 - 1] = (i11 / -48);
                        Test0068.iArrFld[(i1 >>> 1) % N] = (Test0068.iArrFld[i2 + 1] % 177);
                    } catch (ArithmeticException a_e) {
                    }
                }
                for (i13 = i2; i13 < 1; i13++) {
                    i14 = i4;
                    dArrFld[i10 + 1] += i14;
                    i5 += i13;
                    b1 = b1;
                }
                for (i15 = 1; i15 < 1; ++i15) {
                    i5 <<= i14;
                    Test0068.instanceCount += (i15 ^ i5);
                    Test0068.instanceCount -= i5;
                }
            }
        }

        FuzzerUtils.out.println("f1 i1 i2 = " + Float.floatToIntBits(f1) + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("d i10 i11 = " + Double.doubleToLongBits(d) + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("b1 i15 i16 = " + (b1 ? 1 : 0) + "," + i15 + "," + i16);

        FuzzerUtils.out.println("Test0068.instanceCount Test0068.byFld Test0068.iFld = " + Test0068.instanceCount + "," + Test0068.byFld +
                "," + Test0068.iFld);
        FuzzerUtils.out.println("Test0068.fFld Test0068.dFld sFld = " + Float.floatToIntBits(Test0068.fFld) + "," +
                Double.doubleToLongBits(Test0068.dFld) + "," + sFld);
        FuzzerUtils.out.println("Test0068.sArrFld Test0068.iArrFld dArrFld = " + FuzzerUtils.checkSum(Test0068.sArrFld) + "," +
                FuzzerUtils.checkSum(Test0068.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
