// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test0634 {

    public static final int N = 400;

    public static long instanceCount = 107L;
    public static int iFld = -31697;
    public static double dFld = 32.102661;
    public static boolean bFld = false;
    public static short sFld = 22586;
    public static volatile long lFld = -61296L;
    public static int iFld1 = 97;
    public static int[] iArrFld = new int[N];
    public static double[] dArrFld = new double[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0634.iArrFld, 4);
        FuzzerUtils.init(Test0634.dArrFld, -2.42961);
    }

    public double dFld1 = -2.23314;
    public volatile float[] fArrFld = new float[N];

    public static int iMeth() {

        int i5 = -5, i6 = -105, i7 = -5, i8 = 7, i9 = -5, i10 = -11;
        float f1 = -2.151F;
        boolean[] bArr = new boolean[N];
        long[][] lArr = new long[N][N];
        byte[] byArr = new byte[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(lArr, 6067698010336924219L);
        FuzzerUtils.init(byArr, (byte) 18);

        Test0634.dFld = Test0634.iFld;
        for (i5 = 16; i5 < 388; i5++) {
            Test0634.iFld = 66;
            Test0634.iFld *= Test0634.iFld;
        }
        Test0634.iArrFld[(Test0634.iFld >>> 1) % N] ^= i6;
        bArr[(i6 >>> 1) % N] = true;
        for (i7 = 4; i7 < 128; i7++) {
            i9 = 1;
            do {
                switch (i7 + 116) {
                    case 116:
                        Test0634.instanceCount += (-66 + (i9 * i9));
                        i8 <<= (int) -3015560319L;
                        Test0634.instanceCount += i9;
                    case 117:
                        Test0634.iArrFld[i7 + 1] = -6;
                        break;
                    case 118:
                    case 119:
                        Test0634.iFld = i5;
                        Test0634.iFld += (int) Test0634.instanceCount;
                    case 120:
                    case 121:
                        Test0634.iFld += i9;
                        break;
                    case 122:
                        Test0634.instanceCount += (i9 * f1);
                        break;
                    case 123:
                        Test0634.bFld = true;
                        break;
                    case 124:
                        i8 += (((i9 * Test0634.iFld) + i9) - Test0634.instanceCount);
                        break;
                    case 125:
                        lArr[i7 - 1][i9] &= i9;
                        break;
                    case 126:
                        byArr[i7 + 1] >>>= (byte) i6;
                    case 127:
                    case 128:
                        i8 -= (int) Test0634.instanceCount;
                        break;
                    case 129:
                    case 130:
                        i8 &= i5;
                        break;
                    case 131:
                        i6 += i9;
                        break;
                    case 132:
                        i6 += (int) Test0634.dFld;
                        break;
                    case 133:
                        i6 = i6;
                    case 134:
                    case 135:
                        i6 += i7;
                        break;
                    case 136:
                        i8 += Test0634.iFld;
                        break;
                    case 137:
                        Test0634.iArrFld[i7] <<= 173;
                    case 138:
                        f1 -= i8;
                    case 139:
                        Test0634.instanceCount = (long) Test0634.dFld;
                        break;
                    case 140:
                        Test0634.iFld = -38538;
                        break;
                    case 141:
                        Test0634.iFld -= Test0634.iFld;
                        break;
                    case 142:
                    case 143:
                        i6 -= Test0634.iFld;
                        break;
                    case 144:
                        i6 &= i6;
                    case 145:
                        Test0634.sFld += (short) (i9 | i8);
                    case 146:
                        f1 *= -23;
                        break;
                    case 147:
                        Test0634.instanceCount *= Test0634.sFld;
                        break;
                    case 148:
                        Test0634.iArrFld[i7] -= Test0634.sFld;
                    case 149:
                        lArr[i7][i7] += (long) f1;
                        break;
                    case 150:
                        Test0634.iArrFld[i9 + 1] *= i6;
                        break;
                    case 151:
                        Test0634.instanceCount -= i8;
                        break;
                    case 152:
                        i6 = i9;
                        break;
                    case 153:
                        try {
                            i8 = (i5 % -28840);
                            i6 = (i9 / 47103);
                            Test0634.iArrFld[i7 + 1] = (Test0634.iArrFld[i7] % Test0634.iArrFld[i7]);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 154:
                        if (Test0634.bFld) continue;
                    case 155:
                    case 156:
                        if (i5 != 0) {
                        }
                    case 157:
                        f1 += f1;
                        break;
                    case 158:
                        Test0634.iArrFld[i9 - 1] += (int) Test0634.dFld;
                        break;
                    case 159:
                        if (Test0634.bFld) continue;
                        break;
                    case 160:
                        Test0634.iArrFld = Test0634.iArrFld;
                        break;
                    case 161:
                        i6 >>>= i7;
                        break;
                    case 162:
                        i6 += (12820 + (i9 * i9));
                        break;
                    case 163:
                        if (Test0634.bFld) continue;
                        break;
                    case 164:
                        if (true) continue;
                        break;
                    case 165:
                        i8 += (int) Test0634.instanceCount;
                        break;
                    case 166:
                        i10 += i6;
                        break;
                    case 167:
                        Test0634.iArrFld[i7 + 1] &= i5;
                        break;
                    case 168:
                        i6 = i7;
                        break;
                    case 169:
                        i6 = i5;
                    case 170:
                        Test0634.iArrFld[i9 + 1] = -204;
                    case 171:
                        try {
                            i6 = (i9 / i5);
                            Test0634.iArrFld[i7] = (i10 % Test0634.iArrFld[i9]);
                            Test0634.iFld = (Test0634.iArrFld[i7] / i6);
                        } catch (ArithmeticException a_e) {
                        }
                    case 172:
                        if (false) continue;
                        break;
                    case 173:
                        Test0634.instanceCount = Test0634.instanceCount;
                    case 174:
                        Test0634.iArrFld[i7] -= (int) -132L;
                    case 175:
                    case 176:
                        Test0634.iFld += i10;
                        break;
                    case 177:
                        i10 = i8;
                        break;
                    case 178:
                    case 179:
                        if (Test0634.bFld) break;
                        break;
                    case 180:
                        Test0634.iArrFld[i7 - 1] = i5;
                        break;
                    case 181:
                        Test0634.instanceCount -= i10;
                    case 182:
                        i8 *= i6;
                        break;
                    case 183:
                        i8 = -48;
                    case 184:
                        Test0634.instanceCount -= i7;
                        break;
                    case 185:
                        Test0634.iArrFld[i7 - 1] >>= i8;
                        break;
                    default:
                        Test0634.bFld = Test0634.bFld;
                }
            } while (++i9 < 13);
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + i10 + FuzzerUtils.checkSum(bArr) +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth1() {

        int i2 = 196, i3 = 173, i4 = 12, i11 = 174, i12 = -17422, i13 = 95, i14 = -1521;
        byte by = -46;
        float f2 = -33.201F;

        i2 = 1;
        do {
            for (i3 = 1; i3 < 19; i3++) {
                try {
                    Test0634.iFld = (i3 / 11592);
                    i4 = (Test0634.iArrFld[i2 + 1] / i2);
                    i4 = (i2 % 33283);
                } catch (ArithmeticException a_e) {
                }
                Test0634.iFld = (-(++by));
                i4 += iMeth();
            }
            for (i11 = 1; i11 < 19; ++i11) {
                for (i13 = 1; i13 < 2; i13++) {
                    i14 *= i3;
                    Test0634.instanceCount = i2;
                    Test0634.iArrFld[i13 - 1] = i13;
                    i14 = (int) f2;
                    i12 += 12;
                    i14 -= i13;
                    i12 = -26;
                    i12 += i13;
                }
            }
        } while ((i2 += 3) < 247);
        vMeth1_check_sum += i2 + i3 + i4 + by + i11 + i12 + i13 + i14 + Float.floatToIntBits(f2);
    }

    public static void vMeth() {

        double d = -27.65595, d1 = 0.63321;
        int i1 = -29691, i15 = -167, i16 = -4, i17 = 7615, i18 = 6, i19 = 6, i20 = -36846;

        if (true) {
            d = ((9 + Integer.reverseBytes(Test0634.iFld)) - ((d - i1) + (i1 - -13903)));
            vMeth1();
        }
        Test0634.iArrFld = FuzzerUtils.int1array(N, (int) 153);
        for (i15 = 157; i15 > 5; --i15) {
            i1 += i15;
        }
        i17 = 1;
        while (++i17 < 392) {
            Test0634.iArrFld[i17 + 1] = (int) Test0634.instanceCount;
            Test0634.lFld >>= -13;
            for (i18 = 1; i18 < 4; i18 += 3) {
                Test0634.lFld = 4;
                for (d1 = 4; d1 > 1; d1 -= 2) {
                    i1 += (int) (d1 - i17);
                    i1 += (int) Test0634.lFld;
                    Test0634.iFld = i1;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i1 + i15 + i16 + i17 + i18 + i19 + Double.doubleToLongBits(d1)
                + i20;
    }

    public static void main(String[] strArr) {

        try {
            Test0634 _instance = new Test0634();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f = 44.941F, f3 = -106.595F;
        short s = -9917;
        int i = -39129, i21 = -41446, i22 = 12, i23 = -13, i24 = 4, i25 = 10, i26 = -136, i27 = 2;
        long l = 1335043579L;
        byte by1 = 126;

        f = 1;
        do {
            s = (short) Test0634.iFld;
            Test0634.instanceCount += (long) ((long) f | Test0634.iFld);
            i = 1;
            while (++i < 131) {
                vMeth();
                switch ((i % 9) + 25) {
                    case 25:
                        Test0634.instanceCount -= Test0634.iFld;
                        i21 = 1;
                        while (++i21 < 1) {
                            switch ((int) ((f % 2) + 69)) {
                                case 69:
                                    Test0634.iFld1 += (i21 + Test0634.lFld);
                                    Test0634.lFld += (i21 | Test0634.instanceCount);
                                case 70:
                                    Test0634.iFld1 *= i21;
                                    Test0634.iFld += (i21 * i21);
                                default:
                                    Test0634.iFld1 += (((i21 * i) + Test0634.lFld) - Test0634.lFld);
                                    Test0634.iFld += (((i21 * i) + Test0634.iFld) - Test0634.lFld);
                            }
                        }
                        for (i22 = 1; 1 > i22; i22++) {
                            Test0634.lFld <<= i23;
                        }
                        Test0634.dArrFld[(int) (f)] += Test0634.dFld;
                        break;
                    case 26:
                        Test0634.iFld += (((i * i21) + Test0634.iFld) - i24);
                        break;
                    case 27:
                        switch (((i % 3) * 5) + 10) {
                            case 21:
                                switch ((((i24 >>> 1) % 5) * 5) + 48) {
                                    case 67:
                                        l -= i24;
                                        for (i25 = 1; i25 < 1; ++i25) {
                                            i24 = -2;
                                            i26 += (((i25 * i26) + Test0634.iFld1) - i);
                                            fArrFld[(int) (f - 1)] += -37000;
                                            i24 += Test0634.iFld;
                                        }
                                        Test0634.iFld1 += i;
                                        Test0634.iFld *= (int) Test0634.dFld;
                                        break;
                                    case 50:
                                        f3 += i;
                                        break;
                                    case 60:
                                    case 54:
                                    case 73:
                                        Test0634.iFld1 -= i;
                                    default:
                                        dFld1 = 8;
                                }
                                break;
                            case 19:
                                Test0634.iArrFld = Test0634.iArrFld;
                            case 17:
                                i24 += (((i * i23) + i25) - Test0634.lFld);
                                break;
                            default:
                                i23 = Test0634.iFld;
                        }
                        break;
                    case 28:
                        s = (short) 35L;
                        break;
                    case 29:
                        by1 = (byte) Test0634.sFld;
                        break;
                    case 30:
                        i27 += (i * i);
                    case 31:
                        i23 += (int) Test0634.dFld;
                    case 32:
                        Test0634.iArrFld[(int) (f)] += i22;
                        break;
                    case 33:
                        fArrFld[(int) (f + 1)] = -836606283L;
                }
            }
        } while (++f < 192);

        FuzzerUtils.out.println("f s i = " + Float.floatToIntBits(f) + "," + s + "," + i);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 l i25 = " + i24 + "," + l + "," + i25);
        FuzzerUtils.out.println("i26 f3 by1 = " + i26 + "," + Float.floatToIntBits(f3) + "," + by1);
        FuzzerUtils.out.println("i27 = " + i27);

        FuzzerUtils.out.println("Test0634.instanceCount Test0634.iFld Test0634.dFld = " + Test0634.instanceCount + "," + Test0634.iFld +
                "," + Double.doubleToLongBits(Test0634.dFld));
        FuzzerUtils.out.println("Test0634.bFld Test0634.sFld Test0634.lFld = " + (Test0634.bFld ? 1 : 0) + "," + Test0634.sFld + "," +
                Test0634.lFld);
        FuzzerUtils.out.println("Test0634.iFld1 dFld1 Test0634.iArrFld = " + Test0634.iFld1 + "," + Double.doubleToLongBits(dFld1)
                + "," + FuzzerUtils.checkSum(Test0634.iArrFld));
        FuzzerUtils.out.println("Test0634.dArrFld fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0634.dArrFld))
                + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
