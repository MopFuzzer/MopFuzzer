// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0216 {

    public static final int N = 400;

    public static long instanceCount = 175L;
    public static byte byFld = -109;
    public static float fFld = 0.793F;
    public static short sFld = -31132;
    public static long[] lArrFld = new long[N];
    public static boolean[] bArrFld = new boolean[N];
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0216.lArrFld, 21492L);
        FuzzerUtils.init(Test0216.bArrFld, false);
        FuzzerUtils.init(Test0216.iArrFld, 31631);
    }

    public static void vMeth1(int i9, long l, int i10) {

        int i11 = -166;
        int i12 = -229;
        int i13 = 59326;
        int i14 = -26600;
        int i15 = -7;
        int i16 = 14;
        int[] iArr1 = new int[N];
        float f1 = 0.1013F;
        boolean b = false;
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(lArr, 1320L);
        FuzzerUtils.init(iArr1, 0);

        for (i11 = 2; i11 < 362; ++i11) {
            for (i13 = 1; 5 > i13; ++i13) {
                for (i15 = 1; i15 < 2; ++i15) {
                    lArr = FuzzerUtils.long2array(N, (long) 7719542700170333249L);
                    i14 *= i15;
                    iArr1[i13 - 1] <<= (int) l;
                    iArr1[(-63467 >>> 1) % N] <<= i9;
                    Test0216.instanceCount += (((i15 * f1) + f1) - Test0216.instanceCount);
                    try {
                        iArr1[i13 + 1] = (i12 / iArr1[i15]);
                        iArr1[i13 + 1] = (i13 / i11);
                        i14 = (iArr1[i13 - 1] / 31369);
                    } catch (ArithmeticException a_e) {
                    }
                    i16 = i15;
                    lArr[i11 + 1][i13 + 1] >>>= i10;
                    switch (((i13 % 2) * 5) + 84) {
                        case 94:
                            i9 += (int) 2.87827;
                            i9 += 5698;
                            if (b) break;
                            break;
                        case 91:
                            i14 = i13;
                            break;
                        default:
                            i10 -= -4;
                    }
                }
            }
        }
        vMeth1_check_sum += i9 + l + i10 + i11 + i12 + i13 + i14 + i15 + i16 + Float.floatToIntBits(f1) + (b ? 1 : 0) +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static byte byMeth() {

        int i5 = 1;
        int i6 = 13;
        int i7 = -221;
        int i8 = 43558;
        int i17 = 11;
        int i18 = -5;
        int[] iArr = new int[N];
        float f = 1.91F;
        double d = 39.22188, d1 = 0.74634;

        FuzzerUtils.init(iArr, -12);

        i5 += (-((i5 & i5) + iArr[(i5 >>> 1) % N]));
        i5 += (int) (((-(i5 - i5)) + (f + -9)) - ((Test0216.instanceCount * f) * (Test0216.instanceCount--)));
        for (d = 248; d > 2; d -= 3) {
            for (i7 = 1; i7 < 19; ++i7) {
                switch (((((int) (-57623 - (Test0216.instanceCount + Test0216.instanceCount))) >>> 1) % 8) + 76) {
                    case 76:
                        vMeth1(i5, Test0216.instanceCount, i5);
                        i6 -= i6;
                    case 77:
                        i8 &= i5;
                        try {
                            i6 = (54893 / iArr[(int) (d)]);
                            iArr[i7 + 1] = (iArr[(i5 >>> 1) % N] % i8);
                            i8 = (i8 % i5);
                        } catch (ArithmeticException a_e) {
                        }
                        i5 -= i5;
                        break;
                    case 78:
                        for (i17 = 2; i17 > d; i17 -= 2) {
                            Test0216.lArrFld[i17] = 252;
                            i8 = (int) 1.763F;
                            Test0216.byFld += (byte) i17;
                            d1 += 52;
                        }
                        break;
                    case 79:
                        i18 += (((i7 * i8) + i18) - i18);
                        break;
                    case 80:
                        i5 -= (int) Test0216.instanceCount;
                        break;
                    case 81:
                        Test0216.lArrFld[(int) (d - 1)] += (long) f;
                        break;
                    case 82:
                        d1 = i18;
                        break;
                    case 83:
                        iArr[(i18 >>> 1) % N] = i17;
                        break;
                }
            }
        }
        long meth_res = i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i6 + i7 + i8 + i17 + i18 +
                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr);
        byMeth_check_sum += meth_res;
        return (byte) meth_res;
    }

    public static void vMeth() {

        int i4 = 8, i19 = 18982, i20 = 12, i21 = 1, i22 = 14;
        long l1 = 3542570695537988355L;
        float[] fArr1 = new float[N];

        FuzzerUtils.init(fArr1, -2.741F);

        i4 = (int) ((-(i4--)) + ((-fArr1[(i4 >>> 1) % N]) + byMeth()));
        Test0216.bArrFld = Test0216.bArrFld;
        for (i19 = 3; i19 < 304; ++i19) {
            for (l1 = 1; l1 < 5; ++l1) {
                i4 += (int) l1;
                i22 = 1;
                do {
                    double d2 = 0.16496;
                    i20 = (int) Test0216.instanceCount;
                    d2 = i20;
                    i21 <<= Test0216.byFld;
                    Test0216.iArrFld[i22] *= i22;
                    Test0216.fFld += i21;
                    i4 += i22;
                } while (++i22 < 2);
                i21 += (int) (l1 + i22);
                i21 -= i22;
                i21 *= (int) Test0216.instanceCount;
            }
        }
        vMeth_check_sum += i4 + i19 + i20 + l1 + i21 + i22 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void main(String[] strArr) {

        try {
            Test0216 _instance = new Test0216();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -212, i1 = -250, i2 = 5, i3 = 25509, i23 = 31500, i24 = -107, i25 = 139, i26 = 124;
        double d3 = 0.99027;
        double[] dArr = new double[N];
        boolean b1 = false;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, -67.840F);
        FuzzerUtils.init(dArr, 78.55932);

        for (i = 200; i > 1; --i) {
            for (i2 = 126; 5 < i2; i2--) {
                i3 = (i2 << Math.abs(i));
            }
            fArr[i] -= i;
            vMeth();
            i3 -= (int) Test0216.fFld;
            Test0216.iArrFld[i] >>= i3;
            i3 *= i;
            for (i23 = 4; 126 > i23; ++i23) {
                Test0216.fFld += (57647 + (i23 * i23));
                d3 *= i24;
                i24 += i23;
                for (i25 = 1; i25 < 2; ++i25) {
                    switch ((i23 % 5) + 1) {
                        case 1:
                            Test0216.sFld += (short) i26;
                            i3 >>= i24;
                            break;
                        case 2:
                            i26 *= (int) d3;
                            break;
                        case 3:
                            Test0216.iArrFld[i + 1] = 88;
                            Test0216.instanceCount <<= -2021745036610081586L;
                            b1 = b1;
                            Test0216.instanceCount = Test0216.instanceCount;
                            break;
                        case 4:
                            i24 = (int) Test0216.instanceCount;
                            i24 += (i25 * i2);
                            i26 -= i23;
                            break;
                        case 5:
                            i3 = i23;
                            if (b1) {
                                i26 += i1;
                                i1 *= (int) d3;
                            } else {
                                Test0216.sFld = (short) Test0216.instanceCount;
                            }
                            dArr[i25] += Test0216.instanceCount;
                            break;
                        default:
                            i26 <<= 8958;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i23 i24 = " + i3 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("d3 i25 i26 = " + Double.doubleToLongBits(d3) + "," + i25 + "," + i26);
        FuzzerUtils.out.println("b1 fArr dArr = " + (b1 ? 1 : 0) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0216.instanceCount Test0216.byFld Test0216.fFld = " + Test0216.instanceCount + "," + Test0216.byFld +
                "," + Float.floatToIntBits(Test0216.fFld));
        FuzzerUtils.out.println("Test0216.sFld Test0216.lArrFld Test0216.bArrFld = " + Test0216.sFld + "," +
                FuzzerUtils.checkSum(Test0216.lArrFld) + "," + FuzzerUtils.checkSum(Test0216.bArrFld));
        FuzzerUtils.out.println("Test0216.iArrFld = " + FuzzerUtils.checkSum(Test0216.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  byMeth ->  byMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 byMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
