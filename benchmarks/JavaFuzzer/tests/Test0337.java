// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test0337 {

    public static final int N = 400;

    public static long instanceCount = -52977L;
    public static volatile float fFld = -3.837F;
    public static double dFld = -68.121788;
    public static int iFld1 = 218;
    public static short sFld = -19126;
    public static int[][] iArrFld1 = new int[N][N];
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0337.iArrFld1, -142);
    }

    public int iFld = -38578;
    public volatile int[][] iArrFld = new int[N][N];
    public double[] dArrFld = new double[N];

    public static long lMeth1() {

        int i2 = -5770, i3 = 119, i4 = 4, i5 = 11971, i6 = -37490, i7 = 86, i8 = 0, i9 = 54135;
        double d1 = 0.22209;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(byArr, (byte) -111);

        byArr = byArr;
        for (i2 = 7; 221 > i2; ++i2) {
            i3 = i3;
        }
        for (i4 = 7; i4 < 292; ++i4) {
            i3 -= (int) Test0337.instanceCount;
            i3 += (((i4 * Test0337.instanceCount) + i4) - Test0337.fFld);
            switch (((i4 >>> 1) % 9) + 75) {
                case 75:
                    Test0337.fFld -= (float) d1;
                    for (i6 = 6; 1 < i6; --i6) {
                        for (i8 = 2; i8 > 1; i8 -= 2) {
                            Test0337.fFld -= (float) d1;
                            i5 = i5;
                            i9 = i8;
                            i5 += (((i8 * Test0337.fFld) + Test0337.instanceCount) - Test0337.fFld);
                            Test0337.fFld -= Test0337.fFld;
                        }
                    }
                    break;
                case 76:
                    i7 = i2;
                case 77:
                    d1 = Test0337.instanceCount;
                    break;
                case 78:
                    i9 >>>= i3;
                    break;
                case 79:
                    Test0337.instanceCount <<= i9;
                case 80:
                    i7 = (int) Test0337.fFld;
                    break;
                case 81:
                    i5 = (int) d1;
                    break;
                case 82:
                    i7 = i9;
                    break;
                case 83:
                    Test0337.instanceCount -= Test0337.instanceCount;
                default:
                    Test0337.iArrFld1[i4][i4 - 1] += i4;
            }
        }
        long meth_res = i2 + i3 + i4 + i5 + Double.doubleToLongBits(d1) + i6 + i7 + i8 + i9 +
                FuzzerUtils.checkSum(byArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(int i1) {

        byte by = -11;
        double d = 2.40341;
        int i10 = 7, i11 = 225;

        i1 *= (int) ((i1 - (by - d)) + ((i1 - 13588L) + (Test0337.fFld - Test0337.instanceCount)));
        lMeth1();
        for (i10 = 21; i10 < 373; ++i10) {
            try {
                i1 = (i1 % 188);
                i11 = (58287 / i1);
                i11 = (100 % Test0337.iArrFld1[i10 + 1][i10]);
            } catch (ArithmeticException a_e) {
            }
            i1 >>= i10;
        }
        long meth_res = i1 + by + Double.doubleToLongBits(d) + i10 + i11;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth() {

        int i = -151, i12 = -28505, i13 = -1, i14 = 8724, i15 = -16372, i16 = 18, i17 = 173, i18 = 1;
        short s = -25727;

        i = Math.abs(i++);
        i >>>= Integer.reverseBytes(i);
        Test0337.iArrFld1[(i >>> 1) % N][(i >>> 1) % N] <<= (Test0337.iArrFld1[(i >>> 1) % N][(7 >>> 1) % N] * iMeth(i));
        i12 = 1;
        do {
            Test0337.dFld *= i12;
            s = (short) Test0337.instanceCount;
        } while (++i12 < 202);
        i += i;
        for (i13 = 2; i13 < 329; ++i13) {
            i -= i14;
            for (i15 = 1; i15 < 5; ++i15) {
                for (i17 = 1; i17 < 2; i17++) {
                    s = (short) Test0337.instanceCount;
                    i = i13;
                    i18 += Test0337.iFld1;
                    s = (short) Test0337.instanceCount;
                }
            }
        }
        long meth_res = i + i12 + s + i13 + i14 + i15 + i16 + i17 + i18;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0337 _instance = new Test0337();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i19 = -54186, i20 = -4, i21 = -229, i22 = 9, i23 = -10953, i24 = 8;
        boolean b = false;
        float[][] fArr = new float[N][N];

        FuzzerUtils.init(fArr, 40.524F);

        iArrFld = (Test0337.iArrFld1 = (iArrFld = iArrFld));
        iFld *= (int) -7L;
        Test0337.iArrFld1[(iFld >>> 1) % N][(iFld >>> 1) % N] ^= (int) ((-(-1462 + (iFld + -778043082L))) - lMeth());
        fArr[(iFld >>> 1) % N][(Test0337.iFld1 >>> 1) % N] *= iFld;
        if (b) {
            for (i19 = 10; i19 < 338; i19++) {
                Test0337.iFld1 = i20;
                Test0337.fFld -= Test0337.fFld;
                Test0337.iFld1 += (((i19 * Test0337.sFld) + Test0337.instanceCount) - Test0337.fFld);
                Test0337.iFld1 += (((i19 * i20) + iFld) - Test0337.instanceCount);
                iFld = iFld;
                Test0337.sFld = Test0337.sFld;
                switch ((i19 % 1) + 42) {
                    case 42:
                        Test0337.sFld += (short) (((i19 * Test0337.iFld1) + Test0337.instanceCount) - i20);
                        for (i21 = 4; 77 > i21; ++i21) {
                            Test0337.fFld = Test0337.sFld;
                            Test0337.fFld = i20;
                            i22 += (int) Test0337.instanceCount;
                            Test0337.fFld += Test0337.sFld;
                            iArrFld[i19][i21 + 1] -= Test0337.iFld1;
                            Test0337.iFld1 %= (int) (Test0337.sFld | 1);
                            dArrFld = dArrFld;
                        }
                        break;
                }
            }
            i23 = 1;
            do {
                try {
                    iFld = (-12 / iArrFld[i23 - 1][i23 - 1]);
                    i22 = (-21946 % iArrFld[i23][i23]);
                    i22 = (iFld / i19);
                } catch (ArithmeticException a_e) {
                }
                Test0337.iFld1 += (((i23 * i23) + i22) - Test0337.fFld);
                iFld -= Test0337.iFld1;
                Test0337.sFld *= (short) i23;
            } while (++i23 < 251);
        } else if (b) {
            i24 = 1;
            while (++i24 < 173) {
                Test0337.instanceCount += (i24 - iFld);
                Test0337.iFld1 = i22;
            }
        } else {
            i22 = iFld;
        }

        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("b fArr = " + (b ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0337.instanceCount iFld Test0337.fFld = " + Test0337.instanceCount + "," + iFld + "," +
                Float.floatToIntBits(Test0337.fFld));
        FuzzerUtils.out.println("Test0337.dFld Test0337.iFld1 Test0337.sFld = " + Double.doubleToLongBits(Test0337.dFld) + "," +
                Test0337.iFld1 + "," + Test0337.sFld);
        FuzzerUtils.out.println("iArrFld Test0337.iArrFld1 dArrFld = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0337.iArrFld1) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
