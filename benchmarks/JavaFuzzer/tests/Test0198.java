// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:57 2023
public class Test0198 {

    public static final int N = 400;

    public static long instanceCount = 435087729L;
    public static float fFld = -51.544F;
    public static boolean bFld = true;
    public static volatile int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0198.iArrFld, -76);
    }

    public static void vMeth2(float f1, int i4, float f2) {

        int i5 = 21040, i6 = 39023, i7 = -11;
        double d = -74.11708;
        byte by = -41;

        i5 = 1;
        do {
            i6 = 1;
            do {
                for (d = 1; d < 1; ++d) {
                    i4 += (int) 1279210909L;
                    i7 >>= (int) Test0198.instanceCount;
                    Test0198.instanceCount += (-5 + (d * d));
                    by += (byte) f2;
                    i7 -= 59798;
                    Test0198.iArrFld[i6 - 1] = (int) Test0198.instanceCount;
                    Test0198.instanceCount = i5;
                    switch (((i5 % 1) * 5) + 88) {
                        case 92:
                            try {
                                i7 = (i7 / 977);
                                i7 = (i7 % 4001);
                                i7 = (198 / i4);
                            } catch (ArithmeticException a_e) {
                            }
                            Test0198.instanceCount >>= 39327;
                            by = (byte) f2;
                            i7 = i6;
                        default:
                            i7 += (int) (((d * i4) + i7) - i6);
                    }
                }
            } while (++i6 < 5);
        } while (++i5 < 330);
        vMeth2_check_sum += Float.floatToIntBits(f1) + i4 + Float.floatToIntBits(f2) + i5 + i6 +
                Double.doubleToLongBits(d) + i7 + by;
    }

    public static void vMeth1(long l, int i3) {


        vMeth2(Test0198.fFld, i3, 2.7F);
        l = i3;
        vMeth1_check_sum += l + i3;
    }

    public static void vMeth() {

        int i2 = 3, i8 = -175, i9 = -197, i10 = -5103, i11 = -54042, i12 = -238;
        float f = -2.917F;
        float[][] fArr = new float[N][N];
        boolean b = false;
        short s = -21252;
        short[] sArr = new short[N];
        double d1 = 0.50656;

        FuzzerUtils.init(sArr, (short) -4494);
        FuzzerUtils.init(fArr, 41.198F);

        i2 -= (int) Test0198.instanceCount;
        i2 += (int) f;
        Test0198.instanceCount *= (long) f;
        vMeth1(Test0198.instanceCount, i2);
        for (i8 = 12; 243 > i8; ++i8) {
            Test0198.iArrFld[i8 + 1] *= i9;
            for (i10 = 1; i10 < 7; i10++) {
                if (b) break;
                switch ((((i11 >>> 1) % 2) * 5) + 110) {
                    case 118:
                        sArr[i8 - 1] = s;
                        i12 = 1;
                        do {
                            i2 /= (int) ((long) (d1) | 1);
                            fArr[i8 + 1][i10 - 1] += i11;
                        } while (++i12 < 2);
                        i9 += (((i10 * Test0198.instanceCount) + Test0198.instanceCount) - i12);
                        if (b) continue;
                        break;
                    case 112:
                        Test0198.instanceCount -= i10;
                        break;
                }
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f) + i8 + i9 + i10 + i11 + (b ? 1 : 0) + s + i12 +
                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(sArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void main(String[] strArr) {

        try {
            Test0198 _instance = new Test0198();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -119, i1 = -6, i13 = -9, i14 = -14, i15 = 9, i16 = 11, i17 = -37080;
        byte by1 = 125;
        byte[] byArr = new byte[N];
        double d2 = 1.34667;
        long l1 = 191L;

        FuzzerUtils.init(byArr, (byte) 38);

        switch (((((int) (i - Test0198.instanceCount)) >>> 1) % 6) + 5) {
            case 5:
                i1 = 1;
                do {
                    vMeth();
                    i += (((i1 * i) + i1) - i1);
                    for (i13 = 2; i13 < 205; i13++) {
                        Test0198.instanceCount >>= Test0198.instanceCount;
                        Test0198.bFld = Test0198.bFld;
                        i14 += (int) -2.108F;
                    }
                    i15 = 1;
                    while (++i15 < 205) {
                        by1 |= (byte) Test0198.instanceCount;
                        Test0198.instanceCount += (i15 - Test0198.instanceCount);
                        i += (i15 * i15);
                        Test0198.instanceCount = Test0198.instanceCount;
                        i += (((i15 * i13) + i14) - Test0198.fFld);
                        for (i16 = 1; i16 > 1; --i16) {
                            Test0198.instanceCount -= i;
                            i17 = i15;
                            i17 >>= (int) -43481L;
                            Test0198.fFld = i13;
                            switch ((i1 % 6) + 8) {
                                case 8:
                                    Test0198.bFld = Test0198.bFld;
                                    Test0198.iArrFld[i15] = 38909;
                                    break;
                                case 9:
                                    i += -4;
                                    break;
                                case 10:
                                    Test0198.iArrFld[i16 - 1] = i14;
                                    break;
                                case 11:
                                    Test0198.iArrFld[i16 + 1] *= i13;
                                    Test0198.fFld -= -115;
                                    break;
                                case 12:
                                case 13:
                                    d2 += -84;
                                    i = i14;
                                    Test0198.iArrFld[i15 + 1] = (int) l1;
                                    break;
                            }
                            byArr = byArr;
                        }
                    }
                } while (++i1 < 122);
                break;
            case 6:
                Test0198.instanceCount |= Test0198.instanceCount;
                break;
            case 7:
                Test0198.fFld += -124;
                break;
            case 8:
                i14 -= i13;
                break;
            case 9:
                Test0198.fFld %= 4L;
                break;
            case 10:
                i += (int) Test0198.instanceCount;
                break;
            default:
                i >>>= i1;
        }

        FuzzerUtils.out.println("i i1 i13 = " + i + "," + i1 + "," + i13);
        FuzzerUtils.out.println("i14 i15 by1 = " + i14 + "," + i15 + "," + by1);
        FuzzerUtils.out.println("i16 i17 d2 = " + i16 + "," + i17 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("l1 byArr = " + l1 + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test0198.instanceCount Test0198.fFld Test0198.bFld = " + Test0198.instanceCount + "," +
                Float.floatToIntBits(Test0198.fFld) + "," + (Test0198.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0198.iArrFld = " + FuzzerUtils.checkSum(Test0198.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
