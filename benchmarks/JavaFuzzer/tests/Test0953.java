// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test0953 {

    public static final int N = 400;

    public static long instanceCount = 21423L;
    public static short sFld = 10683;
    public static double dFld = -17.25945;
    public static float[][] fArrFld = new float[N][N];
    public static int[] iArrFld = new int[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0953.fArrFld, 1.759F);
        FuzzerUtils.init(Test0953.iArrFld, -33437);
    }

    public byte byFld = 70;
    public byte[][] byArrFld = new byte[N][N];

    public static int iMeth1(float f2) {

        int i3 = -112;
        int i4 = 58704;
        int i5 = -75;
        int i6 = -11;
        int i7 = 131;
        int i8 = 159;
        int i9 = -44217;
        int i10 = -17326;
        int[] iArr = new int[N];
        byte[][] byArr = new byte[N][N];

        FuzzerUtils.init(byArr, (byte) -99);
        FuzzerUtils.init(iArr, -251);

        byArr[(i3 >>> 1) % N][(41801 >>> 1) % N] = (byte) Test0953.instanceCount;
        i3 *= (int) -5L;
        i4 = 175;
        do {
            i5 = 1;
            while (++i5 < 9) {
                i3 &= i3;
                i3 = i3;
                f2 += (float) -29.56023;
            }
        } while (--i4 > 0);
        Test0953.sFld += (short) 34027;
        i6 = 1;
        while ((i6 += 2) < 281) {
            for (i7 = 1; i7 < 11; ++i7) {
                iArr[i7 - 1] = -116;
            }
            for (i9 = 1; 11 > i9; ++i9) {
                Test0953.dFld *= f2;
                if (i4 != 0) {
                }
                iArr[i6 - 1] <<= i7;
            }
        }
        long meth_res = Float.floatToIntBits(f2) + i3 + i4 + i5 + i6 + i7 + i8 + i9 + i10 + FuzzerUtils.checkSum(byArr)
                + FuzzerUtils.checkSum(iArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i2, float f1) {

        int i11 = 6144;
        int i12 = -41302;
        int i13 = -54073;
        int i14 = 0;
        int i15 = 2;
        int i16 = -179;
        int i17 = -13;
        int[] iArr1 = new int[N];
        boolean b = true;
        long[] lArr = new long[N];
        short[][] sArr = new short[N][N];

        FuzzerUtils.init(lArr, 104853206L);
        FuzzerUtils.init(sArr, (short) -26052);
        FuzzerUtils.init(iArr1, -14);

        lArr[(i2 >>> 1) % N] = (Math.min((int) (i2 / 0.259F), i2 - i2) + (sArr[(i2 >>> 1) % N][(i2 >>> 1) % N] -
                -18839L));
        i2 = (int) (iMeth1(f1) + -1.986F);
        i11 = 298;
        while (--i11 > 0) {
            i2 += (((i11 * f1) + i11) - f1);
            switch (((i11 % 10) * 5) + 6) {
                case 52:
                    if (i11 != 0) {
                        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16
                                + i17 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    break;
                case 9:
                    i2 += (int) -46L;
                    for (i12 = 1; i12 < 6; i12++) {
                        iArr1[i11 - 1] = -4;
                        for (i14 = 1; i14 < 2; i14++) {
                            i2 <<= (int) Test0953.instanceCount;
                            i13 = i12;
                            if (b) break;
                            Test0953.iArrFld[i11 + 1] = (int) Test0953.instanceCount;
                            i13 = (int) Test0953.instanceCount;
                        }
                    }
                case 40:
                    i15 = (int) Test0953.instanceCount;
                    break;
                case 13:
                    Test0953.instanceCount = (long) Test0953.dFld;
                    break;
                case 51:
                    i15 *= -254;
                    break;
                case 19:
                    i13 += (5 + (i11 * i11));
                case 48:
                    Test0953.iArrFld[i11] = i11;
                    break;
                case 53:
                    try {
                        i17 = (i16 / i12);
                        i16 = (i2 % -617315915);
                        i2 = (-29687 % i2);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 27:
                    f1 += i16;
                    break;
                case 17:
                    i17 += (int) Test0953.instanceCount;
                    break;
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i11 + i12 + i13 + i14 + i15 + (b ? 1 : 0) + i16 + i17 +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i1, long l) {

        float f3 = 2.408F;
        int i18 = -58920, i19 = 0, i20 = -151, i21 = -7136, i22 = -12020;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -6293499841444789079L);

        vMeth(i1, f3);
        lArr1 = lArr1;
        for (i18 = 137; 2 < i18; --i18) {
            switch ((i18 % 2) + 67) {
                case 67:
                    i19 = (int) Test0953.instanceCount;
                    break;
                case 68:
                    f3 = f3;
                    i19 += i18;
                    i1 = i1;
                    Test0953.iArrFld[i18] = Test0953.sFld;
            }
            i20 = 1;
            do {
                for (i21 = 1; 1 < i21; --i21) {
                    Test0953.iArrFld[i18 + 1] |= (int) l;
                    i19 += (i21 * Test0953.sFld);
                    try {
                        i22 = (i1 % i21);
                        i22 = (i22 / -2);
                        i19 = (Test0953.iArrFld[i20] / i18);
                    } catch (ArithmeticException a_e) {
                    }
                    i22 += (((i21 * i22) + Test0953.instanceCount) - i21);
                }
            } while (++i20 < 12);
        }
        long meth_res = i1 + l + Float.floatToIntBits(f3) + i18 + i19 + i20 + i21 + i22 + FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0953 _instance = new Test0953();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f = 0.515F;
        int i = -246, i23 = 29867, i24 = -16229, i25 = 6, i26 = -145, i27 = 83, i28 = -14, i29 = 67, i30 = 15050, i31 = -54;
        boolean b1 = false;
        long l1 = 6L;
        long[] lArr2 = new long[N];

        FuzzerUtils.init(lArr2, 6065283545316357798L);

        f -= (-((i + i) - (Test0953.fArrFld[(-11 >>> 1) % N][(i >>> 1) % N]--)));
        f += (i |= (i + iMeth(i, -44986L)));
        f = i;
        i = i;
        for (i23 = 10; i23 < 284; ++i23) {
            for (i25 = 5; 92 > i25; i25++) {
                if (b1) break;
                Test0953.instanceCount = (long) f;
                Test0953.instanceCount *= i25;
                i26 += i;
            }
        }
        for (i27 = 9; 173 > i27; i27++) {
            i26 *= (int) f;
            f -= 2745788549L;
            for (i29 = 9; i29 < 153; i29++) {
                Test0953.iArrFld[i29 - 1] = i30;
                if (b1) continue;
                i24 += (i29 * i30);
                i31 = 1;
                while (++i31 < 2) {
                    Test0953.fArrFld[i29][i27] = 11;
                    i30 = i30;
                    lArr2[i31] = Test0953.instanceCount;
                    Test0953.iArrFld[i29] *= byFld;
                    Test0953.instanceCount *= Test0953.instanceCount;
                }
                byArrFld[i29][i27] += (byte) i29;
                if (b1) {
                    switch ((i29 % 6) + 11) {
                        case 11:
                            i = i25;
                            Test0953.dFld += i;
                            i24 += (int) l1;
                            if (b1) continue;
                        case 12:
                            i += i29;
                            break;
                        case 13:
                        case 14:
                            l1 += i29;
                            break;
                        case 15:
                        case 16:
                            i26 <<= i23;
                            break;
                    }
                } else {
                    i28 = i24;
                }
            }
        }

        FuzzerUtils.out.println("f i i23 = " + Float.floatToIntBits(f) + "," + i + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("b1 i27 i28 = " + (b1 ? 1 : 0) + "," + i27 + "," + i28);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("l1 lArr2 = " + l1 + "," + FuzzerUtils.checkSum(lArr2));

        FuzzerUtils.out.println("Test0953.instanceCount Test0953.sFld Test0953.dFld = " + Test0953.instanceCount + "," + Test0953.sFld +
                "," + Double.doubleToLongBits(Test0953.dFld));
        FuzzerUtils.out.println("byFld Test0953.fArrFld Test0953.iArrFld = " + byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0953.fArrFld)) + "," + FuzzerUtils.checkSum(Test0953.iArrFld));
        FuzzerUtils.out.println("byArrFld = " + FuzzerUtils.checkSum(byArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
