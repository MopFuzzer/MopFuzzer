// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:00 2023
public class Test0302 {

    public static final int N = 400;

    public static long instanceCount = -44994L;
    public static boolean bFld = true;
    public static int iFld = 119;
    public static byte byFld = -45;
    public static boolean[][] bArrFld = new boolean[N][N];
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0302.bArrFld, true);
    }

    public double dFld = 66.9747;
    public long[] lArrFld = new long[N];

    public static double dMeth(int i5) {

        int i6 = -7, i7 = 107, i8 = -8, i9 = 6, i10 = 13, i11 = 21531, i12 = 218;
        float f1 = -1.930F;
        short s = 4625;
        double d1 = -2.36165;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, 1.65304);

        for (i6 = 12; i6 < 229; i6++) {
            Test0302.instanceCount = Test0302.instanceCount;
            Test0302.bFld = Test0302.bFld;
            for (i8 = i6; 7 > i8; ++i8) {
                f1 += s;
                i5 = i5;
                i9 ^= (int) Test0302.instanceCount;
                Test0302.bArrFld[i8][i6] = Test0302.bFld;
                for (i10 = 1; i10 < 1; i10 += 2) {
                    i7 = 62084;
                    i12 = i12;
                    d1 = -5;
                }
                dArr[i6 + 1] = s;
                i5 -= (int) Test0302.instanceCount;
                Test0302.instanceCount <<= i7;
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f1) + s + i10 + i11 + i12 +
                Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void vMeth(int i4) {

        int i13 = 85, i14 = -63918, i15 = -9, i16 = -2622;
        float f2 = 46.617F;
        byte by = -24;
        short s1 = -15812;
        short[] sArr = new short[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -11L);
        FuzzerUtils.init(sArr, (short) 28458);

        dMeth(Test0302.iFld);
        for (i13 = 5; i13 < 253; i13++) {
            if (Test0302.bFld) {
                if (Test0302.bFld) break;
                i4 *= Test0302.iFld;
            } else if (Test0302.bFld) {
                f2 -= i4;
                if (false) continue;
                by += (byte) (((i13 * Test0302.instanceCount) + Test0302.instanceCount) - i14);
                i4 += i13;
                vMeth_check_sum += i4 + i13 + i14 + Float.floatToIntBits(f2) + by + s1 + i15 + i16 +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                return;
            } else if (false) {
                switch (((i13 % 7) * 5) + 51) {
                    case 53:
                        s1 -= (short) -17592;
                        i4 -= (int) f2;
                        for (i15 = i13; i15 < 7; ++i15) {
                            Test0302.iFld = (int) Test0302.instanceCount;
                            i14 = i16;
                        }
                    case 56:
                        if (true) break;
                        break;
                    case 60:
                        i4 = i13;
                    case 74:
                        i14 *= i4;
                        break;
                    case 63:
                        lArr[i13] *= Test0302.instanceCount;
                        break;
                    case 64:
                        Test0302.instanceCount >>= -7;
                        break;
                    case 61:
                        Test0302.bFld = Test0302.bFld;
                        break;
                }
            } else {
                sArr[i13] <<= (short) Test0302.instanceCount;
                vMeth_check_sum += i4 + i13 + i14 + Float.floatToIntBits(f2) + by + s1 + i15 + i16 +
                        FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(sArr);
                return;
            }
        }
        vMeth_check_sum += i4 + i13 + i14 + Float.floatToIntBits(f2) + by + s1 + i15 + i16 + FuzzerUtils.checkSum(lArr)
                + FuzzerUtils.checkSum(sArr);
    }

    public static float fMeth() {

        int i = 33;
        int i1 = 59632;
        int i2 = -1;
        int i3 = -38952;
        int i17 = -1;
        int i18 = -27220;
        int[] iArr = new int[N];
        double d = 0.50604;
        float f = 34.353F;

        FuzzerUtils.init(iArr, 9);

        i = iArr[(34948 >>> 1) % N];
        i1 = 1;
        while (++i1 < 137) {
            i *= (--i);
            d -= -60;
            iArr[i1 - 1] -= (int) (i = (int) ((f - i1) - (--iArr[i1])));
            for (i2 = 11; i2 > 1; i2 -= 3) {
                vMeth(i2);
                Test0302.byFld *= (byte) i2;
            }
            if (Test0302.bFld) break;
            for (i17 = 1; i17 < 11; ++i17) {
                i = i17;
                i18 += (int) f;
                Test0302.iFld += (i17 | i17);
                Test0302.iFld >>= -12;
            }
            Test0302.byFld *= (byte) i17;
        }
        long meth_res = i + i1 + Double.doubleToLongBits(d) + Float.floatToIntBits(f) + i2 + i3 + i17 + i18 +
                FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0302 _instance = new Test0302();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        boolean b = false;
        float f3 = 2.558F;
        int i19 = 248;
        int i20 = 251;
        int i21 = 63861;
        int i22 = -11;
        int i23 = -228;
        int i24 = 0;
        int i25 = 34707;
        int i26 = 13;
        int i27 = -254;
        int i28 = -224;
        int[] iArr1 = new
                int[N];
        short s2 = 19853;

        FuzzerUtils.init(iArr1, -13);

        b = ((fMeth() - f3) < 57082);
        lArrFld[(Test0302.iFld >>> 1) % N] -= -228;
        i19 = 1;
        do {
            for (i20 = 3; i20 < 167; i20++) {
                try {
                    Test0302.iFld = (iArr1[i19 - 1] % -101347902);
                    iArr1[i20 + 1] = (i21 % Test0302.iFld);
                    i21 = (1966634906 % i19);
                } catch (ArithmeticException a_e) {
                }
                Test0302.instanceCount += (((i20 * i20) + i21) - i19);
                Test0302.instanceCount += Test0302.iFld;
                iArr1[i19] = i19;
                i22 = 1;
                do {
                    Test0302.instanceCount += i22;
                    Test0302.iFld += i22;
                } while (++i22 < 2);
                dFld = f3;
                iArr1[i20 + 1] <<= i19;
                f3 = Test0302.iFld;
                iArr1[i19] = (int) -233L;
            }
            switch ((i19 % 2) + 68) {
                case 68:
                    Test0302.instanceCount = i22;
                    break;
                case 69:
                    for (i23 = 1; i23 < 167; ++i23) {
                        switch (((i19 % 4) * 5) + 68) {
                            case 81:
                                for (i25 = 1; i25 < 2; ++i25) {
                                    try {
                                        Test0302.iFld = (i24 % -16);
                                        i26 = (1225492231 / i21);
                                        i26 = (i24 % 29555);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    iArr1[i23 - 1] = s2;
                                    dFld *= -10122L;
                                    Test0302.instanceCount = Test0302.iFld;
                                }
                                Test0302.iFld += (((i23 * i19) + f3) - i22);
                                iArr1[i19 - 1] -= i21;
                                f3 -= i25;
                                break;
                            case 70:
                                for (i27 = 1; 2 > i27; i27++) {
                                    iArr1[i27 - 1] *= i21;
                                    if (b) continue;
                                }
                                break;
                            case 86:
                                iArr1[i19 - 1] -= (int) Test0302.instanceCount;
                                break;
                            case 71:
                                i28 = -78;
                            default:
                                i24 += (((i23 * i20) + Test0302.instanceCount) - i24);
                        }
                    }
            }
        } while (++i19 < 150);

        FuzzerUtils.out.println("b f3 i19 = " + (b ? 1 : 0) + "," + Float.floatToIntBits(f3) + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 s2 i27 = " + i26 + "," + s2 + "," + i27);
        FuzzerUtils.out.println("i28 iArr1 = " + i28 + "," + FuzzerUtils.checkSum(iArr1));

        FuzzerUtils.out.println("Test0302.instanceCount Test0302.bFld Test0302.iFld = " + Test0302.instanceCount + "," + (Test0302.bFld ? 1
                : 0) + "," + Test0302.iFld);
        FuzzerUtils.out.println("Test0302.byFld dFld Test0302.bArrFld = " + Test0302.byFld + "," + Double.doubleToLongBits(dFld) +
                "," + FuzzerUtils.checkSum(Test0302.bArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
