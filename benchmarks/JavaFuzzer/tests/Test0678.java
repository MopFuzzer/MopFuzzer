// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test0678 {

    public static final int N = 400;

    public static long instanceCount = -5528499137833935265L;
    public static boolean bFld = false;
    public static byte[] byArrFld = new byte[N];
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0678.byArrFld, (byte) -34);
    }

    public static void vMeth(int i3, long l1) {

        long l2 = 4L;
        long[][] lArr = new long[N][N];
        int i4 = -1;
        int i5 = -7;
        int i6 = 93;
        int i7 = -31284;
        int[][] iArr1 = new int[N][N];
        float f = -67.569F, f1 = -1.265F;
        double d1 = 124.71103;
        byte by1 = 45;
        boolean b = true;

        FuzzerUtils.init(iArr1, 63568);
        FuzzerUtils.init(lArr, -33159L);

        iArr1 = FuzzerUtils.int2array(N, (int) 54288);
        for (l2 = 1; l2 < 398; l2++) {
            for (i5 = (int) (l2); i5 < 4; i5 += 3) {
                for (f = 1; f > 1; --f) {
                    try {
                        i6 = (i7 % iArr1[i5][i5 + 1]);
                        i7 = (i6 / iArr1[i5][(int) (f)]);
                        i3 = (i3 % i3);
                    } catch (ArithmeticException a_e) {
                    }
                    f1 += (float) d1;
                    by1 += (byte) (f + i6);
                    if (b) break;
                    iArr1[(int) (l2 - 1)][i5 - 1] >>>= i3;
                    i7 = i3;
                    i7 += (int) (f * f);
                    d1 *= i5;
                    lArr[(int) (f - 1)][i5 + 1] = -193;
                }
                f1 -= i3;
            }
            d1 += -176L;
        }
        vMeth_check_sum += i3 + l1 + l2 + i4 + i5 + i6 + Float.floatToIntBits(f) + i7 + Float.floatToIntBits(f1) +
                Double.doubleToLongBits(d1) + by1 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth1(byte by, int i1) {

        int i2 = 2;
        int i9 = -4;
        int i10 = -17616;
        int i11 = -34003;
        int i12 = -101;
        int[] iArr2 = new int[N];
        double d2 = 126.100702;
        short s = 19683;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr2, -6265);
        FuzzerUtils.init(lArr1, 14L);

        i2 = 1;
        while (++i2 < 152) {
            vMeth(i2, Test0678.instanceCount);
            i1 *= -29651;
        }
        for (int i8 : iArr2) {
            for (d2 = 1; d2 < 4; d2++) {
                for (i10 = 2; i10 > 1; i10 -= 3) {
                    i1 = (int) Test0678.instanceCount;
                    lArr1[i10] = Test0678.instanceCount;
                    iArr2[(int) (d2 - 1)] -= i1;
                    s <<= (short) i11;
                    iArr2[(int) (d2 + 1)] = i12;
                    i12 = by;
                    i9 += i10;
                    Test0678.instanceCount += i12;
                    i1 *= i12;
                }
            }
        }
        long meth_res = by + i1 + i2 + Double.doubleToLongBits(d2) + i9 + i10 + i11 + s + i12 +
                FuzzerUtils.checkSum(iArr2) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(double d, long l) {

        byte by2 = 66;
        int i13 = 124;
        int i14 = -214;
        int i15 = -58;
        int i16 = -14;
        int[] iArr3 = new int[N];
        short s1 = 20351;
        long l3 = -627669296L;
        long[] lArr2 = new long[N];
        boolean[] bArr = new boolean[N];

        FuzzerUtils.init(lArr2, -9214536338073800825L);
        FuzzerUtils.init(iArr3, -100);
        FuzzerUtils.init(bArr, true);

        Test0678.instanceCount = iMeth1(by2, i13);
        s1 = (short) i13;
        i13 = (int) Test0678.instanceCount;
        i13 = (int) Test0678.instanceCount;
        lArr2[(i13 >>> 1) % N] = l;
        i13 <<= (int) Test0678.instanceCount;
        i13 += i13;
        i14 = 1;
        while (++i14 < 270) {
            for (l3 = 1; l3 < 6; ++l3) {
                iArr3[i14 + 1] *= (int) d;
                bArr[i14 + 1] = Test0678.bFld;
                i16 = 1;
                do {
                    i13 = i14;
                    i15 <<= i14;
                    i15 = (int) d;
                } while (++i16 < 2);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + l + by2 + i13 + s1 + i14 + l3 + i15 + i16 +
                FuzzerUtils.checkSum(lArr2) + FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0678 _instance = new Test0678();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -199;
        int i17 = -14190;
        int i18 = 61;
        int i19 = -59096;
        int i20 = -123;
        int i21 = -23;
        int i22 = -9;
        int i23 = -14;
        int i24 = -159;
        int i25 = -57315;
        int i26 = -9;
        int[] iArr = new int[N];
        double d3 = -38.52245;
        float f2 = 2.527F, f3 = 0.945F;
        short s2 = -30287;
        byte by3 = 8;
        long[] lArr3 = new long[N];

        FuzzerUtils.init(iArr, 67);
        FuzzerUtils.init(lArr3, 8L);

        i &= ((++i) - (i -= (iArr[(i >>> 1) % N] = i)));
        iMeth(d3, Test0678.instanceCount);
        for (f2 = 15; 246 > f2; ++f2) {
            for (i18 = 5; i18 < 109; ++i18) {
                i = 44905;
                i17 += 176;
                Test0678.byArrFld[(int) (f2)] >>= (byte) i18;
                i17 *= i19;
                i19 += (i18 | Test0678.instanceCount);
                f3 += (((i18 * i18) + Test0678.instanceCount) - i19);
                d3 = 15338;
                i17 = s2;
                i17 += (-141 + (i18 * i18));
                Test0678.instanceCount = i18;
            }
            lArr3 = lArr3;
            iArr[(int) (f2 + 1)] = by3;
            if (true) break;
            iArr[(int) (f2 + 1)] >>= s2;
            Test0678.instanceCount += (long) (f2 * f2);
            for (i20 = 6; i20 < 109; ++i20) {
                d3 -= Test0678.instanceCount;
                i21 += (int) (-3583297172859008773L + (i20 * i20));
                Test0678.instanceCount += (((i20 * i20) + i18) - i21);
                i22 += -3213;
            }
            for (i23 = 3; i23 < 109; ++i23) {
                for (i25 = 1; 2 > i25; i25++) {
                    i24 = i21;
                    if (Test0678.bFld) break;
                    Test0678.instanceCount -= 80L;
                    iArr[(int) (f2 + 1)] += -122;
                }
            }
        }

        FuzzerUtils.out.println("i d3 f2 = " + i + "," + Double.doubleToLongBits(d3) + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("f3 s2 by3 = " + Float.floatToIntBits(f3) + "," + s2 + "," + by3);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 iArr lArr3 = " + i26 + "," + FuzzerUtils.checkSum(iArr) + "," +
                FuzzerUtils.checkSum(lArr3));

        FuzzerUtils.out.println("Test0678.instanceCount Test0678.bFld Test0678.byArrFld = " + Test0678.instanceCount + "," + (Test0678.bFld
                ? 1 : 0) + "," + FuzzerUtils.checkSum(Test0678.byArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
