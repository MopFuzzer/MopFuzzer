// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test0132 {

    public static final int N = 400;

    public static volatile long instanceCount = 2L;
    public static volatile byte byFld = 72;
    public static double dFld = -2.18241;
    public static boolean bFld = true;
    public static float fFld = -2.790F;
    public static int[] iArrFld = new int[N];
    public static long[] lArrFld1 = new long[N];
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0132.iArrFld, -48033);
        FuzzerUtils.init(Test0132.lArrFld1, 4254865048L);
    }

    public boolean bFld1 = true;
    public short sFld = -26889;
    public volatile long[] lArrFld = new long[N];
    public float[] fArrFld = new float[N];

    public static void vMeth1() {

        double d = -63.16094;
        int i2 = 0, i4 = -222, i5 = -39197, i6 = 63, i7 = -6;
        short s = -23843;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(byArr, (byte) 13);

        for (d = 10; 177 > d; ++d) {
            i2 += Test0132.byFld;
            i2 *= i2;
            i2 <<= s;
            Test0132.instanceCount = Test0132.instanceCount;
            Test0132.instanceCount = i2;
            byArr[(int) (d - 1)] = (byte) i2;
            for (i4 = 1; i4 < 9; ++i4) {
                Test0132.dFld += 149;
                Test0132.instanceCount += i4;
                i5 -= i5;
                i2 += (-78 + (i4 * i4));
                for (i6 = 1; i6 < 2; ++i6) {
                    i7 <<= i2;
                    Test0132.iArrFld = Test0132.iArrFld;
                }
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d) + i2 + s + i4 + i5 + i6 + i7 + FuzzerUtils.checkSum(byArr);
    }

    public static long lMeth(int i1) {

        int i8 = 192, i9 = 1, i10 = -3, i11 = -115, i12 = 0;
        float f1 = 0.348F;
        short s1 = -25513;

        vMeth1();
        i8 = 1;
        do {
            for (i9 = i8; 5 > i9; ++i9) {
                i1 = i8;
                try {
                    i1 = (Test0132.iArrFld[i9 - 1] / i9);
                    i1 = (-27243 / i8);
                    i1 = (41 % i10);
                } catch (ArithmeticException a_e) {
                }
                Test0132.instanceCount |= Test0132.byFld;
                for (i11 = 1; i11 < 1; i11++) {
                    f1 += (i11 * i11);
                    Test0132.byFld += (byte) -9;
                    Test0132.dFld = i11;
                    Test0132.byFld = (byte) i12;
                    Test0132.lArrFld1[i9 + 1] *= i1;
                    if (Test0132.bFld) continue;
                    Test0132.instanceCount = Test0132.byFld;
                }
                f1 -= s1;
            }
        } while (++i8 < 316);
        long meth_res = i1 + i8 + i9 + i10 + i11 + i12 + Float.floatToIntBits(f1) + s1;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0132 _instance = new Test0132();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth() {

        long l = 1977310644L;
        int i = 0, i13 = 56, i14 = 36127;
        float f = 2.586F;

        for (l = 2; l < 354; l++) {
            f += (float) (((--Test0132.dFld) - lMeth(i)) + f);
            i += (int) (l * l);
        }
        i13 = 1;
        while (++i13 < 388) {
            f -= i;
            i = (int) -2.108183;
            if (i13 != 0) {
                vMeth_check_sum += l + i + Float.floatToIntBits(f) + i13 + i14;
                return;
            }
            if (Test0132.bFld) continue;
            i = (int) Test0132.instanceCount;
            Test0132.bFld = bFld1;
            f += Test0132.instanceCount;
            i14 = 1;
            while (++i14 < 4) {
                i -= 2;
                i = i14;
            }
            Test0132.instanceCount -= 2;
        }
        vMeth_check_sum += l + i + Float.floatToIntBits(f) + i13 + i14;
    }

    public void mainTest(String[] strArr1) {

        int i15 = -2, i16 = 10, i17 = -237, i18 = 72, i19 = -17736, i20 = -1267, i21 = 3, i22 = 89, i23 = 141, i24 = 38232, i25 = 189;
        long l1 = -2149685452L;

        lArrFld[(-8 >>> 1) % N] += Test0132.byFld;
        vMeth();
        i15 += -63038;
        i15 -= i15;
        i16 = 296;
        while ((i16 -= 2) > 0) {
            Test0132.fFld -= i16;
        }
        for (i17 = 5; i17 < 140; i17++) {
            switch ((i17 % 7) + 53) {
                case 53:
                    for (i19 = 1; i19 < 186; ++i19) {
                        try {
                            i20 = (i19 / -113);
                            i20 = (i15 % -95700596);
                            i15 = (i18 / 57288);
                        } catch (ArithmeticException a_e) {
                        }
                        Test0132.dFld -= Test0132.instanceCount;
                        Test0132.iArrFld[i19 - 1] = i18;
                        i18 *= i15;
                        for (l1 = 1; l1 < 2; l1++) {
                            i21 += sFld;
                            Test0132.iArrFld[i19 - 1] -= i19;
                            Test0132.instanceCount = Test0132.instanceCount;
                        }
                        Test0132.instanceCount <<= i16;
                        Test0132.dFld -= Test0132.instanceCount;
                        i20 = 13;
                    }
                    break;
                case 54:
                    for (i22 = i17; i22 < 186; ++i22) {
                        i18 += (int) Test0132.fFld;
                        for (i24 = 1; 1 > i24; ++i24) {
                            Test0132.instanceCount = i17;
                            Test0132.fFld = l1;
                            i25 ^= i15;
                            Test0132.fFld += (float) Test0132.dFld;
                            Test0132.instanceCount *= i20;
                            Test0132.instanceCount += i24;
                        }
                        lArrFld = Test0132.lArrFld1;
                    }
                case 55:
                    Test0132.instanceCount = l1;
                    break;
                case 56:
                case 57:
                    i18 += (43877 + (i17 * i17));
                    break;
                case 58:
                    bFld1 = Test0132.bFld;
                    break;
                case 59:
                    lArrFld[i17 + 1] = 42362;
            }
        }

        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("l1 i21 i22 = " + l1 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);

        FuzzerUtils.out.println("Test0132.instanceCount Test0132.byFld Test0132.dFld = " + Test0132.instanceCount + "," + Test0132.byFld +
                "," + Double.doubleToLongBits(Test0132.dFld));
        FuzzerUtils.out.println("Test0132.bFld bFld1 Test0132.fFld = " + (Test0132.bFld ? 1 : 0) + "," + (bFld1 ? 1 : 0) + "," +
                Float.floatToIntBits(Test0132.fFld));
        FuzzerUtils.out.println("sFld lArrFld Test0132.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(lArrFld) + "," +
                FuzzerUtils.checkSum(Test0132.iArrFld));
        FuzzerUtils.out.println("Test0132.lArrFld1 fArrFld = " + FuzzerUtils.checkSum(Test0132.lArrFld1) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
