// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0205 {

    public static final int N = 400;

    public static long instanceCount = 8L;
    public static volatile int iFld = -148;
    public static volatile boolean bFld = false;
    public static float fFld = 1.292F;
    public static volatile float[] fArrFld = new float[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0205.fArrFld, -2.129F);
    }

    public short sFld = -11649;
    public long[] lArrFld = new long[N];

    public static void vMeth1(long l, int i3) {

        byte by = -33;
        short s = 25286;

        Test0205.fArrFld[(i3 >>> 1) % N] = ((++by) - s);
        vMeth1_check_sum += l + i3 + by + s;
    }

    public static int iMeth(float f, double d, short s1) {

        int i4 = 62005;
        int i5 = 13;
        int[][] iArr = new int[N][N];
        long l1 = 100L;
        boolean b = true;
        boolean[] bArr = new boolean[N];
        byte[] byArr = new byte[N];

        FuzzerUtils.init(iArr, -44323);
        FuzzerUtils.init(byArr, (byte) -77);
        FuzzerUtils.init(bArr, false);

        if (true) {
            vMeth1(Test0205.instanceCount, Test0205.iFld);
            Test0205.iFld &= Test0205.iFld;
        } else {
            iArr[(-9499 >>> 1) % N][(Test0205.iFld >>> 1) % N] -= (int) Test0205.instanceCount;
            for (i4 = 5; 163 > i4; i4++) {
                l1 >>>= Test0205.iFld;
                Test0205.instanceCount += 46;
                i5 *= i5;
                s1 = (short) i5;
                try {
                    i5 = (iArr[i4 - 1][i4] / i5);
                    Test0205.iFld = (iArr[i4 - 1][i4] % i4);
                    iArr[i4 + 1][i4] = (-13 / i4);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        byArr[(i5 >>> 1) % N] = (byte) s1;
        f -= Test0205.iFld;
        bArr[(i5 >>> 1) % N] = b;
        Test0205.iFld -= Test0205.iFld;
        i5 -= Test0205.iFld;
        long meth_res = Float.floatToIntBits(f) + Double.doubleToLongBits(d) + s1 + i4 + i5 + l1 + (b ? 1 : 0) +
                FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0205 _instance = new Test0205();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i, int i1, int i2) {

        float f1 = -95.390F;
        double d1 = -8.20874;
        short s2 = -14113;
        int i6 = -20934;
        int i7 = 8;
        int i8 = 193;
        int[] iArr1 = new int[N];
        long l2 = -3815651099L;
        byte by1 = 114;
        boolean[] bArr1 = new boolean[N];

        FuzzerUtils.init(iArr1, 50389);
        FuzzerUtils.init(bArr1, true);

        vMeth1(Test0205.instanceCount++, (int) (iMeth(f1, d1, s2) - -3525732362L));
        if (Test0205.bFld) {
            Test0205.fArrFld[(i >>> 1) % N] = Test0205.instanceCount;
        } else if (Test0205.bFld) {
            iArr1[(i2 >>> 1) % N] -= (int) Test0205.instanceCount;
            f1 *= i;
            bArr1[(i >>> 1) % N] = Test0205.bFld;
        } else if (Test0205.bFld) {
            i6 = 1;
            while (++i6 < 348) {
                Test0205.iFld += (int) d1;
                for (l2 = 1; 5 > l2; l2++) {
                    i2 *= (int) 107.66450;
                    Test0205.fArrFld[i6] = i1;
                    i7 += (int) (l2 * l2);
                }
            }
            i8 = 172;
            while (--i8 > 0) {
                Test0205.instanceCount = i6;
            }
        }
        s2 += by1;
        vMeth_check_sum += i + i1 + i2 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + s2 + i6 + l2 + i7 +
                i8 + by1 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(bArr1);
    }

    public void mainTest(String[] strArr1) {

        int i9 = 5;
        int i10 = 106;
        int i11 = -7;
        int i12 = -4;
        int i13 = -237;
        int i14 = 23449;
        int i15 = 51005;
        int i16 = -4;
        int i17 = -16;
        int[][] iArr2 = new int[N][N];
        long l3 = -2765813671L;

        FuzzerUtils.init(iArr2, -37810);

        vMeth(Test0205.iFld, Test0205.iFld, -9);
        for (i9 = 4; i9 < 288; i9++) {
            for (i11 = 1; i11 < 89; i11++) {
                iArr2[i9 - 1][i11 - 1] -= sFld;
                Test0205.bFld = false;
                Test0205.fFld -= -2.571F;
                i10 -= i11;
            }
            if (Test0205.bFld) break;
            for (i13 = 4; i13 < 89; i13++) {
                Test0205.instanceCount >>= i14;
                Test0205.instanceCount |= i9;
                i14 = i13;
                Test0205.instanceCount >>= Test0205.instanceCount;
                i12 = i10;
                try {
                    i14 = (i13 / -48);
                    Test0205.iFld = (i12 % i11);
                    iArr2[i9][i9] = (i11 % 49760);
                } catch (ArithmeticException a_e) {
                }
                Test0205.instanceCount += (((i13 * i11) + Test0205.fFld) - i13);
                Test0205.instanceCount = Test0205.instanceCount;
                Test0205.iFld >>= 3;
                i14 += i13;
            }
            Test0205.iFld += Test0205.iFld;
            i14 += i9;
            i14 <<= i14;
            Test0205.instanceCount &= i14;
            for (i15 = 89; i15 > i9; --i15) {
                i14 += i10;
                i16 += (((i15 * i16) + Test0205.instanceCount) - Test0205.instanceCount);
                for (l3 = 1; 1 > l3; ++l3) {
                    sFld = (short) Test0205.fFld;
                    iArr2[i9 + 1][(int) (l3)] = 21982;
                    lArrFld[(int) (l3 + 1)] -= i12;
                }
            }
        }

        FuzzerUtils.out.println("i9 i10 i11 = " + i9 + "," + i10 + "," + i11);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 l3 = " + i15 + "," + i16 + "," + l3);
        FuzzerUtils.out.println("i17 iArr2 = " + i17 + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test0205.instanceCount Test0205.iFld Test0205.bFld = " + Test0205.instanceCount + "," + Test0205.iFld +
                "," + (Test0205.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld Test0205.fFld Test0205.fArrFld = " + sFld + "," + Float.floatToIntBits(Test0205.fFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0205.fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest iMeth
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
