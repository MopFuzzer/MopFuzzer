// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:16 2023
public class Test0920 {

    public static final int N = 400;

    public static long instanceCount = 62L;
    public static double dFld = -1.121874;
    public static float fFld = -1.239F;
    public static float[] fArrFld1 = new float[N];
    public static volatile long[] lArrFld = new long[N];
    public static int[] iArrFld = new int[N];
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0920.fArrFld1, 2.560F);
        FuzzerUtils.init(Test0920.lArrFld, 252L);
        FuzzerUtils.init(Test0920.iArrFld, 30763);
    }

    public volatile int iFld = 61;
    public int iFld1 = 31342;
    public float[] fArrFld = new float[N];
    public double[] dArrFld = new double[N];

    public static void vMeth(int i13, int i14) {

        int i15 = 8586;
        int i16 = -103;
        int i17 = 61193;
        int i18 = -11;
        int[] iArr1 = new int[N];

        FuzzerUtils.init(iArr1, 60789);

        for (i15 = 12; i15 < 347; i15++) {
            boolean b1 = true;
            Test0920.fArrFld1[i15 - 1] -= (float) Test0920.dFld;
            i16 += (i15 - i16);
            Test0920.fFld += Test0920.instanceCount;
            Test0920.instanceCount -= i13;
            if (b1) {
                Test0920.lArrFld[i15 - 1] *= i15;
                Test0920.instanceCount += -9;
                Test0920.fFld += i13;
            }
            i14 = (int) Test0920.instanceCount;
            for (i17 = 1; i17 < 5; i17++) {
                iArr1[i15] >>= i14;
                Test0920.lArrFld[i17 + 1] = 21L;
                i14 = i18;
                i14 >>= -13;
            }
        }
        vMeth_check_sum += i13 + i14 + i15 + i16 + i17 + i18 + FuzzerUtils.checkSum(iArr1);
    }

    public static void main(String[] strArr) {

        try {
            Test0920 _instance = new Test0920();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public double dMeth(int i6, int i7) {

        int i8 = 13, i9 = -14, i10 = -95, i11 = -12, i12 = -163, i19 = -101, i20 = 11814;
        byte by1 = 16;
        boolean b2 = false;
        double d = -29.34759;

        for (i8 = 16; i8 < 339; ++i8) {
            for (i10 = 1; i10 < 5; ++i10) {
                Test0920.fFld = iFld;
                by1 *= (byte) iFld;
                i12 = 1;
                while (++i12 < 2) {
                    vMeth(2, i6);
                    if (b2) break;
                    Test0920.iArrFld[i8 + 1] = -3;
                    i11 += (i12 - iFld1);
                }
            }
            i19 >>= (int) Test0920.instanceCount;
            for (d = i8; d < 5; ++d) {
                Test0920.iArrFld[(int) (d)] = iFld1;
                fArrFld = Test0920.fArrFld1;
                Test0920.instanceCount += i20;
            }
        }
        Test0920.fFld -= i8;
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + by1 + i12 + (b2 ? 1 : 0) + i19 + Double.doubleToLongBits(d) +
                i20;
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public int iMeth(int i, long l) {

        int i1 = 174;
        int i2 = 1;
        int i3 = -52359;
        int i4 = -68;
        int i5 = 12;
        int[] iArr = new int[N];
        float f = 0.331F;
        boolean b = true;
        byte by = -48;

        FuzzerUtils.init(iArr, -13);

        Test0920.dFld %= (((long) ((iFld1 = iFld1) + fArrFld[(iFld1 >>> 1) % N])) | 1);
        iFld1 = i1;
        for (i2 = 15; 265 > i2; i2++) {
            for (i4 = 1; i4 < 7; ++i4) {
                f += (-10777 + (i4 * i4));
                iFld1 = (int) ((-9 + (l + l)) - i3);
                b = b;
                iArr[i2] = (int) (iFld1 * fArrFld[i2 + 1]);
            }
            iArr[i2 - 1] -= (iArr[i2 - 1] - (--iArr[i2 + 1]));
            by += (byte) (-130 + (i2 * i2));
            i1 *= (int) dMeth(i4, iFld1);
        }
        l |= i5;
        i3 >>= i1;
        iArr[(i >>> 1) % N] -= 18276;
        l <<= i1;
        long meth_res = i + l + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + (b ? 1 : 0) + by +
                FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i21 = 233, i22 = -47, i23 = 4, i24 = 21764, i25 = -35, i26 = 15484, i27 = -2421, i28 = -1, i29 = -5, i30 = -10, i31 = -2, i32 = 4;
        boolean b3 = true;
        byte by2 = -42;
        float f1 = -27.977F;

        iFld *= (iFld - (-iMeth(35663, Test0920.instanceCount)));
        iFld1 = iFld;
        for (i21 = 4; i21 < 163; i21++) {
            Test0920.instanceCount = 748365478643272310L;
            if (b3) continue;
            i23 = 1;
            while (++i23 < 158) {
                i22 -= -27877;
                Test0920.instanceCount >>= -59675;
                by2 >>>= (byte) -85;
            }
            i22 = iFld1;
            iFld += (((i21 * iFld) + Test0920.instanceCount) - i23);
            Test0920.iArrFld[i21] = iFld1;
            i22 = (int) Test0920.instanceCount;
            for (i24 = 158; i24 > i21; --i24) {
                Test0920.iArrFld[i21 - 1] = i25;
            }
            i26 = 1;
            do {
                Test0920.iArrFld[i26] = i21;
            } while ((i26 += 2) < 158);
            iFld1 -= (int) Test0920.instanceCount;
        }
        Test0920.dFld -= i21;
        for (i27 = 1; i27 < 348; i27++) {
            if (b3) continue;
        }
        for (i29 = 21; i29 < 373; i29++) {
            f1 = 72;
            do {
                i25 >>= i29;
            } while (--f1 > 0);
            switch ((i29 % 8) + 51) {
                case 51:
                    dArrFld[i29 + 1] *= i24;
                case 52:
                    for (i31 = i29; i31 < 72; i31++) {
                        if (b3) {
                            Test0920.iArrFld[i29] = i32;
                            iFld1 += i31;
                        }
                    }
                    break;
                case 53:
                case 54:
                    Test0920.iArrFld[i29 + 1] = (int) f1;
                    break;
                case 55:
                    Test0920.iArrFld[i29 + 1] >>= i26;
                    break;
                case 56:
                    Test0920.dFld += f1;
                case 57:
                    Test0920.instanceCount *= iFld1;
                case 58:
                    Test0920.instanceCount += (((i29 * i25) + Test0920.instanceCount) - i32);
                    break;
            }
        }

        FuzzerUtils.out.println("i21 i22 b3 = " + i21 + "," + i22 + "," + (b3 ? 1 : 0));
        FuzzerUtils.out.println("i23 by2 i24 = " + i23 + "," + by2 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("f1 i31 i32 = " + Float.floatToIntBits(f1) + "," + i31 + "," + i32);

        FuzzerUtils.out.println("Test0920.instanceCount iFld Test0920.dFld = " + Test0920.instanceCount + "," + iFld + "," +
                Double.doubleToLongBits(Test0920.dFld));
        FuzzerUtils.out.println("iFld1 Test0920.fFld fArrFld = " + iFld1 + "," + Float.floatToIntBits(Test0920.fFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("Test0920.fArrFld1 Test0920.lArrFld Test0920.iArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0920.fArrFld1)) + "," + FuzzerUtils.checkSum(Test0920.lArrFld) +
                "," + FuzzerUtils.checkSum(Test0920.iArrFld));
        FuzzerUtils.out.println("dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  vMeth ->  vMeth dMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
