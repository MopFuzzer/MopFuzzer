// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:01 2023
public class Test0338 {

    public static final int N = 400;

    public static long instanceCount = -1L;
    public static boolean bFld = false;
    public static byte byFld = 106;
    public static volatile double dFld = 0.26054;
    public static int[] iArrFld = new int[N];
    public static double[] dArrFld = new double[N];
    public static volatile long[] lArrFld = new long[N];
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0338.iArrFld, -10);
        FuzzerUtils.init(Test0338.dArrFld, -4.17472);
        FuzzerUtils.init(Test0338.lArrFld, 2757029965038226971L);
    }

    public static void vMeth1(int i4) {

        int i5 = 0;
        int i6 = -212;
        int[] iArr1 = new int[N];
        float f1 = 2.776F;

        FuzzerUtils.init(iArr1, -19715);

        for (i5 = 209; i5 > 4; --i5) {
            i4 -= 42176;
        }
        Test0338.iArrFld[(-160 >>> 1) % N] -= -51891;
        i6 >>>= i5;
        f1 += i4;
        iArr1 = FuzzerUtils.int1array(N, (int) 91);
        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(int i2, int i3) {

        int i7 = -76, i8 = 9, i9 = 117, i10 = -169, i11 = 1, i12 = -36388, i13 = 86;
        float f2 = -115.55F;
        double d = 0.64687;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 54L);

        vMeth1(i2);
        Test0338.iArrFld = Test0338.iArrFld;
        for (i7 = 3; i7 < 210; i7++) {
            for (i9 = 1; i9 < 8; i9++) {
                for (f2 = 1; f2 < 2; f2++) {
                    Test0338.iArrFld[(int) (f2 - 1)] = (int) -109L;
                    Test0338.instanceCount += -5;
                }
                i3 %= (int) (Test0338.instanceCount | 1);
                i10 += (i9 ^ i2);
                i10 <<= i2;
                i11 += (i9 * i9);
                switch ((i7 % 8) + 50) {
                    case 50:
                        for (i12 = 1; i12 < 2; ++i12) {
                            d -= Test0338.instanceCount;
                            if (Test0338.bFld) break;
                        }
                        break;
                    case 51:
                        Test0338.dArrFld[i9 - 1] -= -32.60963;
                    case 52:
                        lArr[i9 - 1] = (long) f2;
                        break;
                    case 53:
                        d = f2;
                        break;
                    case 54:
                        i3 -= (int) Test0338.instanceCount;
                    case 55:
                        i8 += (i9 * i9);
                        break;
                    case 56:
                        i3 -= (int) 0L;
                        break;
                    case 57:
                        Test0338.iArrFld[i7] >>= i11;
                        break;
                    default:
                        i11 += i11;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i7 + i8 + i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 +
                Double.doubleToLongBits(d) + FuzzerUtils.checkSum(lArr);
    }

    public static long lMeth(float f) {

        int i14 = 44576, i15 = 7, i16 = 199, i17 = -116, i18 = 86, i19 = -39;
        double d1 = 0.39625;
        byte by = 27;

        vMeth(i14, 9);
        i15 = 311;
        while (--i15 > 0) {
            if (Test0338.bFld) break;
            i14 = (int) d1;
            i14 = i14;
            for (i16 = 1; i16 < 5; ++i16) {
                i14 += i15;
                if (Test0338.bFld) {
                    i17 += (i16 + i17);
                    for (i18 = 1; 2 > i18; ++i18) {
                        Test0338.lArrFld[i18 + 1] += i19;
                        switch ((i18 % 1) * 5) {
                            case 1:
                                f += (((i18 * i18) + Test0338.instanceCount) - i18);
                                Test0338.iArrFld[i15 + 1] >>= i15;
                                Test0338.instanceCount = Test0338.instanceCount;
                                break;
                        }
                    }
                } else if (true) {
                    i17 /= (int) (by | 1);
                } else if (Test0338.bFld) {
                    i17 *= i17;
                } else {
                    d1 += -4;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i14 + i15 + Double.doubleToLongBits(d1) + i16 + i17 + i18 + i19 + by;
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr2) {

        try {
            Test0338 _instance = new Test0338();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr2);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr3) {

        float f3 = 0.641F;
        int i20 = 129;
        int i21 = 11;
        int i22 = -17;
        int i23 = 11996;
        int i24 = 1870;
        int i25 = -7370;
        int[] iArr = new int[N];
        long l = -13L;
        short s = 24927;

        FuzzerUtils.init(iArr, -57);

        for (int i1 : iArr) {
            try {
                i1 = (i1 / 233);
                iArr[(i1 >>> 1) % N] = (i1 / i1);
                i1 = (i1 % 574700898);
            } catch (ArithmeticException a_e) {
            }
            i1 = (int) Test0338.instanceCount;
            if (((lMeth(1.593F) + i1) != i1) | Test0338.bFld) break;
            f3 = i1;
            Test0338.iArrFld[(i1 >>> 1) % N] = (int) f3;
            i1 <<= i1;
            i1 -= i1;
            i20 = 1;
            do {
                for (l = 1; 1 > l; ++l) {
                    Test0338.lArrFld[(int) (l - 1)] = i21;
                    Test0338.iArrFld = iArr;
                    i1 |= (int) l;
                    f3 += l;
                    Test0338.dArrFld = FuzzerUtils.double1array(N, (double) 29.89160);
                    i1 += (int) (l + i1);
                    Test0338.instanceCount = l;
                    Test0338.instanceCount -= (long) f3;
                }
                Test0338.byFld -= (byte) i1;
                Test0338.lArrFld[i20 + 1] = i21;
                Test0338.iArrFld[i20] += i20;
                i21 = (int) Test0338.dFld;
                i1 -= (int) Test0338.instanceCount;
                i1 = s;
            } while (++i20 < 63);
            for (i22 = 2; i22 < 63; i22 += 2) {
                i21 = -21973;
                for (i24 = 1; i24 < 3; i24++) {
                    f3 = 7;
                    i25 /= (int) ((long) (f3) | 1);
                    i1 *= i23;
                }
            }
        }

        FuzzerUtils.out.println("f3 i20 l = " + Float.floatToIntBits(f3) + "," + i20 + "," + l);
        FuzzerUtils.out.println("i21 s i22 = " + i21 + "," + s + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr = " + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0338.instanceCount Test0338.bFld Test0338.byFld = " + Test0338.instanceCount + "," + (Test0338.bFld ?
                1 : 0) + "," + Test0338.byFld);
        FuzzerUtils.out.println("Test0338.dFld Test0338.iArrFld Test0338.dArrFld = " + Double.doubleToLongBits(Test0338.dFld) + "," +
                FuzzerUtils.checkSum(Test0338.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0338.dArrFld)));
        FuzzerUtils.out.println("Test0338.lArrFld = " + FuzzerUtils.checkSum(Test0338.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
