// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test0112 {

    public static final int N = 400;

    public static long instanceCount = 12L;
    public static boolean bFld = false;
    public static int iFld = -3;
    public static float fFld = -1.22F;
    public static double dFld = 95.18991;
    public static float[] fArrFld = new float[N];
    public static boolean[] bArrFld = new boolean[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0112.fArrFld, 0.566F);
        FuzzerUtils.init(Test0112.bArrFld, false);
    }

    public static double dMeth() {

        int i12 = 202, i13 = 3700, i14 = 2, i15 = 7, i16 = 50, i17 = 11, i18 = -66;
        float f1 = 72.523F;
        double d = 123.30186;

        Test0112.instanceCount = i12;
        i13 = 1;
        do {
            for (i14 = 1; i14 < 5; i14++) {
                for (i16 = 1; i16 < 2; i16++) {
                    if (Test0112.bFld) {
                        if (Test0112.bFld) break;
                        f1 *= Test0112.iFld;
                        Test0112.iFld &= i14;
                    } else if (Test0112.bFld) {
                        d -= i14;
                        i12 >>>= (int) Test0112.instanceCount;
                        f1 += (float) d;
                        i17 = i18;
                    } else {
                        i18 += (((i16 * i16) + i12) - Test0112.instanceCount);
                        i18 = (int) Test0112.instanceCount;
                        i18 += (i16 * i15);
                    }
                }
            }
        } while (++i13 < 332);
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d) + i18;
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static int iMeth(int i7, int i8, int i9) {

        int i10 = 187;
        int i11 = 45;
        int[] iArr1 = new int[N];
        double d1 = 0.96260;

        FuzzerUtils.init(iArr1, -7);

        for (i10 = 6; i10 < 329; ++i10) {
            Test0112.instanceCount = (Math.max((int) (Test0112.instanceCount | Test0112.instanceCount), iArr1[i10 - 1]) +
                    2762113776L);
            if (Math.sqrt(dMeth()) == d1) break;
            Test0112.bFld = Test0112.bFld;
            Test0112.iFld += (int) Test0112.instanceCount;
            d1 -= 9;
            i8 *= i9;
            i8 += (-100 + (i10 * i10));
            Test0112.fFld -= i11;
            i9 <<= (int) Test0112.instanceCount;
            Test0112.fFld += (27 + (i10 * i10));
        }
        iArr1[(i9 >>> 1) % N] >>= i9;
        Test0112.instanceCount <<= -3188564288L;
        long meth_res = i7 + i8 + i9 + i10 + i11 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {

        int i4 = 0;
        int i5 = -96;
        int i19 = -61935;
        int i20 = -62206;
        int i21 = -1;
        int[] iArr = new int[N];
        short s = -25833;
        float f = -2.186F;
        byte by = 46;

        FuzzerUtils.init(iArr, 8);

        for (i4 = 13; i4 < 334; ++i4) {
            if (i4 != 0) {
                vMeth_check_sum += i4 + i5 + s + Float.floatToIntBits(f) + i19 + i20 + i21 + by +
                        FuzzerUtils.checkSum(iArr);
                return;
            }
        }
        i5 *= ((i5++) - ((s * i5) + (-(++i5))));
        iArr[(i5 >>> 1) % N] -= (int) (Test0112.instanceCount = (long) (f--));
        for (int i6 : iArr) {
            iArr[(i5 >>> 1) % N] = i4;
            Test0112.instanceCount *= iMeth(-139, i4, Test0112.iFld);
            for (i19 = 4; i19 > 1; i19--) {
                i5 *= s;
                Test0112.fArrFld[i19] *= Test0112.instanceCount;
                i5 ^= (int) Test0112.instanceCount;
                i6 *= (int) Test0112.dFld;
                i21 = 2;
                while (--i21 > 0) {
                    by *= (byte) i20;
                    Test0112.instanceCount = i20;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + s + Float.floatToIntBits(f) + i19 + i20 + i21 + by + FuzzerUtils.checkSum(iArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0112 _instance = new Test0112();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 7;
        int i1 = 7;
        int i2 = -14;
        int i3 = -2;
        int i22 = -61830;
        int i23 = -166;
        int[] iArr2 = new int[N];
        short s1 = 17570;
        short[] sArr = new short[N];
        byte by1 = 83;

        FuzzerUtils.init(iArr2, -10);
        FuzzerUtils.init(sArr, (short) 22912);

        for (i = 321; i > 8; i -= 3) {
            Test0112.instanceCount &= Test0112.instanceCount;
            i1 = (int) (i * Math.abs(Float.intBitsToFloat(-4409)));
            if (Test0112.bFld) {
                for (i2 = 14; i2 < 241; i2++) {
                    vMeth();
                    Test0112.fFld += Test0112.instanceCount;
                    for (i22 = 1; 2 > i22; i22++) {
                        iArr2[i2 + 1] ^= i1;
                        Test0112.instanceCount <<= i;
                        Test0112.iFld = i2;
                        if (Test0112.bFld) {
                            iArr2[i22 + 1] = (int) 111.25933;
                            i3 >>= i3;
                            Test0112.iFld += i22;
                        }
                        s1 &= (short) i;
                        i3 -= -166;
                        switch ((i22 % 8) + 70) {
                            case 70:
                                if (true) break;
                                break;
                            case 71:
                                Test0112.instanceCount >>= Test0112.instanceCount;
                                break;
                            case 72:
                                iArr2[i22] = (int) Test0112.fFld;
                                Test0112.iFld = i1;
                                Test0112.iFld = i22;
                                Test0112.bArrFld[i2 + 1] = true;
                            case 73:
                                iArr2[i22] |= 206;
                                by1 += (byte) -98.32780;
                                Test0112.iFld = -100;
                                break;
                            case 74:
                                Test0112.instanceCount = -8L;
                                try {
                                    i23 = (837425951 % Test0112.iFld);
                                    i23 = (12 % iArr2[i22]);
                                    i1 = (i1 % 1063671417);
                                } catch (ArithmeticException a_e) {
                                }
                                i23 >>= 65;
                                break;
                            case 75:
                                i3 += i23;
                                break;
                            case 76:
                                i3 = -57211;
                                break;
                            case 77:
                                iArr2 = iArr2;
                                break;
                            default:
                                sArr = sArr;
                        }
                    }
                }
            } else if (Test0112.bFld) {
                Test0112.instanceCount -= (long) Test0112.fFld;
            } else {
                Test0112.iFld = by1;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i22 i23 = " + i3 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("s1 by1 iArr2 = " + s1 + "," + by1 + "," + FuzzerUtils.checkSum(iArr2));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0112.instanceCount Test0112.bFld Test0112.iFld = " + Test0112.instanceCount + "," + (Test0112.bFld ? 1
                : 0) + "," + Test0112.iFld);
        FuzzerUtils.out.println("Test0112.fFld Test0112.dFld Test0112.fArrFld = " + Float.floatToIntBits(Test0112.fFld) + "," +
                Double.doubleToLongBits(Test0112.dFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0112.fArrFld)));
        FuzzerUtils.out.println("Test0112.bArrFld = " + FuzzerUtils.checkSum(Test0112.bArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
