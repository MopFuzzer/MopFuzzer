// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test0934 {

    public static final int N = 400;

    public static long instanceCount = 54L;
    public static volatile boolean bFld = false;
    public static int[] iArrFld = new int[N];
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0934.iArrFld, 214);
    }

    public int iFld = -52;
    public float fFld = 0.821F;

    public static int iMeth(float f1, int i2, int i3) {

        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, -2.697F);

        fArr[(i2 >>> 1) % N] += i3;
        long meth_res = Float.floatToIntBits(f1) + i2 + i3 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth1() {

        float f2 = 23.1009F, f3 = 60.547F;
        int i6 = 8389, i7 = 54068, i8 = -99, i9 = -11, i10 = -20;
        byte by = 14;
        long l = 277392531L;
        short s = -5982;
        short[] sArr = new short[N];

        FuzzerUtils.init(sArr, (short) 19141);

        for (f2 = 6; f2 < 130; f2++) {
            f3 = f3;
        }
        Test0934.iArrFld[(i6 >>> 1) % N] += -4;
        sArr = FuzzerUtils.short1array(N, (short) 10829);
        for (i7 = 14; i7 < 237; i7++) {
            Test0934.instanceCount <<= by;
            l = 1;
            do {
                i6 >>>= (int) 7L;
                i6 += -29659;
                i6 = i6;
            } while (++l < 7);
        }
        i6 = 2;
        Test0934.instanceCount -= s;
        for (i9 = 12; i9 < 353; i9++) {
            Test0934.instanceCount <<= i9;
            Test0934.instanceCount >>>= i9;
        }
        long meth_res = Float.floatToIntBits(f2) + i6 + Float.floatToIntBits(f3) + i7 + i8 + by + l + s + i9 + i10 +
                FuzzerUtils.checkSum(sArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static long lMeth1(int i4) {

        int i5 = -1;
        double d1 = -110.33386;
        float f4 = 0.290F;

        i5 = 1;
        do {
            i4 <<= iMeth1();
            i4 /= (int) (i5 | 1);
            d1 = i5;
            d1 = 59.125468;
        } while (++i5 < 327);
        i4 -= (int) f4;
        Test0934.instanceCount += i4;
        long meth_res = i4 + i5 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f4);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0934 _instance = new Test0934();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public long lMeth() {

        int i = 53005;
        int i1 = -70;
        int i11 = -247;
        int i12 = 139;
        int i13 = 62;
        int i14 = -4;
        int i15 = -10;
        int i16 = 234;
        int[] iArr = new int[N];
        float f = 51.590F;
        double d = 118.35949;
        short s1 = 19193;
        byte[][] byArr = new byte[N][N];

        FuzzerUtils.init(iArr, 55781);
        FuzzerUtils.init(byArr, (byte) 84);

        for (i = 5; i < 389; i++) {
            f = (float) (((iArr[i] = -12) - iMeth(-1.721F, iFld, i)) + (d *= (-(51627 * (-lMeth1(i))))));
            for (i11 = 1; i11 < 4; ++i11) {
                Test0934.iArrFld[i + 1] ^= (int) Test0934.instanceCount;
                iFld += i13;
            }
            Test0934.instanceCount += i;
            i14 = 1;
            do {
                byArr = byArr;
                Test0934.instanceCount += (i14 ^ (long) f);
                f *= i11;
            } while (++i14 < 4);
            i1 += (((i * iFld) + iFld) - i12);
            iFld += (i ^ Test0934.instanceCount);
            for (i15 = 4; i15 > 1; i15 -= 3) {
                iFld += (int) Test0934.instanceCount;
                s1 += (short) (i15 - i11);
            }
        }
        long meth_res = i + i1 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i11 + i12 + i13 + i14 + i15 +
                i16 + s1 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(byArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i17 = -55, i18 = -114, i19 = 147, i20 = 21607, i21 = 14, i22 = -42876, i23 = 54593, i24 = -27973, i25 = 25676, i26 = 211,
                i27 = -11, i28 = -7;
        double d2 = 116.89588;
        short s2 = 10685;
        byte by1 = 126;

        iFld = (int) lMeth();
        for (i17 = 6; 371 > i17; i17++) {
            i18 = iFld;
            for (i19 = 3; i19 < 69; i19++) {
                for (i21 = 1; i21 < 2; ++i21) {
                    try {
                        i18 = (51019 / i22);
                        Test0934.iArrFld[i17] = (16721 / i22);
                        Test0934.iArrFld[i19] = (4022 / i18);
                    } catch (ArithmeticException a_e) {
                    }
                    fFld += i20;
                    Test0934.instanceCount = i17;
                    Test0934.instanceCount += (i21 * i21);
                    Test0934.instanceCount += (72 + (i21 * i21));
                    Test0934.instanceCount *= -74;
                    i22 ^= iFld;
                    Test0934.instanceCount += (((i21 * Test0934.instanceCount) + i19) - fFld);
                }
                iFld = (int) d2;
                iFld += i17;
                s2 += (short) iFld;
                i22 *= i17;
                Test0934.iArrFld[i19] = iFld;
            }
        }
        i18 *= (int) fFld;
        for (i23 = 2; 322 > i23; i23++) {
            i18 *= 37497;
            switch ((i23 % 8) + 91) {
                case 91:
                    i22 = i21;
                    by1 += (byte) (i23 | i20);
                case 92:
                    fFld = 121;
                    i24 <<= 27155;
                    break;
                case 93:
                    for (i25 = 3; 79 > i25; ++i25) {
                        for (i27 = i25; i27 < 2; ++i27) {
                            Test0934.bFld = false;
                            Test0934.instanceCount = Test0934.instanceCount;
                        }
                    }
                    break;
                case 94:
                    i28 = (int) Test0934.instanceCount;
                case 95:
                    iFld += (11 + (i23 * i23));
                    break;
                case 96:
                    i22 += i22;
                    break;
                case 97:
                    Test0934.instanceCount = 152;
                case 98:
                    Test0934.iArrFld[i23] = -4;
                default:
                    fFld *= i19;
            }
        }

        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("d2 s2 i23 = " + Double.doubleToLongBits(d2) + "," + s2 + "," + i23);
        FuzzerUtils.out.println("i24 by1 i25 = " + i24 + "," + by1 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);

        FuzzerUtils.out.println("Test0934.instanceCount iFld fFld = " + Test0934.instanceCount + "," + iFld + "," +
                Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test0934.bFld Test0934.iArrFld = " + (Test0934.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0934.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 lMeth1 lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
