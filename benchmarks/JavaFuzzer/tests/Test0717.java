// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test0717 {

    public static final int N = 400;

    public static volatile long instanceCount = 9151956064247482526L;
    public static byte byFld = 114;
    public static int[][] iArrFld = new int[N][N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0717.iArrFld, -12);
    }

    public double dFld = 16.22568;
    public short sFld = -31185;

    public static long lMeth(boolean b, int i2) {

        double d = 0.32092;
        int i3 = -153;
        int i4 = 203;
        int i5 = -204;
        int[] iArr = new int[N];
        float[][] fArr = new float[N][N];

        FuzzerUtils.init(iArr, -19846);
        FuzzerUtils.init(fArr, -2.413F);

        try {
            d = 1;
            while (++d < 317) {
                i3 = 1;
                while (++i3 < 5) {
                    iArr = iArr;
                    i2 = i2;
                    Test0717.instanceCount ^= i2;
                }
                i2 -= (int) Test0717.instanceCount;
                if (b) continue;
                i2 *= (int) 18562L;
                i2 += (int) 76.705F;
                i2 -= 25600;
            }
            i2 *= i3;
            for (i4 = 208 + 400; 13 < i4; --i4) {
                fArr = fArr;
                i2 += i2;
            }
        } catch (ArrayIndexOutOfBoundsException exc1) {
            Test0717.byFld = (byte) i2;
        }
        long meth_res = (b ? 1 : 0) + i2 + Double.doubleToLongBits(d) + i3 + i4 + i5 + FuzzerUtils.checkSum(iArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i1) {

        boolean b1 = false;
        long l = -54629L;
        int i6 = 14;
        int i7 = 26;
        int i8 = 2;
        int[] iArr1 = new int[N];

        FuzzerUtils.init(iArr1, 7);

        i1 <<= (int) (lMeth(b1, i1) + -10);
        l = 1;
        while (++l < 239) {
            i6 = 1;
            do {
                i1 = (int) Test0717.instanceCount;
                Test0717.instanceCount += i1;
                i1 -= -33902;
                iArr1[(int) (l + 1)] = (int) l;
                if (b1) continue;
                Test0717.instanceCount >>= 8L;
                Test0717.instanceCount = i1;
            } while (++i6 < 7);
        }
        for (i7 = 1; i7 < 278; ++i7) {
            i1 += i7;
            if (b1) break;
            iArr1 = iArr1;
            i8 %= (int) (i6 | 1);
        }
        vMeth_check_sum += i1 + (b1 ? 1 : 0) + l + i6 + i7 + i8 + FuzzerUtils.checkSum(iArr1);
    }

    public static void main(String[] strArr) {

        try {
            Test0717 _instance = new Test0717();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public int iMeth() {

        int i9 = 11;
        int i10 = -157;
        int[] iArr2 = new int[N];
        float f = -2.776F;
        long l1 = 230L;

        FuzzerUtils.init(iArr2, 183);

        vMeth(i9);
        i9 = i9;
        iArr2[(i9 >>> 1) % N] *= i9;
        Test0717.instanceCount <<= i9;
        dFld = f;
        for (l1 = 13; l1 < 372; ++l1) {
            Test0717.instanceCount = l1;
            sFld = (short) i9;
            i9 = (int) Test0717.instanceCount;
            i10 = (int) f;
            i9 -= (int) f;
            i10 = i9;
        }
        i10 *= (int) dFld;
        i10 -= i10;
        i10 <<= (int) Test0717.instanceCount;
        long meth_res = i9 + Float.floatToIntBits(f) + l1 + i10 + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i = -196, i11 = -63172, i12 = 200, i13 = 6, i14 = -253, i15 = -75, i16 = 136, i17 = -1, i18 = 9, i19 = 193, i20 = -32573;
        short s = 16455;
        float f1 = 0.340F;
        float[] fArr1 = new float[N];
        double d1 = 2.60552;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 166L);
        FuzzerUtils.init(fArr1, 81.357F);

        lArr[(i >>> 1) % N] = (long) dFld;
        s += (short) iMeth();
        for (i11 = 319; i11 > 11; --i11) {
            switch (((i12 >>> 1) % 1) + 96) {
                case 96:
                    i ^= i12;
                default:
                    i *= (int) f1;
                    Test0717.instanceCount += (((i11 * Test0717.instanceCount) + Test0717.instanceCount) - i);
                    for (i13 = 2; i13 < 82; i13++) {
                        i12 -= (int) Test0717.instanceCount;
                        i12 += i13;
                        i15 = 1;
                        do {
                            dFld += i15;
                            Test0717.iArrFld[i11 + 1][i13] -= i13;
                            Test0717.instanceCount >>= Test0717.instanceCount;
                            i = s;
                            Test0717.byFld += (byte) (i15 * i15);
                        } while (++i15 < 2);
                        Test0717.iArrFld[i13 - 1][i11 - 1] -= Test0717.byFld;
                    }
                    fArr1[i11] += Test0717.instanceCount;
            }
            fArr1[i11] -= Test0717.instanceCount;
            for (d1 = 3; d1 < 82; ++d1) {
                lArr[(int) (d1)] = Test0717.instanceCount;
                for (i17 = 1; i17 < 2; ++i17) {
                    long l2 = 2662612336041468273L;
                    l2 += Test0717.instanceCount;
                }
                Test0717.instanceCount -= i16;
                for (i19 = 1; i19 < 2; ++i19) {
                    i20 *= (int) Test0717.instanceCount;
                    Test0717.instanceCount -= 2030;
                    i16 += i19;
                    i12 += (i19 * i19);
                    f1 = i;
                }
            }
        }

        FuzzerUtils.out.println("i s i11 = " + i + "," + s + "," + i11);
        FuzzerUtils.out.println("i12 f1 i13 = " + i12 + "," + Float.floatToIntBits(f1) + "," + i13);
        FuzzerUtils.out.println("i14 i15 d1 = " + i14 + "," + i15 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 lArr = " + i19 + "," + i20 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("fArr1 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0717.instanceCount dFld Test0717.byFld = " + Test0717.instanceCount + "," +
                Double.doubleToLongBits(dFld) + "," + Test0717.byFld);
        FuzzerUtils.out.println("sFld Test0717.iArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test0717.iArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
