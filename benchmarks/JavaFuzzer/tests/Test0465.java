// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test0465 {

    public static final int N = 400;

    public static long instanceCount = -7139998224132272763L;
    public static volatile float fFld = -47.514F;
    public static short sFld = 3089;
    public static volatile short[] sArrFld = new short[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0465.sArrFld, (short) -14805);
    }

    public double dFld = 0.125593;
    public int[] iArrFld = new int[N];

    public static void main(String[] strArr) {

        try {
            Test0465 _instance = new Test0465();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth2() {

        int i8 = 60239;
        int i9 = -9;
        int i10 = 98;
        int i11 = 42061;
        int i12 = -13;
        int[] iArr = new int[N];
        byte by1 = 12;
        short s = -5503;
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(lArr, -4498043185679833678L);
        FuzzerUtils.init(iArr, 56421);

        i8 = 1;
        do {
            for (i9 = 1; i9 < 7; i9++) {
                dFld -= Test0465.instanceCount;
                i10 <<= i9;
                Test0465.instanceCount += (11 + (i9 * i9));
                switch ((i9 % 5) + 88) {
                    case 88:
                        dFld = i10;
                        by1 -= (byte) 110.98455;
                        i10 -= (int) Test0465.instanceCount;
                        for (i11 = 1; i11 < 2; ++i11) {
                            i10 += (int) Test0465.instanceCount;
                            Test0465.instanceCount += (i11 * i10);
                            i10 -= s;
                            i12 >>= (int) Test0465.instanceCount;
                        }
                        break;
                    case 89:
                        lArr = lArr;
                        break;
                    case 90:
                        i10 += (((i9 * i9) + Test0465.instanceCount) - i12);
                        break;
                    case 91:
                        lArr[i8][i8] = i11;
                        break;
                    case 92:
                        i12 = (int) Test0465.instanceCount;
                        break;
                    default:
                        iArr[i8] -= i8;
                }
            }
        } while (++i8 < 249);
        vMeth2_check_sum += i8 + i9 + i10 + by1 + i11 + i12 + s + FuzzerUtils.checkSum(lArr) +
                FuzzerUtils.checkSum(iArr);
    }

    public void vMeth1() {

        int i6 = 251;
        int i7 = 38345;
        int i14 = 0;
        int i15 = -47252;
        int[] iArr1 = new int[N];
        byte by2 = -7;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr1, -24172);
        FuzzerUtils.init(lArr1, 2193014293L);

        for (i6 = 14; i6 < 283; ++i6) {
            i7 *= (i7++);
            vMeth2();
            i7 -= i6;
            i7 = -11;
            dFld = Test0465.instanceCount;
            by2 >>= (byte) i7;
            iArr1[i6 - 1] <<= (int) Test0465.instanceCount;
            i7 -= (int) Test0465.instanceCount;
            for (i14 = 1; 6 > i14; ++i14) {
                lArr1[i14 + 1] = Test0465.instanceCount;
                i7 = i6;
                Test0465.sArrFld[i14 + 1] *= (short) dFld;
                i15 /= (int) (i14 | 1);
                iArr1 = iArr1;
            }
        }
        vMeth1_check_sum += i6 + i7 + by2 + i14 + i15 + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i) {

        int i1 = 4;
        int i2 = -21;
        int i3 = 0;
        int i4 = -84;
        int i5 = 7725;
        int[] iArr2 = new int[N];
        float f = -83.818F;
        long[] lArr2 = new long[N];

        FuzzerUtils.init(lArr2, 589466572L);
        FuzzerUtils.init(iArr2, 74);

        for (i1 = 2; i1 < 135; ++i1) {
            i /= (int) ((--i2) | 1);
            i += (i1 * i1);
            i3 = 1;
            do {
                boolean b = false;
                for (i4 = 1; i4 < 1; i4++) {
                    vMeth1();
                    f = Test0465.instanceCount;
                    i += (i4 + i1);
                    lArr2[i3 - 1] = Test0465.instanceCount;
                    iArr2[i4 - 1] <<= i2;
                    Test0465.instanceCount += Test0465.instanceCount;
                }
                i2 = i;
                i2 += (int) -11L;
                if (b) continue;
                try {
                    i5 = (i / -48769);
                    i2 = (5 % iArr2[i1]);
                    i2 = (i4 / 1474971376);
                } catch (ArithmeticException a_e) {
                }
            } while (++i3 < 12);
        }
        vMeth_check_sum += i + i1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(lArr2) +
                FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        byte by = -25;
        int i16 = 105, i17 = 36, i18 = -46154, i19 = -19150, i20 = 146, i21 = -29974, i22 = -2, i23 = -3, i24 = 44458, i25 = -80;
        long l = -3313976439L;
        float f2 = 113.787F;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 2.526F);

        Test0465.instanceCount = by;
        Test0465.instanceCount = (Test0465.instanceCount++);
        vMeth(i16);
        Test0465.fFld = i16;
        for (i17 = 21; i17 < 390; ++i17) {
            Test0465.instanceCount -= i17;
            i16 |= by;
            iArrFld[i17 - 1] = (int) Test0465.instanceCount;
            i16 += i17;
            Test0465.fFld = Test0465.instanceCount;
        }
        for (i19 = 144; i19 > 1; i19--) {
            Test0465.sFld |= (short) i16;
            try {
                i18 = (i18 % i20);
                iArrFld[i19 - 1] = (i20 % -37398);
                i16 = (141 / iArrFld[i19 + 1]);
            } catch (ArithmeticException a_e) {
            }
            i16 += i18;
            Test0465.fFld += (-38723 + (i19 * i19));
            i16 -= i20;
            i16 += (int) Test0465.instanceCount;
        }
        i16 += i16;
        Test0465.instanceCount = i21;
        iArrFld[(i17 >>> 1) % N] = i17;
        for (i22 = 5; i22 < 198; i22++) {
            l += i19;
        }
        switch (((i23 >>> 1) % 1) + 80) {
            case 80:
                l *= i20;
                break;
        }
        for (i24 = 1; i24 < 181; ++i24) {
            i18 += (i24 * i24);
            f2 = 1;
            do {
                i18 = i23;
                Test0465.fFld += Test0465.instanceCount;
                i16 += (38223 + (f2 * f2));
            } while (++f2 < 139);
        }

        FuzzerUtils.out.println("by i16 i17 = " + by + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("l i24 i25 = " + l + "," + i24 + "," + i25);
        FuzzerUtils.out.println("f2 fArr = " + Float.floatToIntBits(f2) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0465.instanceCount dFld Test0465.fFld = " + Test0465.instanceCount + "," +
                Double.doubleToLongBits(dFld) + "," + Float.floatToIntBits(Test0465.fFld));
        FuzzerUtils.out.println("Test0465.sFld Test0465.sArrFld iArrFld = " + Test0465.sFld + "," +
                FuzzerUtils.checkSum(Test0465.sArrFld) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
