// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test0145 {

    public static final int N = 400;

    public static long instanceCount = -62399L;
    public static int iFld = 59293;
    public static double dFld = -1.99249;
    public static volatile int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0145.iArrFld, -1);
    }

    public int iFld1 = 65104;

    public static void vMeth1() {

        int i4 = 13;
        int i5 = -8;
        int i6 = -73;
        int i7 = 44296;
        int i8 = -11477;
        int[] iArr1 = new int[N];
        float f1 = 0.788F;
        float[] fArr = new float[N];
        boolean b = true;

        FuzzerUtils.init(fArr, 0.452F);
        FuzzerUtils.init(iArr1, -44);

        Test0145.iFld *= -35348;
        Test0145.iFld *= Test0145.iFld;
        for (i4 = 2; i4 < 290; ++i4) {
            i6 = 1;
            while (++i6 < 6) {
                Test0145.iFld = (int) Test0145.instanceCount;
                i5 = (int) Test0145.instanceCount;
                f1 -= i4;
                switch ((i6 % 2) + 116) {
                    case 116:
                    case 117:
                        for (i7 = i4; i7 < 1; i7++) {
                            if (b) break;
                            f1 = i4;
                            fArr[i7 - 1] = Test0145.iFld;
                            i5 <<= Test0145.iFld;
                            i8 += (((i7 * i5) + Test0145.iFld) - f1);
                            iArr1 = iArr1;
                        }
                        break;
                    default:
                        if (b) continue;
                }
            }
        }
        vMeth1_check_sum += i4 + i5 + i6 + Float.floatToIntBits(f1) + i7 + i8 + (b ? 1 : 0) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth() {

        int i9 = 10, i10 = -11, i11 = 46615, i12 = -38, i13 = 152, i14 = -46144, i15 = 57;
        float f2 = -18.41F;
        byte by = 20;

        vMeth1();
        Test0145.dFld -= Test0145.iFld;
        for (i9 = 10; i9 < 262; ++i9) {
            f2 /= (i10 | 1);
            i11 = 1;
            do {
                for (i12 = 1; i12 < 1; i12++) {
                    Test0145.iFld ^= (int) Test0145.instanceCount;
                }
                for (i14 = i9; i14 < 1; ++i14) {
                    Test0145.instanceCount >>= by;
                    Test0145.iArrFld[(Test0145.iFld >>> 1) % N] -= i12;
                    i15 -= i14;
                    Test0145.iArrFld = Test0145.iArrFld;
                    if (i15 != 0) {
                    }
                }
            } while (++i11 < 6);
            i13 *= (int) f2;
            Test0145.iArrFld[i9 - 1] <<= i14;
        }
        long meth_res = i9 + i10 + Float.floatToIntBits(f2) + i11 + i12 + i13 + i14 + i15 + by;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {


        Test0145.iFld = Math.abs(iMeth());
        vMeth_check_sum += 0;
    }

    public static void main(String[] strArr) {

        try {
            Test0145 _instance = new Test0145();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f = -2.579F;
        float f3 = 0.125F;
        float[] fArr1 = new float[N];
        int i = -7;
        int i1 = -6;
        int i2 = -9172;
        int i3 = 8;
        int i16 = 65;
        int i17 = 9;
        int[][] iArr = new int[N][N];
        boolean b1 = true;

        FuzzerUtils.init(iArr, 28);
        FuzzerUtils.init(fArr1, 1.486F);

        f -= (Test0145.iFld++);
        iArr[(Test0145.iFld >>> 1) % N][(-16741 >>> 1) % N] >>= Test0145.iFld;
        for (i = 336; i > 2; i -= 3) {
            Test0145.iFld = (iArr[i][i - 1]++);
            for (i2 = 8; i2 < 226; i2 += 2) {
                vMeth();
                Test0145.iFld += (i2 + i);
                Test0145.iArrFld[i] = -22833;
                i1 += i1;
                Test0145.iArrFld[i2] = i1;
                for (i16 = 1; i16 < 3; i16++) {
                    fArr1[i + 1] = Test0145.instanceCount;
                    Test0145.iArrFld[i2 - 1] |= (int) Test0145.instanceCount;
                    switch ((i16 % 5) + 14) {
                        case 14:
                            Test0145.instanceCount += (11164 + (i16 * i16));
                            iFld1 = i1;
                            break;
                        case 15:
                            i17 &= 8;
                            i1 = (int) Test0145.instanceCount;
                            break;
                        case 16:
                            f3 += i16;
                            i1 = (int) -35432L;
                            i3 += Test0145.iFld;
                            switch ((i % 1) * 5) {
                                case 1:
                                    b1 = b1;
                                default:
                                    try {
                                        i17 = (i17 % 11954);
                                        i17 = (i1 % 113);
                                        iFld1 = (55528 / Test0145.iArrFld[i]);
                                    } catch (ArithmeticException a_e) {
                                    }
                                    i1 += (i16 * i16);
                                    Test0145.iFld += (int) (-40423L + (i16 * i16));
                                    Test0145.iFld += (i16 * i16);
                            }
                            break;
                        case 17:
                            Test0145.instanceCount += i16;
                            Test0145.dFld = i2;
                            f = i16;
                            break;
                        case 18:
                            iFld1 >>= i16;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f i i1 = " + Float.floatToIntBits(f) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i16 = " + i2 + "," + i3 + "," + i16);
        FuzzerUtils.out.println("i17 f3 b1 = " + i17 + "," + Float.floatToIntBits(f3) + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("iArr fArr1 = " + FuzzerUtils.checkSum(iArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0145.instanceCount Test0145.iFld Test0145.dFld = " + Test0145.instanceCount + "," + Test0145.iFld +
                "," + Double.doubleToLongBits(Test0145.dFld));
        FuzzerUtils.out.println("iFld1 Test0145.iArrFld = " + iFld1 + "," + FuzzerUtils.checkSum(Test0145.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
