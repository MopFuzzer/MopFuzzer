// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test0654 {

    public static final int N = 400;

    public static long instanceCount = -50645L;
    public static long[] lArrFld = new long[N];
    public static float[] fArrFld = new float[N];
    public static double[] dArrFld = new double[N];
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0654.lArrFld, 14L);
        FuzzerUtils.init(Test0654.fArrFld, -2.801F);
        FuzzerUtils.init(Test0654.dArrFld, 2.70628);
        FuzzerUtils.init(Test0654.iArrFld, 19252);
    }

    public byte byFld = -19;

    public static double dMeth(int i16, int i17, int i18) {

        int i19 = -3;
        int i20 = 4105;
        int i21 = -23240;
        int[] iArr1 = new int[N];
        long l1 = 2007352165866126569L;
        double d1 = -2.2688;
        float f = 8.17F;
        boolean b = false;

        FuzzerUtils.init(iArr1, -2654);

        i17 *= i17;
        for (i19 = 6; i19 < 395; i19++) {
            Test0654.instanceCount = i19;
            switch (((i19 % 2) * 5) + 22) {
                case 23:
                    iArr1 = iArr1;
                    break;
                case 31:
                    i20 = i19;
                    i20 = (int) Test0654.instanceCount;
                    if (true) {
                        if (b) {
                            for (l1 = 1; l1 < 4; l1++) {
                                i21 += (int) (((l1 * Test0654.instanceCount) + l1) - i19);
                                iArr1[i19 + 1] <<= (int) l1;
                                Test0654.dArrFld[(int) (l1)] -= Test0654.instanceCount;
                                d1 = f;
                                try {
                                    i18 = (i17 / -19292);
                                    iArr1[i19 + 1] = (iArr1[(int) (l1 + 1)] / iArr1[(i20 >>> 1) % N]);
                                    i21 = (-411569008 % i20);
                                } catch (ArithmeticException a_e) {
                                }
                            }
                        } else if (b) {
                            i16 *= (int) Test0654.instanceCount;
                        } else if (false) {
                            d1 = f;
                        }
                    } else {
                        i20 >>= (int) l1;
                    }
                    break;
            }
        }
        long meth_res = i16 + i17 + i18 + i19 + i20 + l1 + i21 + Double.doubleToLongBits(d1) + Float.floatToIntBits(f)
                + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0654 _instance = new Test0654();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public int iMeth(int i6, int i7, int i8) {

        int i9 = -6, i10 = 193, i11 = 113, i12 = -13, i13 = 224, i14 = 8;
        double d = 1.35135;
        byte by = -66;

        i9 = 1;
        do {
            for (i10 = 1; i10 < 7; i10++) {
                i12 = Math.abs((i6++) / (i12 | 1));
                i8 *= (int) (Test0654.lArrFld[i10] + 1.251F);
                Test0654.fArrFld[i9] = (Test0654.lArrFld[i10 - 1] + (i7++));
                i8 += (((i10 * i11) + i10) - Test0654.instanceCount);
            }
            d -= ((5.20F + Integer.reverseBytes(-8730)) - ((i10 + i7) * d));
            for (i13 = 1; i13 < 7; i13 += 3) {
                int i15 = 13;
                i15 += (i13 + i12);
                i6 -= (int) dMeth(i14, i14, i14);
                i14 += by;
                i6 -= i9;
                i7 -= (int) Test0654.instanceCount;
                d -= d;
            }
            i7 = (int) Test0654.instanceCount;
        } while (++i9 < 225);
        long meth_res = i6 + i7 + i8 + i9 + i10 + i11 + i12 + Double.doubleToLongBits(d) + i13 + i14 + by;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public void vMeth(int i, int i1, long l) {

        int i2 = -38929;
        int i3 = 2;
        int i4 = -14;
        int i5 = 90;
        int i22 = -4;
        int[] iArr = new int[N];
        short s = 8222;
        boolean b1 = true;

        FuzzerUtils.init(iArr, -44911);

        for (i2 = 7; i2 < 170; i2 += 2) {
            for (i4 = 19; 1 < i4; i4 -= 3) {
                i5 += (((i4 * i2) + i) - i1);
                Test0654.lArrFld[i4] = (((iArr[i4 + 1] = i5) << Test0654.instanceCount) - iMeth(i5, 5, i3));
                Test0654.instanceCount *= i2;
                switch ((i2 % 2) + 4) {
                    case 4:
                        s += (short) (49458 + (i4 * i4));
                        break;
                    case 5:
                        i1 *= i3;
                        s -= (short) i3;
                        b1 = b1;
                        l -= -6L;
                        break;
                    default:
                        if (b1) continue;
                        i1 = i22;
                        i1 = s;
                        i1 = (int) 1.581F;
                }
            }
        }
        vMeth_check_sum += i + i1 + l + i2 + i3 + i4 + i5 + s + (b1 ? 1 : 0) + i22 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        int i23 = -3, i25 = -3, i26 = 53169, i27 = 4, i28 = 247, i29 = -22482;
        double d2 = -2.40967;
        float f1 = 1.130F;
        boolean b2 = true;

        vMeth(i23, -45549, Test0654.instanceCount);
        i23 -= i23;
        for (int i24 : Test0654.iArrFld) {
            i24 >>>= i24;
            Test0654.lArrFld[(i24 >>> 1) % N] |= i23;
            d2 = 1;
            do {
                i24 += i23;
                i24 += (int) (d2 * d2);
                i24 += (int) (d2 * i23);
                i24 += (-6 + (d2 * d2));
                Test0654.iArrFld[(int) (d2 + 1)] = 133;
            } while (++d2 < 63);
            Test0654.instanceCount = 19530;
            if (true) continue;
            i24 -= i23;
            i25 = 1;
            while (++i25 < 63) {
                for (i26 = i25; i26 < 1; ++i26) {
                    i27 += i26;
                    Test0654.instanceCount -= Test0654.instanceCount;
                    f1 -= i27;
                    i23 -= i24;
                    byFld += (byte) (i26 | i27);
                    i24 += (i26 * i26);
                    i23 = i24;
                    i24 += i26;
                }
                i27 += i25;
            }
            for (i28 = 2; i28 < 63; ++i28) {
                Test0654.instanceCount = i29;
                f1 = i25;
                if (b2) break;
                i24 <<= i26;
            }
        }

        FuzzerUtils.out.println("i23 d2 i25 = " + i23 + "," + Double.doubleToLongBits(d2) + "," + i25);
        FuzzerUtils.out.println("i26 i27 f1 = " + i26 + "," + i27 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i28 i29 b2 = " + i28 + "," + i29 + "," + (b2 ? 1 : 0));

        FuzzerUtils.out.println("Test0654.instanceCount byFld Test0654.lArrFld = " + Test0654.instanceCount + "," + byFld + "," +
                FuzzerUtils.checkSum(Test0654.lArrFld));
        FuzzerUtils.out.println("Test0654.fArrFld Test0654.dArrFld Test0654.iArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0654.fArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0654.dArrFld)) + "," + FuzzerUtils.checkSum(Test0654.iArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
