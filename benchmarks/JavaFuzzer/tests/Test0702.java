// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test0702 {

    public static final int N = 400;

    public static long instanceCount = 11L;
    public static short sFld = -102;
    public static volatile double dFld = -2.93627;
    public static float fFld = -1.570F;
    public static long fMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public long[] lArrFld = new long[N];

    public static int iMeth1(int i9, float f) {

        int i10 = 27, i11 = -64479;
        long l2 = -36L;
        long[] lArr1 = new long[N];
        boolean b = true;

        FuzzerUtils.init(lArr1, 5967678650370835410L);

        f = 62692;
        i9 -= (int) f;
        i9 >>= (int) Test0702.instanceCount;
        for (long l1 : lArr1) {
            for (i10 = 1; i10 < 4; i10++) {
                l2 = 1;
                do {
                    i11 = (int) -3L;
                    f /= (i9 | 1);
                } while (++l2 < 2);
                l1 += i10;
                l1 += (-14 + (i10 * i10));
                if (b) continue;
                i9 = 131;
                if (i11 != 0) {
                }
                Test0702.dFld += Test0702.sFld;
                i9 = (int) f;
            }
        }
        long meth_res = i9 + Float.floatToIntBits(f) + i10 + i11 + l2 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(long l) {

        int i3 = 11;
        int i4 = -11;
        int i5 = -14;
        int i6 = -7;
        int i7 = 4;
        int i8 = 33344;
        int[] iArr1 = new int[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -1760168166L);
        FuzzerUtils.init(iArr1, 199);

        for (i3 = 11; i3 < 203; ++i3) {
            for (i5 = 1; i5 < 8; i5++) {
                for (i7 = 1; i7 < 2; ++i7) {
                    if (i5 != 0) {
                    }
                    i8 >>>= (int) Test0702.instanceCount;
                    l &= -40395;
                    lArr[i3 - 1] *= (iMeth1(i4, 1.28F) * 222L);
                    iArr1[i3 + 1] += i6;
                    i8 += i6;
                    Test0702.instanceCount <<= -4061;
                    lArr[i3 - 1] >>= i8;
                    i4 += (i7 * i7);
                    i6 = (int) Test0702.dFld;
                }
                i8 *= (int) l;
                i6 += (i5 * i5);
            }
        }
        long meth_res = l + i3 + i4 + i5 + i6 + i7 + i8 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static float fMeth() {

        int i = 37198;
        int i1 = -59171;
        int i2 = 41333;
        int[] iArr = new int[N];
        byte by = 86;
        double[] dArr = new double[N];

        FuzzerUtils.init(iArr, 11);
        FuzzerUtils.init(dArr, 58.5729);

        for (i = 4; i < 285; i++) {
            i2 = 1;
            while (++i2 < 6) {
                iArr[i2 + 1] = (int) (((Test0702.instanceCount - Test0702.sFld) - iMeth(Test0702.instanceCount)) +
                        Test0702.instanceCount);
                i1 += i1;
                Test0702.instanceCount -= i2;
                switch ((i % 9) + 97) {
                    case 97:
                        try {
                            i1 = (-30304 / i2);
                            i1 = (i1 / i1);
                            i1 = (iArr[i2] / -23);
                        } catch (ArithmeticException a_e) {
                        }
                        Test0702.fFld += i2;
                        break;
                    case 98:
                        Test0702.instanceCount <<= i2;
                        break;
                    case 99:
                        switch ((i2 % 2) + 6) {
                            case 6:
                                i1 += (42 + (i2 * i2));
                                i1 += i2;
                                iArr[i] &= i;
                                i1 *= 65;
                            case 7:
                            default:
                                iArr[i2] -= i2;
                        }
                    case 100:
                    case 101:
                        i1 = (int) -5131668903254546034L;
                    case 102:
                        dArr[i] += by;
                    case 103:
                        i1 >>= i;
                        break;
                    case 104:
                        i1 *= (int) Test0702.instanceCount;
                        break;
                    case 105:
                        Test0702.dFld += Test0702.fFld;
                        break;
                    default:
                        Test0702.instanceCount += (long) Test0702.fFld;
                }
            }
        }
        long meth_res = i + i1 + i2 + by + FuzzerUtils.checkSum(iArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0702 _instance = new Test0702();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i12 = -116, i13 = -62, i14 = -56662, i15 = -14, i16 = -63202, i17 = -3, i18 = 80, i19 = -14, i20 = 206;
        boolean b1 = false;
        long l3 = 2L;
        byte by1 = 91;
        short[] sArr = new short[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(sArr, (short) 31920);
        FuzzerUtils.init(fArr, -127.179F);

        fMeth();
        sArr[(i12 >>> 1) % N] = (short) i12;
        for (i13 = 20; i13 < 367; i13++) {
            Test0702.instanceCount += Test0702.instanceCount;
            b1 = false;
            Test0702.instanceCount -= i12;
            Test0702.fFld += (((i13 * Test0702.fFld) + i14) - i14);
            i12 = (int) l3;
        }
        for (i15 = 392; 3 < i15; i15--) {
            for (i17 = 1; i17 < 65; i17++) {
                lArrFld[i15 + 1] -= l3;
                i12 = i14;
                i16 = i16;
                for (i19 = 1; 2 > i19; ++i19) {
                    switch ((((i14 >>> 1) % 2) * 5) + 29) {
                        case 38:
                            i12 += (i19 | i13);
                            break;
                        case 37:
                            i14 |= -1;
                            i14 = i19;
                            Test0702.fFld += (i19 + i12);
                            break;
                    }
                    by1 = (byte) -215;
                    i18 += i14;
                    i18 <<= i13;
                    Test0702.fFld = i18;
                    lArrFld[i19] = l3;
                    Test0702.fFld += Test0702.instanceCount;
                    fArr[i19] = Test0702.instanceCount;
                }
                l3 >>= i18;
                i18 += i17;
                fArr[i17] = i14;
                l3 += (((i17 * Test0702.fFld) + Test0702.fFld) - by1);
            }
        }

        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("b1 l3 i15 = " + (b1 ? 1 : 0) + "," + l3 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 by1 = " + i19 + "," + i20 + "," + by1);
        FuzzerUtils.out.println("sArr fArr = " + FuzzerUtils.checkSum(sArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0702.instanceCount Test0702.sFld Test0702.dFld = " + Test0702.instanceCount + "," + Test0702.sFld +
                "," + Double.doubleToLongBits(Test0702.dFld));
        FuzzerUtils.out.println("Test0702.fFld lArrFld = " + Float.floatToIntBits(Test0702.fFld) + "," +
                FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  iMeth ->  iMeth fMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
