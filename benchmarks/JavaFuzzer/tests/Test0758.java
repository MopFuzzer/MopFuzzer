// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test0758 {

    public static final int N = 400;

    public static long instanceCount = 27437L;
    public static boolean bFld = false;
    public static volatile float fFld = 41.669F;
    public static int iFld = 91;
    public static float[] fArrFld = new float[N];
    public static long[] lArrFld = new long[N];
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0758.fArrFld, 0.979F);
        FuzzerUtils.init(Test0758.lArrFld, 1497870758714891683L);
    }

    public static long lMeth(float f1, long l2, int i6) {

        int i7 = -158;
        int i8 = -129;
        int i9 = 62385;
        int i10 = 9;
        int[] iArr1 = new int[N];
        double d1 = 76.114575;
        double[][] dArr = new double[N][N];
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 1325898134245609356L);
        FuzzerUtils.init(iArr1, -13);
        FuzzerUtils.init(dArr, 0.35065);

        for (i7 = 21; i7 < 357; ++i7) {
            if (Test0758.bFld) continue;
            f1 += i6;
            for (i9 = 1; i9 < 5; i9++) {
                Test0758.instanceCount += (i9 * i9);
                lArr[i7 - 1] = i7;
                switch (((i9 >>> 1) % 5) + 91) {
                    case 91:
                        iArr1[i9 - 1] -= i7;
                        switch ((i7 % 8) + 3) {
                            case 3:
                                i10 = (int) d1;
                                lArr[i9] %= ((long) (d1) | 1);
                                i10 *= (int) 7012752088773526315L;
                                break;
                            case 4:
                                i8 %= (int) 8875268857227164270L;
                                i6 -= (int) Test0758.instanceCount;
                                break;
                            case 5:
                                if (Test0758.bFld) break;
                                break;
                            case 6:
                                i6 += (i9 * i9);
                                break;
                            case 7:
                                f1 += ((long) i9 | (long) i6);
                                break;
                            case 8:
                                iArr1[i9 - 1] = i8;
                            case 9:
                                i10 &= i8;
                                break;
                            case 10:
                                i6 += (i9 * i9);
                            default:
                                iArr1[i9 - 1] += (int) l2;
                        }
                        break;
                    case 92:
                    case 93:
                        l2 *= (long) f1;
                        break;
                    case 94:
                        iArr1[i9 - 1] &= i7;
                        break;
                    case 95:
                        i10 = i7;
                    default:
                        dArr[i7 + 1][i9 - 1] = d1;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + l2 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d1) +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr1) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(long l, long l1) {

        int i11 = -179;
        int i12 = -60;
        int i13 = 8;
        int i14 = 50830;
        int i15 = -53461;
        int i16 = 5;
        int i17 = 58;
        int[] iArr2 = new int[N];
        double d2 = 0.129945;

        FuzzerUtils.init(iArr2, 234);

        l >>>= (long) ((88.20528 * Test0758.fArrFld[(7 >>> 1) % N]) - lMeth(Test0758.fFld, -10L, Test0758.iFld));
        i11 = 1;
        while (++i11 < 334) {
            Test0758.iFld *= Test0758.iFld;
            Test0758.iFld += (i11 ^ Test0758.iFld);
            i12 = 1;
            do {
                iArr2[i12 + 1] = Test0758.iFld;
                iArr2[i11] |= Test0758.iFld;
                i13 = 1;
                do {
                    Test0758.iFld *= (int) Test0758.fFld;
                } while ((i13 -= 3) > 0);
                Test0758.fFld = Test0758.iFld;
            } while (++i12 < 5);
        }
        iArr2[(i11 >>> 1) % N] += (int) d2;
        for (i14 = 126; i14 > 7; i14--) {
            for (i16 = 13; i16 > 1; i16--) {
                if (Test0758.bFld) continue;
                i15 += (int) -61.41482;
            }
        }
        long meth_res = l + l1 + i11 + i12 + i13 + Double.doubleToLongBits(d2) + i14 + i15 + i16 + i17 +
                FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static boolean bMeth() {

        int i2 = 110;
        int i3 = 243;
        int i4 = 34;
        int i5 = 8;
        int i18 = -11;
        int i19 = 85;
        int i20 = 6;
        int[] iArr = new int[N];
        short s = 22865;
        float f = -66.982F;
        double d = 66.5997;

        FuzzerUtils.init(iArr, -13);

        for (i2 = 5; i2 < 177; ++i2) {
            s = (short) Test0758.instanceCount;
            for (i4 = 1; 9 > i4; i4++) {
                f = (float) d;
                iArr[i4] -= Math.abs(iArr[i2]);
                i3 = ((-iMeth(Test0758.instanceCount, Test0758.instanceCount)) >> Test0758.iFld);
                switch ((i2 % 10) + 35) {
                    case 35:
                        Test0758.iFld ^= Test0758.iFld;
                        break;
                    case 36:
                        d *= Test0758.iFld;
                        iArr[i4] += (int) f;
                    case 37:
                        for (i18 = 1; 2 > i18; ++i18) {
                            Test0758.iFld += (int) d;
                            i19 >>>= (int) Test0758.instanceCount;
                            i5 *= -242;
                            if (Test0758.bFld) break;
                        }
                    case 38:
                        f = i18;
                        break;
                    case 39:
                        i20 += (((i4 * i3) + i18) - Test0758.iFld);
                        break;
                    case 40:
                        if (Test0758.bFld) break;
                        break;
                    case 41:
                        Test0758.fFld = i2;
                    case 42:
                        Test0758.instanceCount -= Test0758.instanceCount;
                    case 43:
                        Test0758.fFld += i20;
                    case 44:
                    default:
                        try {
                            i20 = (Test0758.iFld / 20549);
                            i20 = (i20 % -64);
                            i20 = (174 % i3);
                        } catch (ArithmeticException a_e) {
                        }
                }
            }
        }
        long meth_res = i2 + i3 + s + i4 + i5 + Float.floatToIntBits(f) + Double.doubleToLongBits(d) + i18 + i19 + i20
                + FuzzerUtils.checkSum(iArr);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void main(String[] strArr) {

        try {
            Test0758 _instance = new Test0758();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 3;
        int i1 = 14;
        int i21 = 33;
        int i22 = 57484;
        int i23 = 5;
        int i24 = -156;
        int i25 = 79;
        int i26 = -12;
        int i27 = 139;
        int i28 = 9;
        int[] iArr3 = new int[N];
        short s1 = 7557;
        float f2 = -1.298F, f3 = 1.504F;
        long l3 = -186L;
        byte by = 102;
        double d3 = 33.74940;
        double[] dArr1 = new double[N];

        FuzzerUtils.init(iArr3, 13);
        FuzzerUtils.init(dArr1, 49.64926);

        for (i = 13; i < 218; i++) {
            if (bMeth()) break;
            iArr3 = iArr3;
            Test0758.iFld = i;
            Test0758.iFld = i1;
            Test0758.instanceCount += (((i * i1) + s1) - i);
            Test0758.iFld %= -3;
            Test0758.iFld += (11569 + (i * i));
        }
        Test0758.iFld = s1;
        for (f2 = 8; f2 < 257; f2++) {
            iArr3[(int) (f2 - 1)] -= i;
            for (f3 = f2; f3 < 101; f3++) {
                for (l3 = 1; l3 < 1; ++l3) {
                    Test0758.fArrFld[(int) (l3)] -= Test0758.instanceCount;
                    i22 *= i1;
                    i23 -= i1;
                    dArr1[(int) (l3 + 1)] += f3;
                }
                i21 = by;
                i24 = Test0758.iFld;
                switch ((int) ((f2 % 2) + 4)) {
                    case 4:
                        for (i25 = 1; i25 < 1; ++i25) {
                            i26 *= i23;
                        }
                        by >>>= (byte) i21;
                    case 5:
                        i21 += -216;
                        break;
                }
                Test0758.lArrFld[(int) (f3 - 1)] *= Test0758.instanceCount;
                for (i27 = 1; 1 < i27; i27--) {
                    i28 = (int) d3;
                    Test0758.instanceCount *= Test0758.instanceCount;
                    d3 *= f2;
                    iArr3[(int) (f3)] = i23;
                }
            }
        }

        FuzzerUtils.out.println("i i1 s1 = " + i + "," + i1 + "," + s1);
        FuzzerUtils.out.println("f2 i21 f3 = " + Float.floatToIntBits(f2) + "," + i21 + "," + Float.floatToIntBits(f3));
        FuzzerUtils.out.println("i22 l3 i23 = " + i22 + "," + l3 + "," + i23);
        FuzzerUtils.out.println("by i24 i25 = " + by + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("d3 iArr3 dArr1 = " + Double.doubleToLongBits(d3) + "," + FuzzerUtils.checkSum(iArr3) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0758.instanceCount Test0758.bFld Test0758.fFld = " + Test0758.instanceCount + "," + (Test0758.bFld ? 1
                : 0) + "," + Float.floatToIntBits(Test0758.fFld));
        FuzzerUtils.out.println("Test0758.iFld Test0758.fArrFld Test0758.lArrFld = " + Test0758.iFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0758.fArrFld)) + "," + FuzzerUtils.checkSum(Test0758.lArrFld));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
