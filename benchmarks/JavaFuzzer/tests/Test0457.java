// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:04 2023
public class Test0457 {

    public static final int N = 400;

    public static long instanceCount = -64L;
    public static volatile double dFld = 0.10850;
    public static volatile short sFld = 17284;
    public static volatile byte byFld = 103;
    public static float[] fArrFld = new float[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0457.fArrFld, -19.1F);
    }

    public static void vMeth2() {

        int i15 = 180;
        int i17 = 7;
        int i18 = -4;
        int i19 = 39216;
        int[] iArr1 = new int[N];
        boolean b1 = false;
        short s1 = 32257;
        float f2 = -63.452F;
        float[] fArr = new float[N];
        byte[][] byArr = new byte[N][N];
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr1, -1);
        FuzzerUtils.init(fArr, 0.968F);
        FuzzerUtils.init(byArr, (byte) 66);
        FuzzerUtils.init(lArr1, -8L);

        Test0457.dFld = i15;
        for (int i16 : iArr1) {
            switch ((((i16 >>> 1) % 3) * 5) + 91) {
                case 97:
                    for (i17 = 1; i17 < 4; ++i17) {
                        b1 = b1;
                        i16 += (int) (-105.638F + (i17 * i17));
                        fArr[i17 + 1] = s1;
                        byArr[i17][i17] |= (byte) i17;
                        i19 = 1;
                        do {
                            s1 ^= (short) i18;
                            i16 += (i19 ^ i16);
                            Test0457.instanceCount += Test0457.instanceCount;
                            i18 += (i19 * i19);
                        } while (++i19 < 2);
                        f2 += (((i17 * i19) + i15) - i16);
                        i18 <<= i18;
                    }
                    break;
                case 105:
                    Test0457.instanceCount = i18;
                    break;
                case 92:
                    lArr1[(i15 >>> 1) % N] %= (i15 | 1);
                    break;
                default:
                    Test0457.instanceCount *= i15;
            }
        }
        vMeth2_check_sum += i15 + i17 + i18 + (b1 ? 1 : 0) + s1 + i19 + Float.floatToIntBits(f2) +
                FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public static void vMeth1(int i11) {

        int i12 = -28404;
        int i13 = -61729;
        int i20 = -69;
        int i21 = 15;
        int i22 = 14;
        int i23 = -6;
        int[] iArr = new int[N];
        boolean b = false;
        short s2 = -27492;

        FuzzerUtils.init(iArr, 0);

        for (i12 = 390; i12 > 7; i12 -= 3) {
            float f1 = -99.518F;
            if (b) continue;
            Test0457.instanceCount += (i12 | (long) f1);
            vMeth2();
            for (i20 = 1; 12 > i20; i20++) {
                i21 += (i20 * i13);
                iArr[i12] += (int) -57.419F;
                if (b) {
                    f1 = i20;
                    iArr[i20] = i20;
                } else {
                    iArr[i12 + 1] *= i12;
                    s2 += (short) i11;
                }
                for (i22 = 1; i22 < 2; i22 += 3) {
                    if (b) break;
                    Test0457.instanceCount += (long) f1;
                }
            }
        }
        vMeth1_check_sum += i11 + i12 + i13 + (b ? 1 : 0) + i20 + i21 + s2 + i22 + i23 + FuzzerUtils.checkSum(iArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0457 _instance = new Test0457();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i6, int i7) {

        int i8 = 4;
        int i9 = 6;
        int i10 = 72;
        int i24 = -113;
        int i25 = -63605;
        int i26 = -11632;
        int i27 = -52;
        int[][] iArr2 = new int[N][N];
        byte by = -27;
        long[] lArr2 = new long[N];

        FuzzerUtils.init(iArr2, 227);
        FuzzerUtils.init(lArr2, -13L);

        for (i8 = 343; i8 > 11; i8--) {
            i10 = 1;
            do {
                i9 += (-249 + (i10 * i10));
                vMeth1(i8);
                Test0457.instanceCount += i10;
                Test0457.instanceCount += Test0457.instanceCount;
                i7 += i8;
            } while (++i10 < 5);
        }
        Test0457.fArrFld[(-66 >>> 1) % N] -= i9;
        iArr2[(i8 >>> 1) % N][(i9 >>> 1) % N] = i8;
        Test0457.sFld = (short) i8;
        for (i24 = 200; 12 < i24; i24--) {
            Test0457.instanceCount += by;
            for (i26 = 1; i26 < 8; ++i26) {
                i6 *= i6;
                lArr2[i24 + 1] = -762;
            }
        }
        vMeth_check_sum += i6 + i7 + i8 + i9 + i10 + i24 + i25 + by + i26 + i27 + FuzzerUtils.checkSum(iArr2) +
                FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        short s = 28327, s3 = 16737;
        int i = 31, i1 = 29476, i2 = -11, i3 = -1, i4 = -8, i5 = 128, i28 = 3, i29 = -20188, i30 = 31233, i31 = 26874, i32 = -57829;
        double d = 52.39833, d1 = -2.103597;
        float f = -1.66F;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -15509L);

        s = (short) Test0457.instanceCount;
        i = 1;
        while (++i < 324) {
            for (i1 = 3; i1 < 78; i1++) {
                lArr = (lArr = (lArr = lArr));
                for (d = 1; d < 2; ++d) {
                    i2 = (int) ((i3--) + ((i3 - f) * Test0457.instanceCount));
                }
                for (i4 = 1; i4 < 2; i4++) {
                    lArr[i4 + 1] = (++i5);
                    vMeth(i2, 136);
                    f -= i;
                    i5 /= -12943;
                    f += (i4 * i4);
                    i3 += (int) f;
                }
                for (i28 = 1; 2 > i28; i28 += 2) {
                    i5 >>= (int) Test0457.instanceCount;
                }
                i3 += i1;
                s3 -= (short) i5;
            }
            for (d1 = i; d1 < 78; d1++) {
                f -= i1;
            }
            Test0457.instanceCount -= i29;
            i3 = i2;
            lArr[i + 1] = i1;
            i5 = i;
        }
        for (i31 = 19; i31 < 338; i31++) {
            boolean b2 = true;
            i29 = Test0457.byFld;
            i2 = i29;
            if (b2) {
                i2 -= -12;
                i5 = s3;
            } else {
                Test0457.fArrFld[i31] *= 18815;
            }
        }

        FuzzerUtils.out.println("s i i1 = " + s + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 d i3 = " + i2 + "," + Double.doubleToLongBits(d) + "," + i3);
        FuzzerUtils.out.println("f i4 i5 = " + Float.floatToIntBits(f) + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i28 i29 s3 = " + i28 + "," + i29 + "," + s3);
        FuzzerUtils.out.println("d1 i30 i31 = " + Double.doubleToLongBits(d1) + "," + i30 + "," + i31);
        FuzzerUtils.out.println("i32 lArr = " + i32 + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0457.instanceCount Test0457.dFld Test0457.sFld = " + Test0457.instanceCount + "," +
                Double.doubleToLongBits(Test0457.dFld) + "," + Test0457.sFld);
        FuzzerUtils.out.println("Test0457.byFld Test0457.fArrFld = " + Test0457.byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0457.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
