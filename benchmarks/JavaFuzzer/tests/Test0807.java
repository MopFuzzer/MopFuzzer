// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test0807 {

    public static final int N = 400;

    public static long instanceCount = 5L;
    public static short sFld = 7054;
    public static boolean bFld = false;
    public static float fFld = 1.148F;
    public static long lFld = 5380815680615562164L;
    public static volatile byte byFld = -51;
    public static double[][] dArrFld = new double[N][N];
    public static long fMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0807.dArrFld, -24.43236);
    }

    public static void vMeth1(int i12, float f1, int i13) {

        int i14 = 14, i15 = -33889, i16 = -14731, i17 = 212, i18 = 0, i19 = -10736, i20 = -35, i21 = 50834;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -1.121964);

        for (i14 = 8; i14 < 156; ++i14) {
            i13 += (((i14 * f1) + i13) - i13);
            i15 = i13;
            i13 = i15;
            f1 -= i13;
            i15 = (int) -1.83887;
            Test0807.instanceCount += (((i14 * i14) + i13) - i15);
            Test0807.instanceCount += i14;
        }
        for (i16 = 11; i16 < 177; i16++) {
            for (i18 = 1; i18 < 10; ++i18) {
                i15 += i15;
                i15 = (int) Test0807.instanceCount;
                for (i20 = 1; i20 < 2; i20 += 2) {
                    dArr = dArr;
                    i12 >>= i19;
                }
            }
        }
        vMeth1_check_sum += i12 + Float.floatToIntBits(f1) + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(int i5) {

        int i6 = -50968;
        int i7 = 91;
        int i8 = -14;
        int i9 = 7;
        int i10 = -8;
        int i11 = 58716;
        int[] iArr = new int[N];
        float f2 = -84.336F;
        double d = 100.90744;

        FuzzerUtils.init(iArr, 68);

        for (i6 = 4; i6 < 363; ++i6) {
            if (Test0807.bFld) {
                if (Test0807.bFld) {
                    for (i8 = 1; i8 < 5; i8++) {
                        for (i10 = 1; i10 < 2; i10++) {
                            Test0807.bFld = Test0807.bFld;
                            vMeth1(i5, f2, i9);
                            iArr[i8 - 1] += (int) Test0807.instanceCount;
                            i7 += i10;
                            i9 -= (int) f2;
                            iArr[i8 + 1] -= (int) Test0807.instanceCount;
                            d += Test0807.sFld;
                            d = i6;
                            f2 += i11;
                        }
                        i7 -= i6;
                    }
                } else {
                    i7 += (i6 | Test0807.instanceCount);
                }
            }
        }
        vMeth_check_sum += i5 + i6 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + Double.doubleToLongBits(d) +
                FuzzerUtils.checkSum(iArr);
    }

    public static float fMeth() {

        int i3 = -10;
        int i4 = -54571;
        int i22 = 9;
        int i23 = -99;
        int i24 = 26;
        int i25 = 2;
        int[] iArr1 = new int[N];
        short s = -7694;

        FuzzerUtils.init(iArr1, 2);

        for (i3 = 10; i3 < 204; i3++) {
            vMeth(-60454);
            iArr1[i3 - 1] ^= i4;
            Test0807.fFld += (i3 + Test0807.instanceCount);
            Test0807.fFld += i3;
            iArr1[i3 + 1] <<= Test0807.sFld;
            for (i22 = 1; i22 < 8; ++i22) {
                if (Test0807.bFld) continue;
                Test0807.lFld += i3;
                i24 = 1;
                do {
                    switch ((i3 % 2) + 9) {
                        case 9:
                            Test0807.lFld = i3;
                        case 10:
                            Test0807.fFld += i24;
                            i23 += (i24 + i25);
                            s += (short) (-113.134F + (i24 * i24));
                            break;
                    }
                } while (++i24 < 2);
            }
        }
        long meth_res = i3 + i4 + i22 + i23 + i24 + i25 + s + FuzzerUtils.checkSum(iArr1);
        fMeth_check_sum += meth_res;
        return (float) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0807 _instance = new Test0807();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 61687;
        int i1 = -207;
        int i2 = 8;
        int i26 = -5;
        int i27 = 11;
        int i28 = 12;
        int i29 = 0;
        int i30 = -158;
        int[] iArr2 = new int[N];
        float f = 1.265F;
        byte[] byArr = new byte[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(byArr, (byte) -91);
        FuzzerUtils.init(iArr2, -16748);
        FuzzerUtils.init(lArr, 1140776L);

        if (true) {
            i = (int) f;
        } else if (Test0807.bFld) {
            for (i1 = 2; i1 < 267; ++i1) {
                Test0807.sFld = (short) (((i2 * -1.259F) * (232 - (--byArr[i1 + 1]))) - (-(i1 * i1)));
                f -= fMeth();
            }
            iArr2[(i1 >>> 1) % N] = i;
        } else if (Test0807.bFld) {
            for (i26 = 14; i26 < 234; i26++) {
                Test0807.byFld = (byte) Test0807.sFld;
                i <<= i1;
                for (i28 = 3; 114 > i28; i28++) {
                    i30 = 1;
                    do {
                        if (Test0807.bFld) {
                            i29 *= (int) Test0807.instanceCount;
                            i29 <<= (int) Test0807.lFld;
                            i &= (int) Test0807.instanceCount;
                        } else if (true) {
                            i27 -= (int) Test0807.instanceCount;
                            Test0807.instanceCount += (long) Test0807.fFld;
                        } else {
                            Test0807.fFld = i27;
                            i27 += i26;
                            Test0807.instanceCount += Test0807.byFld;
                        }
                        i *= i2;
                        lArr = lArr;
                        Test0807.byFld *= (byte) -49779;
                        Test0807.dArrFld[i26 - 1][i30 - 1] *= i29;
                        switch ((i30 % 2) + 37) {
                            case 37:
                                Test0807.lFld -= Test0807.lFld;
                                break;
                            case 38:
                                Test0807.fFld = i30;
                                f = Test0807.lFld;
                                i = i2;
                        }
                        iArr2[i26] -= i30;
                    } while (++i30 < 2);
                }
            }
        } else {
            Test0807.dArrFld[(i27 >>> 1) % N][(18927 >>> 1) % N] = 248;
        }

        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i26 i27 = " + i2 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("byArr iArr2 lArr = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr2)
                + "," + FuzzerUtils.checkSum(lArr));

        FuzzerUtils.out.println("Test0807.instanceCount Test0807.sFld Test0807.bFld = " + Test0807.instanceCount + "," + Test0807.sFld +
                "," + (Test0807.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0807.fFld Test0807.lFld Test0807.byFld = " + Float.floatToIntBits(Test0807.fFld) + "," + Test0807.lFld
                + "," + Test0807.byFld);
        FuzzerUtils.out.println("Test0807.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0807.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  fMeth ->  fMeth mainTest
//DEBUG  vMeth ->  vMeth fMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth fMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
