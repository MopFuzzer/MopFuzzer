// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test0864 {

    public static final int N = 400;

    public static long instanceCount = -80L;
    public static double dFld = 0.126135;
    public static short sFld1 = -6459;
    public static volatile boolean bFld = true;
    public static volatile double[] dArrFld = new double[N];
    public static double[] dArrFld1 = new double[N];
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0864.dArrFld, 0.26190);
        FuzzerUtils.init(Test0864.dArrFld1, 49.123765);
    }

    public int iFld = -5;
    public short sFld = 10018;
    public int[] iArrFld = new int[N];

    public static void vSmallMeth() {

        int i2 = 16323;
        float f = 126.941F;

        i2 -= (int) (f + (-56898L + (Test0864.instanceCount--)));
        vSmallMeth_check_sum += i2 + Float.floatToIntBits(f);
    }

    public static int iMeth1() {

        int i9 = -218, i10 = 13, i11 = 36, i12 = 101, i13 = -48724, i14 = 158;
        float f3 = 8.190F;
        long l = -23674L;
        byte by1 = 114;

        for (i9 = 1; 218 > i9; i9++) {
            Test0864.instanceCount += Test0864.instanceCount;
            switch ((i9 % 10) + 61) {
                case 61:
                    for (i11 = 1; i11 < 7; i11++) {
                        for (i13 = i11; i13 < 2; ++i13) {
                            i12 += (i13 + i12);
                            i14 *= -66;
                            Test0864.sFld1 -= (short) i13;
                            f3 = i9;
                            Test0864.sFld1 -= (short) i13;
                            Test0864.instanceCount += i13;
                            i12 -= (int) l;
                            i14 -= Test0864.sFld1;
                            f3 = i10;
                        }
                        if (Test0864.bFld) continue;
                    }
                    break;
                case 62:
                    i10 <<= (int) 138259332761492314L;
                    break;
                case 63:
                    i14 += (i9 * i9);
                    break;
                case 64:
                    i14 = (int) Test0864.instanceCount;
                    break;
                case 65:
                    i10 += (i9 - i13);
                    break;
                case 66:
                    i14 = (int) f3;
                    break;
                case 67:
                    Test0864.sFld1 += (short) (((i9 * i9) + i12) - f3);
                    break;
                case 68:
                    l >>>= i12;
                    break;
                case 69:
                    i12 = (int) 65L;
                    break;
                case 70:
                    Test0864.sFld1 &= by1;
                default:
                    i10 = i11;
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + i13 + i14 + Float.floatToIntBits(f3) + l + by1;
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(float f2) {

        int i6 = -138, i7 = 60364, i8 = -207, i15 = 7, i16 = -45599;
        short s = -27568;
        byte by2 = -5;
        float[] fArr = new float[N];
        long[] lArr1 = new long[N];

        FuzzerUtils.init(fArr, 0.313F);
        FuzzerUtils.init(lArr1, 6550761300784706837L);

        fArr[(i6 >>> 1) % N] *= (i6 + (f2 - (i6 + Test0864.sFld1)));
        i6 = (int) (Math.abs(i6 + i6) + i6);
        for (i7 = 1; 241 > i7; i7++) {
            if (Test0864.bFld) {
                i8 += (((i7 * i6) + s) - i7);
            } else {
                iMeth1();
                if (Test0864.bFld) continue;
                lArr1[i7] <<= -227;
            }
            Test0864.instanceCount >>= by2;
        }
        Test0864.dArrFld = Test0864.dArrFld1;
        for (i15 = 6; i15 < 162; i15++) {
            fArr[i15] = (float) Test0864.dFld;
            lArr1[i15 + 1] = i6;
            i8 = i8;
            i8 *= (int) Test0864.instanceCount;
        }
        vMeth_check_sum += Float.floatToIntBits(f2) + i6 + i7 + i8 + s + by2 + i15 + i16 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr1);
    }

    public static int iMeth(int i5) {

        float f4 = 0.283F;

        vMeth(f4);
        long meth_res = i5 + Float.floatToIntBits(f4);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0864 _instance = new Test0864();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 157, i1 = -231, i3 = -15090, i4 = -27300, i17 = 13, i18 = -116, i19 = -203, i20 = -9, i21 = -9, i22 = 175;
        byte by = 78;
        float f1 = 0.996F;
        float[][] fArr1 = new float[N][N];
        long l1 = 121L;
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(lArr, 10L);
        FuzzerUtils.init(fArr1, 13.469F);

        iFld += (++iFld);
        iArrFld = (iArrFld = (iArrFld = (iArrFld = iArrFld)));
        for (i = 3; i < 165; ++i) {
            i1 += i;
        }
        lArr[(i1 >>> 1) % N][(i >>> 1) % N] <<= ((iArrFld[(i >>> 1) % N] + (iFld + sFld)) -
                Short.reverseBytes((short) (-Short.reverseBytes(sFld))));
        for (int smallinvoc = 0; smallinvoc < 552; smallinvoc++) vSmallMeth();
        iFld += sFld;
        iFld = -80;
        vSmallMeth();
        for (i3 = 12; i3 < 370; i3++) {
            i1 += (((i3 * Test0864.instanceCount) + i) - by);
            iArrFld[i3 + 1] -= 32611;
        }
        vSmallMeth();
        iArrFld[(i3 >>> 1) % N] += (int) (((Test0864.instanceCount - Test0864.dFld) + iArrFld[(i >>> 1) % N]) * ((i1 -
                Test0864.instanceCount) ^ -31614));
        vSmallMeth();
        f1 = ((iMeth(i4) * Test0864.instanceCount) + iFld);
        i17 = 1;
        do {
            Test0864.instanceCount |= i1;
            for (i18 = 3; 75 > i18; ++i18) {
                iFld += (i18 * i18);
                switch (((i17 % 2) * 5) + 23) {
                    case 29:
                        for (i20 = 1; i20 < 2; i20++) {
                            Test0864.instanceCount -= iFld;
                            i4 += (int) Test0864.instanceCount;
                            iFld *= i18;
                            switch (((i18 % 8) * 5) + 59) {
                                case 66:
                                    Test0864.instanceCount ^= Test0864.instanceCount;
                                    Test0864.instanceCount += (long) f1;
                                case 64:
                                    i1 *= 8226;
                                    Test0864.instanceCount = i20;
                                    break;
                                case 75:
                                    Test0864.dArrFld[i17 - 1] *= Test0864.dFld;
                                    break;
                                case 86:
                                    i21 = (int) l1;
                                    break;
                                case 71:
                                    Test0864.dFld *= f1;
                                    break;
                                case 88:
                                    i21 = (int) Test0864.dFld;
                                case 97:
                                    i21 = i19;
                                    break;
                                case 92:
                                    fArr1[i18 - 1][i18 - 1] -= Test0864.instanceCount;
                                    break;
                            }
                        }
                        break;
                    case 26:
                        f1 += (i18 * Test0864.instanceCount);
                        break;
                    default:
                        i22 ^= (int) -2974284064L;
                }
            }
        } while (++i17 < 337);

        FuzzerUtils.out.println("i i1 i3 = " + i + "," + i1 + "," + i3);
        FuzzerUtils.out.println("i4 by f1 = " + i4 + "," + by + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 l1 = " + i20 + "," + i21 + "," + l1);
        FuzzerUtils.out.println("i22 lArr fArr1 = " + i22 + "," + FuzzerUtils.checkSum(lArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0864.instanceCount iFld sFld = " + Test0864.instanceCount + "," + iFld + "," + sFld);
        FuzzerUtils.out.println("Test0864.dFld Test0864.sFld1 Test0864.bFld = " + Double.doubleToLongBits(Test0864.dFld) + "," +
                Test0864.sFld1 + "," + (Test0864.bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld Test0864.dArrFld Test0864.dArrFld1 = " + FuzzerUtils.checkSum(iArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0864.dArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0864.dArrFld1)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
