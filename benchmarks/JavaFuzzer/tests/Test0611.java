// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test0611 {

    public static final int N = 400;

    public static long instanceCount = -73L;
    public static short sFld = 5033;
    public static volatile int iFld = 41641;
    public static float fFld = -119.105F;
    public static int iFld1 = 9;
    public static long[] lArrFld = new long[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0611.lArrFld, -2085096135323545148L);
    }

    public int iFld2 = 2;
    public int[] iArrFld = new int[N];
    public float[] fArrFld = new float[N];

    public static int iMeth1(int i1) {

        long l2 = -21602L;
        long[] lArr = new long[N];
        int i2 = -104;

        FuzzerUtils.init(lArr, 3443773239277574942L);

        i1 = i1;
        i1 += 3;
        for (long l1 : lArr) {
            for (l2 = 1; l2 < 4; l2++) {
                double d = 2.68107;
                d -= i2;
                l1 = i2;
                i2 = i1;
                Test0611.instanceCount ^= i1;
            }
        }
        long meth_res = i1 + l2 + i2 + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(long l) {

        int i = 176, i3 = -47651, i4 = -48808, i5 = -8, i6 = 7, i7 = -40329, i8 = 3473;
        float f = -2.240F;
        float[] fArr = new float[N];
        double d1 = 0.84816;

        FuzzerUtils.init(fArr, -54.102F);

        i <<= (-(iMeth1(-225) - i));
        for (i3 = 4; i3 < 262; i3 += 3) {
            fArr[i3 - 1] = i4;
            i *= i;
            for (i5 = 1; i5 < 18; i5++) {
                i4 -= (int) l;
            }
            i4 = Test0611.sFld;
            switch (((i5 >>> 1) % 9) + 105) {
                case 105:
                    for (i7 = 1; i7 < 18; i7++) {
                        f -= i5;
                        f += i7;
                        Test0611.sFld = (short) d1;
                    }
                    i4 += i8;
                    break;
                case 106:
                    fArr[(i4 >>> 1) % N] -= i6;
                    i8 -= i6;
                    break;
                case 107:
                    Test0611.instanceCount = -133L;
                    break;
                case 108:
                    f += i3;
                    break;
                case 109:
                    i6 += i3;
                    break;
                case 110:
                    Test0611.lArrFld[i3 + 1] = -73817174L;
                    break;
                case 111:
                    i6 = i8;
                    break;
                case 112:
                    i += i8;
                    break;
                case 113:
                    i6 += (184 + (i3 * i3));
                    break;
            }
        }
        vMeth_check_sum += l + i + i3 + i4 + i5 + i6 + i7 + i8 + Float.floatToIntBits(f) + Double.doubleToLongBits(d1)
                + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(byte by) {

        int i9 = 36015;
        int i10 = -171;
        int i11 = 11;
        int[] iArr = new int[N];
        boolean b = true;
        boolean[] bArr = new boolean[N];
        short[] sArr = new short[N];

        FuzzerUtils.init(sArr, (short) 10269);
        FuzzerUtils.init(iArr, -41122);
        FuzzerUtils.init(bArr, false);

        vMeth(Test0611.instanceCount);
        Test0611.instanceCount -= Test0611.iFld;
        sArr[(Test0611.iFld >>> 1) % N] = (short) 3;
        i9 = 1;
        do {
            switch ((i9 % 4) + 85) {
                case 85:
                    Test0611.iFld += (i9 | Test0611.instanceCount);
                    break;
                case 86:
                    Test0611.lArrFld = Test0611.lArrFld;
                    Test0611.iFld *= i9;
                    break;
                case 87:
                    try {
                        Test0611.iFld = (-577 / Test0611.iFld);
                        iArr[i9 + 1] = (30991 % i9);
                        Test0611.iFld = (i9 / i9);
                    } catch (ArithmeticException a_e) {
                    }
                    Test0611.iFld = i9;
                    if (b) continue;
                    Test0611.iFld <<= Test0611.iFld;
                case 88:
                    for (i10 = 29; i10 > i9; --i10) {
                        try {
                            iArr[i10] = (1860 % i11);
                            iArr[i9] = (Test0611.iFld % i10);
                            Test0611.iFld = (Test0611.iFld % iArr[i9 + 1]);
                        } catch (ArithmeticException a_e) {
                        }
                        Test0611.instanceCount -= i9;
                    }
                    break;
                default:
                    bArr = bArr;
            }
        } while ((i9 += 3) < 157);
        long meth_res = by + i9 + (b ? 1 : 0) + i10 + i11 + FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(iArr) +
                FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0611 _instance = new Test0611();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i12 = -6, i13 = -74, i14 = -38598, i15 = -56385, i16 = -51, i17 = -112, i18 = -48080, i19 = -47761, i21 = 13;
        boolean b1 = false;
        double d3 = 0.6996;

        iMeth((byte) (-68));
        i12 = 1;
        while (++i12 < 133) {
            Test0611.iFld += (int) Test0611.fFld;
            i13 = 1;
            do {
                b1 = b1;
                for (i14 = 1; i14 < 1; i14++) {
                    Test0611.instanceCount += (((i14 * i14) + Test0611.instanceCount) - i14);
                    iArrFld[i14] <<= Test0611.iFld1;
                    Test0611.fFld = Test0611.iFld;
                    i15 += i14;
                    Test0611.instanceCount += i14;
                    Test0611.iFld1 >>>= -9446;
                }
                for (i16 = 1; i16 < 1; i16++) {
                    double d2 = 7.90830;
                    Test0611.iFld1 -= (int) 2.92903;
                    d2 = iFld2;
                }
                iArrFld[i13 + 1] >>= Test0611.iFld;
                switch (((i13 % 4) * 5) + 5) {
                    case 17:
                        i15 = -59172;
                        for (i18 = 1; i18 < 1; i18++) {
                            int i20 = 9602;
                            Test0611.iFld1 &= (int) Test0611.instanceCount;
                            Test0611.fFld -= i20;
                            Test0611.fFld -= 14;
                            Test0611.iFld = -4;
                            Test0611.instanceCount += i18;
                            Test0611.lArrFld[i13 - 1] += -100L;
                            try {
                                i19 = (i13 / i12);
                                iFld2 = (i13 / -871174288);
                                i19 = (64660 / i19);
                            } catch (ArithmeticException a_e) {
                            }
                        }
                        try {
                            Test0611.iFld1 = (i14 / 51);
                            i19 = (i19 % Test0611.iFld);
                            i19 = (iArrFld[i12] / 2088743801);
                        } catch (ArithmeticException a_e) {
                        }
                        i21 = 1;
                        do {
                            iArrFld[i12 + 1] = Test0611.iFld;
                            fArrFld[i21 - 1] -= 203;
                        } while (++i21 < 1);
                        break;
                    case 11:
                        Test0611.fFld += i14;
                        break;
                    case 21:
                        iArrFld[i12] = i19;
                    case 20:
                        i19 *= (int) d3;
                        break;
                }
            } while (++i13 < 188);
        }

        FuzzerUtils.out.println("i12 i13 b1 = " + i12 + "," + i13 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i18 i19 = " + i17 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i21 d3 = " + i21 + "," + Double.doubleToLongBits(d3));

        FuzzerUtils.out.println("Test0611.instanceCount Test0611.sFld Test0611.iFld = " + Test0611.instanceCount + "," + Test0611.sFld +
                "," + Test0611.iFld);
        FuzzerUtils.out.println("Test0611.fFld Test0611.iFld1 iFld2 = " + Float.floatToIntBits(Test0611.fFld) + "," + Test0611.iFld1 +
                "," + iFld2);
        FuzzerUtils.out.println("Test0611.lArrFld iArrFld fArrFld = " + FuzzerUtils.checkSum(Test0611.lArrFld) + "," +
                FuzzerUtils.checkSum(iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
