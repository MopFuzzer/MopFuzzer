// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:12 2023
public class Test0777 {

    public static final int N = 400;

    public static volatile long instanceCount = 36L;
    public static volatile float fFld = -1.662F;
    public static double dFld = 1.85009;
    public static volatile int iFld = -12;
    public static int[] iArrFld = new int[N];
    public static long[] lArrFld1 = new long[N];
    public static float[] fArrFld = new float[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0777.iArrFld, -55673);
        FuzzerUtils.init(Test0777.lArrFld1, 2101171186575381689L);
        FuzzerUtils.init(Test0777.fArrFld, -61.453F);
    }

    public byte byFld = 107;
    public boolean bFld = false;
    public long[][] lArrFld = new long[N][N];

    public static void vMeth2(int i5) {

        float f1 = -66.397F;
        int i6 = -16493, i7 = 67, i8 = -2, i9 = 59, i10 = -180, i11 = 3;
        double d = 48.7855;
        boolean b = true;

        for (f1 = 290; f1 > 10; f1 -= 3) {
            if (b) {
                for (i7 = 1; i7 < 17; i7++) {
                    d *= Test0777.instanceCount;
                    Test0777.fFld -= i7;
                }
                i6 += (int) f1;
                i8 = i7;
                for (i9 = (int) (f1); i9 < 17; ++i9) {
                    b = b;
                    i11 = 1;
                    while (++i11 < 1) {
                        Test0777.lArrFld1[(int) (f1)] -= Test0777.instanceCount;
                        i8 *= (int) d;
                        i6 *= i5;
                        b = b;
                        if (i8 != 0) {
                            vMeth2_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 +
                                    Double.doubleToLongBits(d) + i9 + i10 + (b ? 1 : 0) + i11;
                            return;
                        }
                    }
                }
                vMeth2_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 +
                        i10 + (b ? 1 : 0) + i11;
                return;
            }
        }
        vMeth2_check_sum += i5 + Float.floatToIntBits(f1) + i6 + i7 + i8 + Double.doubleToLongBits(d) + i9 + i10 + (b ?
                1 : 0) + i11;
    }

    public static void main(String[] strArr) {

        try {
            Test0777 _instance = new Test0777();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth1(long l1, float f, int i4) {

        int i12 = 14, i13 = 82, i14 = 11, i15 = -2, i16 = -6484;
        double d1 = 101.74354;
        boolean b1 = true;

        vMeth2(i4);
        Test0777.iArrFld[(i4 >>> 1) % N] = i4;
        i12 = 1;
        do {
            for (i13 = 1; i13 < 9; ++i13) {
                Test0777.iArrFld[i12 - 1] >>>= i13;
                for (i15 = 2; i15 > 1; i15--) {
                    Test0777.fFld = i13;
                    i14 = i14;
                    if (b1) {
                        Test0777.fFld += 48;
                        switch ((i15 % 6) + 9) {
                            case 9:
                                switch (((13 >>> 1) % 1) + 112) {
                                    case 112:
                                        i14 <<= i15;
                                        i16 -= i4;
                                        break;
                                    default:
                                        Test0777.iArrFld = FuzzerUtils.int1array(N, (int) 242);
                                }
                                break;
                            case 10:
                                Test0777.iArrFld[i15 - 1] -= (int) f;
                                break;
                            case 11:
                                i16 += (i15 * i16);
                                break;
                            case 12:
                                d1 = l1;
                                break;
                            case 13:
                                Test0777.instanceCount -= -9;
                                break;
                            case 14:
                                Test0777.iArrFld[i15 + 1] += i15;
                                break;
                            default:
                                Test0777.fArrFld[i13 + 1] += byFld;
                        }
                    } else {
                        Test0777.iArrFld[i12] = i14;
                        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i4 + i12 + i13 + i14 + i15 + i16 +
                                Double.doubleToLongBits(d1) + (b1 ? 1 : 0);
                        return;
                    }
                }
            }
        } while ((i12 += 2) < 345);
        vMeth1_check_sum += l1 + Float.floatToIntBits(f) + i4 + i12 + i13 + i14 + i15 + i16 +
                Double.doubleToLongBits(d1) + (b1 ? 1 : 0);
    }

    public void vMeth(int i2, long l, int i3) {

        int i17 = 684, i18 = 3, i19 = 151, i20 = 7, i21 = -17, i22 = -15306, i23 = -10, i24 = 199;

        lArrFld[(i2 >>> 1) % N][(i2 >>> 1) % N] = i3;
        vMeth1(-1927605150L, Test0777.fFld, i2);
        Test0777.dFld -= i2;
        for (i17 = 9; i17 < 203; ++i17) {
            for (i19 = 1; i19 < 8; i19++) {
                for (i21 = i19; i21 < 2; ++i21) {
                    i3 = i22;
                    i3 -= i17;
                    i22 += (((i21 * i3) + Test0777.instanceCount) - Test0777.instanceCount);
                    i2 -= i18;
                }
                Test0777.fFld += (i19 * i19);
                for (i23 = 1; i23 < 2; ++i23) {
                    if (bFld) continue;
                    i20 = i18;
                    i18 *= (int) Test0777.instanceCount;
                }
            }
        }
        vMeth_check_sum += i2 + l + i3 + i17 + i18 + i19 + i20 + i21 + i22 + i23 + i24;
    }

    public void mainTest(String[] strArr1) {

        int i = -60483, i1 = -47238, i25 = 22973, i26 = -59599, i27 = 110, i28 = -9, i29 = -185, i30 = 82, i31 = 227, i32 = -11;
        short s = 25688;
        long l2 = -187L;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, 2.33284);

        for (i = 2; 138 > i; i++) {
            Test0777.iArrFld[i + 1] -= Test0777.iArrFld[i - 1];
            i1 += (i * i);
            vMeth(i1, Test0777.instanceCount, i);
            dArr[i] += Test0777.instanceCount;
            i1 >>>= i1;
            for (i25 = 7; i25 < 184; ++i25) {
                Test0777.iFld = (int) 1.271F;
                lArrFld[i25][i] -= i26;
                i27 = 1;
                while (++i27 < 2) {
                    Test0777.iFld = i26;
                    Test0777.fArrFld = FuzzerUtils.float1array(N, (float) 58.180F);
                    Test0777.iFld = i27;
                    Test0777.iFld >>= (int) Test0777.instanceCount;
                }
                i1 -= byFld;
                s -= (short) -3;
                Test0777.iFld = i25;
            }
            Test0777.instanceCount += (i ^ byFld);
        }
        for (i28 = 6; i28 < 254; i28++) {
            for (l2 = 6; 101 > l2; l2++) {
                for (i31 = 1; i31 < 2; i31++) {
                    Test0777.instanceCount = i28;
                    Test0777.fFld += (i31 * i31);
                    Test0777.dFld += Test0777.iFld;
                    Test0777.iFld -= i31;
                    Test0777.iArrFld[i31 + 1] = -138;
                    switch (((-42879 >>> 1) % 7) + 64) {
                        case 64:
                            Test0777.iArrFld = Test0777.iArrFld;
                            break;
                        case 65:
                            Test0777.instanceCount += l2;
                            Test0777.instanceCount = i29;
                        case 66:
                            i29 = i;
                            break;
                        case 67:
                            lArrFld[i31 + 1] = lArrFld[i28 + 1];
                            break;
                        case 68:
                            i29 -= i29;
                            break;
                        case 69:
                            i32 += (i31 ^ i29);
                            break;
                        case 70:
                            Test0777.iArrFld[i31 + 1] += (int) Test0777.instanceCount;
                            break;
                        default:
                            i32 = i1;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i25 = " + i + "," + i1 + "," + i25);
        FuzzerUtils.out.println("i26 i27 s = " + i26 + "," + i27 + "," + s);
        FuzzerUtils.out.println("i28 i29 l2 = " + i28 + "," + i29 + "," + l2);
        FuzzerUtils.out.println("i30 i31 i32 = " + i30 + "," + i31 + "," + i32);
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0777.instanceCount Test0777.fFld byFld = " + Test0777.instanceCount + "," +
                Float.floatToIntBits(Test0777.fFld) + "," + byFld);
        FuzzerUtils.out.println("Test0777.dFld bFld Test0777.iFld = " + Double.doubleToLongBits(Test0777.dFld) + "," + (bFld ? 1 :
                0) + "," + Test0777.iFld);
        FuzzerUtils.out.println("Test0777.iArrFld lArrFld Test0777.lArrFld1 = " + FuzzerUtils.checkSum(Test0777.iArrFld) + "," +
                FuzzerUtils.checkSum(lArrFld) + "," + FuzzerUtils.checkSum(Test0777.lArrFld1));
        FuzzerUtils.out.println("Test0777.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0777.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
