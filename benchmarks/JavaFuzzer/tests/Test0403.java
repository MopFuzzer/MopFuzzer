// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test0403 {

    public static final int N = 400;

    public static volatile long instanceCount = -37758L;
    public static double dFld = 0.74326;
    public static byte byFld = -107;
    public static int[] iArrFld = new int[N];
    public static float[] fArrFld = new float[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0403.iArrFld, -35538);
        FuzzerUtils.init(Test0403.fArrFld, 0.470F);
    }

    public int iFld = 6;
    public float fFld = 2.102F;

    public static int iMeth1(int i5, int i6) {

        int i7 = -13, i8 = 5746, i9 = -65190, i10 = 12, i11 = 8, i12 = -2;
        float f1 = 1.34F;
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 5L);

        for (i7 = 10; i7 < 327; ++i7) {
            f1 -= Test0403.instanceCount;
            if (b) {
                Test0403.dFld -= Test0403.instanceCount;
            } else {
                i5 += i7;
            }
            for (i9 = 5; i9 > 1; --i9) {
                i8 *= (int) 62.411F;
                for (i11 = 1; i11 < 2; i11++) {
                    if (true) continue;
                    Test0403.instanceCount >>= i11;
                    b = b;
                    Test0403.instanceCount = i7;
                    lArr[i7 + 1] = i7;
                    i10 <<= -213;
                    Test0403.fArrFld[i7 - 1] /= (i7 | 1);
                }
            }
        }
        long meth_res = i5 + i6 + i7 + i8 + Float.floatToIntBits(f1) + (b ? 1 : 0) + i9 + i10 + i11 + i12 +
                FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {

        double d = 0.117766;
        double[] dArr = new double[N];
        int i2 = 133, i3 = 58940, i4 = -54523, i13 = 14, i14 = 12;
        float[] fArr = new float[N], fArr1 = new float[N];

        FuzzerUtils.init(fArr, 0.880F);
        FuzzerUtils.init(dArr, 89.115710);
        FuzzerUtils.init(fArr1, -91.251F);

        for (d = 9; 210 > d; d++) {
            i2 += (int) fArr[(int) (d + 1)];
        }
        i2 &= i2;
        dArr[(i2 >>> 1) % N] += Math.abs((int) ((--Test0403.instanceCount) + (Test0403.instanceCount - Test0403.byFld)));
        i2 = i2;
        for (i3 = 159; 6 < i3; --i3) {
            Test0403.iArrFld[i3] -= (int) (Test0403.iArrFld[i3 - 1] + -1.133F);
            i2 += (int) (i2 + (Test0403.iArrFld[i3 + 1] * (Test0403.instanceCount - i4)));
            switch ((((i2 & 2660) >>> 1) % 5) + 92) {
                case 92:
                    fArr[i3 + 1] -= iMeth1(11, -2);
                    break;
                case 93:
                    if (false) {
                        for (i13 = 1; 10 > i13; ++i13) {
                            i14 += (i13 + Test0403.byFld);
                            i2 += (int) (-2.1011F + (i13 * i13));
                            Test0403.instanceCount = (long) d;
                        }
                    }
                case 94:
                case 95:
                    Test0403.fArrFld = fArr1;
                case 96:
                default:
                    i14 += (int) d;
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + i13 + i14 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static int iMeth() {

        int i = 243, i1 = -19702, i15 = 0, i16 = 10, i17 = -94, i18 = 53474, i19 = 4520, i20 = 1;
        float f = 0.740F;
        float[] fArr2 = new float[N];
        byte by = -122;
        short s = -2228;

        FuzzerUtils.init(fArr2, 0.249F);

        Test0403.dFld += Test0403.iArrFld[(i >>> 1) % N];
        i += (int) (((Test0403.instanceCount - f) - (i1 >>> by)) - (~(i1 + i1)));
        vMeth();
        i += (int) Test0403.instanceCount;
        f *= i;
        for (i15 = 15; 259 > i15; ++i15) {
            for (i17 = 1; i17 < 7; i17++) {
                for (i19 = 1; 2 > i19; i19 += 2) {
                    fArr2[i17] = i19;
                    f -= Test0403.instanceCount;
                    i20 += i19;
                    i20 += i19;
                    try {
                        i20 = (-1177746741 % i1);
                        Test0403.iArrFld[i19 + 1] = (i16 / i19);
                        i1 = (-23300 / i15);
                    } catch (ArithmeticException a_e) {
                    }
                    s -= (short) Test0403.instanceCount;
                    Test0403.iArrFld[i15] -= i20;
                }
            }
        }
        long meth_res = i + Float.floatToIntBits(f) + i1 + by + i15 + i16 + i17 + i18 + i19 + i20 + s +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0403 _instance = new Test0403();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i21 = 10, i22 = -236, i23 = -186, i24 = -48, i25 = 59738, i26 = -9, i28 = -77;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, 7153833922214676303L);

        iMeth();
        Test0403.fArrFld[(iFld >>> 1) % N] = fFld;
        for (i21 = 12; i21 < 236; ++i21) {
            i22 = i22;
            iFld = i21;
            i22 += i21;
            for (i23 = 7; i23 < 112; i23++) {
                Test0403.iArrFld = FuzzerUtils.int1array(N, (int) -231);
                Test0403.iArrFld[i23] <<= (int) -8397626779875455734L;
                try {
                    i22 = (iFld / i22);
                    i22 = (iFld / i21);
                    i24 = (Test0403.iArrFld[i21 + 1] % -389249540);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        Test0403.iArrFld[(iFld >>> 1) % N] *= i21;
        for (i25 = 121; 1 < i25; i25 -= 2) {
            fFld += (i25 * i21);
            i26 = i26;
            Test0403.iArrFld = Test0403.iArrFld;
            i26 += (int) (68.421F + (i25 * i25));
            i24 -= -9;
            Test0403.instanceCount *= i24;
            Test0403.byFld = (byte) Test0403.dFld;
        }
        for (int i27 : Test0403.iArrFld) {
            i27 = 27008;
            i26 += (int) Test0403.instanceCount;
            i27 = i25;
            i28 = 1;
            while (++i28 < 63) {
                i22 += (int) 951910252L;
            }
            Test0403.instanceCount = -8L;
        }
        i22 -= (int) Test0403.instanceCount;
        i24 -= 44101;
        lArr1[(i23 >>> 1) % N] -= 135L;
        i24 += (int) fFld;

        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i28 lArr1 = " + i28 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0403.instanceCount Test0403.dFld Test0403.byFld = " + Test0403.instanceCount + "," +
                Double.doubleToLongBits(Test0403.dFld) + "," + Test0403.byFld);
        FuzzerUtils.out.println("iFld fFld Test0403.iArrFld = " + iFld + "," + Float.floatToIntBits(fFld) + "," +
                FuzzerUtils.checkSum(Test0403.iArrFld));
        FuzzerUtils.out.println("Test0403.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0403.fArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
