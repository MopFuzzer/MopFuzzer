// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:03 2023
public class Test0421 {

    public static final int N = 400;

    public static long instanceCount = 9L;
    public static byte byFld = -55;
    public static long lFld = -4543050037721361347L;
    public static double dFld = 1.6323;
    public static long[] lArrFld = new long[N];
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0421.lArrFld, -44933L);
    }

    public float fFld = 0.698F;
    public short sFld = -22401;

    public static int iMeth1(double d1, long l1) {

        int i8 = 136;
        boolean b = false;

        l1 >>= i8;
        d1 += l1;
        i8 <<= (int) l1;
        b = b;
        long meth_res = Double.doubleToLongBits(d1) + l1 + i8 + (b ? 1 : 0);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i3, int i4, long l) {

        int i5 = 32123;
        int i6 = -79;
        int i7 = -180;
        int i9 = -12;
        int i10 = 1041;
        int[] iArr1 = new int[N];
        double d = -1.66692;
        float f = 1.459F;
        boolean b1 = false;

        FuzzerUtils.init(iArr1, 159);

        for (i5 = 6; i5 < 290; i5++) {
            d = Math.abs(i3--);
            i4 -= (int) ((Test0421.instanceCount--) * (++Test0421.instanceCount));
            try {
                i3 = (i5 % -32765);
                i4 = (iArr1[i5 + 1] % 2125488233);
                i6 = (iArr1[i5 + 1] / -122);
            } catch (ArithmeticException a_e) {
            }
            i7 = 1;
            while (++i7 < 6) {
                Test0421.lArrFld[i7] = iMeth1(d, 38628L);
                for (i9 = i7; 1 > i9; i9++) {
                    i3 = i9;
                    f = i9;
                    if (i9 != 0) {
                    }
                    b1 = b1;
                }
                i3 += (i7 + Test0421.instanceCount);
                if (i7 != 0) {
                }
            }
            i3 += i5;
            i3 = (int) l;
        }
        long meth_res = i3 + i4 + l + i5 + i6 + Double.doubleToLongBits(d) + i7 + i9 + i10 + Float.floatToIntBits(f) +
                (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0421 _instance = new Test0421();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public long lMeth(int i1, int i2) {

        int i11 = 56253;
        int i12 = -163;
        int i13 = -9;
        int i14 = 160;
        int i15 = -24217;
        int i16 = -13;
        int[][] iArr2 = new int[N][N];
        short s = -12010;
        float[] fArr1 = new float[N];

        FuzzerUtils.init(iArr2, -9);
        FuzzerUtils.init(fArr1, -94.814F);

        Test0421.byFld <<= (byte) iMeth(i1, i1, Test0421.instanceCount);
        for (i11 = 13; 358 > i11; i11++) {
            fFld = 62963;
            try {
                i2 = (i11 % -16582);
                i12 = (1623135361 / i12);
                i2 = (iArr2[i11][i11] % i1);
            } catch (ArithmeticException a_e) {
            }
            for (i13 = 1; i13 < 5; i13++) {
                iArr2[i13 - 1][(i2 >>> 1) % N] *= (int) fFld;
                Test0421.instanceCount += Test0421.instanceCount;
                switch (((i14 >>> 1) % 7) + 32) {
                    case 32:
                        fArr1[i11 - 1] += 2;
                        break;
                    case 33:
                        i14 -= s;
                    case 34:
                        Test0421.lArrFld[i13] += 7;
                        for (i15 = i13; i15 < 2; ++i15) {
                            i14 = s;
                            if (i16 != 0) {
                            }
                            Test0421.lFld += i15;
                        }
                    case 35:
                        Test0421.lFld += i13;
                    case 36:
                        Test0421.lFld -= Test0421.instanceCount;
                    case 37:
                        try {
                            i12 = (iArr2[i13][i13] % i1);
                            i16 = (-1492345738 / i1);
                            i1 = (-240 % iArr2[(i11 >>> 1) % N][i13 + 1]);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 38:
                        Test0421.lFld <<= -58;
                        break;
                    default:
                        i2 = (int) fFld;
                }
            }
        }
        long meth_res = i1 + i2 + i11 + i12 + i13 + i14 + s + i15 + i16 + FuzzerUtils.checkSum(iArr2) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i = -5;
        int i17 = 34067;
        int i18 = -4;
        int i19 = -5;
        int i20 = 43319;
        int i21 = 35;
        int i22 = -53396;
        int i23 = -51468;
        int i24 = -12;
        int i25 = 11544;
        int i26 = -50;
        int i27 = 6175;
        int i28 = 3;
        int i29 = 172;
        int[] iArr = new int[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, 8157);
        FuzzerUtils.init(fArr, 43.820F);

        fFld -= iArr[(i >>> 1) % N];
        iArr[(i >>> 1) % N] += (int) ((fArr[(i >>> 1) % N] * lMeth(i, i)) + 86.107229);
        for (i17 = 13; i17 < 323; i17++) {
            Test0421.dFld -= i17;
        }
        iArr[(57154 >>> 1) % N] <<= i17;
        for (i19 = 8; 321 > i19; i19++) {
            fFld = Test0421.lFld;
            i18 = (int) fFld;
            for (i21 = 4; 80 > i21; i21 += 2) {
                Test0421.instanceCount = i18;
                fFld += i21;
            }
        }
        i20 = i17;
        for (i23 = 3; i23 < 174; ++i23) {
            i18 = (int) 3168843796818060317L;
        }
        for (i25 = 7; i25 < 187; i25++) {
            iArr[i25] = i24;
            switch ((i25 % 2) + 8) {
                case 8:
                    i18 += i22;
                    i18 = i;
                    Test0421.dFld = i18;
                    i = i;
                case 9:
                    for (i27 = i25; 139 > i27; i27++) {
                        i18 <<= 37215;
                        i29 *= i19;
                        i29 += i26;
                        i28 -= i;
                        i20 += (int) 158L;
                    }
                    Test0421.lFld = (long) fFld;
            }
            sFld += (short) (i25 * i25);
            i = (int) Test0421.instanceCount;
        }

        FuzzerUtils.out.println("i i17 i18 = " + i + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 iArr = " + i28 + "," + i29 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0421.instanceCount fFld Test0421.byFld = " + Test0421.instanceCount + "," +
                Float.floatToIntBits(fFld) + "," + Test0421.byFld);
        FuzzerUtils.out.println("Test0421.lFld Test0421.dFld sFld = " + Test0421.lFld + "," + Double.doubleToLongBits(Test0421.dFld) +
                "," + sFld);
        FuzzerUtils.out.println("Test0421.lArrFld = " + FuzzerUtils.checkSum(Test0421.lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
