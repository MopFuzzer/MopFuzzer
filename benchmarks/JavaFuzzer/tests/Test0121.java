// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:55 2023
public class Test0121 {

    public static final int N = 400;

    public static long instanceCount = 47745L;
    public static int iFld = 51701;
    public static short sFld = 5215;
    public static float fFld = 1.164F;
    public static boolean bFld = true;
    public static int[] iArrFld = new int[N];
    public static long vSmallMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0121.iArrFld, 28872);
    }

    public double dFld = 83.22369;

    public static void vSmallMeth(int i) {

        float f = 2.794F;

        Test0121.iArrFld[(Test0121.iFld >>> 1) % N] -= (int) (f++);
        vSmallMeth_check_sum += i + Float.floatToIntBits(f);
    }

    public static long lMeth1(int i4) {

        byte by = 84;
        double d = -118.66349, d1 = 124.45497;
        int i5 = 3, i6 = -243, i7 = 12, i8 = -24, i9 = -4;
        boolean b = false;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -2L);

        Test0121.iArrFld[(i4 >>> 1) % N] = i4;
        try {
            i4 >>= i4;
            by = (byte) 47982;
            d = 23969;
            for (i5 = 14; i5 < 327; i5++) {
                lArr1 = lArr1;
                for (d1 = 1; d1 < 5; d1++) {
                    i6 <<= Test0121.iFld;
                    i7 += (int) ((long) d1 | Test0121.instanceCount);
                    b = b;
                    for (i8 = 1; i8 < 2; i8++) {
                        Test0121.sFld += (short) i8;
                        Test0121.instanceCount = Test0121.instanceCount;
                        Test0121.fFld = i4;
                    }
                }
            }
        } catch (NullPointerException exc2) {
            i9 <<= i7;
        }
        long meth_res = i4 + by + Double.doubleToLongBits(d) + i5 + i6 + Double.doubleToLongBits(d1) + i7 + (b ? 1 : 0)
                + i8 + i9 + FuzzerUtils.checkSum(lArr1);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static double dMeth() {

        int i2 = -61, i3 = 203, i10 = -49005, i11 = 239;
        double d2 = -2.121122;

        for (i2 = 285; 9 < i2; i2--) {
            switch ((i2 % 5) + 87) {
                case 87:
                    Test0121.instanceCount = (long) (lMeth1(Test0121.iFld) * d2);
                    break;
                case 88:
                    i3 += Test0121.iFld;
                    Test0121.instanceCount = (long) Test0121.fFld;
                    break;
                case 89:
                    i3 += i2;
                    for (i10 = 1; i10 < 6; i10++) {
                        i11 = Test0121.iFld;
                        i11 = (int) 180750123L;
                        i11 += 53928;
                        Test0121.instanceCount = i10;
                        Test0121.instanceCount += (i10 | Test0121.instanceCount);
                        i11 = Test0121.iFld;
                        Test0121.instanceCount |= Test0121.instanceCount;
                        Test0121.iArrFld[i2 - 1] = Test0121.iFld;
                    }
                    break;
                case 90:
                    Test0121.iArrFld[i2] = i3;
                    break;
                case 91:
            }
        }
        long meth_res = i2 + i3 + Double.doubleToLongBits(d2) + i10 + i11;
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static long lMeth() {

        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -6071965664375452307L);

        lArr[(Test0121.iFld >>> 1) % N] = (long) (Test0121.iFld + dMeth());
        long meth_res = FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0121 _instance = new Test0121();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i1 = 57154, i12 = 158, i13 = 92, i14 = -155;
        byte[] byArr = new byte[N];
        boolean[] bArr = new boolean[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(byArr, (byte) 21);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(fArr, -2.662F);

        Test0121.instanceCount *= -5;
        try {
            Test0121.iFld = (int) ((long) ((Test0121.instanceCount + -12.708F) + (++byArr[(76 >>> 1) % N])) & (++Test0121.iFld));
            for (int smallinvoc = 0; smallinvoc < 914; smallinvoc++) vSmallMeth(Test0121.iFld);
            Test0121.iFld = (int) -3503817907496941938L;
            Test0121.iArrFld[(Test0121.iFld >>> 1) % N] = -1;
        } catch (UserDefinedExceptionTest0121 exc3) {
            i1 = 1;
            do {
                Test0121.iFld >>= (int) lMeth();
                Test0121.iArrFld[i1] -= (int) Test0121.instanceCount;
                switch (((i1 % 2) * 5) + 14) {
                    case 15:
                        Test0121.iFld -= (int) Test0121.instanceCount;
                        if (true) continue;
                        for (i12 = 3; i12 < 66; i12++) {
                            Test0121.fFld = 84;
                            i14 = 1;
                            while (++i14 < 2) {
                                Test0121.iFld += i14;
                                Test0121.bFld = Test0121.bFld;
                                if (Test0121.bFld) {
                                    dFld = Test0121.fFld;
                                    Test0121.iFld -= 1;
                                } else if (Test0121.bFld) {
                                    i13 += i1;
                                    Test0121.iArrFld[i12] *= i13;
                                    Test0121.iFld = (int) Test0121.instanceCount;
                                    Test0121.iFld = Test0121.iFld;
                                } else {
                                    byArr[i12] = (byte) 99;
                                    i13 = -4;
                                }
                                Test0121.iFld >>= i13;
                                bArr[i14 - 1] = false;
                                fArr[i1 + 1] = Test0121.fFld;
                                Test0121.instanceCount -= i12;
                            }
                        }
                        break;
                    case 16:
                        Test0121.bFld = Test0121.bFld;
                        break;
                }
            } while (++i1 < 384);
        }

        FuzzerUtils.out.println("i1 i12 i13 = " + i1 + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 byArr bArr = " + i14 + "," + FuzzerUtils.checkSum(byArr) + "," +
                FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("fArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0121.instanceCount Test0121.iFld Test0121.sFld = " + Test0121.instanceCount + "," + Test0121.iFld +
                "," + Test0121.sFld);
        FuzzerUtils.out.println("Test0121.fFld Test0121.bFld dFld = " + Float.floatToIntBits(Test0121.fFld) + "," + (Test0121.bFld ? 1
                : 0) + "," + Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test0121.iArrFld = " + FuzzerUtils.checkSum(Test0121.iArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}

///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest0121 extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  dMeth ->  dMeth lMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 dMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
