// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:13 2023
public class Test0813 {

    public static final int N = 400;

    public static long instanceCount = -4L;
    public static volatile short sFld = 6239;
    public static float fFld = 1.549F;
    public static volatile int[] iArrFld = new int[N];
    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0813.iArrFld, -49784);
    }

    public static int iMeth(int i9, long l2, int i10) {

        int i11 = 8, i12 = 10589, i13 = -119, i14 = 7, i15 = -11004, i16 = -47, i17 = -75;
        float[][] fArr = new float[N][N];

        FuzzerUtils.init(fArr, 24.705F);

        for (i11 = 5; i11 < 266; ++i11) {
            l2 >>= l2;
            i10 <<= i12;
            i9 = 992;
            for (i13 = i11; i13 < 6; i13++) {
                for (i15 = i11; 1 > i15; ++i15) {
                    fArr[i15] = fArr[i11 - 1];
                }
                try {
                    i16 = (i16 % 34467);
                    i14 = (i11 % 22784);
                    Test0813.iArrFld[i13] = (i10 / i16);
                } catch (ArithmeticException a_e) {
                }
                i14 += i13;
                Test0813.iArrFld[i13] += i12;
                i17 = 1;
                do {
                    if (true) {
                        i9 += (int) 1.359F;
                        i10 += i13;
                        i14 = i16;
                    } else {
                        i16 = -43;
                    }
                } while (--i17 > 0);
            }
        }
        long meth_res = i9 + l2 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i5, long l1) {

        int i6 = 2773, i7 = -4, i8 = 79, i18 = 73, i19 = 57306, i20 = 2;
        double d1 = -28.7024;
        float[] fArr1 = new float[N];

        FuzzerUtils.init(fArr1, -2.634F);

        i6 = 1;
        while (++i6 < 382) {
            for (i7 = i6; i7 < 4; i7++) {
                Test0813.iArrFld[i7 - 1] -= (int) ((l1 += (i8++)) + ((i6 - Test0813.sFld) - (l1 -= i6)));
                i5 = iMeth(i7, l1, i6);
            }
            i8 += i6;
            i18 = 1;
            while (++i18 < 4) {
                for (i19 = 1; i19 < 1; i19 += 3) {
                    Test0813.iArrFld[i19] *= i20;
                    fArr1[(i5 >>> 1) % N] -= l1;
                    i8 = i5;
                }
                i5 -= (int) d1;
                i20 >>= i6;
                i8 += (i18 ^ i18);
                Test0813.iArrFld[i6] -= (int) Test0813.instanceCount;
                i20 += (i18 * i18);
            }
        }
        vMeth_check_sum += i5 + l1 + i6 + i7 + i8 + i18 + i19 + i20 + Double.doubleToLongBits(d1) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
    }

    public static void vSmallMeth(int i4) {


        vMeth(i4, 42L);
        vSmallMeth_check_sum += i4;
    }

    public static void main(String[] strArr) {

        try {
            Test0813 _instance = new Test0813();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d = 2.23741;
        double d2 = 27.23174;
        double d3 = 97.95658;
        double[] dArr = new double[N];
        int i = -186, i1 = 14, i2 = -12, i3 = -6, i21 = 64219, i23 = 115;
        long l = 3552545683L;
        boolean b = true;
        boolean[] bArr = new boolean[N];
        byte by = -33;

        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(dArr, 1.29889);

        for (d = 331; 17 < d; d -= 3) {
            if (false) {
                i += (int) (d * d);
                Test0813.iArrFld[(int) (d - 1)] <<= (Test0813.iArrFld[(int) (d - 1)] >>= (++Test0813.iArrFld[(int) (d + 1)]));
                i += (int) ((i <<= (++i)) & (-8592 * (i - l)));
            } else {
                i *= (int) (7171L - (-i));
                for (i1 = 11; i1 < 241; ++i1) {
                    i2 <<= (i++);
                    Test0813.sFld *= (short) 8;
                    i = (int) (Math.abs((int) (-(i2 - l))) * Test0813.instanceCount);
                    b = bArr[(int) (d)];
                    by *= (byte) (i3 * -11L);
                    i3 *= (int) (((Test0813.fFld + i1) * (Test0813.fFld * i)) * ((--i3) * (i2 - i)));
                    switch ((int) (((d % 1) * 5) + 36)) {
                        case 39:
                            i += (i1 * i1);
                            i2 = (int) (((i - -4025624426311693254L) * (Test0813.instanceCount * i3)) - i);
                        default:
                            for (int smallinvoc = 0; smallinvoc < 1; smallinvoc++) vSmallMeth(i3);
                            i2 /= (int) ((long) (d) | 1);
                            l += (i1 ^ by);
                    }
                    i21 = 1;
                    while (++i21 < 2) {
                        if (b) continue;
                        dArr[i21] -= Test0813.sFld;
                        i3 >>= i;
                        Test0813.iArrFld[i21 - 1] -= i;
                        i2 = 42019;
                        d2 -= i2;
                    }
                    i2 = (int) d2;
                }
                for (d3 = 9; d3 < 241; ++d3) {
                    i3 += (int) (((d3 * Test0813.fFld) + i3) - i3);
                    if (false) break;
                }
            }
        }

        FuzzerUtils.out.println("d i l = " + Double.doubleToLongBits(d) + "," + i + "," + l);
        FuzzerUtils.out.println("i1 i2 b = " + i1 + "," + i2 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("by i3 i21 = " + by + "," + i3 + "," + i21);
        FuzzerUtils.out.println("d2 d3 i23 = " + Double.doubleToLongBits(d2) + "," + Double.doubleToLongBits(d3) + ","
                + i23);
        FuzzerUtils.out.println("bArr dArr = " + FuzzerUtils.checkSum(bArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0813.instanceCount Test0813.sFld Test0813.fFld = " + Test0813.instanceCount + "," + Test0813.sFld +
                "," + Float.floatToIntBits(Test0813.fFld));
        FuzzerUtils.out.println("Test0813.iArrFld = " + FuzzerUtils.checkSum(Test0813.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
