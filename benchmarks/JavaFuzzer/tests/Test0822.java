// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test0822 {

    public static final int N = 400;

    public static long instanceCount = 13L;
    public static boolean bFld = true;
    public static long lFld = -54240L;
    public static short sFld = -21428;
    public static double dFld = 0.111605;
    public static byte[] byArrFld = new byte[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0822.byArrFld, (byte) -116);
    }

    public volatile int[][] iArrFld = new int[N][N];

    public static void vMeth2(long l, int i13, float f2) {

        int[] iArr1 = new int[N];

        FuzzerUtils.init(iArr1, 6);

        iArr1[(i13 >>> 1) % N] %= (int) (i13 | 1);
        vMeth2_check_sum += l + i13 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(int i8, float f1, int i9) {

        int i10 = 5;
        int i11 = 0;
        int i12 = 8;
        int[] iArr2 = new int[N];
        byte by1 = 100;

        FuzzerUtils.init(iArr2, -228);

        for (i10 = 11; i10 < 215; ++i10) {
            i12 = 1;
            do {
                f1 += i12;
                i8 -= i9;
                vMeth2(Test0822.instanceCount, i12, f1);
                Test0822.bFld = false;
                i8 = i11;
                Test0822.lFld += (long) -2.97898;
                iArr2[i10] /= (int) (i12 | 1);
                i11 -= i9;
                iArr2[i12 - 1] *= 115;
                i11 = -12559;
            } while (++i12 < 8);
        }
        Test0822.lFld ^= i8;
        i9 ^= (int) Test0822.instanceCount;
        f1 -= by1;
        vMeth1_check_sum += i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + by1 + FuzzerUtils.checkSum(iArr2);
    }

    public static void main(String[] strArr) {

        try {
            Test0822 _instance = new Test0822();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i7) {

        float f3 = 41.796F;
        long l1 = 1852269057L;
        int i14 = 12, i15 = -64, i16 = -224, i17 = 7;

        i7 *= iArrFld[(i7 >>> 1) % N][(i7 >>> 1) % N];
        vMeth1(i7, f3, i7);
        i7 += 77;
        for (l1 = 6; l1 < 121; ++l1) {
            if (Test0822.bFld) {
                i14 += (int) (l1 * l1);
                i15 = 1;
                do {
                    double d = 0.111343;
                    i7 = i7;
                    i14 *= (int) f3;
                    i14 >>= i14;
                    d = i15;
                    i7 += (i15 | l1);
                    for (i16 = 1; i16 < 1; ++i16) {
                        iArrFld[(int) (l1 + 1)][i16] *= Test0822.sFld;
                        i17 = (int) Test0822.lFld;
                    }
                } while (++i15 < 14);
            }
        }
        vMeth_check_sum += i7 + Float.floatToIntBits(f3) + l1 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        int i = 10;
        int i1 = 0;
        int i2 = -8;
        int i3 = -14;
        int i4 = -5;
        int i5 = -208;
        int i6 = 156;
        int i18 = 1;
        int i19 = -36627;
        int i20 = -134;
        int[][] iArr = new int[N][N];
        boolean b = true;
        float f = -2.181F;
        float[] fArr = new float[N];
        long[] lArr = new long[N];
        short[] sArr = new short[N];

        FuzzerUtils.init(iArr, 247);
        FuzzerUtils.init(fArr, 60.946F);
        FuzzerUtils.init(lArr, -14L);
        FuzzerUtils.init(sArr, (short) 20019);

        iArr[(i >>> 1) % N] = (iArr[(i >>> 1) % N] = (iArr[(i >>> 1) % N] = (iArr[(-7 >>> 1) % N] = iArr[(i >>> 1) %
                N])));
        for (i1 = 2; 139 > i1; ++i1) {
            byte by = 100;
            i += (-(by + (iArr[i1][i1] = 226)));
            for (i3 = 1; i3 < 183; ++i3) {
                for (i5 = 1; i5 < 2; i5 += 3) {
                    if (b) continue;
                    fArr[i5] -= (((11 * fArr[i1 + 1]) * (f * Test0822.instanceCount)) + Math.min(--iArrFld[i1][i3], i3));
                }
                switch (((i3 % 10) * 5) + 87) {
                    case 91:
                        Test0822.byArrFld[i1 - 1] = (byte) i6;
                        vMeth(i2);
                        Test0822.instanceCount <<= i5;
                    case 89:
                        switch ((i1 % 8) + 67) {
                            case 67:
                            case 68:
                                i2 = (int) 2293412293L;
                                break;
                            case 69:
                                i18 = 1;
                                while (++i18 < 2) {
                                    Test0822.dFld *= i2;
                                    i <<= i3;
                                    b = Test0822.bFld;
                                    Test0822.instanceCount = (long) f;
                                    switch (((i2 >>> 1) % 1) + 76) {
                                        case 76:
                                            Test0822.instanceCount -= 11559;
                                            break;
                                    }
                                    lArr[i18 + 1] = (long) f;
                                }
                                i += i3;
                                f -= i2;
                                break;
                            case 70:
                                iArrFld[i1] = iArrFld[i1];
                                i = i4;
                            case 71:
                                sArr[i1] = (short) i3;
                                break;
                            case 72:
                                i4 = (int) Test0822.dFld;
                                break;
                            case 73:
                                i19 = 1;
                                do {
                                    iArr[i1][i3 + 1] -= (int) Test0822.instanceCount;
                                    f += i5;
                                } while (++i19 < 2);
                                break;
                            case 74:
                                i4 -= i19;
                                break;
                        }
                        break;
                    case 114:
                        Test0822.bFld = b;
                        break;
                    case 130:
                        Test0822.instanceCount += (i3 ^ i2);
                    case 127:
                        i6 = i20;
                        break;
                    case 136:
                        iArr[i3 - 1][i3] -= i5;
                        break;
                    case 134:
                        f += (98 + (i3 * i3));
                    case 107:
                        i6 = i5;
                        break;
                    case 128:
                        Test0822.dFld -= i5;
                        break;
                    case 96:
                        f += i3;
                        break;
                    default:
                        Test0822.bFld = b;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i4 i5 = " + i3 + "," + i4 + "," + i5);
        FuzzerUtils.out.println("i6 b f = " + i6 + "," + (b ? 1 : 0) + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("iArr fArr lArr = " + FuzzerUtils.checkSum(iArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("sArr = " + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0822.instanceCount Test0822.bFld Test0822.lFld = " + Test0822.instanceCount + "," + (Test0822.bFld ? 1
                : 0) + "," + Test0822.lFld);
        FuzzerUtils.out.println("Test0822.sFld Test0822.dFld iArrFld = " + Test0822.sFld + "," + Double.doubleToLongBits(Test0822.dFld)
                + "," + FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0822.byArrFld = " + FuzzerUtils.checkSum(Test0822.byArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
