// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:15 2023
public class Test0890 {

    public static final int N = 400;

    public static long instanceCount = -1898812220382934995L;
    public static volatile boolean bFld = true;
    public static float fFld = -2.159F;
    public static volatile int iFld = 23;
    public static double dFld = 6.25455;
    public static double[] dArrFld = new double[N];
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long lMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0890.dArrFld, 89.122155);
    }

    public double dFld1 = -98.128872;

    public static long lMeth1(long l, byte by) {

        int i8 = -20382, i9 = -13, i10 = -239, i11 = 10124, i12 = -11, i13 = 51770, i14 = 0;
        short s = -10584;
        double d1 = 1.35635;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -61011L);

        lArr[(3 >>> 1) % N] >>= i8;
        Test0890.instanceCount += i8;
        Test0890.bFld = Test0890.bFld;
        for (i9 = 10; i9 < 178; ++i9) {
            i8 >>= i8;
            Test0890.fFld = i9;
            s += (short) (i9 - i9);
            Test0890.instanceCount += (((i9 * i8) + i9) - i10);
            for (i11 = 9; 1 < i11; --i11) {
                l += i9;
                Test0890.instanceCount += (i11 ^ i8);
                for (i13 = i9; i13 < 2; ++i13) {
                    i10 = i13;
                    d1 *= i8;
                    s -= (short) i8;
                }
            }
        }
        long meth_res = l + by + i8 + i9 + i10 + s + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d1) +
                FuzzerUtils.checkSum(lArr);
        lMeth1_check_sum += meth_res;
        return (long) meth_res;
    }

    public static long lMeth(int i3, int i4) {

        int i5 = 0, i6 = 41599, i7 = -19655, i15 = -40748, i16 = 49113, i17 = 6;
        boolean b = false;
        float f = 0.785F;
        double d = -1.1982;
        byte by1 = 12;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -42936L);

        for (i5 = 16; i5 < 284; i5 += 3) {
            i7 = 1;
            do {
                if (b) break;
                f -= (((i3 * i4) - (i6 - i6)) + i7);
                d += (lMeth1(Test0890.instanceCount, by1) * i3);
                i4 += (int) (6321868654574280621L + (i7 * i7));
            } while (++i7 < 17);
            i15 = 1;
            do {
                lArr1[i5] = i4;
                i4 *= by1;
                if (b) break;
                Test0890.fFld -= Test0890.instanceCount;
            } while (++i15 < 17);
            for (i16 = 1; 17 > i16; i16++) {
                Test0890.dArrFld = Test0890.dArrFld;
                i3 = 41109;
                Test0890.bFld = b;
            }
        }
        long meth_res = i3 + i4 + i5 + i6 + i7 + (b ? 1 : 0) + Float.floatToIntBits(f) + Double.doubleToLongBits(d) +
                by1 + i15 + i16 + i17 + FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i2) {

        float f1 = -2.244F, f2 = -90.337F;
        int i18 = -8, i19 = 5342, i20 = 48088;

        lMeth(i2, i2);
        if (true) {
            i2 = i2;
        }
        for (f1 = 10; f1 < 369; f1++) {
            Test0890.instanceCount = i18;
            i2 += -37292;
            i2 = i2;
            i18 -= i2;
            i18 = i2;
            for (f2 = f1; 5 > f2; f2++) {
                i20 = 1;
                do {
                    i19 = i19;
                    Test0890.instanceCount -= Test0890.instanceCount;
                    i18 += i2;
                    if (i2 != 0) {
                        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i18 + Float.floatToIntBits(f2) + i19 + i20;
                        return;
                    }
                } while (++i20 < 1);
            }
        }
        vMeth_check_sum += i2 + Float.floatToIntBits(f1) + i18 + Float.floatToIntBits(f2) + i19 + i20;
    }

    public static void main(String[] strArr) {

        try {
            Test0890 _instance = new Test0890();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -52481;
        int i1 = 64335;
        int i21 = 63706;
        int i22 = 6;
        int i23 = 2;
        int i24 = -3;
        int i25 = 9;
        int[] iArr = new int[N];
        byte by2 = 105;
        short s1 = 2330;
        long[] lArr2 = new long[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, 185);
        FuzzerUtils.init(lArr2, -64L);
        FuzzerUtils.init(fArr, -2.532F);

        for (i = 236; i > 6; i--) {
            vMeth(8764);
            for (i21 = 5; i21 < 109; i21++) {
                i22 = 9;
                i23 = 1;
                do {
                    by2 += (byte) 1010683764L;
                    try {
                        i22 = (iArr[i - 1] / i22);
                        i22 = (i21 / 109834707);
                        iArr[i21] = (-159 / Test0890.iFld);
                    } catch (ArithmeticException a_e) {
                    }
                    i1 += (i23 * Test0890.instanceCount);
                    Test0890.fFld += s1;
                    i1 += (((i23 * i21) + i21) - Test0890.fFld);
                } while (++i23 < 2);
                iArr[i21] -= i23;
                Test0890.instanceCount += (i21 ^ Test0890.iFld);
                switch (((i % 10) * 5) + 17) {
                    case 44:
                        s1 -= (short) 2;
                        break;
                    case 67:
                        for (i24 = 2; i24 > i; i24--) {
                            lArr2[i24] = -8L;
                            Test0890.instanceCount -= i22;
                            switch ((i21 % 7) + 42) {
                                case 42:
                                    i1 += (i24 * i24);
                                    break;
                                case 43:
                                    i25 += (int) Test0890.fFld;
                                    Test0890.fFld -= i;
                                    Test0890.dFld += -24746;
                                    Test0890.instanceCount -= i1;
                                    break;
                                case 44:
                                    iArr[i + 1] = i24;
                                    Test0890.dFld += Test0890.instanceCount;
                                    i1 <<= i25;
                                    break;
                                case 45:
                                    i1 = by2;
                                    Test0890.fFld -= Test0890.instanceCount;
                                case 46:
                                    i1 += (((i24 * Test0890.instanceCount) + i25) - i);
                                    Test0890.instanceCount >>= -25923;
                                    break;
                                case 47:
                                    iArr[i24 + 1] -= i;
                                case 48:
                                    if (Test0890.bFld) break;
                                    break;
                                default:
                                    Test0890.iFld = i21;
                            }
                        }
                        break;
                    case 46:
                        Test0890.iFld += (i21 ^ Test0890.iFld);
                        break;
                    case 45:
                        i22 *= 50786;
                        break;
                    case 28:
                        i25 *= i1;
                    case 62:
                        i22 += (i21 * i25);
                    case 36:
                    case 25:
                        fArr[i21] -= i21;
                        break;
                    case 37:
                        dFld1 -= i1;
                        break;
                    case 53:
                        Test0890.bFld = Test0890.bFld;
                        break;
                    default:
                        lArr2[i + 1] -= Test0890.instanceCount;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i21 = " + i + "," + i1 + "," + i21);
        FuzzerUtils.out.println("i22 i23 by2 = " + i22 + "," + i23 + "," + by2);
        FuzzerUtils.out.println("s1 i24 i25 = " + s1 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("iArr lArr2 fArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(lArr2) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0890.instanceCount Test0890.bFld Test0890.fFld = " + Test0890.instanceCount + "," + (Test0890.bFld ? 1
                : 0) + "," + Float.floatToIntBits(Test0890.fFld));
        FuzzerUtils.out.println("Test0890.iFld Test0890.dFld dFld1 = " + Test0890.iFld + "," + Double.doubleToLongBits(Test0890.dFld) +
                "," + Double.doubleToLongBits(dFld1));
        FuzzerUtils.out.println("Test0890.dArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0890.dArrFld)));

        FuzzerUtils.out.println("lMeth1_check_sum: " + lMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  lMeth1 ->  lMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
