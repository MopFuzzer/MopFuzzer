// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:05 2023
public class Test0482 {

    public static final int N = 400;

    public static long instanceCount = 1108258285L;
    public static int iFld = -12;
    public static short sFld = 14539;
    public static int[] iArrFld = new int[N];
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0482.iArrFld, 142);
    }

    public long lFld = 6584139548476570416L;
    public volatile long[] lArrFld = new long[N];
    public float[] fArrFld = new float[N];

    public static int iMeth(int i8, byte by2, int i9) {

        int i10 = 14, i11 = 0, i12 = -12, i13 = -18;
        float f2 = -31.287F, f3 = 2.946F;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(byArr, (byte) -35);

        byArr[(i9 >>> 1) % N] >>= (byte) i9;
        for (i10 = 7; 135 > i10; i10 += 3) {
            for (i12 = 1; 36 > i12; ++i12) {
                boolean b1 = false;
                i8 *= (int) f2;
                if (b1) continue;
                Test0482.iArrFld[i10] -= -28180;
                f3 = 2;
                while (--f3 > 0) {
                    double d = 1.122166;
                    switch ((i12 % 9) + 102) {
                        case 102:
                            Test0482.instanceCount -= Test0482.instanceCount;
                            switch ((i12 % 2) + 53) {
                                case 53:
                                    b1 = b1;
                                    if (b1) continue;
                                    d *= i13;
                                    break;
                                case 54:
                                    i13 = (int) Test0482.instanceCount;
                                    break;
                                default:
                                    i9 += (int) f3;
                            }
                        case 103:
                            Test0482.iArrFld[(int) (f3)] &= (int) Test0482.instanceCount;
                            break;
                        case 104:
                            Test0482.sFld >>= (short) 120;
                            break;
                        case 105:
                            i9 += (int) f3;
                            break;
                        case 106:
                            Test0482.iArrFld[i12 - 1] *= (int) f3;
                            break;
                        case 107:
                            i11 = (int) Test0482.instanceCount;
                        case 108:
                            Test0482.instanceCount -= Test0482.instanceCount;
                            break;
                        case 109:
                            try {
                                Test0482.iArrFld[i10 + 1] = (Test0482.iFld % -29);
                                i11 = (-72 % i11);
                                Test0482.iArrFld[i10] = (-163 % Test0482.iArrFld[(i12 >>> 1) % N]);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 110:
                            by2 = (byte) 29;
                            break;
                        default:
                            Test0482.iFld = (int) Test0482.instanceCount;
                    }
                }
            }
        }
        long meth_res = i8 + by2 + i9 + i10 + i11 + i12 + i13 + Float.floatToIntBits(f2) + Float.floatToIntBits(f3) +
                FuzzerUtils.checkSum(byArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(float f1) {

        int i1 = -59570;
        int i2 = 10;
        int i3 = -127;
        int i4 = 36282;
        int i5 = -1;
        int i6 = -237;
        int i7 = 2;
        int[] iArr = new int[N];
        byte by1 = -33;
        double d1 = -2.47957;
        short[] sArr = new short[N];

        FuzzerUtils.init(iArr, 95);
        FuzzerUtils.init(sArr, (short) -29481);

        i1 = 1;
        while (++i1 < 267) {
            Test0482.instanceCount += (((i1 * i1) + Test0482.iFld) - Test0482.instanceCount);
            for (i2 = 1; i2 < 6; ++i2) {
                try {
                    iArr[i2 - 1] = (Test0482.iFld % 1520000290);
                    Test0482.iFld = (Test0482.iFld / 19168);
                    iArr[i2 + 1] = (Test0482.iFld % 151);
                } catch (ArithmeticException a_e) {
                }
                i3 = by1;
                by1 >>= by1;
                iArr = (iArr = (iArr = iArr));
                iArr = (iArr = iArr);
            }
        }
        Test0482.iFld += i3;
        for (i4 = 2; i4 < 124; i4++) {
            for (i6 = 1; i6 < 13; ++i6) {
                sArr[i6 - 1] -= (short) iMeth(i1, (byte) (91), Test0482.iFld);
                i7 = i3;
                Test0482.iArrFld[i4] %= (int) ((long) (f1) | 1);
                d1 = d1;
            }
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i1 + i2 + i3 + by1 + i4 + i5 + i6 + i7 +
                Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth(boolean b) {

        int i = 12, i14 = -3, i15 = -25565, i16 = -2, i17 = -208;
        byte by = -29;
        float f4 = 0.568F;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, 2.53785);

        i = 1;
        while (++i < 270) {
            Test0482.instanceCount += (-((by++) >>> (Test0482.iFld--)));
            vMeth(f4);
            Test0482.iFld += (-23868 + (i * i));
            f4 += (((i * i) + f4) - i);
            switch ((((-11408 >>> 1) % 10) * 5) + 35) {
                case 55:
                    Test0482.iFld += (i - i);
                    break;
                case 83:
                    for (i14 = i; i14 < 6; i14++) {
                        i15 -= by;
                        i15 += i14;
                        for (i16 = 1; i16 > 1; --i16) {
                            if (b) {
                                Test0482.iArrFld[i14] >>= i15;
                                Test0482.iArrFld[i + 1] -= -4;
                                Test0482.instanceCount += (0 + (i16 * i16));
                            } else {
                                if (b) break;
                            }
                        }
                    }
                    break;
                case 80:
                    Test0482.iArrFld[i - 1] >>= i17;
                    break;
                case 78:
                    dArr[i - 1] += -1.425F;
                    break;
                case 72:
                    i17 = -18;
                    break;
                case 69:
                    f4 += i;
                case 44:
                    Test0482.iFld = Test0482.iFld;
                    break;
                case 85:
                    Test0482.iFld += (int) 1.526F;
                case 67:
                    i15 %= (int) -88.23F;
                    break;
                case 47:
                    Test0482.iArrFld[i + 1] <<= i14;
                    break;
            }
        }
        long meth_res = (b ? 1 : 0) + i + by + Float.floatToIntBits(f4) + i14 + i15 + i16 + i17 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0482 _instance = new Test0482();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f = 2.468F, f5 = 1.288F;
        boolean b2 = false;
        int i18 = 2, i19 = 7, i20 = 21035, i21 = 165, i22 = 23328, i23 = -10, i24 = -9;
        double d2 = 0.112047, d3 = 56.49167;

        f += lMeth(b2);
        Test0482.iFld += Test0482.iFld;
        Test0482.sFld += (short) Test0482.iFld;
        for (i18 = 16; i18 < 258; i18++) {
            Test0482.iFld = Test0482.iFld;
            for (d2 = 104; 6 < d2; d2--) {
                lArrFld[(int) (d2 - 1)] ^= 22;
                Test0482.sFld -= (short) Test0482.iFld;
                f = i18;
            }
            if (b2) {
                if (b2) {
                    for (i21 = 4; i21 < 104; ++i21) {
                        lFld = lFld;
                        switch (((i20 >>> 1) % 2) + 34) {
                            case 34:
                                lFld = 159L;
                            case 35:
                                fArrFld[i21 - 1] /= -2;
                                Test0482.iFld = (int) f;
                                i19 = i19;
                                break;
                            default:
                                Test0482.iArrFld = Test0482.iArrFld;
                                i22 += i21;
                                try {
                                    Test0482.iArrFld[i21 - 1] = (i20 % -60473);
                                    Test0482.iFld = (i19 / -69);
                                    Test0482.iFld = (i20 / Test0482.iArrFld[i21 - 1]);
                                } catch (ArithmeticException a_e) {
                                }
                                d3 -= i21;
                        }
                        i19 *= i21;
                    }
                } else {
                    i23 = 1;
                    while (++i23 < 104) {
                        for (f5 = 1; f5 < 1; ++f5) {
                            i22 >>= 63;
                            lFld <<= Test0482.instanceCount;
                            if (b2) {
                                Test0482.iArrFld[i18 + 1] = -4393;
                                Test0482.iFld = Test0482.iFld;
                            } else {
                                i19 = (int) Test0482.instanceCount;
                            }
                        }
                    }
                }
            } else {
                if (b2) break;
            }
        }

        FuzzerUtils.out.println("f b2 i18 = " + Float.floatToIntBits(f) + "," + (b2 ? 1 : 0) + "," + i18);
        FuzzerUtils.out.println("i19 d2 i20 = " + i19 + "," + Double.doubleToLongBits(d2) + "," + i20);
        FuzzerUtils.out.println("i21 i22 d3 = " + i21 + "," + i22 + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i23 f5 i24 = " + i23 + "," + Float.floatToIntBits(f5) + "," + i24);

        FuzzerUtils.out.println("Test0482.instanceCount Test0482.iFld Test0482.sFld = " + Test0482.instanceCount + "," + Test0482.iFld +
                "," + Test0482.sFld);
        FuzzerUtils.out.println("lFld Test0482.iArrFld lArrFld = " + lFld + "," + FuzzerUtils.checkSum(Test0482.iArrFld) + ","
                + FuzzerUtils.checkSum(lArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
