// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test0679 {

    public static final int N = 400;

    public static long instanceCount = -57067L;
    public static int iFld = -61934;
    public static byte byFld = -123;
    public static int[] iArrFld = new int[N];
    public static double[] dArrFld = new double[N];
    public static volatile float[] fArrFld = new float[N];
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0679.iArrFld, -8);
        FuzzerUtils.init(Test0679.dArrFld, 0.36259);
        FuzzerUtils.init(Test0679.fArrFld, 29.735F);
    }

    public float fFld = 0.673F;
    public volatile short sFld = 14971;
    public long[] lArrFld = new long[N];

    public static int iMeth1(long l, float f2, short s) {

        int i1 = 26070, i2 = 243, i3 = -39391, i4 = 13, i5 = 147, i6 = 57;
        boolean b = false;
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(lArr, -2551344990520827625L);

        for (i1 = 7; i1 < 350; i1++) {
            f2 += (((i1 * Test0679.iFld) + i1) - i1);
            for (i3 = i1; i3 < 5; i3++) {
                if (b = b) break;
                Test0679.iFld -= (i3 + i2);
                f2 += (((i3 * Test0679.instanceCount) + i4) - i4);
                Test0679.iFld = (int) (--Test0679.instanceCount);
                lArr[i1 - 1] = (lArr[i1] = (lArr[i3] = lArr[i1 - 1]));
                for (i5 = 1; 1 > i5; ++i5) {
                    Test0679.iFld = (int) (--lArr[i3][i1 + 1]);
                    Test0679.dArrFld = (Test0679.dArrFld = (Test0679.dArrFld = FuzzerUtils.double1array(N, (double) 109.77467)));
                    i4 = (int) f2;
                    b = (b && ((i4 != i4) != (i2 != 0.2328)));
                    i6 += (int) (l--);
                    f2 += (((--Test0679.iFld) + (--i4)) - ((f2 - i3) - (Test0679.instanceCount--)));
                }
            }
        }
        long meth_res = l + Float.floatToIntBits(f2) + s + i1 + i2 + i3 + i4 + (b ? 1 : 0) + i5 + i6 +
                FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth2(int i10, float f3) {

        long l1 = -2666650586L;
        int i11 = 4223;
        int i12 = 3;
        int i13 = -48;
        int i14 = -10;
        int[] iArr = new int[N];
        short s1 = 30439;
        double d1 = 0.9887;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(byArr, (byte) -66);
        FuzzerUtils.init(iArr, 8);

        for (l1 = 14; l1 < 374; ++l1) {
            f3 -= (-(iMeth1(l1, -2.225F, s1) - s1));
            i12 = 1;
            do {
                switch ((int) (((l1 % 7) * 5) + 12)) {
                    case 17:
                        d1 = Test0679.byFld;
                        Test0679.instanceCount <<= i12;
                        break;
                    case 24:
                        switch ((i12 % 7) + 22) {
                            case 22:
                            case 23:
                                for (i13 = 1; i13 < 1; i13++) {
                                    Test0679.iArrFld = Test0679.iArrFld;
                                    i10 /= (int) (i10 | 1);
                                    i11 *= i11;
                                }
                                i10 |= (int) l1;
                                break;
                            case 24:
                                f3 *= i10;
                                Test0679.iFld -= i13;
                                byArr[i12] *= (byte) Test0679.iFld;
                            case 25:
                                Test0679.fArrFld[i12 + 1] = Test0679.instanceCount;
                                break;
                            case 26:
                                i14 = Test0679.byFld;
                            case 27:
                                i10 -= Test0679.iFld;
                                break;
                            case 28:
                                i11 *= i12;
                            default:
                                Test0679.byFld += (byte) Test0679.instanceCount;
                        }
                        break;
                    case 13:
                        i11 += (i12 * i11);
                    case 23:
                        Test0679.iFld += (i12 * i11);
                        break;
                    case 27:
                        i10 -= (int) d1;
                    case 26:
                        iArr[(int) (l1)] *= i12;
                    case 22:
                        i14 <<= i14;
                }
            } while (++i12 < 5);
        }
        long meth_res = i10 + Float.floatToIntBits(f3) + l1 + i11 + s1 + i12 + Double.doubleToLongBits(d1) + i13 + i14
                + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(iArr);
        iMeth2_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(double d, float f, float f1) {

        int i7 = -17, i8 = 188, i9 = -1, i15 = 129, i16 = -43423, i17 = -3, i18 = 60705;
        short s2 = -2383;
        boolean b1 = true;

        Test0679.iArrFld[(Test0679.iFld >>> 1) % N] += iMeth1(Test0679.iFld * Math.min(178, Test0679.iFld), (Test0679.iFld++) +
                (Test0679.instanceCount >> Test0679.instanceCount), (short) (Test0679.iFld - (Test0679.iFld - Test0679.iFld)));
        for (i7 = 3; i7 < 164; ++i7) {
            switch (((i7 % 2) * 5) + 101) {
                case 102:
                case 105:
                    i9 = 1;
                    do {
                        d *= (iMeth2(6, f1) + d);
                        Test0679.iFld = i8;
                        for (i15 = 1; i15 < 1; ++i15) {
                            Test0679.instanceCount >>= s2;
                            Test0679.iFld = (int) d;
                            Test0679.instanceCount += i15;
                            d = i15;
                        }
                        b1 = b1;
                        for (i17 = 1; i17 < 1; i17++) {
                            i8 += i17;
                            f1 += i17;
                        }
                    } while (++i9 < 10);
            }
        }
        long meth_res = Double.doubleToLongBits(d) + Float.floatToIntBits(f) + Float.floatToIntBits(f1) + i7 + i8 + i9
                + i15 + i16 + s2 + (b1 ? 1 : 0) + i17 + i18;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0679 _instance = new Test0679();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 4, i19 = 76, i20 = 18315, i21 = -10, i22 = -49139, i24 = 236, i25 = 0, i26 = 51364, i27 = 34;
        boolean b2 = false;
        boolean[][] bArr = new boolean[N][N];
        double d2 = 0.59248;

        FuzzerUtils.init(bArr, false);

        Test0679.iArrFld[(i >>> 1) % N] = iMeth(-121.105648, fFld, fFld);
        Test0679.iFld -= sFld;
        sFld *= (short) Test0679.iFld;
        for (i19 = 4; 355 > i19; i19++) {
            Test0679.iFld += (i19 * Test0679.instanceCount);
            Test0679.iFld += (i19 ^ (long) fFld);
            for (i21 = 4; i21 < 72; i21 += 3) {
                Test0679.iFld += (((i21 * i22) + i) - i);
            }
            if (b2) continue;
        }
        i *= i19;
        for (int i23 : Test0679.iArrFld) {
            for (i24 = 2; 63 > i24; ++i24) {
                for (i26 = 1; i26 < 2; ++i26) {
                    Test0679.iArrFld[i26] >>>= i23;
                    i25 = i25;
                    i25 += i26;
                    Test0679.instanceCount += i;
                    i23 += (-49 + (i26 * i26));
                    switch (((i26 % 2) * 5) + 83) {
                        case 86:
                        case 84:
                            Test0679.iFld &= -11;
                            bArr[i24][i24] = b2;
                            i23 &= i19;
                            d2 *= Test0679.byFld;
                            break;
                    }
                    if (true) break;
                    Test0679.dArrFld[i24 + 1] = i20;
                    i23 = Test0679.iFld;
                    Test0679.iArrFld[i26 - 1] = i24;
                }
                i += i24;
            }
            i22 *= i27;
            lArrFld[(i21 >>> 1) % N] >>>= -27;
        }

        FuzzerUtils.out.println("i i19 i20 = " + i + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 b2 = " + i21 + "," + i22 + "," + (b2 ? 1 : 0));
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 d2 bArr = " + i27 + "," + Double.doubleToLongBits(d2) + "," +
                FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test0679.instanceCount Test0679.iFld Test0679.byFld = " + Test0679.instanceCount + "," + Test0679.iFld +
                "," + Test0679.byFld);
        FuzzerUtils.out.println("fFld sFld Test0679.iArrFld = " + Float.floatToIntBits(fFld) + "," + sFld + "," +
                FuzzerUtils.checkSum(Test0679.iArrFld));
        FuzzerUtils.out.println("Test0679.dArrFld Test0679.fArrFld lArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0679.dArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0679.fArrFld)) + "," + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest iMeth2
//DEBUG  iMeth2 ->  iMeth2 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
