// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:59 2023
public class Test0272 {

    public static final int N = 400;

    public static long instanceCount = 48L;
    public static int iFld = -32436;
    public static double dFld = -1.37363;
    public static boolean bFld = false;
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public short sFld = -30811;
    public volatile byte byFld = 4;
    public int[][] iArrFld = new int[N][N];
    public int[] iArrFld1 = new int[N];
    public int[] iArrFld2 = new int[N];

    public static void vMeth1(int i3, int i4) {

        int i5 = -188;
        int i6 = -56578;
        int i7 = 6;
        int i8 = -14;
        int i9 = -76;
        int i10 = 2908;
        int i13 = -6182;
        int[] iArr = new int[N];
        short s = 13877;
        float f = 0.9F;
        byte by = 25;
        double d = -115.15361;
        double[][] dArr = new double[N][N];
        boolean b = false;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 1L);
        FuzzerUtils.init(iArr, 0);
        FuzzerUtils.init(dArr, 35.8126);

        i4 = i3;
        i4 >>= i4;
        for (i5 = 16; i5 < 384; i5++) {
            i3 &= i5;
            lArr[i5] += i6;
            i4 = s;
            s += (short) 1.705F;
            switch (i5 + 41) {
                case 41:
                    i7 = 5;
                    do {
                        i8 += i7;
                        for (i9 = 1; i9 < 1; i9++) {
                            switch (((i10 >>> 1) % 5) + 89) {
                                case 89:
                                    f += i9;
                                    by += (byte) i7;
                                    break;
                                case 90:
                                    if (true) continue;
                                    break;
                                case 91:
                                    Test0272.instanceCount += (i9 ^ i7);
                                case 92:
                                    iArr[i5 + 1] *= i8;
                                    break;
                                case 93:
                                    i10 -= (int) f;
                                    break;
                                default:
                                    i3 += (((i9 * i10) + i7) - i4);
                            }
                        }
                    } while (--i7 > 0);
                    break;
                case 42:
                    i4 += (((i5 * i3) + i4) - i7);
                case 43:
                    Test0272.iFld += i8;
                    break;
                case 44:
                    Test0272.instanceCount += Test0272.instanceCount;
                    break;
                case 45:
                    i4 *= -2;
                case 46:
                case 47:
                    Test0272.iFld -= 1;
                case 48:
                    Test0272.instanceCount *= Test0272.instanceCount;
                case 49:
                    Test0272.instanceCount += (((i5 * Test0272.instanceCount) + i9) - i3);
                    break;
                case 50:
                    Test0272.iFld |= i4;
                case 51:
                    Test0272.instanceCount = i7;
                    break;
                case 52:
                    Test0272.instanceCount >>= i7;
                    break;
                case 53:
                    s += (short) i5;
                    break;
                case 54:
                    iArr[i5] -= i8;
                    break;
                case 55:
                    Test0272.instanceCount += i4;
                case 56:
                    Test0272.instanceCount <<= i4;
                    break;
                case 57:
                    i8 -= (int) Test0272.instanceCount;
                    break;
                case 58:
                    i6 <<= i3;
                    break;
                case 59:
                    Test0272.instanceCount = i9;
                    break;
                case 60:
                    iArr[i5 - 1] = (int) f;
                    break;
                case 61:
                    i8 -= i3;
                    break;
                case 62:
                    d *= i4;
                case 63:
                    i6 += (57351 + (i5 * i5));
                    break;
                case 64:
                    Test0272.instanceCount = i9;
                    break;
                case 65:
                    iArr[i5 - 1] <<= by;
                case 66:
                    i3 <<= i8;
                    break;
                case 67:
                    iArr[i5] *= (int) d;
                    break;
                case 68:
                    i4 = i6;
                    break;
                case 69:
                    if (b) continue;
                    break;
                case 70:
                    iArr = iArr;
                case 71:
                    Test0272.instanceCount += i5;
                    break;
                case 72:
                    if (b) break;
                case 73:
                    i3 = i6;
                    break;
                case 74:
                    i4 += (i5 * i5);
                    break;
                case 75:
                    d -= d;
                    break;
                case 76:
                    i10 -= i9;
                    break;
                case 77:
                    i6 += (int) Test0272.instanceCount;
                    break;
                case 78:
                    i10 += (int) Test0272.instanceCount;
                    break;
                case 79:
                    d *= i4;
                    break;
                case 80:
                    Test0272.instanceCount += (i5 ^ i7);
                    break;
                case 81:
                    i4 >>= -6;
                    break;
                case 82:
                    if (i7 != 0) {
                        vMeth1_check_sum += i3 + i4 + i5 + i6 + s + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + by +
                                Double.doubleToLongBits(d) + (b ? 1 : 0) + i13 + FuzzerUtils.checkSum(lArr) +
                                FuzzerUtils.checkSum(iArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
                        return;
                    }
                    break;
                case 83:
                    i10 *= i10;
                    break;
                case 84:
                    i10 = i5;
                    break;
                case 85:
                    iArr[i5 - 1] <<= (int) Test0272.instanceCount;
                    break;
                case 86:
                    iArr[i5 + 1] = (int) d;
                    break;
                case 87:
                    i8 >>= 7;
                    break;
                case 88:
                    f += (i5 - i10);
                    break;
                case 89:
                case 90:
                    f -= Test0272.iFld;
                case 91:
                    if (b) continue;
                    break;
                case 92:
                    iArr[i5 + 1] *= (int) Test0272.instanceCount;
                case 93:
                    dArr[i5 - 1][i5 + 1] -= Test0272.instanceCount;
                    break;
                case 94:
                    by *= (byte) 88;
                case 95:
                    i3 -= i5;
                    break;
                case 96:
                    i4 = (int) -85.472F;
                    break;
                case 97:
                    i13 += (i5 * i5);
                    break;
                case 98:
                    Test0272.instanceCount += (long) f;
                    break;
                case 99:
                    iArr[i5 - 1] = i5;
                    break;
                case 100:
                    i6 *= s;
                case 101:
                    i13 = (int) Test0272.instanceCount;
                    break;
                case 102:
                    b = true;
                    break;
                case 103:
                case 104:
                    i4 = i10;
                case 105:
                    Test0272.iFld *= i9;
                    break;
                case 106:
                    Test0272.instanceCount -= i5;
                    break;
                case 107:
                    f += Test0272.instanceCount;
                    break;
                case 108:
                    i4 = (int) f;
                    break;
                case 109:
                    lArr[i5 - 1] += i7;
                    break;
                case 110:
                    i13 *= Test0272.iFld;
                    break;
                default:
                    dArr[i5 - 1][(i9 >>> 1) % N] *= Test0272.iFld;
            }
        }
        vMeth1_check_sum += i3 + i4 + i5 + i6 + s + i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + by +
                Double.doubleToLongBits(d) + (b ? 1 : 0) + i13 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static int iMeth() {

        double d1 = -2.13740;
        double[] dArr1 = new double[N];
        int i15 = 91;
        int i16 = -55189;
        int[] iArr1 = new int[N];
        boolean b1 = true;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(lArr1, -3437792438L);
        FuzzerUtils.init(dArr1, 9.70315);

        vMeth1(Test0272.iFld, Test0272.iFld);
        for (int i14 : iArr1) {
            lArr1[(Test0272.iFld >>> 1) % N] = 9677;
            Test0272.iFld = (int) d1;
            iArr1 = iArr1;
            for (i15 = 1; i15 < 4; i15++) {
                short s1 = 2823;
                if (b1) break;
                iArr1[i15 - 1] -= (int) d1;
                Test0272.instanceCount += 45719;
                s1 -= (short) i14;
                b1 = b1;
                try {
                    i16 = (i16 / i14);
                    Test0272.iFld = (i16 % -96);
                    i14 = (iArr1[i15 + 1] % Test0272.iFld);
                } catch (ArithmeticException a_e) {
                }
            }
            Test0272.iFld += -64181;
            Test0272.iFld -= i14;
            dArr1 = dArr1;
        }
        long meth_res = Double.doubleToLongBits(d1) + i15 + i16 + (b1 ? 1 : 0) + FuzzerUtils.checkSum(iArr1) +
                FuzzerUtils.checkSum(lArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0272 _instance = new Test0272();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i1, long l) {

        int i2 = -10;
        int i17 = -26592;
        int i18 = -5;
        int i19 = -8;
        int i20 = 2;
        int i21 = 37473;
        int[] iArr2 = new int[N];
        float f1 = 36.720F;
        boolean b2 = true;

        FuzzerUtils.init(iArr2, -6356);

        i2 += (int) ((iMeth() - -14016) * f1);
        i1 <<= sFld;
        for (i17 = 4; i17 < 260; ++i17) {
            Test0272.iFld <<= i17;
            for (i19 = 1; i19 < 6; ++i19) {
                l = i1;
                i21 = 2;
                do {
                    i1 = i20;
                    b2 = b2;
                    iArr2[i21 - 1] <<= i1;
                    f1 = f1;
                } while (--i21 > 0);
                Test0272.dFld -= i21;
                Test0272.iFld -= Test0272.iFld;
                if (b2) break;
                Test0272.instanceCount -= l;
            }
        }
        vMeth_check_sum += i1 + l + i2 + Float.floatToIntBits(f1) + i17 + i18 + i19 + i20 + i21 + (b2 ? 1 : 0) +
                FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i = 5, i22 = 4, i23 = 14, i24 = 47448;
        long l2 = 2984465154L;
        float f2 = -55.965F;

        i = 312;
        do {
            vMeth(i, Test0272.instanceCount);
            l2 += i;
            i22 = 81;
            do {
                for (i23 = 1; i23 < 1; i23 += 3) {
                    byFld += (byte) (i23 * i23);
                    Test0272.iFld += (i23 - f2);
                    try {
                        Test0272.iFld = (i / -1353931754);
                        iArrFld[i][i - 1] = (i % Test0272.iFld);
                        iArrFld[i23 + 1][i - 1] = (166564632 % i);
                    } catch (ArithmeticException a_e) {
                    }
                    i24 += (int) Test0272.instanceCount;
                    i24 = i22;
                    i24 >>= 2;
                    iArrFld[i22 + 1][i23 + 1] = Test0272.iFld;
                    switch (((i % 10) * 5) + 21) {
                        case 62:
                            Test0272.iFld += (-23 + (i23 * i23));
                        case 23:
                            Test0272.iFld = (int) f2;
                            i24 *= i23;
                            Test0272.instanceCount += (i23 * i23);
                            f2 -= -36891;
                        case 47:
                            Test0272.dFld += l2;
                        case 42:
                            Test0272.iFld += (65421 + (i23 * i23));
                            break;
                        case 27:
                            Test0272.bFld = Test0272.bFld;
                            f2 = i24;
                            break;
                        case 28:
                            f2 += i;
                            i24 = -14245;
                            break;
                        case 33:
                            l2 = Test0272.instanceCount;
                        case 71:
                            i24 >>= i;
                            switch ((i % 5) + 41) {
                                case 41:
                                    i24 <<= (int) l2;
                                    i24 |= sFld;
                                    Test0272.iFld >>= i23;
                                    break;
                                case 42:
                                    i24 *= (int) Test0272.instanceCount;
                                    break;
                                case 43:
                                    i24 += i23;
                                    break;
                                case 44:
                                    i24 += i23;
                                    break;
                                case 45:
                                    iArrFld1 = iArrFld2;
                                    break;
                                default:
                                    Test0272.bFld = Test0272.bFld;
                            }
                            break;
                        case 68:
                            Test0272.instanceCount <<= -40529;
                            break;
                        case 22:
                            Test0272.iFld *= 149;
                            break;
                        default:
                            Test0272.iFld += (((i23 * i23) + i23) - i);
                    }
                }
            } while (--i22 > 0);
        } while (--i > 0);

        FuzzerUtils.out.println("i l2 i22 = " + i + "," + l2 + "," + i22);
        FuzzerUtils.out.println("i23 i24 f2 = " + i23 + "," + i24 + "," + Float.floatToIntBits(f2));

        FuzzerUtils.out.println("Test0272.instanceCount Test0272.iFld sFld = " + Test0272.instanceCount + "," + Test0272.iFld + "," +
                sFld);
        FuzzerUtils.out.println("Test0272.dFld byFld Test0272.bFld = " + Double.doubleToLongBits(Test0272.dFld) + "," + byFld + ","
                + (Test0272.bFld ? 1 : 0));
        FuzzerUtils.out.println("iArrFld iArrFld1 iArrFld2 = " + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(iArrFld1) + "," + FuzzerUtils.checkSum(iArrFld2));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
