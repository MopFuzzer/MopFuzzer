// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test0045 {

    public static final int N = 400;

    public static volatile long instanceCount = -76L;
    public static int iFld = -100;
    public static volatile long[] lArrFld = new long[N];
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0045.lArrFld, 6233637623494058649L);
        FuzzerUtils.init(Test0045.iArrFld, 4146);
    }

    public boolean bFld = true;

    public static void vMeth1() {

        int i3 = -8328;
        int i4 = -2;
        int i5 = -46498;
        int i6 = -11;
        int[] iArr1 = new int[N];
        long l = -211L, l1 = -7389942844257040349L;
        double d1 = 0.107794;
        float f1 = 1.331F;

        FuzzerUtils.init(iArr1, -1);

        i3 = (int) Test0045.instanceCount;
        i3 = i3;
        l = 1;
        do {
            i3 = (int) d1;
            f1 = i3;
            if (i3 != 0) {
                vMeth1_check_sum += i3 + l + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l1 + i4 + i5 + i6
                        + FuzzerUtils.checkSum(iArr1);
                return;
            }
            for (l1 = 7; 1 < l1; l1 -= 3) {
                i3 += (int) f1;
                i4 = (int) l;
                for (i5 = 1; i5 < 4; i5 += 2) {
                    short s = 28952;
                    f1 -= s;
                }
                Test0045.lArrFld[(int) (l)] <<= Test0045.instanceCount;
                iArr1[(int) (l1 - 1)] += i5;
                i6 += (int) (l1 * l1);
                i3 -= i3;
            }
        } while (++l < 225);
        vMeth1_check_sum += i3 + l + Double.doubleToLongBits(d1) + Float.floatToIntBits(f1) + l1 + i4 + i5 + i6 +
                FuzzerUtils.checkSum(iArr1);
    }

    public static int iMeth(int i2) {

        float f = 50.927F;
        long l2 = -180L;
        boolean b1 = false;
        double d2 = -63.125231;
        double[] dArr = new double[N];
        int i7 = -3, i8 = -45317, i9 = 26770;
        byte by = -56;

        FuzzerUtils.init(dArr, -40.73175);

        for (double d : dArr) {
            f -= ((long) ((i2 - d) + (-125L + (i2--))) | (long) (Test0045.instanceCount * (d - i2)));
            vMeth1();
            Test0045.iArrFld[(i2 >>> 1) % N] = (int) Test0045.instanceCount;
            i2 *= (int) l2;
            b1 = b1;
            for (d2 = 1; d2 < 4; ++d2) {
                Test0045.iArrFld[(int) (d2 - 1)] = (int) -86.75283;
                for (i8 = 1; i8 < 2; i8++) {
                    by += (byte) (((i8 * l2) + i7) - i9);
                    if (b1) {
                        l2 += (-2 + (i8 * i8));
                        Test0045.instanceCount <<= -7229579028563312346L;
                        i7 >>= i2;
                    } else {
                        i7 += i8;
                    }
                }
            }
        }
        long meth_res = i2 + Float.floatToIntBits(f) + l2 + (b1 ? 1 : 0) + Double.doubleToLongBits(d2) + i7 + i8 + i9 +
                by + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i1, boolean b) {

        double d3 = 63.76896;
        int i10 = 11;
        int i11 = -13;
        int i12 = -1457;
        int[] iArr = new int[N];
        float f2 = 0.724F;
        short s1 = 16823;

        FuzzerUtils.init(iArr, -10);

        iArr[(i1 >>> 1) % N] = (int) (Math.min((int) (Test0045.instanceCount - i1), iMeth(Test0045.iFld)) + Test0045.instanceCount);
        i1 = -38101;
        d3 = 1;
        while (++d3 < 201) {
            i1 = (int) Test0045.instanceCount;
            i1 *= i1;
            i10 = 1;
            do {
                for (i11 = 1; 1 > i11; i11++) {
                    iArr = Test0045.iArrFld;
                    Test0045.instanceCount = (long) f2;
                    Test0045.iArrFld[(int) (d3)] = Test0045.iFld;
                    Test0045.lArrFld[i10 - 1] >>= i1;
                    s1 *= (short) Test0045.instanceCount;
                    i1 += (-234 + (i11 * i11));
                    i1 += (int) Test0045.instanceCount;
                    Test0045.instanceCount = i10;
                }
            } while (++i10 < 8);
        }
        vMeth_check_sum += i1 + (b ? 1 : 0) + Double.doubleToLongBits(d3) + i10 + i11 + i12 + Float.floatToIntBits(f2)
                + s1 + FuzzerUtils.checkSum(iArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0045 _instance = new Test0045();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -232, i13 = 6, i14 = 52, i15 = 14, i16 = -171, i17 = 244, i18 = -13, i19 = 253, i20 = -5, i22 = 67, i23 = -12;
        float f3 = -43.447F;
        short s2 = -12893;
        double d4 = -2.70783;
        double[] dArr1 = new double[N];

        FuzzerUtils.init(dArr1, 65.112001);

        i = 1;
        while (++i < 260) {
            vMeth(Test0045.iFld, bFld);
            f3 /= (i | 1);
            Test0045.iArrFld[i] = 226;
        }
        for (i13 = 9; 245 > i13; ++i13) {
            f3 += s2;
        }
        for (i15 = 2; 203 > i15; i15 += 3) {
            i14 = i15;
        }
        for (i17 = 7; i17 < 166; i17++) {
            Test0045.iFld = -5398;
            i18 = Test0045.iFld;
            for (d4 = 158; d4 > 9; d4 -= 2) {
                Test0045.iArrFld = FuzzerUtils.int1array(N, (int) 48925);
            }
            switch ((i17 % 1) + 26) {
                case 26:
                    i20 = 1;
                    while (++i20 < 158) {
                        i19 |= (int) Test0045.instanceCount;
                        Test0045.iFld = (int) Test0045.instanceCount;
                        if (bFld) break;
                        Test0045.iArrFld[i20 + 1] -= i16;
                        i16 <<= i;
                    }
                    break;
                default:
                    Test0045.instanceCount *= Test0045.instanceCount;
                    i18 += i13;
                    dArr1[i17 + 1] -= d4;
            }
            Test0045.iFld += (i17 - i18);
            s2 = (short) i15;
        }
        for (i22 = 2; i22 < 320; ++i22) {
            if (bFld) {
                Test0045.instanceCount *= i17;
                i18 = (int) Test0045.instanceCount;
                bFld = bFld;
            }
        }

        FuzzerUtils.out.println("i f3 i13 = " + i + "," + Float.floatToIntBits(f3) + "," + i13);
        FuzzerUtils.out.println("i14 s2 i15 = " + i14 + "," + s2 + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("d4 i19 i20 = " + Double.doubleToLongBits(d4) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i22 i23 dArr1 = " + i22 + "," + i23 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1)));

        FuzzerUtils.out.println("Test0045.instanceCount Test0045.iFld bFld = " + Test0045.instanceCount + "," + Test0045.iFld + "," +
                (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0045.lArrFld Test0045.iArrFld = " + FuzzerUtils.checkSum(Test0045.lArrFld) + "," +
                FuzzerUtils.checkSum(Test0045.iArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
