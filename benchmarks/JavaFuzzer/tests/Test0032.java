// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test0032 {

    public static final int N = 400;

    public static volatile long instanceCount = -24642L;
    public static byte byFld = 59;
    public static boolean bFld = true;
    public static short sFld = -1710;
    public static double dFld = 46.56184;
    public static byte[] byArrFld = new byte[N];
    public static int[][] iArrFld = new int[N][N];
    public static float[] fArrFld = new float[N];
    public static long[] lArrFld = new long[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long sMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0032.byArrFld, (byte) -87);
        FuzzerUtils.init(Test0032.iArrFld, -3);
        FuzzerUtils.init(Test0032.fArrFld, 0.686F);
        FuzzerUtils.init(Test0032.lArrFld, -3L);
    }

    public volatile boolean[][] bArrFld = new boolean[N][N];

    public static short sMeth(int i2, float f) {

        int i3 = -51477, i4 = 11, i5 = 38563, i6 = 57455;
        double d1 = 93.113615, d2 = 15.59524;
        short s = 5989;
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 3035311536L);

        switch ((((i2 >>> 1) % 4) * 5) + 48) {
            case 50:
                for (i3 = 5; i3 < 393; i3 += 2) {
                    switch (((i3 >>> 1) % 10) + 66) {
                        case 66:
                            lArr[i3] >>= i2;
                            d1 = 1;
                            while (++d1 < 8) {
                                i2 -= (int) d1;
                                f += (-151 + (d1 * d1));
                                for (i5 = i3; i5 < 1; i5++) {
                                    d2 -= i4;
                                    i4 -= 19487;
                                    i6 += (int) Test0032.instanceCount;
                                    d2 += Test0032.instanceCount;
                                    i2 += i2;
                                    i4 += (i5 * i5);
                                    i2 += (((i5 * i5) + i2) - i6);
                                }
                            }
                            break;
                        case 67:
                        case 68:
                            f += (i3 * i3);
                        case 69:
                            i6 = i4;
                            break;
                        case 70:
                            if (i2 != 0) {
                            }
                            break;
                        case 71:
                            Test0032.byArrFld[i3] += (byte) Test0032.instanceCount;
                            break;
                        case 72:
                            Test0032.instanceCount += Test0032.instanceCount;
                        case 73:
                            i2 = (int) f;
                            break;
                        case 74:
                            i6 *= s;
                        case 75:
                            Test0032.iArrFld = Test0032.iArrFld;
                            break;
                    }
                }
                break;
            case 63:
                b = true;
            case 55:
                i4 ^= (int) Test0032.instanceCount;
                break;
            case 68:
                lArr[(i5 >>> 1) % N] = i4;
        }
        long meth_res = i2 + Float.floatToIntBits(f) + i3 + i4 + Double.doubleToLongBits(d1) + i5 + i6 +
                Double.doubleToLongBits(d2) + s + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr);
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public static void vMeth1(long l, int i, double d) {

        int i1 = -41760, i7 = 2, i8 = 11665, i9 = 240, i10 = 13;
        float f1 = -1.402F;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -2.65825);

        i1 = 1;
        do {
            i -= (sMeth(i, f1) - i1);
            if (Test0032.bFld) {
                for (i7 = 6; i7 > 1; --i7) {
                    switch ((i1 % 9) + 114) {
                        case 114:
                            i += (((i7 * i1) + i) - i7);
                            break;
                        case 115:
                            l += i7;
                            Test0032.instanceCount = i7;
                            i8 += i7;
                            break;
                        case 116:
                            for (i9 = 1; i9 < 2; i9++) {
                                if (Test0032.bFld) continue;
                                if (Test0032.bFld) {
                                    i = i10;
                                } else if (Test0032.bFld) {
                                    i10 &= i8;
                                    i10 += i9;
                                } else {
                                    Test0032.iArrFld[i1][i9 - 1] += i8;
                                }
                            }
                            break;
                        case 117:
                            Test0032.instanceCount -= i9;
                        case 118:
                            dArr[i7] += i9;
                            break;
                        case 119:
                            i8 = Test0032.sFld;
                            break;
                        case 120:
                            try {
                                Test0032.iArrFld[i7 + 1][i1 + 1] = (i1 % i10);
                                Test0032.iArrFld[i1 - 1][i1 + 1] = (i7 / 47842);
                                i8 = (Test0032.iArrFld[i1 - 1][i7] / -5179);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 121:
                            Test0032.iArrFld[i7 - 1][i1 + 1] = (int) l;
                            break;
                        case 122:
                            i10 -= i8;
                            break;
                        default:
                            i10 %= (int) (i9 | 1);
                    }
                }
            } else if (true) {
                Test0032.fArrFld = Test0032.fArrFld;
            }
        } while (++i1 < 274);
        vMeth1_check_sum += l + i + Double.doubleToLongBits(d) + i1 + Float.floatToIntBits(f1) + i7 + i8 + i9 + i10 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static void vMeth(byte by) {

        int i11 = 8871, i12 = -224, i13 = 13, i14 = -149, i15 = 91, i16 = -45248, i17 = -221, i18 = 42796;
        double d3 = -123.22702;

        vMeth1(Test0032.instanceCount, i11, 2.113029);
        Test0032.sFld += (short) 99.677F;
        Test0032.lArrFld[(i11 >>> 1) % N] -= Test0032.instanceCount;
        i11 += (int) Test0032.instanceCount;
        for (i12 = 5; i12 < 329; ++i12) {
            for (i14 = 1; i14 < 5; ++i14) {
                Test0032.iArrFld[i14][i14] = i14;
                for (i16 = 1; i16 < 2; ++i16) {
                    i15 <<= -2;
                }
                i17 = (int) Test0032.instanceCount;
                if (i13 != 0) {
                    vMeth_check_sum += by + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d3);
                    return;
                }
            }
            i18 = 1;
            while (++i18 < 5) {
                i17 %= (int) (i13 | 1);
                d3 -= i15;
                i11 >>= i15;
            }
        }
        vMeth_check_sum += by + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + Double.doubleToLongBits(d3);
    }

    public static void main(String[] strArr) {

        try {
            Test0032 _instance = new Test0032();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i19 = -22, i20 = 35, i21 = -196, i22 = -41585, i23 = 30, i24 = 61994, i25 = -146, i26 = 11, i27 = -11;
        double d4 = 65.80246;
        float f2 = 0.627F;
        short[] sArr = new short[N];

        FuzzerUtils.init(sArr, (short) -7455);

        Test0032.byFld = (byte) Math.abs(Test0032.instanceCount);
        vMeth(Test0032.byFld);
        Test0032.lArrFld[(i19 >>> 1) % N] = Test0032.instanceCount;
        for (d4 = 12; 213 > d4; ++d4) {
            Test0032.sFld += (short) 8155771902413320791L;
            i20 = i20;
            i20 >>= 233;
            f2 = Test0032.instanceCount;
        }
        for (i21 = 7; i21 < 304; ++i21) {
            if (Test0032.bFld) break;
            Test0032.instanceCount >>= -236;
            i22 = Test0032.sFld;
            i19 += (((i21 * i21) + i19) - i22);
            for (i23 = 2; 85 > i23; i23 += 3) {
                i25 = 1;
                while (++i25 < 4) {
                    bArrFld[(-158 >>> 1) % N][i21] = Test0032.bFld;
                    i20 += i25;
                    i19 += i19;
                }
                Test0032.lArrFld[i21 + 1] = i23;
                i19 = i24;
                i22 = i25;
                Test0032.dFld *= i24;
                try {
                    Test0032.iArrFld[i21 + 1][i21 - 1] = (21 / i20);
                    i20 = (-760327763 / Test0032.iArrFld[i21 + 1][i21 + 1]);
                    i24 = (i20 % i25);
                } catch (ArithmeticException a_e) {
                }
                i24 -= i22;
                for (i26 = 1; i26 < 4; ++i26) {
                    i22 = (int) Test0032.instanceCount;
                    sArr[i21 - 1] >>>= Test0032.sFld;
                }
                i20 += i19;
                i24 = 217;
            }
            Test0032.iArrFld[i21][i21 - 1] -= i23;
        }

        FuzzerUtils.out.println("i19 d4 i20 = " + i19 + "," + Double.doubleToLongBits(d4) + "," + i20);
        FuzzerUtils.out.println("f2 i21 i22 = " + Float.floatToIntBits(f2) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 i27 sArr = " + i26 + "," + i27 + "," + FuzzerUtils.checkSum(sArr));

        FuzzerUtils.out.println("Test0032.instanceCount Test0032.byFld Test0032.bFld = " + Test0032.instanceCount + "," + Test0032.byFld +
                "," + (Test0032.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0032.sFld Test0032.dFld Test0032.byArrFld = " + Test0032.sFld + "," +
                Double.doubleToLongBits(Test0032.dFld) + "," + FuzzerUtils.checkSum(Test0032.byArrFld));
        FuzzerUtils.out.println("Test0032.iArrFld Test0032.fArrFld Test0032.lArrFld = " + FuzzerUtils.checkSum(Test0032.iArrFld) + ","
                + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0032.fArrFld)) + "," + FuzzerUtils.checkSum(Test0032.lArrFld));
        FuzzerUtils.out.println("bArrFld = " + FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  sMeth ->  sMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
