// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:53 2023
public class Test0013 {

    public static final int N = 400;

    public static long instanceCount = 3L;
    public static short sFld = -27498;
    public static float fFld = 92.125F;
    public static boolean bFld = false;
    public static byte byFld = 15;
    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public volatile int[] iArrFld = new int[N];

    public static void vMeth(int i7) {

        int i8 = 64, i9 = 12, i10 = 134, i11 = 4, i12 = -52925, i13 = 4;
        short[] sArr = new short[N];

        FuzzerUtils.init(sArr, (short) 30167);

        i7 -= i7;
        for (i8 = 7; i8 < 173; i8 += 3) {
            for (i10 = 1; i10 < 28; i10++) {
                for (i12 = 1; i12 < 2; ++i12) {
                    sArr[i12] += (short) i12;
                    Test0013.instanceCount -= i8;
                    i9 += (-42687 + (i12 * i12));
                    i9 -= i13;
                    Test0013.instanceCount <<= i11;
                    Test0013.sFld *= (short) i8;
                    i7 += i12;
                }
                Test0013.fFld += (-45.735F + (i10 * i10));
                i11 = i8;
                i7 = (int) Test0013.instanceCount;
            }
            i7 |= i8;
        }
        vMeth_check_sum += i7 + i8 + i9 + i10 + i11 + i12 + i13 + FuzzerUtils.checkSum(sArr);
    }

    public static long lMeth() {

        int i14 = -8;
        int i15 = 49966;
        int i16 = 11;
        int i17 = 212;
        int i18 = -195;
        int i19 = -29415;
        int i20 = -40691;
        int i21 = -2;
        int[] iArr1 = new int[N];
        boolean b1 = true;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr1, -62130);
        FuzzerUtils.init(lArr1, 53978L);

        vMeth(i14);
        for (i15 = 6; i15 < 163; i15++) {
            Test0013.instanceCount += i15;
            iArr1 = iArr1;
        }
        i14 /= (int) (i14 | 1);
        try {
            Test0013.instanceCount >>= -46192;
        } catch (ArithmeticException exc1) {
            iArr1[(54776 >>> 1) % N] += i14;
            i17 = 1;
            while (++i17 < 168) {
                for (i18 = 1; i18 < 9; ++i18) {
                    b1 = true;
                    for (i20 = 2; i20 > i18; --i20) {
                        lArr1[i20 - 1] >>>= i21;
                        i14 += (int) 42828L;
                        i14 |= i16;
                    }
                }
            }
        }
        long meth_res = i14 + i15 + i16 + i17 + i18 + i19 + (b1 ? 1 : 0) + i20 + i21 + FuzzerUtils.checkSum(iArr1) +
                FuzzerUtils.checkSum(lArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static short sMeth(boolean b, int i5) {

        int i6 = -137;
        int i22 = 64454;
        int i23 = -167;
        int[] iArr = new int[N];
        double d1 = -72.12719;
        long l = 2147014933055803876L;
        boolean[] bArr = new boolean[N];

        FuzzerUtils.init(iArr, -15967);
        FuzzerUtils.init(bArr, true);

        i6 = 342;
        while ((i6 -= 3) > 0) {
            iArr[i6] >>= (int) Math.max(Math.abs(lMeth()), Test0013.instanceCount);
            i5 *= (int) d1;
            Test0013.fFld += i6;
            for (i22 = i6; i22 < 14; i22++) {
                i23 = (int) Test0013.fFld;
                i23 *= (int) Test0013.fFld;
                if (b) {
                    Test0013.sFld -= (short) Test0013.instanceCount;
                    Test0013.instanceCount *= -26590;
                    Test0013.instanceCount += (long) d1;
                }
                iArr[i6 - 1] -= (int) Test0013.instanceCount;
                l = (long) d1;
                bArr[i22 + 1] = b;
                i5 -= (int) Test0013.instanceCount;
            }
        }
        long meth_res = (b ? 1 : 0) + i5 + i6 + Double.doubleToLongBits(d1) + i22 + i23 + l +
                FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(bArr);
        sMeth_check_sum += meth_res;
        return (short) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0013 _instance = new Test0013();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d = 0.95298;
        double[] dArr = new double[N];
        int i = -59, i1 = 0, i2 = -41420, i3 = -44262, i4 = -52, i24 = -4, i25 = 14;
        long[] lArr = new long[N];
        byte[] byArr = new byte[N];

        FuzzerUtils.init(lArr, 5066255112458428728L);
        FuzzerUtils.init(byArr, (byte) 27);
        FuzzerUtils.init(dArr, -1.60007);

        for (d = 8; d < 217; d++) {
            for (i1 = 120; i1 > 1; --i1) {
                byte by = 91;
                Test0013.sFld = (short) (((i - 5263252511589145987L) + (i2 - i)) - lArr[(int) (d - 1)]);
                by = (byte) 251;
                by += (byte) (--i2);
                Test0013.fFld += (++Test0013.instanceCount);
                iArrFld[i1] = (int) ((byArr[i1 + 1] * (Test0013.instanceCount + i2)) * ((-Math.abs(i)) - Test0013.fFld));
                for (i3 = 1; i3 < 2; i3++) {
                    Test0013.instanceCount >>= byArr[i1];
                    i2 += (i3 - by);
                    i2 += (i3 ^ (long) Test0013.fFld);
                    i2 += i3;
                    Test0013.instanceCount -= (((i1 - -4444449843545932726L) - (i3 * Test0013.instanceCount)) *
                            (Test0013.instanceCount + Math.min(i, -22)));
                    by ^= (byte) (-((Test0013.instanceCount * Test0013.sFld) - Test0013.instanceCount));
                    i2 = (int) (((Test0013.instanceCount - Test0013.instanceCount) / (sMeth(Test0013.bFld, 179) | 1)) / -53);
                    Test0013.fFld -= i2;
                    by ^= (byte) Test0013.instanceCount;
                    dArr[i1] /= (i | 1);
                }
                for (i24 = 1; 2 > i24; ++i24) {
                    i4 += (i24 * i24);
                    i4 = -26787;
                    i2 = i3;
                    i += i24;
                    iArrFld = iArrFld;
                    i <<= i3;
                }
                i4 += 29;
                Test0013.instanceCount *= i3;
                Test0013.bFld = Test0013.bFld;
            }
        }
        i2 -= (int) -4.20889;
        i4 = Test0013.byFld;

        FuzzerUtils.out.println("d i i1 = " + Double.doubleToLongBits(d) + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i24 i25 lArr = " + i24 + "," + i25 + "," + FuzzerUtils.checkSum(lArr));
        FuzzerUtils.out.println("byArr dArr = " + FuzzerUtils.checkSum(byArr) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0013.instanceCount Test0013.sFld Test0013.fFld = " + Test0013.instanceCount + "," + Test0013.sFld +
                "," + Float.floatToIntBits(Test0013.fFld));
        FuzzerUtils.out.println("Test0013.bFld Test0013.byFld iArrFld = " + (Test0013.bFld ? 1 : 0) + "," + Test0013.byFld + "," +
                FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
