// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:14 2023
public class Test0844 {

    public static final int N = 400;

    public static long instanceCount = 26L;
    public static int iFld = 17;
    public static float fFld = 106.314F;
    public static boolean bFld1 = true;
    public static short sFld = 19891;
    public static short[][] sArrFld = new short[N][N];
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long iMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0844.sArrFld, (short) -17058);
    }

    public int[] iArrFld = new int[N];

    public static int iMeth2(long l2) {

        int i15 = -42977;
        int i16 = 19806;
        int i17 = 10;
        int i18 = -64339;
        int i19 = 2222;
        int i20 = 1;
        int i21 = -197;
        int[] iArr1 = new int[N];
        boolean b1 = false;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr1, -214);
        FuzzerUtils.init(lArr1, 5431199354765574854L);

        for (int i14 : iArr1) {
            for (i15 = 1; i15 < 4; i15++) {
                for (i17 = 1; 2 > i17; i17++) {
                    lArr1[i17] = i15;
                    i16 <<= (int) l2;
                    Test0844.iFld >>= i16;
                    i14 <<= i14;
                    if (b1) continue;
                    Test0844.iFld -= 170;
                    Test0844.instanceCount = i18;
                    i18 += (i17 * i14);
                }
            }
            for (i19 = 1; i19 < 4; ++i19) {
                i21 = 1;
                while (++i21 < 2) {
                    Test0844.fFld += (i21 + l2);
                    i18 >>= i20;
                }
            }
        }
        long meth_res = l2 + i15 + i16 + i17 + i18 + (b1 ? 1 : 0) + i19 + i20 + i21 + FuzzerUtils.checkSum(iArr1) +
                FuzzerUtils.checkSum(lArr1);
        iMeth2_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth1(int i11) {

        long l = 330219728L;
        long l1 = 3344911029L;
        long l3 = -1373763091L;
        long[] lArr = new long[N];
        int i12 = -19;
        int i13 = 4;
        int i22 = 2;
        int[] iArr2 = new int[N];
        float f = -1.70F;
        boolean b2 = false;
        boolean[] bArr1 = new boolean[N];
        double d1 = 12.43111;

        FuzzerUtils.init(lArr, -2409881016L);
        FuzzerUtils.init(bArr1, true);
        FuzzerUtils.init(iArr2, -252);

        Test0844.iFld -= (int) (((Test0844.instanceCount - Test0844.iFld) * (0 + (lArr[(-1 >>> 1) % N] = 17921))) * Test0844.iFld);
        for (l = 244; l > 11; --l) {
            for (l1 = 1; l1 < 7; ++l1) {
                i11 <<= (int) ((Math.abs(i11) + (i13 - f)) + iMeth2(l1));
                Test0844.sArrFld[(int) (l + 1)][(int) (l - 1)] -= (short) 41533L;
                Test0844.instanceCount /= (i13 | 1);
                bArr1[(int) (l1 + 1)] = b2;
                i13 += (int) l1;
                i11 += (int) (((l1 * Test0844.iFld) + l1) - i13);
                i11 -= -158;
                f = (float) d1;
            }
            try {
                i13 = (i11 % i12);
                i11 = (-450942949 / Test0844.iFld);
                iArr2[(int) (l)] = (i13 % -18990);
            } catch (ArithmeticException a_e) {
            }
            for (l3 = 1; l3 < 7; l3++) {
                if (b2) break;
            }
            lArr[(int) (l)] >>= l;
        }
        long meth_res = i11 + l + i12 + l1 + i13 + Float.floatToIntBits(f) + (b2 ? 1 : 0) + Double.doubleToLongBits(d1)
                + l3 + i22 + FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(bArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(int i4, int i5, int i6) {

        int i7 = 10, i8 = -19208, i9 = 42583, i10 = -4, i23 = 4, i24 = 2;
        double d = -121.56266;
        boolean[] bArr = new boolean[N];

        FuzzerUtils.init(bArr, true);

        for (i7 = 134; i7 > 6; i7--) {
            for (i9 = 12; 1 < i9; i9--) {
                bArr[i9 + 1] = (((--Test0844.iFld) * (i6 * d)) >= iMeth1(i6));
                Test0844.fFld *= 210L;
                i23 = 1;
                while ((i23 += 3) < 2) {
                    i8 += (int) -1.473F;
                    i5 = i5;
                    Test0844.instanceCount = i6;
                    Test0844.instanceCount |= Test0844.instanceCount;
                    i4 += i23;
                    d *= Test0844.fFld;
                    Test0844.fFld += i5;
                    i8 += i24;
                    if (Test0844.bFld1) continue;
                    i24 >>>= i23;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) + i23 + i24 +
                FuzzerUtils.checkSum(bArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr2) {

        try {
            Test0844 _instance = new Test0844();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr2);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr3) {

        int i3 = 253, i25 = 13, i26 = 2, i27 = 59277, i28 = 56241;
        byte by = 123;
        boolean b = false;
        float f1 = 64.979F;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 2.758F);

        i3 = 291;
        do {
            switch ((i3 % 4) + 95) {
                case 95:
                    Test0844.iFld *= (++iArrFld[i3 - 1]);
                    Test0844.iFld = (by++);
                    if (false) {
                        Test0844.iFld -= iArrFld[i3 + 1];
                        b = (Test0844.iFld != Test0844.fFld);
                        Test0844.sArrFld[i3][i3 - 1] *= (short) ((-Math.abs(-2)) + (iMeth(-41, Test0844.iFld, Test0844.iFld) - i3));
                        if (false) {
                            Test0844.iFld += (i3 + by);
                            if (false) continue;
                        } else if (b) {
                            Test0844.iFld >>= Test0844.iFld;
                            if (Test0844.bFld1) continue;
                            for (i25 = 172; i25 > 10; i25--) {
                                i26 += (int) (2L + (i25 * i25));
                            }
                        } else {
                            Test0844.fFld += i26;
                            iArrFld[i3 - 1] = (int) -87.801F;
                            f1 = 1;
                            while (++f1 < 172) {
                                Test0844.instanceCount *= -6669;
                                Test0844.iFld *= i3;
                                i26 = i26;
                            }
                            switch (((i3 % 5) * 5) + 95) {
                                case 101:
                                    i26 = (int) Test0844.instanceCount;
                                    for (i27 = 10; 172 > i27; i27++) {
                                        iArrFld[i3 - 1] += (int) Test0844.fFld;
                                        i28 += (44 + (i27 * i27));
                                        Test0844.instanceCount -= 4;
                                        if (b) {
                                            fArr[i27 - 1] -= Test0844.iFld;
                                        } else if (b) {
                                            i28 += (((i27 * i25) + Test0844.instanceCount) - by);
                                        } else {
                                            i26 |= i27;
                                        }
                                    }
                                    break;
                                case 117:
                                    i26 *= i26;
                                    break;
                                case 103:
                                    Test0844.instanceCount += (((i3 * i25) + Test0844.iFld) - Test0844.fFld);
                                case 96:
                                    Test0844.iFld += (((i3 * i26) + Test0844.sFld) - Test0844.instanceCount);
                                    break;
                                case 108:
                                    i28 >>= Test0844.sFld;
                                    break;
                            }
                        }
                    } else {
                        Test0844.instanceCount += (((i3 * i25) + Test0844.instanceCount) - Test0844.iFld);
                    }
                    break;
                case 96:
                    i28 += (i3 * i3);
                    break;
                case 97:
                    i28 = i27;
                    break;
                case 98:
                    Test0844.instanceCount = Test0844.iFld;
            }
        } while ((i3 -= 2) > 0);

        FuzzerUtils.out.println("i3 by b = " + i3 + "," + by + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i25 i26 f1 = " + i25 + "," + i26 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i27 i28 fArr = " + i27 + "," + i28 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)));

        FuzzerUtils.out.println("Test0844.instanceCount Test0844.iFld Test0844.fFld = " + Test0844.instanceCount + "," + Test0844.iFld +
                "," + Float.floatToIntBits(Test0844.fFld));
        FuzzerUtils.out.println("Test0844.bFld1 Test0844.sFld iArrFld = " + (Test0844.bFld1 ? 1 : 0) + "," + Test0844.sFld + "," +
                FuzzerUtils.checkSum(iArrFld));
        FuzzerUtils.out.println("Test0844.sArrFld = " + FuzzerUtils.checkSum(Test0844.sArrFld));

        FuzzerUtils.out.println("iMeth2_check_sum: " + iMeth2_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  iMeth2 ->  iMeth2 iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
