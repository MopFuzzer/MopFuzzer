// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:58 2023
public class Test0199 {

    public static final int N = 400;

    public static long instanceCount = -10L;
    public static int iFld = 7;
    public static boolean bFld = true;
    public static float fFld = -1.16F;
    public static volatile double[] dArrFld = new double[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0199.dArrFld, 122.115435);
    }

    public double dFld = -100.2233;

    public static int iMeth1(long l1, int i15, int i16) {

        int i17 = 45;
        int i18 = 36919;
        int i19 = -30;
        int i20 = -3;
        int[] iArr2 = new int[N];
        double d = -2.78872;
        byte by1 = 73;
        short s1 = -12517;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -2280479496685469616L);
        FuzzerUtils.init(iArr2, 77);

        i16 >>= -55632;
        for (i17 = 10; 249 > i17; ++i17) {
            i18 = (int) Test0199.instanceCount;
        }
        for (long l2 : lArr) {
            for (i19 = 1; i19 < 4; ++i19) {
                if (Test0199.bFld) break;
                d += i17;
                if (Test0199.bFld) break;
                by1 = (byte) 92;
                iArr2[i19 + 1] = s1;
                l1 += i19;
            }
            i20 -= i18;
            Test0199.dArrFld[(149 >>> 1) % N] *= d;
            l2 = i15;
        }
        Test0199.iFld *= (int) d;
        long meth_res = l1 + i15 + i16 + i17 + i18 + i19 + i20 + Double.doubleToLongBits(d) + by1 + s1 +
                FuzzerUtils.checkSum(lArr) + FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static int iMeth(boolean b, int i12) {

        int i13 = -11273;
        int i14 = 111;
        int[] iArr1 = new int[N];
        short s2 = -7881;
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr1, 40039);
        FuzzerUtils.init(fArr, -1.1016F);

        for (i13 = 8; i13 < 240; ++i13) {
            iArr1[i13] <<= iMeth1(Test0199.instanceCount, i13, Test0199.iFld);
            fArr[i13] = Test0199.instanceCount;
            i12 = (int) Test0199.instanceCount;
            i12 += s2;
        }
        long meth_res = (b ? 1 : 0) + i12 + i13 + i14 + s2 + FuzzerUtils.checkSum(iArr1) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(int i6, long l, short s) {

        int i7 = 72;
        int i8 = -53555;
        int i9 = -2;
        int i10 = 14;
        int i11 = -101;
        int i21 = -10833;
        int i22 = -49683;
        int i23 = 54838;
        int[] iArr3 = new int[N];
        float f = -2.469F;
        byte by2 = -5;

        FuzzerUtils.init(iArr3, -86);

        for (i7 = 2; i7 < 360; ++i7) {
            i9 = 1;
            while (++i9 < 5) {
                switch (((((i6 - i6) >>> 1) % 3) * 5) + 47) {
                    case 55:
                        Test0199.iFld -= ((i8 - 177) * Test0199.iFld);
                    case 54:
                        Test0199.iFld += (((i9 * Test0199.instanceCount) + Test0199.instanceCount) - Test0199.instanceCount);
                        for (i10 = 1; i10 < 1; ++i10) {
                            f += iMeth(Test0199.bFld, i11);
                            Test0199.dArrFld[i9 - 1] += i8;
                            iArr3[i9] += i7;
                            i11 -= i6;
                        }
                        i11 = (int) Test0199.instanceCount;
                        for (i21 = 1; i21 < 1; ++i21) {
                            i23 = by2;
                        }
                    case 57:
                        Test0199.instanceCount += (i9 - i6);
                        break;
                }
                i23 += i22;
            }
        }
        vMeth_check_sum += i6 + l + s + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f) + i21 + i22 + i23 + by2 +
                FuzzerUtils.checkSum(iArr3);
    }

    public static void main(String[] strArr) {

        try {
            Test0199 _instance = new Test0199();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        byte by = -21;
        int i = 89;
        int i1 = -2;
        int i2 = -2;
        int i3 = 6;
        int i4 = -61139;
        int i5 = 14798;
        int i24 = 22230;
        int i25 = 180;
        int i26 = 3123;
        int[] iArr = new int[N];
        short s3 = -21542;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr, 1);
        FuzzerUtils.init(lArr1, 1901970583217659960L);

        by &= (byte) iArr[(Test0199.iFld >>> 1) % N];
        for (i = 182; i > 9; i -= 3) {
            for (i2 = 3; i2 < 268; ++i2) {
                for (i4 = 2; i4 > 1; i4--) {
                    try {
                        i5 = (Test0199.iFld % i);
                        i1 = (i3 % i2);
                        i5 = (i4 / -597847153);
                    } catch (ArithmeticException a_e) {
                    }
                }
                vMeth(i5, Test0199.instanceCount, s3);
                if (Test0199.bFld) break;
                if (Test0199.bFld) continue;
                lArr1 = lArr1;
                i24 = 1;
                while (++i24 < 2) {
                    Test0199.dArrFld[i] = dFld;
                    Test0199.iFld = 246;
                }
                i3 += Test0199.iFld;
                for (i25 = 1; 2 > i25; ++i25) {
                    i3 |= i25;
                    lArr1[i2 + 1] |= -2;
                    switch ((i2 % 2) + 31) {
                        case 31:
                            Test0199.iFld += (((i25 * i24) + Test0199.fFld) - i24);
                            Test0199.instanceCount = (long) Test0199.fFld;
                            Test0199.fFld += Test0199.iFld;
                            break;
                        case 32:
                            Test0199.dArrFld[i + 1] = -13166;
                            i26 = i3;
                            break;
                        default:
                            iArr[i2 - 1] *= i24;
                    }
                    Test0199.instanceCount = i;
                }
                Test0199.iFld += (((i2 * i5) + Test0199.instanceCount) - i2);
            }
            Test0199.instanceCount = -1;
            for (long l3 : lArr1) {
                i3 += (((i * i3) + i3) - i26);
                dFld *= Test0199.fFld;
                i1 -= i5;
            }
        }

        FuzzerUtils.out.println("by i i1 = " + by + "," + i + "," + i1);
        FuzzerUtils.out.println("i2 i3 i4 = " + i2 + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i5 s3 i24 = " + i5 + "," + s3 + "," + i24);
        FuzzerUtils.out.println("i25 i26 iArr = " + i25 + "," + i26 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0199.instanceCount Test0199.iFld Test0199.bFld = " + Test0199.instanceCount + "," + Test0199.iFld +
                "," + (Test0199.bFld ? 1 : 0));
        FuzzerUtils.out.println("dFld Test0199.fFld Test0199.dArrFld = " + Double.doubleToLongBits(dFld) + "," +
                Float.floatToIntBits(Test0199.fFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0199.dArrFld)));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
