// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:56 2023
public class Test0146 {

    public static final int N = 400;

    public static long instanceCount = -4766L;
    public static float fFld = -115.95F;
    public static volatile short sFld = 22588;
    public static int iFld = 9335;
    public static int iFld1 = 10;
    public static double[] dArrFld = new double[N];
    public static int[] iArrFld = new int[N];
    public static long[] lArrFld = new long[N];
    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0146.dArrFld, -102.117286);
        FuzzerUtils.init(Test0146.iArrFld, -27904);
        FuzzerUtils.init(Test0146.lArrFld, 14L);
    }

    public static void vSmallMeth(double d, double d1, int i) {

        int[] iArr = new int[N];

        FuzzerUtils.init(iArr, -114);

        iArr = (iArr = iArr);
        vSmallMeth_check_sum += Double.doubleToLongBits(d) + Double.doubleToLongBits(d1) + i +
                FuzzerUtils.checkSum(iArr);
    }

    public static long lMeth(long l) {

        int i8 = 60;
        int i9 = -1;
        int i10 = 113;
        int i11 = 14;
        int i12 = -3;
        int[] iArr1 = new int[N];
        double d3 = -1.90947;

        FuzzerUtils.init(iArr1, 253);

        Test0146.fFld = -844798137L;
        i8 = (int) Test0146.instanceCount;
        iArr1[(i8 >>> 1) % N] = i8;
        i9 = 1;
        do {
            iArr1[i9 + 1] ^= (int) l;
            for (d3 = i9; d3 < 9; d3++) {
                try {
                    i8 = (i9 / -56824);
                    i10 = (-1736797177 / i8);
                    i8 = (-44796 / i9);
                } catch (ArithmeticException a_e) {
                }
                for (i11 = 1; i11 < 1; i11++) {
                    i10 = i12;
                    Test0146.fFld += Test0146.instanceCount;
                    i10 = i9;
                    Test0146.instanceCount = i11;
                    iArr1[(int) (d3 - 1)] += (int) Test0146.fFld;
                    Test0146.instanceCount *= i12;
                    iArr1[i9 + 1] >>>= (int) Test0146.instanceCount;
                }
            }
        } while (++i9 < 183);
        long meth_res = l + i8 + i9 + Double.doubleToLongBits(d3) + i10 + i11 + i12 + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static void vMeth(int i7) {

        int i13 = -9;
        int i14 = -10172;
        int i15 = -60;
        int i16 = -9130;
        int i17 = -13;
        int i18 = 40140;
        int[] iArr2 = new int[N];
        boolean b = true;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -921211490823798076L);
        FuzzerUtils.init(iArr2, -58725);

        i7 = (int) Test0146.instanceCount;
        for (double d2 : Test0146.dArrFld) {
            i7 = (int) Math.min(Test0146.instanceCount, lMeth(Test0146.instanceCount));
            Test0146.instanceCount |= i7;
            if (i7 != 0) {
                vMeth_check_sum += i7 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(iArr2);
                return;
            }
            for (i13 = 1; i13 < 4; i13++) {
                Test0146.instanceCount |= i14;
                i7 += (((i13 * Test0146.instanceCount) + Test0146.instanceCount) - i13);
                i7 *= i14;
                iArr2[i13 - 1] &= (int) Test0146.instanceCount;
                Test0146.instanceCount = Test0146.instanceCount;
            }
        }
        for (i15 = 12; i15 < 363; i15++) {
            for (i17 = 1; i17 < 5; ++i17) {
                i16 += (i17 ^ i15);
                if (b) break;
            }
        }
        vMeth_check_sum += i7 + i13 + i14 + i15 + i16 + i17 + i18 + (b ? 1 : 0) + FuzzerUtils.checkSum(lArr) +
                FuzzerUtils.checkSum(iArr2);
    }

    public static int iMeth(int i1, int i2, float f1) {

        int i3 = -216;
        int i4 = -191;
        int i5 = 54;
        int i6 = -205;
        int[][] iArr3 = new int[N][N];
        byte by = 122;
        double d4 = -18.61308;
        float[] fArr = new float[N];
        float[][] fArr1 = new float[N][N];

        FuzzerUtils.init(fArr, 0.105F);
        FuzzerUtils.init(iArr3, 1);
        FuzzerUtils.init(fArr1, 1.336F);

        for (i3 = 337; i3 > 13; i3--) {
            for (i5 = 1; i5 < 5; i5++) {
                fArr[i3 - 1] -= (i4 -= (int) ((-78.399F % (Math.abs(i6) | 1)) * (f1 / (i5 | 1))));
            }
            switch ((i3 % 6) + 76) {
                case 76:
                    vMeth(i5);
                    i6 <<= i4;
                    try {
                        i6 = (i3 % -2001402452);
                        iArr3[i3][i3 + 1] = (iArr3[i3][i3 - 1] / -250);
                        Test0146.iArrFld[i3 + 1] = (iArr3[i3 + 1][i3 + 1] % -16462);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 77:
                    i2 ^= by;
                    break;
                case 78:
                    i1 >>= Test0146.sFld;
                    Test0146.lArrFld[i3 - 1] -= (long) d4;
                case 79:
                    Test0146.iArrFld[i3 + 1] ^= i2;
                    Test0146.lArrFld[i3] = i5;
                    Test0146.iArrFld[(8 >>> 1) % N] ^= i1;
                    break;
                case 80:
                    i1 >>= (int) Test0146.instanceCount;
                    fArr1 = fArr1;
                    break;
                case 81:
                    Test0146.instanceCount += (i3 - Test0146.instanceCount);
                    break;
            }
        }
        long meth_res = i1 + i2 + Float.floatToIntBits(f1) + i3 + i4 + i5 + i6 + by + Double.doubleToLongBits(d4) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr3) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0146 _instance = new Test0146();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f = -97.667F;
        float[] fArr2 = new float[N];
        double d5 = 0.106237, d6 = -105.26336;
        int i19 = 3;
        int i20 = -8;
        int i21 = -56168;
        int i22 = 141;
        int i23 = 65018;
        int i24 = 129;
        int i25 = 236;
        int i26 = -147;
        int i27 = 56754;
        int[][] iArr4 = new
                int[N][N];

        FuzzerUtils.init(fArr2, 0.72F);
        FuzzerUtils.init(iArr4, 20243);

        for (int smallinvoc = 0; smallinvoc < 601; smallinvoc++)
            vSmallMeth((--f) + iMeth(Test0146.iFld, Test0146.iFld, -16.83F),
                    d5, Test0146.iFld);
        Test0146.iFld = (int) f;
        i19 = 279;
        while (--i19 > 0) {
            Test0146.instanceCount = Test0146.sFld;
        }
        d6 -= i19;
        Test0146.sFld = (short) Test0146.instanceCount;
        Test0146.iArrFld[(Test0146.iFld >>> 1) % N] = Test0146.iFld;
        Test0146.iFld *= 27;
        for (i20 = 245; i20 > 4; i20 -= 2) {
            i22 = 209;
            do {
                d6 -= i19;
            } while (--i22 > 0);
            for (i23 = 209; i23 > i20; i23--) {
                try {
                    Test0146.iArrFld[i23 + 1] = (-85 / i23);
                    Test0146.iArrFld[i23 - 1] = (Test0146.iFld / 578877596);
                    i24 = (i24 / i22);
                } catch (ArithmeticException a_e) {
                }
                try {
                    i21 = (i21 / i24);
                    Test0146.iArrFld[i20] = (Test0146.iFld % 231);
                    Test0146.iArrFld[i23] = (i20 / -133);
                } catch (ArithmeticException a_e) {
                }
                for (i25 = 1; i25 < 1; ++i25) {
                    Test0146.instanceCount += i24;
                    if (false) continue;
                    switch (((i20 >>> 1) % 8) + 41) {
                        case 41:
                            f -= 1;
                            Test0146.iFld = i21;
                            Test0146.iFld -= (int) Test0146.fFld;
                            break;
                        case 42:
                            i26 = i20;
                        case 43:
                            Test0146.lArrFld[i20] -= i24;
                            i24 += (int) d5;
                            break;
                        case 44:
                            i24 = -50708;
                            Test0146.instanceCount = (long) Test0146.fFld;
                            i21 /= (int) (Test0146.iFld | 1);
                            try {
                                i24 = (55406 % i19);
                                i24 = (1147022872 % i19);
                                i26 = (i21 / i19);
                            } catch (ArithmeticException a_e) {
                            }
                            break;
                        case 45:
                            i21 = i21;
                            Test0146.sFld *= (short) d6;
                            break;
                        case 46:
                            Test0146.iFld1 += (i25 - Test0146.instanceCount);
                            break;
                        case 47:
                            fArr2[i23 - 1] += i23;
                        case 48:
                            i27 = -48;
                            break;
                        default:
                            iArr4 = iArr4;
                    }
                }
            }
        }

        FuzzerUtils.out.println("f d5 i19 = " + Float.floatToIntBits(f) + "," + Double.doubleToLongBits(d5) + "," +
                i19);
        FuzzerUtils.out.println("d6 i20 i21 = " + Double.doubleToLongBits(d6) + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("fArr2 iArr4 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr2)) + "," +
                FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test0146.instanceCount Test0146.fFld Test0146.sFld = " + Test0146.instanceCount + "," +
                Float.floatToIntBits(Test0146.fFld) + "," + Test0146.sFld);
        FuzzerUtils.out.println("Test0146.iFld Test0146.iFld1 Test0146.dArrFld = " + Test0146.iFld + "," + Test0146.iFld1 + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0146.dArrFld)));
        FuzzerUtils.out.println("Test0146.iArrFld Test0146.lArrFld = " + FuzzerUtils.checkSum(Test0146.iArrFld) + "," +
                FuzzerUtils.checkSum(Test0146.lArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
