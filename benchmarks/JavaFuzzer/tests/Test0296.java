// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:00 2023
public class Test0296 {

    public static final int N = 400;

    public static long instanceCount = 2L;
    public static volatile float fFld = -36.178F;
    public static byte byFld = -103;
    public static int[] iArrFld = new int[N];
    public static short[] sArrFld = new short[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0296.iArrFld, 206);
        FuzzerUtils.init(Test0296.sArrFld, (short) -10192);
    }

    public boolean bFld = false;
    public double[] dArrFld = new double[N];
    public boolean[] bArrFld = new boolean[N];

    public static int iMeth1() {

        int i9 = 53;
        int i10 = -34940;
        int i11 = 101;
        int i12 = 61;
        int[][] iArr1 = new int[N][N];
        double d2 = -7.99796;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 14L);
        FuzzerUtils.init(iArr1, 12);

        Test0296.instanceCount += i9;
        for (long l1 : lArr) {
            l1 = i9;
            Test0296.instanceCount = i9;
            l1 <<= i9;
            for (i10 = 1; i10 < 4; i10++) {
                i9 -= i11;
                i12 = 1;
                while (++i12 < 2) {
                    i9 = (int) l1;
                    Test0296.instanceCount += (i12 ^ i12);
                    i9 += i12;
                    l1 = -42279L;
                    d2 -= i10;
                    l1 += i12;
                    try {
                        iArr1[i10][i10 - 1] = (i9 / 24869);
                        i11 = (i10 % 1309011985);
                        iArr1[i10 - 1][i10] = (-43451 % iArr1[i12][i10 + 1]);
                    } catch (ArithmeticException a_e) {
                    }
                }
            }
        }
        long meth_res = i9 + i10 + i11 + i12 + Double.doubleToLongBits(d2) + FuzzerUtils.checkSum(lArr) +
                FuzzerUtils.checkSum(iArr1);
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth() {

        int i5 = 194, i6 = 14, i7 = -147, i8 = -160, i13 = -2;
        long l = -161L;
        double d1 = -1.9515;
        short s = 4912;
        short[] sArr = new short[N];
        float f = 0.432F;
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 0.540F);
        FuzzerUtils.init(sArr, (short) 9437);

        Test0296.instanceCount = (long) fArr[(i5 >>> 1) % N];
        i5 *= (int) ((Test0296.instanceCount *= Math.abs(i5)) - (--i5));
        for (l = 8; l < 193; ++l) {
            for (i7 = 1; 9 > i7; i7++) {
                i6 = (int) (((d1++) - Integer.reverseBytes(192)) + i7);
                sArr[(int) (l)] = (short) Double.longBitsToDouble((9 + Math.abs(i8)) * (s++));
                i6 -= Math.max(iMeth1(), i6);
                s += (short) (i7 * i7);
                i8 += (i7 * i7);
                Test0296.iArrFld[(int) (l)] = (int) l;
                for (f = i7; f < 2; f++) {
                    if (true) break;
                    i13 = i5;
                    i13 -= Test0296.byFld;
                    i13 = (int) d1;
                }
            }
        }
        vMeth_check_sum += i5 + l + i6 + i7 + i8 + Double.doubleToLongBits(d1) + s + Float.floatToIntBits(f) + i13 +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static int iMeth(double d) {

        int i1 = -47194;
        int i2 = 15925;
        int i3 = -4444;
        int i4 = -62320;
        int i14 = 14530;
        int[][] iArr = new int[N][N];
        byte by = 71;

        FuzzerUtils.init(iArr, 9);

        iArr[(i1 >>> 1) % N][(i1 >>> 1) % N] += i1;
        i2 = 1;
        do {
            i3 = 1;
            do {
                Test0296.instanceCount += (i3 * i3);
                by += (byte) ((Test0296.fFld++) + ((++d) - Test0296.fFld));
            } while (++i3 < 5);
            iArr[i2][i2] += i3;
            i4 = 1;
            do {
                vMeth();
                i1 += (i4 * i4);
                if (i4 != 0) {
                }
                Test0296.instanceCount = i3;
                i14 = 1;
                while (++i14 < 1) {
                    i1 >>= i4;
                    i1 += i1;
                    by += (byte) 44;
                }
            } while (++i4 < 5);
        } while (++i2 < 365);
        long meth_res = Double.doubleToLongBits(d) + i1 + i2 + i3 + by + i4 + i14 + FuzzerUtils.checkSum(iArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0296 _instance = new Test0296();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 25528, i15 = 14115, i16 = -9, i17 = -65, i18 = -19, i19 = 115, i20 = -208, i21 = -7, i22 = 14, i23 = -12, i24 = -6;
        double d3 = -88.761;
        byte by1 = 88;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, 217L);

        i = Integer.reverseBytes(iMeth(d3));
        Test0296.iArrFld = Test0296.iArrFld;
        for (i15 = 16; i15 < 272; ++i15) {
            i16 = (int) -68L;
            i17 = 1;
            while (++i17 < 98) {
                i16 += (((i17 * i17) + Test0296.fFld) - i);
                lArr1[i17] = (long) d3;
                i += (((i17 * i18) + i) - i);
                by1 -= (byte) Test0296.instanceCount;
                switch ((i17 % 7) + 67) {
                    case 67:
                        Test0296.iArrFld[i15 + 1] = i19;
                        i19 >>= i16;
                        i19 = i;
                        break;
                    case 68:
                    case 69:
                        if (bFld) {
                            i20 = (int) Test0296.fFld;
                            Test0296.iArrFld[i15] |= (int) Test0296.instanceCount;
                            try {
                                i16 = (i19 / -1813);
                                i = (i % i18);
                                i19 = (13105 / Test0296.iArrFld[i17 + 1]);
                            } catch (ArithmeticException a_e) {
                            }
                        } else if (bFld) {
                            Test0296.sArrFld[i15] = (short) i15;
                            i16 += (i17 * i17);
                        }
                        i19 *= (int) Test0296.fFld;
                        Test0296.instanceCount -= i;
                        break;
                    case 70:
                        dArrFld[i17] = Test0296.fFld;
                        for (i21 = 1; i21 < 1; ++i21) {
                            bArrFld[i15] = bFld;
                            d3 = Test0296.fFld;
                        }
                        break;
                    case 71:
                        Test0296.fFld += (i17 * i18);
                    case 72:
                        for (i23 = 1; i23 > 1; --i23) {
                            i19 &= i;
                            i22 = 18;
                        }
                        Test0296.iArrFld[i17] = -184;
                    case 73:
                        i += (int) Test0296.instanceCount;
                        break;
                    default:
                        Test0296.fFld = i;
                }
            }
        }

        FuzzerUtils.out.println("i d3 i15 = " + i + "," + Double.doubleToLongBits(d3) + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("by1 i19 i20 = " + by1 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 lArr1 = " + i24 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0296.instanceCount Test0296.fFld Test0296.byFld = " + Test0296.instanceCount + "," +
                Float.floatToIntBits(Test0296.fFld) + "," + Test0296.byFld);
        FuzzerUtils.out.println("bFld Test0296.iArrFld Test0296.sArrFld = " + (bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0296.iArrFld) + "," + FuzzerUtils.checkSum(Test0296.sArrFld));
        FuzzerUtils.out.println("dArrFld bArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)) + "," +
                FuzzerUtils.checkSum(bArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
