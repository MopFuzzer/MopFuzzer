// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:11 2023
public class Test0710 {

    public static final int N = 400;

    public static long instanceCount = -3640890325380589748L;
    public static double dFld = 6.63198;
    public static int iFld = -2593;
    public static int[] iArrFld1 = new int[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0710.iArrFld1, -13);
    }

    public byte byFld = 110;
    public int[][] iArrFld = new int[N][N];
    public long[] lArrFld = new long[N];
    public double[] dArrFld = new double[N];

    public static void vMeth2(int i4) {

        float f1 = 124.631F;
        int i5 = -6907, i6 = -217, i7 = 54761;
        short s = 11997;
        long l = -1650010684L;

        f1 = f1;
        for (i5 = 17; i5 < 298; ++i5) {
            i7 = 1;
            while (++i7 < 6) {
                f1 += i7;
                switch ((i7 % 2) + 20) {
                    case 20:
                        i4 += i7;
                    case 21:
                        Test0710.iFld += i7;
                        f1 -= s;
                        Test0710.dFld -= Test0710.iFld;
                        Test0710.iFld = Test0710.iFld;
                    default:
                        i4 += i7;
                }
                Test0710.dFld *= Test0710.instanceCount;
                s /= (short) ((long) (Test0710.dFld) | 1);
                i6 += (((i7 * i6) + i7) - l);
                Test0710.iFld |= i4;
            }
        }
        vMeth2_check_sum += i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + s + l;
    }

    public static void vMeth1() {

        int i8 = 117, i9 = -127, i10 = 51793, i11 = 116;
        float f2 = -3.709F, f3 = -17.993F;

        for (int i3 : Test0710.iArrFld1) {
            vMeth2(Test0710.iFld);
            i3 *= i3;
            i3 += i8;
            Test0710.iFld *= (int) Test0710.instanceCount;
        }
        f2 = i8;
        Test0710.iFld *= Test0710.iFld;
        Test0710.instanceCount *= Test0710.instanceCount;
        i8 >>= Test0710.iFld;
        for (i9 = 174; i9 > 6; --i9) {
            Test0710.iFld >>>= (int) Test0710.instanceCount;
            for (f3 = 1; f3 < 9; ++f3) {
                Test0710.iArrFld1[i9 + 1] = (int) 86.41779;
                i11 *= (int) Test0710.instanceCount;
                if (i9 != 0) {
                    vMeth1_check_sum += i8 + Float.floatToIntBits(f2) + i9 + i10 + Float.floatToIntBits(f3) + i11;
                    return;
                }
            }
        }
        vMeth1_check_sum += i8 + Float.floatToIntBits(f2) + i9 + i10 + Float.floatToIntBits(f3) + i11;
    }

    public static void main(String[] strArr) {

        try {
            Test0710 _instance = new Test0710();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth(int i, float f) {

        int i1 = -32, i2 = -215, i12 = 54, i13 = -205, i14 = 73, i15 = -14736, i16 = 46921, i17 = 2;
        boolean b = true;

        for (i1 = 18; 388 > i1; i1++) {
            vMeth1();
            b = b;
            if (i2 != 0) {
                vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + i16 +
                        i17;
                return;
            }
        }
        try {
            i *= (int) f;
            for (i12 = 379; i12 > 3; i12--) {
                i2 -= i12;
                lArrFld[i12 + 1] += 3;
                Test0710.dFld += Test0710.iFld;
            }
        } catch (NegativeArraySizeException exc1) {
            for (i14 = 4; 271 > i14; ++i14) {
                for (i16 = 1; 6 > i16; i16++) {
                    i17 += i16;
                    dArrFld[i16 - 1] -= i1;
                    i17 <<= i2;
                }
            }
        }
        vMeth_check_sum += i + Float.floatToIntBits(f) + i1 + i2 + (b ? 1 : 0) + i12 + i13 + i14 + i15 + i16 + i17;
    }

    public void mainTest(String[] strArr1) {

        float f4 = -31.584F;
        double d = 84.57790;
        int i18 = 41891, i19 = 10, i20 = -8, i21 = -7, i22 = 158, i23 = 9, i24 = 7, i25 = -1, i26 = -35255, i27 = 14, i28 = 11;
        boolean b1 = true;

        Test0710.dFld += (Test0710.iFld += (int) ((Test0710.instanceCount + Test0710.instanceCount) - (-3 - (6 + iArrFld[(Test0710.iFld >>>
                1) % N][(-64957 >>> 1) % N]))));
        vMeth(11, f4);
        Test0710.instanceCount += Test0710.iFld;
        for (d = 180; d > 4; --d) {
            Test0710.iFld += Test0710.iFld;
            Test0710.instanceCount += Test0710.iFld;
            i19 = 1;
            do {
                Test0710.iFld = 6;
                lArrFld[(int) (d - 1)] -= Test0710.iFld;
            } while (++i19 < 143);
            for (i20 = 8; i20 < 143; ++i20) {
                i22 = 1;
                while (++i22 < 2) {
                    i18 += (int) f4;
                    try {
                        Test0710.iFld = (i19 / i20);
                        Test0710.iArrFld1[(int) (d)] = (-38 / i19);
                        i23 = (i22 % i21);
                    } catch (ArithmeticException a_e) {
                    }
                    i21 = i21;
                }
            }
            for (i24 = 143; i24 > 8; i24--) {
                Test0710.instanceCount += (-2 + (i24 * i24));
            }
            i18 = i18;
            byFld = (byte) -100L;
            i25 >>= 64231;
            i26 = 1;
            do {
                byFld ^= (byte) i23;
                i25 += i26;
                if (b1) break;
                f4 = Test0710.instanceCount;
                for (i27 = (int) (d); i27 < 1; i27++) {
                    if (b1) continue;
                    switch (((Test0710.iFld >>> 1) % 5) + 36) {
                        case 36:
                            i23 = i23;
                            break;
                        case 37:
                            dArrFld[i26 - 1] *= 165;
                            Test0710.iArrFld1[(int) (d)] >>= -29598;
                            break;
                        case 38:
                            Test0710.instanceCount <<= i24;
                        case 39:
                            iArrFld[i27 - 1][(int) (d - 1)] = i21;
                            break;
                        case 40:
                            Test0710.instanceCount += (long) f4;
                            break;
                    }
                }
            } while (++i26 < 143);
        }

        FuzzerUtils.out.println("f4 d i18 = " + Float.floatToIntBits(f4) + "," + Double.doubleToLongBits(d) + "," +
                i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 i23 i24 = " + i22 + "," + i23 + "," + i24);
        FuzzerUtils.out.println("i25 i26 b1 = " + i25 + "," + i26 + "," + (b1 ? 1 : 0));
        FuzzerUtils.out.println("i27 i28 = " + i27 + "," + i28);

        FuzzerUtils.out.println("Test0710.instanceCount Test0710.dFld Test0710.iFld = " + Test0710.instanceCount + "," +
                Double.doubleToLongBits(Test0710.dFld) + "," + Test0710.iFld);
        FuzzerUtils.out.println("byFld iArrFld Test0710.iArrFld1 = " + byFld + "," + FuzzerUtils.checkSum(iArrFld) + "," +
                FuzzerUtils.checkSum(Test0710.iArrFld1));
        FuzzerUtils.out.println("lArrFld dArrFld = " + FuzzerUtils.checkSum(lArrFld) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(dArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
