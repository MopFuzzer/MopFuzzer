// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:06 2023
public class Test0540 {

    public static final int N = 400;

    public static long instanceCount = 5099956549686670533L;
    public static int iFld = -57224;
    public static volatile boolean bFld = true;
    public static byte byFld = -27;
    public static long[] lArrFld = new long[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0540.lArrFld, 9L);
    }

    public double dFld = -37.94155;
    public int[][] iArrFld = new int[N][N];

    public static void vMeth2(double d, int i2, int i3) {

        int i4 = 164;
        int i5 = 10;
        int i6 = -53794;
        int i7 = -12;
        int i8 = -131;
        int i9 = 58403;
        int[] iArr1 = new int[N];
        float f = 111.929F;
        boolean b = false;

        FuzzerUtils.init(iArr1, 14);

        for (i4 = 2; i4 < 275; i4++) {
            f += (float) d;
            Test0540.iFld += (i4 * i4);
            for (i6 = 1; 6 > i6; ++i6) {
                Test0540.instanceCount >>>= Test0540.instanceCount;
                for (i8 = 1; i8 < 2; i8++) {
                    iArr1[i6 + 1] = i2;
                    iArr1[i6 + 1] -= (int) 35L;
                    f -= i7;
                    if (i9 != 0) {
                        vMeth2_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) +
                                i6 + i7 + i8 + i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
                        return;
                    }
                    i5 -= i4;
                    Test0540.iFld += i4;
                    iArr1 = iArr1;
                    if (b) continue;
                    f -= i3;
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + i6 + i7 + i8 +
                i9 + (b ? 1 : 0) + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth1(long l, int i1) {

        double d1 = -1.103452;
        int i10 = -2;
        int i11 = 102;
        int i12 = 151;
        int i13 = -157;
        int i14 = 8;
        int i15 = 9288;
        int i16 = 65;
        int[][] iArr2 = new int[N][N];
        boolean b1 = false;
        float f1 = -2.870F;

        FuzzerUtils.init(iArr2, -95);

        vMeth2(d1, Test0540.iFld, -24);
        for (i10 = 10; i10 < 371; ++i10) {
            if (b1) continue;
            i1 -= (int) Test0540.instanceCount;
            for (i12 = 5; 1 < i12; --i12) {
                i14 = 2;
                while ((i14 -= 2) > 0) {
                    Test0540.lArrFld[i14 + 1] -= Test0540.iFld;
                }
                Test0540.instanceCount += (long) (-8.804F + (i12 * i12));
                Test0540.instanceCount += 0;
                for (i15 = i10; i15 < 2; ++i15) {
                    iArr2[i10][i12] = (int) Test0540.instanceCount;
                    b1 = b1;
                    i11 = (int) f1;
                    i16 = 12;
                }
                i16 += i12;
            }
        }
        vMeth1_check_sum += l + i1 + Double.doubleToLongBits(d1) + i10 + i11 + (b1 ? 1 : 0) + i12 + i13 + i14 + i15 +
                i16 + Float.floatToIntBits(f1) + FuzzerUtils.checkSum(iArr2);
    }

    public static void vMeth(byte by) {

        int i17 = -12;
        int i18 = 12507;
        int i19 = -204;
        int i20 = 212;
        int i21 = 15;
        int i22 = -1;
        int i23 = -13538;
        int[] iArr = new int[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(iArr, -20410);
        FuzzerUtils.init(fArr, -1.152F);

        Test0540.iFld = (--Test0540.iFld);
        for (int i : iArr) {
            vMeth1(Test0540.instanceCount, Test0540.iFld);
            try {
                i = (iArr[(i >>> 1) % N] / i);
                i17 = (iArr[(i >>> 1) % N] % i);
                i = (i17 / iArr[(Test0540.iFld >>> 1) % N]);
            } catch (ArithmeticException a_e) {
            }
            for (i18 = 1; i18 < 4; i18++) {
                Test0540.iFld &= (int) Test0540.instanceCount;
                by -= (byte) -111.751F;
                i19 += (int) (-78.1021F + (i18 * i18));
                i17 += i19;
            }
            for (i20 = 1; i20 < 4; i20++) {
                for (i22 = 1; i22 < 2; ++i22) {
                    Test0540.iFld += i18;
                    fArr[i20] += i23;
                    Test0540.bFld = Test0540.bFld;
                    Test0540.lArrFld = Test0540.lArrFld;
                }
            }
        }
        vMeth_check_sum += by + i17 + i18 + i19 + i20 + i21 + i22 + i23 + FuzzerUtils.checkSum(iArr) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void main(String[] strArr) {

        try {
            Test0540 _instance = new Test0540();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        long l1 = 3L;
        int i24 = 9, i25 = -25, i26 = 15435, i27 = -12, i28 = -74;
        short s = -25601;
        double d2 = -1.100566;
        double[][] dArr = new double[N][N];
        float f2 = 3.925F;

        FuzzerUtils.init(dArr, 1.23021);

        vMeth(Test0540.byFld);
        Test0540.instanceCount *= Test0540.iFld;
        for (l1 = 14; 378 > l1; l1++) {
            switch ((int) (((l1 % 5) * 5) + 82)) {
                case 93:
                    Test0540.iFld += (int) (l1 - s);
                    switch ((int) (((l1 % 6) * 5) + 27)) {
                        case 30:
                            for (i25 = 2; i25 < 69; i25++) {
                                switch ((int) ((l1 % 6) + 27)) {
                                    case 27:
                                        i26 += i25;
                                        for (d2 = 1; d2 < 2; d2++) {
                                            dFld += Test0540.iFld;
                                        }
                                        if (Test0540.bFld) continue;
                                        i28 = 2;
                                        do {
                                            iArrFld[i28] = iArrFld[i25];
                                            dFld = 118.855F;
                                            if (Test0540.bFld) break;
                                            Test0540.instanceCount *= (long) f2;
                                        } while (--i28 > 0);
                                        break;
                                    case 28:
                                    case 29:
                                        Test0540.iFld -= 10;
                                        i24 >>>= i25;
                                        Test0540.instanceCount >>= -11;
                                        break;
                                    case 30:
                                        i27 = 243;
                                        break;
                                    case 31:
                                        iArrFld[i25][(int) (l1)] = -219;
                                        dArr[(int) (l1 + 1)][(int) (l1 - 1)] = Test0540.iFld;
                                        i24 = (int) d2;
                                        iArrFld[i25][(int) (l1 + 1)] = Test0540.iFld;
                                        break;
                                    case 32:
                                        i24 += i24;
                                        iArrFld[(int) (l1 - 1)][(int) (l1)] *= i28;
                                        Test0540.instanceCount = Test0540.iFld;
                                        i24 -= (int) Test0540.instanceCount;
                                        break;
                                }
                                i26 = (int) Test0540.instanceCount;
                            }
                            break;
                        case 35:
                            iArrFld[(int) (l1 + 1)][(int) (l1 + 1)] = i27;
                            break;
                        case 41:
                            i24 <<= s;
                        case 50:
                            i27 = Test0540.iFld;
                            break;
                        case 42:
                            i27 %= (int) (i27 | 1);
                        case 34:
                            s = (short) i27;
                            break;
                        default:
                            i27 += (int) (l1 - i28);
                    }
                    break;
                case 92:
                    i24 *= i28;
                    break;
                case 96:
                    i26 &= i27;
                    break;
                case 84:
                    s -= (short) i24;
                case 99:
                default:
                    i24 += s;
            }
        }

        FuzzerUtils.out.println("l1 i24 s = " + l1 + "," + i24 + "," + s);
        FuzzerUtils.out.println("i25 i26 d2 = " + i25 + "," + i26 + "," + Double.doubleToLongBits(d2));
        FuzzerUtils.out.println("i27 i28 f2 = " + i27 + "," + i28 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("dArr = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0540.instanceCount Test0540.iFld Test0540.bFld = " + Test0540.instanceCount + "," + Test0540.iFld +
                "," + (Test0540.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0540.byFld dFld Test0540.lArrFld = " + Test0540.byFld + "," + Double.doubleToLongBits(dFld) +
                "," + FuzzerUtils.checkSum(Test0540.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
