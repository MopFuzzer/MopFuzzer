// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test0594 {

    public static final int N = 400;

    public static volatile long instanceCount = 16604L;
    public static short sFld = -2343;
    public static int iFld = -4;
    public static float[] fArrFld = new float[N];
    public static int[] iArrFld = new int[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0594.fArrFld, 0.991F);
        FuzzerUtils.init(Test0594.iArrFld, 249);
    }

    public byte byFld = 68;

    public static void vMeth2(double d, int i4) {

        int i5 = -4102, i6 = -54745, i7 = -61, i8 = 14, i9 = 31175, i10 = -12, i11 = 141, i12 = 4;
        float f = 82.812F;
        boolean b = false;

        for (i5 = 7; i5 < 159; i5++) {
            byte by = -121;
            by *= (byte) 66.812F;
            for (i7 = 10; i7 > 1; i7 -= 3) {
                Test0594.fArrFld[i5] -= -41L;
            }
            i4 >>>= 33;
            for (i9 = 1; i9 < 10; i9++) {
                Test0594.iArrFld = Test0594.iArrFld;
                for (i11 = 1; i11 < 2; i11++) {
                    Test0594.iArrFld[i11] = (int) Test0594.instanceCount;
                    i4 += (((i11 * i9) + Test0594.sFld) - i8);
                    i6 = i9;
                    f += by;
                    if (b) {
                        f += (i11 * i11);
                        i4 += (i11 ^ Test0594.instanceCount);
                    } else {
                        if (b) continue;
                    }
                }
            }
        }
        vMeth2_check_sum += Double.doubleToLongBits(d) + i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 +
                Float.floatToIntBits(f) + (b ? 1 : 0);
    }

    public static void vMeth1() {

        double d1 = -35.114348;
        double d3 = -124.90603;
        double[] dArr = new double[N];
        int i13 = -29820, i14 = -143, i16 = 46, i17 = -64326, i18 = -10, i19 = -10764;
        boolean b1 = false;
        byte[] byArr = new byte[N];

        FuzzerUtils.init(dArr, -55.29181);
        FuzzerUtils.init(byArr, (byte) 90);

        vMeth2(d1, Test0594.iFld);
        for (i13 = 215; i13 > 10; i13--) {
            i14 = (int) Test0594.instanceCount;
        }
        i16 = 1;
        while (++i16 < 210) {
            i14 = i13;
            i14 >>= (int) -7832372577098145703L;
        }
        i14 *= i13;
        Test0594.iFld = (int) Test0594.instanceCount;
        Test0594.iArrFld[(i16 >>> 1) % N] = i16;
        for (i17 = 6; 214 > i17; i17++) {
            for (d3 = i17; d3 < 8; d3++) {
                Test0594.fArrFld[(int) (d3)] += i19;
                byArr = byArr;
                Test0594.iArrFld = Test0594.iArrFld;
                if (b1) continue;
            }
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + i13 + i14 + i16 + i17 + i18 + Double.doubleToLongBits(d3) +
                i19 + (b1 ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(byArr);
    }

    public static void vMeth(long l, int i, int i1) {

        int i2 = -167, i3 = 95, i20 = 8819, i21 = 13, i22 = -35525, i23 = 46;
        float f1 = 36.782F;
        byte by1 = -29;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, -8403903118136892410L);

        if (true) {
            l = (long) Math.sqrt((i1 >>>= -44244) + (--i1));
            for (i2 = 2; 288 > i2; i2++) {
                vMeth1();
                for (i20 = 1; i20 < 6; ++i20) {
                    i = (int) f1;
                }
                switch ((i2 % 1) + 38) {
                    case 38:
                        for (i22 = 1; i22 < 6; i22++) {
                            by1 /= (byte) (i | 1);
                            i3 += i21;
                            lArr[i2 - 1] = i21;
                        }
                        i1 = i;
                        break;
                }
                i3 <<= i3;
                Test0594.instanceCount -= l;
                Test0594.iArrFld[i2] = -6;
            }
        }
        vMeth_check_sum += l + i + i1 + i2 + i3 + i20 + i21 + Float.floatToIntBits(f1) + i22 + i23 + by1 +
                FuzzerUtils.checkSum(lArr);
    }

    public static void main(String[] strArr) {

        try {
            Test0594 _instance = new Test0594();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i24 = 37622;
        int i25 = -3;
        int i26 = 38894;
        int i27 = 57742;
        int i28 = -10;
        int i29 = -27078;
        int[] iArr = new int[N];
        float f2 = 6.716F;
        boolean b2 = false;
        double d4 = 36.25387;
        long l1 = -171L;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(iArr, 5);
        FuzzerUtils.init(lArr1, 13L);

        vMeth(-179L, Test0594.iFld, Test0594.iFld);
        for (i24 = 7; i24 < 355; ++i24) {
            Test0594.fArrFld[i24 - 1] -= f2;
            f2 += i24;
            b2 = b2;
        }
        Test0594.instanceCount &= Test0594.iFld;
        Test0594.iArrFld[(Test0594.iFld >>> 1) % N] = (int) d4;
        Test0594.iFld /= (int) (Test0594.instanceCount | 1);
        for (i26 = 385; 22 < i26; --i26) {
            Test0594.iArrFld[i26 + 1] = i25;
            Test0594.instanceCount = (long) f2;
            i25 += i26;
            byFld *= (byte) Test0594.instanceCount;
            for (i28 = 2; 69 > i28; ++i28) {
                Test0594.iArrFld[i26] -= i26;
                l1 = 1;
                while (++l1 < 2) {
                    try {
                        Test0594.iArrFld[i26 + 1] = (i24 / -164);
                        Test0594.iArrFld[i26 - 1] = (188 % Test0594.iArrFld[(int) (l1 + 1)]);
                        Test0594.iArrFld[(int) (l1)] = (i28 / i26);
                    } catch (ArithmeticException a_e) {
                    }
                    f2 -= Test0594.instanceCount;
                    Test0594.iFld *= i25;
                    if (false) break;
                    d4 = 7897;
                    Test0594.sFld -= (short) Test0594.instanceCount;
                    iArr = iArr;
                }
                i25 = i28;
                lArr1[i28] = (long) f2;
                Test0594.iFld >>= i25;
                i25 += i25;
                d4 = 1.75056;
                Test0594.instanceCount += (((i28 * i25) + Test0594.sFld) - i28);
            }
            i29 <<= (int) Test0594.instanceCount;
        }

        FuzzerUtils.out.println("i24 i25 f2 = " + i24 + "," + i25 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("b2 d4 i26 = " + (b2 ? 1 : 0) + "," + Double.doubleToLongBits(d4) + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("l1 iArr lArr1 = " + l1 + "," + FuzzerUtils.checkSum(iArr) + "," +
                FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0594.instanceCount Test0594.sFld Test0594.iFld = " + Test0594.instanceCount + "," + Test0594.sFld +
                "," + Test0594.iFld);
        FuzzerUtils.out.println("byFld Test0594.fArrFld Test0594.iArrFld = " + byFld + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0594.fArrFld)) + "," + FuzzerUtils.checkSum(Test0594.iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
