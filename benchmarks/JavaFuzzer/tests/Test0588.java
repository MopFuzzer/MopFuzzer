// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:08 2023
public class Test0588 {

    public static final int N = 400;

    public static long instanceCount = 8303591064816754865L;
    public static int iFld = 15958;
    public static short sFld = -29246;
    public static byte byFld = -121;
    public static double dFld = 0.128785;
    public static float[][] fArrFld = new float[N][N];
    public static double[] dArrFld = new double[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    static {
        FuzzerUtils.init(Test0588.fArrFld, 1.309F);
        FuzzerUtils.init(Test0588.dArrFld, -88.32310);
    }

    public boolean bFld = true;
    public int[] iArrFld = new int[N];

    public static void vMeth2(long l1) {

        int i1 = 66;
        int i2 = 11365;
        int i3 = -5;
        int i4 = 16692;
        int[] iArr = new int[N];
        long[] lArr = new long[N];

        FuzzerUtils.init(iArr, 13);
        FuzzerUtils.init(lArr, 5857783035676986734L);

        i1 = 1;
        do {
            try {
                iArr[i1] = (i1 % 101);
                i2 = (i1 % 12218);
                i2 = (i2 / i2);
            } catch (ArithmeticException a_e) {
            }
            i2 += i2;
            i2 = (int) l1;
            lArr[i1 - 1] -= i2;
            for (i3 = 1; i3 < 10; ++i3) {
                i4 *= (int) Test0588.instanceCount;
                i2 = (int) Test0588.instanceCount;
                iArr[(i4 >>> 1) % N] = i2;
                Test0588.instanceCount = i3;
                l1 = i4;
                i4 *= i3;
                i4 = -3;
                i4 = i1;
                i4 = -14;
            }
        } while (++i1 < 152);
        vMeth2_check_sum += l1 + i1 + i2 + i3 + i4 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
    }

    public static void vMeth1() {

        float f = -119.1012F;
        byte by = -27;
        int[] iArr1 = new int[N];

        FuzzerUtils.init(iArr1, 0);

        vMeth2(Test0588.instanceCount);
        iArr1[(Test0588.iFld >>> 1) % N] = Test0588.iFld;
        Test0588.instanceCount = Test0588.instanceCount;
        Test0588.iFld = Test0588.iFld;
        Test0588.instanceCount += Test0588.iFld;
        Test0588.iFld += Test0588.iFld;
        Test0588.iFld >>>= Test0588.sFld;
        Test0588.fArrFld[(-46746 >>> 1) % N][(Test0588.iFld >>> 1) % N] += Test0588.sFld;
        f = Test0588.instanceCount;
        Test0588.iFld = Test0588.iFld;
        Test0588.byFld *= (byte) 2.118632;
        by = (byte) Test0588.iFld;
        Test0588.byFld = (byte) Test0588.iFld;
        iArr1 = iArr1;
        vMeth1_check_sum += Float.floatToIntBits(f) + by + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(long l, int i) {

        double d = -1.29608;
        int i5 = -204;
        int i6 = 60738;
        int i7 = 50873;
        int i8 = -179;
        int i9 = -57749;
        int i10 = 102;
        int i11 = -9390;
        int i12 = -9;
        int i13 = 11593;
        int[] iArr2 = new int[N];
        float f1 = 20.1013F;

        FuzzerUtils.init(iArr2, 37786);

        vMeth1();
        d = Test0588.iFld;
        i5 = 1;
        while ((i5 += 3) < 228) {
            for (i6 = 1; i6 < 20; i6++) {
                f1 += (i6 - i6);
                for (i8 = 1; i8 < 2; ++i8) {
                    Test0588.iFld += i9;
                }
                i9 += (i6 * i6);
                try {
                    i = (i8 % iArr2[i5 + 1]);
                    i = (57 % i8);
                    i = (iArr2[i5 + 1] / iArr2[i6 - 1]);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        for (i10 = 9; 302 > i10; i10++) {
            l += (-4 + (i10 * i10));
            Test0588.instanceCount -= (long) f1;
            for (i12 = 1; i12 < 6; ++i12) {
                l -= l;
                try {
                    iArr2[i12 + 1] = (-105 / i6);
                    i7 = (1382528092 % iArr2[i12 - 1]);
                    i11 = (i8 / -1770215120);
                } catch (ArithmeticException a_e) {
                }
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i5 + i6 + i7 + Float.floatToIntBits(f1) + i8 + i9 + i10
                + i11 + i12 + i13 + FuzzerUtils.checkSum(iArr2);
    }

    public static void main(String[] strArr) {

        try {
            Test0588 _instance = new Test0588();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        double d1 = 0.5993;
        int i14 = -23736, i15 = 240, i16 = -124, i17 = -34471, i18 = 3, i19 = 139, i20 = 4, i21 = -29033;
        float f2 = 0.95F;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, -3216827387L);

        vMeth(Test0588.instanceCount, Test0588.iFld);
        for (d1 = 268; d1 > 1; d1--) {
            Test0588.iFld += (int) d1;
            for (f2 = 4; f2 < 94; f2++) {
                i15 += (int) f2;
                i16 = 1;
                do {
                    i15 *= Test0588.byFld;
                } while (++i16 < 2);
                switch ((int) (((d1 % 2) * 5) + 59)) {
                    case 63:
                        for (i17 = 1; i17 < 2; i17++) {
                            Test0588.iFld += (i17 * i17);
                            Test0588.dArrFld = Test0588.dArrFld;
                            Test0588.dFld -= Test0588.instanceCount;
                            Test0588.dArrFld[(int) (f2 + 1)] += Test0588.instanceCount;
                            Test0588.fArrFld[(int) (f2 - 1)][(int) (f2)] *= f2;
                            Test0588.iFld *= (int) Test0588.instanceCount;
                            i18 = -29434;
                            iArrFld[(int) (f2)] = i15;
                            if (bFld) continue;
                            lArr1[i17] = i17;
                        }
                        if (bFld) break;
                        break;
                    case 61:
                        Test0588.instanceCount += (long) f2;
                        iArrFld = iArrFld;
                        i14 *= (int) f2;
                    default:
                        iArrFld[(int) (f2 + 1)] = -63;
                        Test0588.instanceCount >>= -87L;
                        iArrFld[(int) (f2)] += (int) -123.7F;
                }
            }
            for (i19 = (int) (d1); i19 < 94; i19++) {
                i21 = 1;
                while (++i21 < 1) {
                    Test0588.instanceCount += (((i21 * i16) + i19) - f2);
                    i14 += (i21 * i21);
                }
            }
        }

        FuzzerUtils.out.println("d1 i14 f2 = " + Double.doubleToLongBits(d1) + "," + i14 + "," +
                Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 lArr1 = " + i21 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0588.instanceCount Test0588.iFld Test0588.sFld = " + Test0588.instanceCount + "," + Test0588.iFld +
                "," + Test0588.sFld);
        FuzzerUtils.out.println("Test0588.byFld Test0588.dFld bFld = " + Test0588.byFld + "," + Double.doubleToLongBits(Test0588.dFld)
                + "," + (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test0588.fArrFld Test0588.dArrFld iArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0588.fArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0588.dArrFld)) + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
