// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test0069 {

    public static final int N = 400;

    public static long instanceCount = -1438295631L;
    public static int iFld = -10;
    public static float[] fArrFld = new float[N];
    public static double[][] dArrFld = new double[N][N];
    public static byte[] byArrFld = new byte[N];
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long dMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0069.fArrFld, 34.861F);
        FuzzerUtils.init(Test0069.dArrFld, 1.54743);
        FuzzerUtils.init(Test0069.byArrFld, (byte) 63);
    }

    public byte byFld = 67;
    public volatile long[] lArrFld = new long[N];

    public static double dMeth(int i6, double d1) {

        int i7 = -64850, i8 = -98, i9 = 86, i10 = -58801, i11 = 22258, i12 = 42117;
        boolean b = false;
        byte by1 = 12;

        Test0069.fArrFld = FuzzerUtils.float1array(N, (float) -58.757F);
        for (i7 = 2; i7 < 283; i7++) {
            Test0069.iFld = i7;
            b = b;
            if (i6 != 0) {
            }
            Test0069.instanceCount = i6;
            d1 = 60.583F;
            Test0069.instanceCount >>= Test0069.instanceCount;
            for (i9 = i7; i9 < 6; i9++) {
                for (i11 = i9; i11 < 1; i11++) {
                    i8 = (int) 1.29406;
                    Test0069.instanceCount -= Test0069.instanceCount;
                    i8 = -48602;
                    by1 = (byte) -13L;
                    by1 = (byte) 197;
                }
            }
        }
        long meth_res = i6 + Double.doubleToLongBits(d1) + i7 + i8 + (b ? 1 : 0) + i9 + i10 + i11 + i12 + by1;
        dMeth_check_sum += meth_res;
        return (double) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0069 _instance = new Test0069();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void vMeth1(float f, long l, float f1) {

        int i4 = 28;
        int i5 = -4;
        int i13 = 184;
        int i14 = 25177;
        int[] iArr1 = new int[N];
        double d2 = 39.83753;
        float f2 = -2.686F;
        boolean b1 = false;

        FuzzerUtils.init(iArr1, 7);

        for (i4 = 1; i4 < 314; ++i4) {
            byte by2 = -119;
            i5 -= (int) (dMeth(Test0069.iFld, d2) - i4);
            Test0069.iFld -= (int) d2;
            by2 = (byte) i5;
            try {
                i5 = (Test0069.iFld / i5);
                Test0069.iFld = (1320356510 / i4);
                i5 = (i4 % -160);
            } catch (ArithmeticException a_e) {
            }
            f2 = 5;
            do {
                switch (((i4 % 6) * 5) + 15) {
                    case 22:
                        Test0069.iFld = i4;
                        iArr1[(int) (f2 + 1)] -= Test0069.iFld;
                        iArr1[(int) (f2)] >>= (int) Test0069.instanceCount;
                        iArr1[i4 - 1] = (int) 13L;
                        break;
                    case 18:
                        for (i13 = 1; 2 > i13; ++i13) {
                            iArr1[i13 - 1] *= i14;
                            l *= i4;
                            b1 = b1;
                        }
                    case 40:
                        f1 = (float) d2;
                        break;
                    case 32:
                    case 19:
                        iArr1[i4] = i4;
                        break;
                    case 41:
                        iArr1 = FuzzerUtils.int1array(N, (int) 112);
                        break;
                }
            } while ((f2 -= 2) > 0);
        }
        vMeth1_check_sum += Float.floatToIntBits(f) + l + Float.floatToIntBits(f1) + i4 + i5 +
                Double.doubleToLongBits(d2) + Float.floatToIntBits(f2) + i13 + i14 + (b1 ? 1 : 0) +
                FuzzerUtils.checkSum(iArr1);
    }

    public void vMeth(int i1, int i2) {

        int i3 = -23;
        int[][] iArr2 = new int[N][N];
        float f3 = 2.583F;
        byte by3 = 101;
        boolean b2 = false;
        long[] lArr = new long[N];

        FuzzerUtils.init(iArr2, -5);
        FuzzerUtils.init(lArr, -7L);

        i3 = 1;
        while (++i3 < 372) {
            Test0069.dArrFld[i3] = (Test0069.dArrFld[i3 - 1] = (Test0069.dArrFld[i3 + 1] = (Test0069.dArrFld[i3] = Test0069.dArrFld[i3])));
            vMeth1(f3, Test0069.instanceCount, 0.771F);
            by3 += (byte) (-22150 + (i3 * i3));
            f3 -= i2;
            iArr2[i3 + 1][i3 - 1] += 39757;
            switch (((i3 % 3) * 5) + 51) {
                case 56:
                    Test0069.iFld += (i3 - Test0069.instanceCount);
                    iArr2[i3 + 1][i3] = i3;
                    break;
                case 52:
                    if (b2) {
                        switch ((i3 % 9) + 82) {
                            case 82:
                                Test0069.iFld += (int) Test0069.instanceCount;
                                break;
                            case 83:
                                lArr[i3 - 1] = byFld;
                                Test0069.byArrFld[i3] += (byte) Test0069.iFld;
                                try {
                                    i1 = (-61 % i1);
                                    Test0069.iFld = (i3 / -60);
                                    Test0069.iFld = (i2 % -190347516);
                                } catch (ArithmeticException a_e) {
                                }
                                break;
                            case 84:
                                f3 -= i1;
                            case 85:
                                f3 += Test0069.instanceCount;
                            case 86:
                                i1 = i1;
                                break;
                            case 87:
                                iArr2[i3][i3 + 1] += (int) Test0069.instanceCount;
                                break;
                            case 88:
                                i1 -= i3;
                                break;
                            case 89:
                                try {
                                    i1 = (-7880 / i1);
                                    iArr2[i3][i3 - 1] = (-35 / i1);
                                    i2 = (i3 % iArr2[i3 + 1][i3 + 1]);
                                } catch (ArithmeticException a_e) {
                                }
                                break;
                            case 90:
                                f3 += (i3 * i3);
                                break;
                        }
                    }
                    break;
                case 62:
                    Test0069.instanceCount = (long) f3;
                    break;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f3) + by3 + (b2 ? 1 : 0) + FuzzerUtils.checkSum(iArr2) +
                FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        double d = 2.115928, d3 = 1.112914;
        int i = 59659;
        int i15 = -14958;
        int i16 = -4143;
        int i17 = 14;
        int i18 = 250;
        int i19 = -139;
        int i20 = 5;
        int i21 = 13192;
        int[] iArr = new int[N];
        int[] iArr3 = new
                int[N];
        byte by = 19;
        float f4 = 0.407F;

        FuzzerUtils.init(iArr, -8839);
        FuzzerUtils.init(iArr3, -45977);

        Test0069.instanceCount = (long) (((Test0069.instanceCount - d) * (i - -4)) + ((-158L - iArr[(-28 >>> 1) % N]) * (by++)));
        Test0069.fArrFld = (Test0069.fArrFld = (Test0069.fArrFld = (Test0069.fArrFld = Test0069.fArrFld)));
        vMeth(Test0069.iFld, i);
        for (d3 = 15; d3 < 342; d3++) {
            Test0069.instanceCount >>>= Test0069.instanceCount;
        }
        d += i15;
        for (i16 = 16; 367 > i16; ++i16) {
            f4 += (((i16 * Test0069.instanceCount) + i) - Test0069.instanceCount);
            for (i18 = 1; i18 < 72; ++i18) {
                lArrFld[i18] = i;
                i15 &= i15;
                i17 = (int) f4;
                i19 = i18;
                Test0069.iFld -= (int) f4;
                iArr3[i16] >>= i16;
                for (i20 = 1; i20 < 2; i20++) {
                    i19 += i17;
                    f4 -= i15;
                    iArr3[i16 - 1] = (int) Test0069.instanceCount;
                    i += Test0069.iFld;
                    d = 14L;
                    i21 |= i19;
                    i21 = -57192;
                    d -= Test0069.iFld;
                    d = i21;
                    i15 += 49542;
                }
                iArr3 = iArr3;
                Test0069.iFld <<= -24;
                i17 <<= i17;
            }
            i17 %= (int) (i17 | 1);
        }

        FuzzerUtils.out.println("d i by = " + Double.doubleToLongBits(d) + "," + i + "," + by);
        FuzzerUtils.out.println("d3 i15 i16 = " + Double.doubleToLongBits(d3) + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 f4 i18 = " + i17 + "," + Float.floatToIntBits(f4) + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("iArr iArr3 = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test0069.instanceCount Test0069.iFld byFld = " + Test0069.instanceCount + "," + Test0069.iFld + "," +
                byFld);
        FuzzerUtils.out.println("Test0069.fArrFld Test0069.dArrFld Test0069.byArrFld = " +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0069.fArrFld)) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(Test0069.dArrFld)) + "," + FuzzerUtils.checkSum(Test0069.byArrFld));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  dMeth ->  dMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
