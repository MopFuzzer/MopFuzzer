// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:10 2023
public class Test0668 {

    public static final int N = 400;

    public static long instanceCount = 14L;
    public static volatile int iFld = -3;
    public static long lFld = -3L;
    public static boolean bFld = false;
    public static volatile int[] iArrFld = new int[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0668.iArrFld, -6);
    }

    public byte byFld = 124;
    public short sFld = 29804;
    public long[] lArrFld = new long[N];

    public static void vMeth1(int i11, int i12) {

        int i13 = 38494, i14 = 5, i15 = -26162, i16 = 11672;
        double d1 = 121.46924;
        boolean b = true;
        short[] sArr = new short[N];
        float[] fArr = new float[N];

        FuzzerUtils.init(sArr, (short) 13713);
        FuzzerUtils.init(fArr, -2.208F);

        if (b) {
            i11 = i11;
            if (b) {
                sArr[(i12 >>> 1) % N] = (short) 78;
                for (i13 = 7; i13 < 341; ++i13) {
                    if (false) continue;
                    i11 <<= i12;
                    Test0668.instanceCount += i13;
                    fArr[i13] -= 41;
                    for (i15 = 1; 5 > i15; ++i15) {
                        i14 += (int) d1;
                        i12 = i16;
                        if (i14 != 0) {
                            vMeth1_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + (b ?
                                    1 : 0) + FuzzerUtils.checkSum(sArr) +
                                    Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
                            return;
                        }
                        if (b) continue;
                    }
                    i14 += (i13 ^ Test0668.instanceCount);
                }
            }
        } else {
            i12 <<= Test0668.iFld;
        }
        vMeth1_check_sum += i11 + i12 + i13 + i14 + i15 + i16 + Double.doubleToLongBits(d1) + (b ? 1 : 0) +
                FuzzerUtils.checkSum(sArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static void vMeth(float f1) {

        int i6 = -238, i7 = 15595, i8 = 210, i9 = 17245, i10 = -93;
        short s = 13916;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 5784509797049271784L);

        for (i6 = 7; i6 < 364; ++i6) {
            i8 = 5;
            do {
                Test0668.instanceCount += (((i8 * i7) + Test0668.instanceCount) - Test0668.instanceCount);
                for (i9 = 1; i9 < 1; i9++) {
                    f1 += i8;
                    Test0668.instanceCount *= i10;
                    i10 -= i9;
                    f1 += (i9 + i8);
                    f1 += ((--i10) - (--i7));
                    switch ((((i7 + i10) >>> 1) % 7) + 39) {
                        case 39:
                            i7 -= (int) Test0668.instanceCount;
                            vMeth1(-7, 14994);
                            Test0668.iArrFld[i9 - 1] = (int) Test0668.instanceCount;
                            break;
                        case 40:
                            s >>= (short) i8;
                            i10 <<= i8;
                            break;
                        case 41:
                            Test0668.lFld = i10;
                            break;
                        case 42:
                            i10 += i10;
                            break;
                        case 43:
                            i7 = (int) 8334665508596737751L;
                            break;
                        case 44:
                            i10 += (i9 * i9);
                            break;
                        case 45:
                            Test0668.bFld = false;
                        default:
                            lArr[(i6 >>> 1) % N] <<= i9;
                    }
                }
            } while (--i8 > 0);
        }
        vMeth_check_sum += Float.floatToIntBits(f1) + i6 + i7 + i8 + i9 + i10 + s + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth() {

        int i5 = -238, i17 = -20542, i18 = 3239, i19 = 251, i20 = 60229, i21 = -5;
        byte by = 15;

        Test0668.instanceCount += i5;
        vMeth(-2.649F);
        Test0668.iFld = (int) Test0668.instanceCount;
        i17 = 1;
        do {
            i18 = 5;
            do {
                if (i18 != 0) {
                }
                Test0668.iFld = i5;
                for (i19 = 1; i19 < 1; ++i19) {
                    Test0668.instanceCount += i19;
                    i20 -= by;
                    try {
                        i5 = (Test0668.iArrFld[i19] / Test0668.iArrFld[i17 + 1]);
                        Test0668.iArrFld[i19 + 1] = (193 % i5);
                        i5 = (Test0668.iArrFld[i18] / 198);
                    } catch (ArithmeticException a_e) {
                    }
                    i5 += i20;
                    if (Test0668.bFld) break;
                    Test0668.iArrFld = Test0668.iArrFld;
                    i20 = i21;
                }
            } while (--i18 > 0);
        } while (++i17 < 312);
        long meth_res = i5 + i17 + i18 + i19 + i20 + by + i21;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0668 _instance = new Test0668();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -61027, i1 = 11, i2 = 0, i3 = -246, i4 = 5, i22 = 253, i23 = -247, i24 = 13784;
        float f = 0.842F;
        float[] fArr1 = new float[N];
        long l = 2443633920L;
        double d2 = 0.113233;

        FuzzerUtils.init(fArr1, 112.18F);

        i = Test0668.iArrFld[(i >>> 1) % N];
        lArrFld[(i >>> 1) % N] >>>= (i ^ (long) ((i + i) + (0.854F - i)));
        for (i1 = 238; i1 > 14; --i1) {
            switch (((((int) (f * 3)) >>> 1) % 10) + 30) {
                case 30:
                    for (i3 = 3; i3 < 112; ++i3) {
                        double d = 0.94820;
                        d = ((i4 = (i2 + i2)) - (++i));
                        f = (((--i4) + iMeth()) << Test0668.instanceCount);
                        byFld ^= byFld;
                        Test0668.instanceCount += i3;
                        Test0668.iFld = (int) -62.889F;
                        Test0668.iFld = i4;
                        Test0668.iArrFld[i1 - 1] -= Test0668.iFld;
                        i2 = i3;
                        Test0668.instanceCount -= -35349L;
                        Test0668.lFld += (((i3 * Test0668.instanceCount) + i4) - i);
                    }
                    for (i22 = 2; i22 < 112; i22++) {
                        switch ((i22 % 1) + 45) {
                            case 45:
                                for (l = 1; l < 2; l++) {
                                    if (Test0668.bFld) continue;
                                    i4 = i;
                                }
                                Test0668.lFld += (i22 * i22);
                                break;
                            default:
                                fArr1[i1 - 1] = Test0668.iFld;
                        }
                        Test0668.iFld = (int) l;
                        Test0668.iArrFld[i22 + 1] = i3;
                        lArrFld = lArrFld;
                        Test0668.iArrFld[i1] = Test0668.iFld;
                        if (Test0668.bFld) {
                            i24 &= Test0668.iFld;
                            i23 = (int) Test0668.lFld;
                        }
                        i4 += (i22 | i24);
                    }
                case 31:
                    byFld += (byte) (i1 * i1);
                    break;
                case 32:
                    Test0668.iFld = Test0668.iFld;
                    break;
                case 33:
                    Test0668.iArrFld[i1 + 1] = i3;
                case 34:
                    i >>= -13477;
                    break;
                case 35:
                    Test0668.lFld += i24;
                    break;
                case 36:
                    f = f;
                case 37:
                    d2 -= i3;
                    break;
                case 38:
                    try {
                        i4 = (853247076 / i4);
                        i23 = (Test0668.iArrFld[i1 + 1] % i22);
                        i = (-1173442368 % i3);
                    } catch (ArithmeticException a_e) {
                    }
                    break;
                case 39:
                    i4 = sFld;
                    break;
                default:
                    Test0668.lFld = 233;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("f i3 i4 = " + Float.floatToIntBits(f) + "," + i3 + "," + i4);
        FuzzerUtils.out.println("i22 i23 l = " + i22 + "," + i23 + "," + l);
        FuzzerUtils.out.println("i24 d2 fArr1 = " + i24 + "," + Double.doubleToLongBits(d2) + "," +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test0668.instanceCount Test0668.iFld Test0668.lFld = " + Test0668.instanceCount + "," + Test0668.iFld +
                "," + Test0668.lFld);
        FuzzerUtils.out.println("Test0668.bFld byFld sFld = " + (Test0668.bFld ? 1 : 0) + "," + byFld + "," + sFld);
        FuzzerUtils.out.println("Test0668.iArrFld lArrFld = " + FuzzerUtils.checkSum(Test0668.iArrFld) + "," +
                FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
