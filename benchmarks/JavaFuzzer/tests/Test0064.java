// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:52:54 2023
public class Test0064 {

    public static final int N = 400;

    public static long instanceCount = -12L;
    public static double dFld = -100.104041;
    public static boolean bFld = false;
    public static int[] iArrFld = new int[N];
    public static float[] fArrFld = new float[N];
    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0064.iArrFld, -33);
        FuzzerUtils.init(Test0064.fArrFld, -1.255F);
    }

    public short sFld = -20996;

    public static long lMeth(long l1) {

        int i7 = -2025;
        int i8 = -2;
        int i9 = -38523;
        int i10 = -27372;
        int i11 = 6;
        int[] iArr = new int[N];
        float f2 = -67.377F;

        FuzzerUtils.init(iArr, 127);

        i7 = 1;
        while (++i7 < 318) {
            for (i8 = 5; i8 > 1; i8--) {
                for (i10 = i7; i10 < 2; ++i10) {
                    switch (((-21055 >>> 1) % 2) + 99) {
                        case 99:
                            i11 = (int) Test0064.instanceCount;
                            i11 += (int) Test0064.dFld;
                            break;
                        case 100:
                            i11 >>>= -253;
                            break;
                        default:
                            i11 = i8;
                            i9 -= i10;
                            i11 += (i10 * i10);
                            i9 += i9;
                    }
                    i11 = i7;
                    if (i7 != 0) {
                    }
                    iArr[i7 + 1] -= i10;
                    f2 += -2;
                }
            }
        }
        long meth_res = l1 + i7 + i8 + i9 + i10 + i11 + Float.floatToIntBits(f2) + FuzzerUtils.checkSum(iArr);
        lMeth_check_sum += meth_res;
        return (long) meth_res;
    }

    public static int iMeth(float f1, long l) {

        int i5 = 28633, i6 = -217, i12 = -52419, i13 = 0, i14 = -61302, i15 = -71, i16 = -13, i17 = 179, i18 = 22581;
        short s1 = 12172;
        long[][] lArr = new long[N][N];

        FuzzerUtils.init(lArr, -9L);

        for (i5 = 17; i5 < 370; ++i5) {
            Test0064.dFld -= (++lArr[i5 - 1][i5 - 1]);
            i6 = (int) ((lMeth(Test0064.instanceCount) + f1) - 248);
            Test0064.instanceCount >>= i5;
            if (Test0064.bFld) continue;
        }
        for (i12 = 13; i12 < 252; i12++) {
            f1 += i6;
            f1 = l;
            i6 += (i12 - i5);
        }
        i14 = 1;
        do {
            if (Test0064.bFld) break;
            for (i15 = 1; i15 < 10; i15++) {
                for (i17 = 2; i17 > 1; i17 -= 3) {
                    Test0064.iArrFld[i17 + 1] += s1;
                    lArr[i15][i17] -= (long) f1;
                }
            }
        } while (++i14 < 161);
        long meth_res = Float.floatToIntBits(f1) + l + i5 + i6 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + s1 +
                FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(float f) {

        int i = 1;
        int i1 = 55062;
        int i2 = -25483;
        int i3 = 13;
        int i4 = -13;
        int[] iArr1 = new int[N];
        double d = -71.33251;
        boolean[][] bArr = new boolean[N][N];
        float[][] fArr = new float[N][N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 83.416F);
        FuzzerUtils.init(iArr1, -145);

        for (i = 3; 266 > i; ++i) {
            bArr[i][i] = ((i * Math.max(i1, i)) != (d++));
            i2 = 6;
            do {
                short s = 23693;
                s = s;
                for (i3 = 1; i3 > 1; --i3) {
                    switch ((i2 % 4) + 41) {
                        case 41:
                            f *= (iMeth(f, Test0064.instanceCount) + f);
                            if (true) break;
                        case 42:
                            Test0064.instanceCount = (long) f;
                            if (Test0064.bFld) continue;
                            i1 *= (int) Test0064.dFld;
                            break;
                        case 43:
                            fArr[i3 - 1][i] *= i1;
                            iArr1[i + 1] = (int) f;
                            d += i3;
                            break;
                        case 44:
                            i4 *= i;
                            break;
                    }
                }
            } while (--i2 > 0);
        }
        vMeth_check_sum += Float.floatToIntBits(f) + i + i1 + Double.doubleToLongBits(d) + i2 + i3 + i4 +
                FuzzerUtils.checkSum(bArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                FuzzerUtils.checkSum(iArr1);
    }

    public static void main(String[] strArr) {

        try {
            Test0064 _instance = new Test0064();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        float f3 = -90.428F, f4 = -101.279F;
        int i19 = 7, i20 = -190, i21 = 11, i22 = 13, i23 = -46841, i24 = 126, i25 = 54387, i26 = -711, i27 = -1, i28 = 250;
        byte by = -26;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, 14L);

        vMeth(f3);
        for (i19 = 2; 168 > i19; ++i19) {
            Test0064.iArrFld[i19 + 1] -= i19;
            i20 -= i20;
            for (f4 = 8; 151 > f4; f4++) {
                Test0064.iArrFld = FuzzerUtils.int1array(N, (int) -51414);
                lArr1[i19 + 1] = i21;
                Test0064.iArrFld[i19] -= i21;
                lArr1 = FuzzerUtils.long1array(N, (long) -9L);
            }
            i21 += i19;
            i20 = (int) Test0064.instanceCount;
        }
        f3 += i21;
        for (i22 = 17; i22 < 384; ++i22) {
            if (Test0064.bFld) {
                for (i24 = 3; 69 > i24; i24++) {
                    by += (byte) (i24 | (long) f4);
                    for (i26 = 1; i26 < 2; ++i26) {
                        i21 += i26;
                        Test0064.instanceCount += (long) f4;
                        Test0064.fArrFld[i24 - 1] = i24;
                        try {
                            i23 = (-7576 % i25);
                            i27 = (i27 % Test0064.iArrFld[i22 + 1]);
                            Test0064.iArrFld[i24] = (i23 % -58882);
                        } catch (ArithmeticException a_e) {
                        }
                        sFld = (short) i28;
                        Test0064.iArrFld[i26 + 1] = i21;
                        f3 += (((i26 * f4) + Test0064.instanceCount) - i20);
                    }
                    i27 -= i21;
                    i21 *= (int) Test0064.instanceCount;
                }
                i28 &= i21;
                i25 = i26;
                i25 += (int) f4;
            } else {
                i21 = -63387;
            }
        }

        FuzzerUtils.out.println("f3 i19 i20 = " + Float.floatToIntBits(f3) + "," + i19 + "," + i20);
        FuzzerUtils.out.println("f4 i21 i22 = " + Float.floatToIntBits(f4) + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("by i26 i27 = " + by + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 lArr1 = " + i28 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test0064.instanceCount Test0064.dFld Test0064.bFld = " + Test0064.instanceCount + "," +
                Double.doubleToLongBits(Test0064.dFld) + "," + (Test0064.bFld ? 1 : 0));
        FuzzerUtils.out.println("sFld Test0064.iArrFld Test0064.fArrFld = " + sFld + "," + FuzzerUtils.checkSum(Test0064.iArrFld) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test0064.fArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
