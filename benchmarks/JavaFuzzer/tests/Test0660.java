// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:09 2023
public class Test0660 {

    public static final int N = 400;

    public static long instanceCount = 6473830437361153823L;
    public static boolean bFld = false;
    public static byte byFld = -19;
    public static short sFld = -30587;
    public static int[][] iArrFld = new int[N][N];
    public static long bMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    static {
        FuzzerUtils.init(Test0660.iArrFld, 254);
    }

    public float[][] fArrFld = new float[N][N];
    public long[] lArrFld = new long[N];

    public static void vMeth(int i4) {

        int i5 = 13, i6 = -227, i7 = 1, i8 = 60361, i9 = -4, i10 = -62207, i11 = -23741, i12 = 25196;
        long[] lArr = new long[N];

        FuzzerUtils.init(lArr, 147L);

        for (i5 = 5; i5 < 175; i5++) {
            if (Test0660.bFld) break;
            for (i7 = 1; i7 < 9; ++i7) {
                i4 = (int) Test0660.instanceCount;
                for (i9 = 1; i9 < 2; i9++) {
                    if (Test0660.bFld) break;
                }
                switch ((i5 % 2) + 84) {
                    case 84:
                        for (i11 = 2; i11 > 1; i11 -= 3) {
                            float f = 2.790F;
                            f += i6;
                            lArr = lArr;
                            Test0660.byFld = (byte) i7;
                            i6 = i4;
                            Test0660.instanceCount = i11;
                            Test0660.instanceCount -= i9;
                        }
                        break;
                    case 85:
                        i10 -= i10;
                }
            }
        }
        vMeth_check_sum += i4 + i5 + i6 + i7 + i8 + i9 + i10 + i11 + i12 + FuzzerUtils.checkSum(lArr);
    }

    public static int iMeth(int i2, int i3) {

        float f1 = 22.98F;
        int i13 = 39807, i14 = 90, i15 = -7, i16 = 46262, i17 = 9;
        short s = 18011;
        double d1 = 1.57177;
        double[] dArr = new double[N];

        FuzzerUtils.init(dArr, -2.53528);

        if (Test0660.bFld) {
            vMeth(i2);
            f1 += i2;
        } else {
            i13 = 1;
            while (++i13 < 328) {
                s /= (short) (i2 | 1);
                f1 *= i13;
                switch ((i13 % 9) + 63) {
                    case 63:
                        i3 = (int) Test0660.instanceCount;
                        for (i14 = i13; i14 < 5; i14++) {
                            for (i16 = i13; i16 < 1; ++i16) {
                                i2 -= i15;
                                i15 -= (int) f1;
                                Test0660.instanceCount >>= -35786;
                                f1 += (float) d1;
                                i15 = i16;
                            }
                        }
                        break;
                    case 64:
                        i15 *= i3;
                        break;
                    case 65:
                        d1 += d1;
                        break;
                    case 66:
                        try {
                            i3 = (i14 % -80);
                            i15 = (Test0660.iArrFld[i13 + 1][i13 - 1] / -225);
                            i3 = (212 % i15);
                        } catch (ArithmeticException a_e) {
                        }
                        break;
                    case 67:
                        i15 += (((i13 * i14) + Test0660.instanceCount) - Test0660.instanceCount);
                    case 68:
                        i15 = i3;
                        break;
                    case 69:
                        if (false) break;
                        break;
                    case 70:
                        i17 = i3;
                        break;
                    case 71:
                        i2 += -50377;
                        break;
                }
            }
        }
        long meth_res = i2 + i3 + Float.floatToIntBits(f1) + i13 + s + i14 + i15 + i16 + i17 +
                Double.doubleToLongBits(d1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static boolean bMeth(int i1) {

        double d2 = -98.31006;
        int i18 = -13, i19 = -158, i20 = 43522, i21 = -13;
        short s1 = -15770;
        long l = -53L;
        long[] lArr1 = new long[N];

        FuzzerUtils.init(lArr1, 114L);

        Test0660.iArrFld[(i1 >>> 1) % N][(i1 >>> 1) % N] &= iMeth(i1, i1);
        d2 += -206;
        for (i18 = 11; i18 < 219; i18++) {
            lArr1[i18] += Test0660.instanceCount;
            for (i20 = 1; 8 > i20; i20 += 2) {
                Test0660.iArrFld[i18 + 1][i18 - 1] <<= 40;
                switch (((i20 % 9) * 5) + 27) {
                    case 29:
                        i1 = i20;
                        Test0660.iArrFld[i20 - 1][i18 - 1] += i1;
                        if (Test0660.bFld) {
                            Test0660.instanceCount = 0;
                        } else if (Test0660.bFld) {
                            i21 -= s1;
                            l = 1;
                            while (++l < 3) {
                                Test0660.iArrFld[(int) (l)][(int) (l + 1)] *= 61254;
                                Test0660.instanceCount = 11;
                            }
                        } else if (false) {
                            i1 -= i21;
                        } else {
                            s1 = (short) i19;
                            return ((int) (i1 + Double.doubleToLongBits(d2) + i18 + i19 + i20 + i21 + s1 + l +
                                    FuzzerUtils.checkSum(lArr1))) % 2 > 0;
                        }
                        break;
                    case 47:
                        i21 = (int) Test0660.instanceCount;
                        break;
                    case 36:
                        i21 = i21;
                        break;
                    case 32:
                        i21 <<= (int) 6714689171735557287L;
                        break;
                    case 53:
                        Test0660.instanceCount = i20;
                        break;
                    case 46:
                        lArr1[i18] = i19;
                    case 62:
                        i21 = i21;
                    case 34:
                        i21 >>= i18;
                        break;
                    case 72:
                        Test0660.instanceCount ^= i21;
                    default:
                        i1 <<= -4;
                }
            }
        }
        long meth_res = i1 + Double.doubleToLongBits(d2) + i18 + i19 + i20 + i21 + s1 + l + FuzzerUtils.checkSum(lArr1);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static void main(String[] strArr) {

        try {
            Test0660 _instance = new Test0660();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = 59926;
        int i22 = -147;
        int i23 = 14;
        int i24 = 8;
        int i25 = 129;
        int i26 = 2;
        int i28 = 60318;
        int i29 = -204;
        int i30 = -13;
        int[] iArr = new int[N];
        float f2 = 4.148F;
        double d3 = -83.5017;

        FuzzerUtils.init(iArr, -24);

        i = 1;
        while (++i < 299) {
            if (bMeth(i)) break;
            i22 = (int) f2;
            for (i23 = 2; 84 > i23; ++i23) {
                i24 = i;
                Test0660.instanceCount -= i22;
                for (i25 = 1; i25 < 2; i25++) {
                    i24 += (i25 - i22);
                    Test0660.iArrFld[i23 + 1][i] = i25;
                    fArrFld[i25 - 1][i25] *= i26;
                    Test0660.instanceCount = i24;
                    i24 += (int) d3;
                    fArrFld[i - 1][i25] += i23;
                    Test0660.instanceCount <<= i26;
                    Test0660.byFld = (byte) i24;
                }
                Test0660.instanceCount = (long) -100.38446;
                i26 >>= -192;
                i24 &= Test0660.byFld;
                i24 <<= -10;
                i26 = (int) d3;
                Test0660.instanceCount += Test0660.sFld;
            }
            i28 = 1;
            while (++i28 < 84) {
                if (false) {
                    i24 -= -79;
                    lArrFld[i + 1] = -398340463323601491L;
                }
                lArrFld = lArrFld;
                for (i29 = 1; i29 < 1; ++i29) {
                    i24 /= (int) (i29 | 1);
                    i30 = (int) d3;
                    iArr[i28 - 1] = i30;
                }
            }
        }

        FuzzerUtils.out.println("i i22 f2 = " + i + "," + i22 + "," + Float.floatToIntBits(f2));
        FuzzerUtils.out.println("i23 i24 i25 = " + i23 + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 d3 i28 = " + i26 + "," + Double.doubleToLongBits(d3) + "," + i28);
        FuzzerUtils.out.println("i29 i30 iArr = " + i29 + "," + i30 + "," + FuzzerUtils.checkSum(iArr));

        FuzzerUtils.out.println("Test0660.instanceCount Test0660.bFld Test0660.byFld = " + Test0660.instanceCount + "," + (Test0660.bFld ?
                1 : 0) + "," + Test0660.byFld);
        FuzzerUtils.out.println("Test0660.sFld Test0660.iArrFld fArrFld = " + Test0660.sFld + "," +
                FuzzerUtils.checkSum(Test0660.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));
        FuzzerUtils.out.println("lArrFld = " + FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  bMeth ->  bMeth mainTest
//DEBUG  iMeth ->  iMeth bMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth bMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
