// Generated by Java* Fuzzer test generator (1.0.001). Mon Jul  3 17:53:17 2023
public class Test0957 {

    public static final int N = 400;

    public static long instanceCount = -4388662433946727464L;
    public static int iFld = -21487;
    public static int iFld1 = -29919;
    public static volatile short sFld = -9934;
    public static float fFld = 0.831F;
    public static boolean bFld = true;
    public static int[] iArrFld = new int[N];
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    static {
        FuzzerUtils.init(Test0957.iArrFld, -51);
    }

    public byte byFld = 55;

    public static int iMeth1(int i3, int i4, int i5) {

        float f2 = -1.344F;
        float[] fArr1 = new float[N];
        int i6 = -44256, i7 = -50094, i8 = -9, i9 = -26069, i10 = -5;
        byte by = -103;
        boolean b = false;

        FuzzerUtils.init(fArr1, 0.583F);

        for (f2 = 137; f2 > 4; f2 -= 3) {
            for (i7 = 1; i7 < 35; ++i7) {
                Test0957.instanceCount = i7;
                i6 += (i7 ^ i5);
                i3 += (((i7 * Test0957.iFld1) + Test0957.iFld1) - i7);
                switch ((i7 % 2) + 13) {
                    case 13:
                        Test0957.iArrFld[(int) (f2)] = i8;
                        break;
                    case 14:
                        for (i9 = 2; i9 > 1; i9 -= 2) {
                            Test0957.sFld = by;
                            Test0957.instanceCount /= (by | 1);
                            Test0957.iFld1 &= (int) Test0957.instanceCount;
                            switch (((i9 % 4) * 5) + 104) {
                                case 120:
                                    if (b) break;
                                    if (b) break;
                                    i5 |= i9;
                                    break;
                                case 121:
                                    Test0957.iFld >>= i6;
                                    break;
                                case 114:
                                    Test0957.iFld *= i5;
                                    break;
                                case 111:
                                    Test0957.instanceCount *= i9;
                                    break;
                                default:
                                    fArr1[(int) (f2)] -= i6;
                            }
                        }
                        break;
                }
            }
        }
        long meth_res = i3 + i4 + i5 + Float.floatToIntBits(f2) + i6 + i7 + i8 + i9 + i10 + by + (b ? 1 : 0) +
                Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth1_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void vMeth(long l) {

        float f1 = 0.737F;
        int i2 = -20251, i11 = 44149;
        double d = -19.35542;
        byte by1 = -85;

        Test0957.iFld += (int) (--f1);
        i2 = 1;
        do {
            Test0957.instanceCount = (long) ((d -= Math.max(-3163, 8)) * ((++Test0957.iFld) ^ Long.reverseBytes(-2433539072L)));
            Test0957.instanceCount %= (iMeth1(Test0957.iFld, Test0957.iFld1, Test0957.iFld) | 1);
            Test0957.iFld += i2;
            switch (((i2 % 2) * 5) + 100) {
                case 104:
                    switch (((Test0957.iFld >>> 1) % 2) + 103) {
                        case 103:
                            by1 *= (byte) i2;
                            Test0957.iFld1 = Test0957.iFld1;
                            l = Test0957.instanceCount;
                            Test0957.iFld1 -= Test0957.iFld;
                        case 104:
                            i11 = 1;
                            while (++i11 < 5) {
                                Test0957.iArrFld[i11 - 1] = by1;
                            }
                            Test0957.instanceCount = Test0957.iFld1;
                            by1 = (byte) -169;
                            break;
                        default:
                            Test0957.iFld1 += (-35 + (i2 * i2));
                    }
                case 107:
                    Test0957.iArrFld[i2] = i11;
            }
        } while (++i2 < 302);
        vMeth_check_sum += l + Float.floatToIntBits(f1) + i2 + Double.doubleToLongBits(d) + by1 + i11;
    }

    public static int iMeth(int i1) {


        vMeth(Test0957.instanceCount);
        long meth_res = i1;
        iMeth_check_sum += meth_res;
        return (int) meth_res;
    }

    public static void main(String[] strArr) {

        try {
            Test0957 _instance = new Test0957();
            for (int i = 0; i < 10; i++) {
                _instance.mainTest(strArr);
            }
        } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
        }
    }

    public void mainTest(String[] strArr1) {

        int i = -7, i12 = 29970, i13 = 38003, i14 = 20141, i15 = -22941, i16 = 161, i17 = 201, i18 = -14780, i19 = -179, i20 = 21051,
                i21 = -6, i22 = 1;
        double d1 = 0.66421;
        double[][] dArr = new double[N][N];
        float[] fArr = new float[N];

        FuzzerUtils.init(fArr, 0.940F);
        FuzzerUtils.init(dArr, 43.38310);

        i -= (--Test0957.iArrFld[(i >>> 1) % N]);
        for (float f : fArr) {
            fArr[(i >>> 1) % N] = (float) ((iMeth(-45847) + 0) * -68.108813);
            i12 = 1;
            do {
                for (i13 = 1; 1 < i13; i13 -= 2) {
                    Test0957.iFld += i13;
                    Test0957.instanceCount <<= byFld;
                    f *= Test0957.instanceCount;
                    i14 += i13;
                    Test0957.instanceCount = Test0957.instanceCount;
                    i14 <<= Test0957.iFld;
                    byFld *= (byte) i13;
                    i14 >>= (int) Test0957.instanceCount;
                    Test0957.iFld -= i13;
                    f *= (float) 27.22179;
                }
                fArr[i12 + 1] -= 1617827789L;
            } while (++i12 < 63);
            d1 += Test0957.instanceCount;
            dArr[(i >>> 1) % N] = dArr[(i14 >>> 1) % N];
            for (i15 = 1; i15 < 63; ++i15) {
                for (i17 = i15; i17 < 2; i17++) {
                    i16 -= (int) Test0957.instanceCount;
                }
                i18 = (int) f;
            }
        }
        for (i19 = 6; i19 < 130; i19++) {
            Test0957.iFld1 >>>= 20224;
            for (i21 = 1; i21 < 202; ++i21) {
                Test0957.instanceCount >>= i17;
                Test0957.iArrFld[i19 + 1] -= -57603;
                Test0957.instanceCount += (((i21 * i17) + Test0957.fFld) - i14);
                Test0957.iArrFld[i21 - 1] -= byFld;
                if (Test0957.bFld) continue;
            }
        }

        FuzzerUtils.out.println("i i12 i13 = " + i + "," + i12 + "," + i13);
        FuzzerUtils.out.println("i14 d1 i15 = " + i14 + "," + Double.doubleToLongBits(d1) + "," + i15);
        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("i22 fArr dArr = " + i22 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
                "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test0957.instanceCount Test0957.iFld Test0957.iFld1 = " + Test0957.instanceCount + "," + Test0957.iFld +
                "," + Test0957.iFld1);
        FuzzerUtils.out.println("Test0957.sFld byFld Test0957.fFld = " + Test0957.sFld + "," + byFld + "," +
                Float.floatToIntBits(Test0957.fFld));
        FuzzerUtils.out.println("Test0957.bFld Test0957.iArrFld = " + (Test0957.bFld ? 1 : 0) + "," +
                FuzzerUtils.checkSum(Test0957.iArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
